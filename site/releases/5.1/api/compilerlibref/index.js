var GENERAL_INDEX = [
["Numbers.Int", "Numbers.Int.html", "zero_to_n", "Numbers.Int.html#VALzero_to_n", "<div class=\"info\"> <p><code class=\"code\">zero_to_n&nbsp;n</code> is the set of numbers {0, ..., n} (inclusive).</p> </div>", "zero_to_n\194\160n is the set of numbers {0, ..., n} (inclusive).", "<code class=\"type\">int -&gt; Set.t</code>", "int -> Set.Numbers.Int.t"],
["Numbers.Int8", "Numbers.Int8.html", "zero", "Numbers.Int8.html#VALzero", "", "", "<code class=\"type\"><a href=\"Numbers.Int8.html#TYPEt\">t</a></code>", "Numbers.Int8.t"],
["Targetint", "Targetint.html", "zero", "Targetint.html#VALzero", "<div class=\"info\"> <p>The target integer 0.</p> </div>", "The target integer 0.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "xfirst", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALxfirst", "", "", "<code class=\"type\">xsymbol -&gt; 'a terminal -&gt; bool</code>", "xsymbol -> 'a terminal -> bool"],
["Pparse", "Pparse.html", "write_ast", "Pparse.html#VALwrite_ast", "", "", "<code class=\"type\">'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; string -&gt; 'a -&gt; unit</code>", "'a ast_kind -> string -> 'a -> unit"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "write", "CamlinternalMenhirLib.LinearizedArray.html#VALwrite", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.LinearizedArray.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; 'a -&gt; unit</code>", "'a CamlinternalMenhirLib.LinearizedArray.t -> int -> int -> 'a -> unit"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "wrap_supplier", "CamlinternalMenhirLib.ErrorReports.html#VALwrap_supplier", "", "", "<code class=\"type\">(unit -&gt; 'token * Lexing.position * Lexing.position) -&gt;<br>       (Lexing.position * Lexing.position)<br>       <a href=\"CamlinternalMenhirLib.ErrorReports.html#TYPEbuffer\">buffer</a> *<br>       (unit -&gt; 'token * Lexing.position * Lexing.position)</code>", "(unit -> 'token * Lexing.position * Lexing.position) ->       (Lexing.position * Lexing.position)       buffer *       (unit -> 'token * Lexing.position * Lexing.position)"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "wrap", "CamlinternalMenhirLib.ErrorReports.html#VALwrap", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; 'token) -&gt;<br>       (Lexing.position * Lexing.position)<br>       <a href=\"CamlinternalMenhirLib.ErrorReports.html#TYPEbuffer\">buffer</a> * (Lexing.lexbuf -&gt; 'token)</code>", "(Lexing.lexbuf -> 'token) ->       (Lexing.position * Lexing.position)       buffer * (Lexing.lexbuf -> 'token)"],
["Warnings", "Warnings.html", "without_warnings", "Warnings.html#VALwithout_warnings", "<div class=\"info\"> <p>Run the thunk with all warnings and alerts disabled.</p> </div>", "Run the thunk with all warnings and alerts disabled.", "<code class=\"type\">(unit -&gt; 'a) -&gt; 'a</code>", "(unit -> 'a) -> 'a"],
["Local_store", "Local_store.html", "with_store", "Local_store.html#VALwith_store", "<div class=\"info\"> <p><code class=\"code\">with_store&nbsp;s&nbsp;f</code> resets all the registered references to the value they have in <code class=\"code\">s</code> for the run of <code class=\"code\">f</code>.</p> </div>", "with_store\194\160s\194\160f resets all the registered references to the value they have in s for the run of f.", "<code class=\"type\"><a href=\"Local_store.html#TYPEstore\">store</a> -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "store -> (unit -> 'a) -> 'a"],
["Warnings", "Warnings.html", "with_state", "Warnings.html#VALwith_state", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEstate\">state</a> -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "state -> (unit -> 'a) -> 'a"],
["Clflags", "Clflags.html", "with_runtime", "Clflags.html#VALwith_runtime", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Diffing_with_keys", "Diffing_with_keys.html", "with_pos", "Diffing_with_keys.html#VALwith_pos", "", "", "<code class=\"type\">'a list -&gt; 'a <a href=\"Diffing_with_keys.html#TYPEwith_pos\">with_pos</a> list</code>", "'a list -> 'a with_pos list"],
["Config_boot", "Config_boot.html", "with_frame_pointers", "Config_boot.html#VALwith_frame_pointers", "<div class=\"info\"> <p>Whether assembler should maintain frame pointers</p> </div>", "Whether assembler should maintain frame pointers", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "with_frame_pointers", "Config_main.html#VALwith_frame_pointers", "<div class=\"info\"> <p>Whether assembler should maintain frame pointers</p> </div>", "Whether assembler should maintain frame pointers", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "with_frame_pointers", "Config.html#VALwith_frame_pointers", "<div class=\"info\"> <p>Whether assembler should maintain frame pointers</p> </div>", "Whether assembler should maintain frame pointers", "<code class=\"type\">bool</code>", "bool"],
["Config_boot", "Config_boot.html", "with_flambda_invariants", "Config_boot.html#VALwith_flambda_invariants", "<div class=\"info\"> <p>Whether the invariants checks for flambda are enabled</p> </div>", "Whether the invariants checks for flambda are enabled", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "with_flambda_invariants", "Config_main.html#VALwith_flambda_invariants", "<div class=\"info\"> <p>Whether the invariants checks for flambda are enabled</p> </div>", "Whether the invariants checks for flambda are enabled", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "with_flambda_invariants", "Config.html#VALwith_flambda_invariants", "<div class=\"info\"> <p>Whether the invariants checks for flambda are enabled</p> </div>", "Whether the invariants checks for flambda are enabled", "<code class=\"type\">bool</code>", "bool"],
["Ast_helper", "Ast_helper.html", "with_default_loc", "Ast_helper.html#VALwith_default_loc", "<div class=\"info\"> <p>Set the <code class=\"code\">default_loc</code> within the scope of the execution of the provided function.</p> </div>", "Set the default_loc within the scope of the execution of the provided function.", "<code class=\"type\"><a href=\"Ast_helper.html#TYPEloc\">loc</a> -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "loc -> (unit -> 'a) -> 'a"],
["Config_boot", "Config_boot.html", "with_cmm_invariants", "Config_boot.html#VALwith_cmm_invariants", "<div class=\"info\"> <p>Whether the invariants checks for Cmm are enabled</p> </div>", "Whether the invariants checks for Cmm are enabled", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "with_cmm_invariants", "Config_main.html#VALwith_cmm_invariants", "<div class=\"info\"> <p>Whether the invariants checks for Cmm are enabled</p> </div>", "Whether the invariants checks for Cmm are enabled", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "with_cmm_invariants", "Config.html#VALwith_cmm_invariants", "<div class=\"info\"> <p>Whether the invariants checks for Cmm are enabled</p> </div>", "Whether the invariants checks for Cmm are enabled", "<code class=\"type\">bool</code>", "bool"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "with_", "Ast_helper.Mty.html#VALwith_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEwith_constraint\">Parsetree.with_constraint</a> list -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_type ->       Parsetree.with_constraint list -> Parsetree.module_type"],
["Config_boot", "Config_boot.html", "windows_unicode", "Config_boot.html#VALwindows_unicode", "<div class=\"info\"> <p>Whether Windows Unicode runtime is enabled</p> </div>", "Whether Windows Unicode runtime is enabled", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "windows_unicode", "Config_main.html#VALwindows_unicode", "<div class=\"info\"> <p>Whether Windows Unicode runtime is enabled</p> </div>", "Whether Windows Unicode runtime is enabled", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "windows_unicode", "Config.html#VALwindows_unicode", "<div class=\"info\"> <p>Whether Windows Unicode runtime is enabled</p> </div>", "Whether Windows Unicode runtime is enabled", "<code class=\"type\">bool</code>", "bool"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "while_", "Ast_helper.Exp.html#VALwhile_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.expression -> Parsetree.expression"],
["Diffing.Define.Parameters", "Diffing.Define.Parameters.html", "weight", "Diffing.Define.Parameters.html#VALweight", "<div class=\"info\"> <p><code class=\"code\">weight&nbsp;ch</code> returns the weight of the change <code class=\"code\">ch</code>.</p> </div>", "weight\194\160ch returns the weight of the change ch.", "<code class=\"type\"><a href=\"Diffing.Define.html#TYPEchange\">Diffing.Define.change</a> -&gt; int</code>", "Diffing.Define.change -> int"],
["Diffing_with_keys.Define.Parameters", "Diffing_with_keys.Define.Parameters.html", "weight", "Diffing_with_keys.Define.Parameters.html#VALweight", "", "", "<code class=\"type\"><a href=\"Diffing_with_keys.Define.html#TYPEchange\">Diffing_with_keys.Define.change</a> -&gt; int</code>", "Diffing_with_keys.Define.change -> int"],
["CamlinternalMenhirLib.General", "CamlinternalMenhirLib.General.html", "weed", "CamlinternalMenhirLib.General.html#VALweed", "", "", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> int) -> 'a list -> 'a list"],
["Depend", "Depend.html", "weaken_map", "Depend.html#VALweaken_map", "", "", "<code class=\"type\">String.Set.t -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a> -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a></code>", "String.Set.Depend.t -> map_tree -> map_tree"],
["Builtin_attributes", "Builtin_attributes.html", "warning_scope", "Builtin_attributes.html#VALwarning_scope", "<div class=\"info\"> <p>Execute a function in a new scope for warning settings.</p> </div>", "Execute a function in a new scope for warning settings.", "<code class=\"type\">?ppwarning:bool -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "?ppwarning:bool -> Parsetree.attributes -> (unit -> 'a) -> 'a"],
["Location", "Location.html", "warning_reporter", "Location.html#VALwarning_reporter", "<div class=\"info\"> <p>Hook for intercepting warnings.</p> </div>", "Hook for intercepting warnings.", "<code class=\"type\">(<a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; <a href=\"Location.html#TYPEreport\">report</a> option) ref</code>", "(Location.t -> Warnings.Location.t -> report option) ref"],
["Builtin_attributes", "Builtin_attributes.html", "warning_attribute", "Builtin_attributes.html#VALwarning_attribute", "<div class=\"info\"> <p>Apply warning settings from the specified attribute.</p> </div>", "Apply warning settings from the specified attribute.", "<code class=\"type\">?ppwarning:bool -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; unit</code>", "?ppwarning:bool -> Parsetree.attribute -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "warn_on_literal_pattern", "Builtin_attributes.html#VALwarn_on_literal_pattern", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Docstrings", "Docstrings.html", "warn_bad_docstrings", "Docstrings.html#VALwarn_bad_docstrings", "<div class=\"info\"> <p>Emit warnings for unattached and ambiguous docstrings</p> </div>", "Emit warnings for unattached and ambiguous docstrings", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "virtual_", "Ast_helper.Cf.html#VALvirtual_", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a></code>", "Parsetree.core_type -> Parsetree.class_field_kind"],
["Config_boot", "Config_boot.html", "version", "Config_boot.html#VALversion", "<div class=\"info\"> <p>The current version number of the system</p> </div>", "The current version number of the system", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "version", "Config_main.html#VALversion", "<div class=\"info\"> <p>The current version number of the system</p> </div>", "The current version number of the system", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "version", "Config.html#VALversion", "<div class=\"info\"> <p>The current version number of the system</p> </div>", "The current version number of the system", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "verbose", "Clflags.html#VALverbose", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "varify_constructors", "Ast_helper.Typ.html#VALvarify_constructors", "<div class=\"info\"> <p><code class=\"code\">varify_constructors&nbsp;newtypes&nbsp;te</code> is type expression <code class=\"code\">te</code>, of which any of nullary type constructor <code class=\"code\">tc</code> is replaced by type variable of the same name, if <code class=\"code\">tc</code>'s name appears in <code class=\"code\">newtypes</code>.</p> </div>", "varify_constructors\194\160newtypes\194\160te is type expression te, of which any of nullary type constructor tc is replaced by type variable of the same name, if tc's name appears in newtypes.", "<code class=\"type\"><a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Ast_helper.str list -> Parsetree.core_type -> Parsetree.core_type"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "variant", "Ast_helper.Typ.html#VALvariant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPErow_field\">Parsetree.row_field</a> list -&gt;<br>       <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a> -&gt; <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> list option -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.row_field list ->       Asttypes.closed_flag -> Asttypes.label list option -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "variant", "Ast_helper.Pat.html#VALvariant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> option -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.label -> Parsetree.pattern option -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "variant", "Ast_helper.Exp.html#VALvariant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.label -> Parsetree.expression option -> Parsetree.expression"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "var", "Ast_helper.Typ.html#VALvar", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; string -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> string -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "var", "Ast_helper.Pat.html#VALvar", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.str -> Parsetree.pattern"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "value", "Ast_helper.Sig.html#VALvalue", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.value_description -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "value", "Ast_helper.Str.html#VALvalue", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Asttypes.rec_flag -> Parsetree.value_binding list -> Parsetree.structure_item"],
["Parse", "Parse.html", "val_ident", "Parse.html#VALval_ident", "<div class=\"info\"> <p>This function parses a syntactically valid path for a value.</p> </div>", "This function parses a syntactically valid path for a value.", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "Lexing.lexbuf -> Longident.Parse.t"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "val_", "Ast_helper.Ctf.html#VALval_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.mutable_flag ->       Asttypes.virtual_flag -> Parsetree.core_type -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "val_", "Ast_helper.Cf.html#VALval_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.mutable_flag -> Parsetree.class_field_kind -> Parsetree.class_field"],
["Clflags", "Clflags.html", "use_threads", "Clflags.html#VALuse_threads", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "use_runtime", "Clflags.html#VALuse_runtime", "", "", "<code class=\"type\">string ref</code>", "string ref"],
["Clflags", "Clflags.html", "use_prims", "Clflags.html#VALuse_prims", "", "", "<code class=\"type\">string ref</code>", "string ref"],
["Clflags", "Clflags.html", "use_linscan", "Clflags.html#VALuse_linscan", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "use_inlining_arguments_set", "Clflags.html#VALuse_inlining_arguments_set", "<div class=\"info\"> <p>Set all the inlining arguments for a round.</p> </div>", "Set all the inlining arguments for a round.", "<code class=\"type\">?round:int -&gt; <a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a> -&gt; unit</code>", "?round:int -> inlining_arguments -> unit"],
["Parse", "Parse.html", "use_file", "Parse.html#VALuse_file", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> list</code>", "Lexing.lexbuf -> Parsetree.toplevel_phrase list"],
["Parser", "Parser.html", "use_file", "Parser.html#VALuse_file", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> list</code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.toplevel_phrase list"],
["Parser.Incremental", "Parser.Incremental.html", "use_file", "Parser.Incremental.html#VALuse_file", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> list Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.toplevel_phrase list Parser.MenhirInterpreter.checkpoint"],
["Diffing.Define.Parameters", "Diffing.Define.Parameters.html", "update", "Diffing.Define.Parameters.html#VALupdate", "<div class=\"info\"> <p><code class=\"code\">update&nbsp;ch&nbsp;st</code> returns the new state after applying a change.</p> </div>", "update\194\160ch\194\160st returns the new state after applying a change.", "<code class=\"type\"><a href=\"Diffing.Define.html#TYPEchange\">Diffing.Define.change</a> -&gt; D.state -&gt; <a href=\"Diffing.Define.Parameters.html#TYPEupdate_result\">update_result</a></code>", "Diffing.Define.change -> D.state -> update_result"],
["Diffing_with_keys.Define.Parameters", "Diffing_with_keys.Define.Parameters.html", "update", "Diffing_with_keys.Define.Parameters.html#VALupdate", "", "", "<code class=\"type\"><a href=\"Diffing_with_keys.Define.html#TYPEchange\">Diffing_with_keys.Define.change</a> -&gt; D.state -&gt; D.state</code>", "Diffing_with_keys.Define.change -> D.state -> D.state"],
["Targetint", "Targetint.html", "unsigned_rem", "Targetint.html#VALunsigned_rem", "<div class=\"info\"> <p>Same as <a href=\"Targetint.html#VALrem\"><code class=\"code\"><span class=\"constructor\">Targetint</span>.rem</code></a>, except that arguments and result are interpreted as <em> unsigned</em> integers.</p> </div>", "Same as Targetint.rem, except that arguments and result are interpreted as unsigned integers.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Targetint", "Targetint.html", "unsigned_div", "Targetint.html#VALunsigned_div", "<div class=\"info\"> <p>Same as <a href=\"Targetint.html#VALdiv\"><code class=\"code\"><span class=\"constructor\">Targetint</span>.div</code></a>, except that arguments and result are interpreted as <em> unsigned</em> integers.</p> </div>", "Same as Targetint.div, except that arguments and result are interpreted as unsigned integers.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Targetint", "Targetint.html", "unsigned_compare", "Targetint.html#VALunsigned_compare", "<div class=\"info\"> <p>Same as <a href=\"Targetint.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Targetint</span>.compare</code></a>, except that arguments are interpreted as <em>unsigned</em> integers.</p> </div>", "Same as Targetint.compare, except that arguments are interpreted as unsigned integers.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; int</code>", "Targetint.t -> Targetint.t -> int"],
["Clflags", "Clflags.html", "unsafe", "Clflags.html#VALunsafe", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "unreachable", "Ast_helper.Exp.html#VALunreachable", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; unit -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> unit -> Parsetree.expression"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "unpack", "Ast_helper.Pat.html#VALunpack", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPEstr_opt\">Ast_helper.str_opt</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.str_opt -> Parsetree.pattern"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "unpack", "Ast_helper.Mod.html#VALunpack", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.module_expr"],
["Clflags", "Clflags.html", "unique_ids", "Clflags.html#VALunique_ids", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.General", "CamlinternalMenhirLib.General.html", "uniq", "CamlinternalMenhirLib.General.html#VALuniq", "", "", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> int) -> 'a list -> 'a list"],
["Identifiable.Map", "Identifiable.Map.html", "union_right", "Identifiable.Map.html#VALunion_right", "<div class=\"info\"> <p><code class=\"code\">union_right&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and <code class=\"code\">m2</code>.</p> </div>", "union_right\194\160m1\194\160m2 contains all bindings from m1 and m2.", "<code class=\"type\">'a t -&gt; 'a t -&gt; 'a t</code>", "'a Identifiable.Map.t -> 'a Identifiable.Map.t -> 'a Identifiable.Map.t"],
["Identifiable.Map", "Identifiable.Map.html", "union_merge", "Identifiable.Map.html#VALunion_merge", "", "", "<code class=\"type\">('a -&gt; 'a -&gt; 'a) -&gt; 'a t -&gt; 'a t -&gt; 'a t</code>", "('a -> 'a -> 'a) -> 'a Identifiable.Map.t -> 'a Identifiable.Map.t -> 'a Identifiable.Map.t"],
["Identifiable.Map", "Identifiable.Map.html", "union_left", "Identifiable.Map.html#VALunion_left", "<div class=\"info\"> <p><code class=\"code\">union_left&nbsp;m1&nbsp;m2&nbsp;=&nbsp;union_right&nbsp;m2&nbsp;m1</code></p> </div>", "union_left\194\160m1\194\160m2\194\160=\194\160union_right\194\160m2\194\160m1", "<code class=\"type\">'a t -&gt; 'a t -&gt; 'a t</code>", "'a Identifiable.Map.t -> 'a Identifiable.Map.t -> 'a Identifiable.Map.t"],
["CamlinternalMenhirLib.PackedIntArray", "CamlinternalMenhirLib.PackedIntArray.html", "unflatten1", "CamlinternalMenhirLib.PackedIntArray.html#VALunflatten1", "", "", "<code class=\"type\">int * string -&gt; int -&gt; int -&gt; int</code>", "int * string -> int -> int -> int"],
["Longident", "Longident.html", "unflatten", "Longident.html#VALunflatten", "<div class=\"info\"> <p>For a non-empty list <code class=\"code\">l</code>, <code class=\"code\">unflatten&nbsp;l</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;lid</code> where <code class=\"code\">lid</code> is the long identifier created by concatenating the elements of <code class=\"code\">l</code> with <code class=\"code\"><span class=\"constructor\">Ldot</span></code>.</p> </div>", "For a non-empty list l, unflatten\194\160l is Some\194\160lid where lid is the long identifier created by concatenating the elements of l with Ldot.", "<code class=\"type\">string list -&gt; <a href=\"Longident.html#TYPEt\">t</a> option</code>", "string list -> Longident.t option"],
["Clflags", "Clflags.html", "unboxed_types", "Clflags.html#VALunboxed_types", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "unbox_specialised_args", "Clflags.html#VALunbox_specialised_args", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "unbox_free_vars_of_closures", "Clflags.html#VALunbox_free_vars_of_closures", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "unbox_closures_factor", "Clflags.html#VALunbox_closures_factor", "", "", "<code class=\"type\">int ref</code>", "int ref"],
["Clflags", "Clflags.html", "unbox_closures", "Clflags.html#VALunbox_closures", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Pprintast", "Pprintast.html", "tyvar", "Pprintast.html#VALtyvar", "<div class=\"info\"> <p>Print a type variable name, taking care of the special treatment required for the single quote character in second position.</p> </div>", "Print a type variable name, taking care of the special treatment required for the single quote character in second position.", "<code class=\"type\">Format.formatter -&gt; string -&gt; unit</code>", "Format.formatter -> string -> unit"],
["Profile", "Profile.html", "typing", "Profile.html#VALtyping", "", "", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "typeof_", "Ast_helper.Mty.html#VALtypeof_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.module_type"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "type_subst", "Ast_helper.Sig.html#VALtype_subst", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.type_declaration list -> Parsetree.signature_item"],
["Parse", "Parse.html", "type_ident", "Parse.html#VALtype_ident", "<div class=\"info\"> <p>This function parse syntactically valid path for a type or a module type.</p> </div>", "This function parse syntactically valid path for a type or a module type.", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "Lexing.lexbuf -> Longident.Parse.t"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "type_extension", "Ast_helper.Sig.html#VALtype_extension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.type_extension -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "type_extension", "Ast_helper.Str.html#VALtype_extension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.type_extension -> Parsetree.structure_item"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "type_", "Ast_helper.Pat.html#VALtype_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.pattern"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "type_", "Ast_helper.Sig.html#VALtype_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Asttypes.rec_flag ->       Parsetree.type_declaration list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "type_", "Ast_helper.Str.html#VALtype_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Asttypes.rec_flag ->       Parsetree.type_declaration list -> Parsetree.structure_item"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "tuple", "Ast_helper.Typ.html#VALtuple", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.core_type list -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "tuple", "Ast_helper.Pat.html#VALtuple", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> list -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern list -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "tuple", "Ast_helper.Exp.html#VALtuple", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression list -> Parsetree.expression"],
["Misc", "Misc.html", "try_finally", "Misc.html#VALtry_finally", "<div class=\"info\"> <p><code class=\"code\">try_finally&nbsp;work&nbsp;~always&nbsp;~exceptionally</code> is designed to run code in <code class=\"code\">work</code> that may fail with an exception, and has two kind of cleanup routines: <code class=\"code\">always</code>, that must be run after any execution of the function (typically, freeing system resources), and <code class=\"code\">exceptionally</code>, that should be run only if <code class=\"code\">work</code> or <code class=\"code\">always</code> failed with an exception (typically, undoing user-visible state changes that would only make sense if the function completes correctly).</p> </div>", "try_finally\194\160work\194\160~always\194\160~exceptionally is designed to run code in work that may fail with an exception, and has two kind of cleanup routines: always, that must be run after any execution of the function (typically, freeing system resources), and exceptionally, that should be run only if work or always failed with an exception (typically, undoing user-visible state changes that would only make sense if the function completes correctly).", "<code class=\"type\">?always:(unit -&gt; unit) -&gt; ?exceptionally:(unit -&gt; unit) -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "?always:(unit -> unit) -> ?exceptionally:(unit -> unit) -> (unit -> 'a) -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "try_", "Ast_helper.Exp.html#VALtry_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.case list -> Parsetree.expression"],
["Identifiable.Map", "Identifiable.Map.html", "transpose_keys_and_data_set", "Identifiable.Map.html#VALtranspose_keys_and_data_set", "", "", "<code class=\"type\">key t -&gt; Stdlib.Set.Make(T).t t</code>", "key Identifiable.Map.t -> Stdlib.Set.Make(T).Identifiable.Map.t Identifiable.Map.t"],
["Identifiable.Map", "Identifiable.Map.html", "transpose_keys_and_data", "Identifiable.Map.html#VALtranspose_keys_and_data", "", "", "<code class=\"type\">key t -&gt; key t</code>", "key Identifiable.Map.t -> key Identifiable.Map.t"],
["Clflags", "Clflags.html", "transparent_modules", "Clflags.html#VALtransparent_modules", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Profile", "Profile.html", "transl", "Profile.html#VALtransl", "", "", "<code class=\"type\">string</code>", "string"],
["CamlinternalMenhirLib.Convert", "CamlinternalMenhirLib.Convert.html", "traditional2revised", "CamlinternalMenhirLib.Convert.html#VALtraditional2revised", "", "", "<code class=\"type\">('token -&gt; 'raw_token) -&gt;<br>       ('token -&gt; Lexing.position) -&gt;<br>       ('token -&gt; Lexing.position) -&gt;<br>       ('raw_token, 'semantic_value) <a href=\"CamlinternalMenhirLib.Convert.html#TYPEtraditional\">traditional</a> -&gt;<br>       ('token, 'semantic_value) <a href=\"CamlinternalMenhirLib.Convert.html#TYPErevised\">revised</a></code>", "('token -> 'raw_token) ->       ('token -> Lexing.position) ->       ('token -> Lexing.position) ->       ('raw_token, 'semantic_value) traditional ->       ('token, 'semantic_value) revised"],
["CamlinternalMenhirLib.Convert.Simplified", "CamlinternalMenhirLib.Convert.Simplified.html", "traditional2revised", "CamlinternalMenhirLib.Convert.Simplified.html#VALtraditional2revised", "", "", "<code class=\"type\">('token, 'semantic_value) <a href=\"CamlinternalMenhirLib.Convert.html#TYPEtraditional\">CamlinternalMenhirLib.Convert.traditional</a> -&gt;<br>       ('token * Lexing.position * Lexing.position, 'semantic_value)<br>       <a href=\"CamlinternalMenhirLib.Convert.html#TYPErevised\">CamlinternalMenhirLib.Convert.revised</a></code>", "('token, 'semantic_value) CamlinternalMenhirLib.Convert.traditional ->       ('token * Lexing.position * Lexing.position, 'semantic_value)       CamlinternalMenhirLib.Convert.revised"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "trace", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALtrace", "", "", "<code class=\"type\">(string array * string array) option</code>", "(string array * string array) option"],
["Parse", "Parse.html", "toplevel_phrase", "Parse.html#VALtoplevel_phrase", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a></code>", "Lexing.lexbuf -> Parsetree.toplevel_phrase"],
["Parser", "Parser.html", "toplevel_phrase", "Parser.html#VALtoplevel_phrase", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.toplevel_phrase"],
["Parser.Incremental", "Parser.Incremental.html", "toplevel_phrase", "Parser.Incremental.html#VALtoplevel_phrase", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.toplevel_phrase Parser.MenhirInterpreter.checkpoint"],
["Pprintast", "Pprintast.html", "toplevel_phrase", "Pprintast.html#VALtoplevel_phrase", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> -&gt; unit</code>", "Format.formatter -> Parsetree.toplevel_phrase -> unit"],
["Pprintast", "Pprintast.html", "top_phrase", "Pprintast.html#VALtop_phrase", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> -&gt; unit</code>", "Format.formatter -> Parsetree.toplevel_phrase -> unit"],
["Printast", "Printast.html", "top_phrase", "Printast.html#VALtop_phrase", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> -&gt; unit</code>", "Format.formatter -> Parsetree.toplevel_phrase -> unit"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "top", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALtop", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEelement\">element</a> option</code>", "'a env ->       element option"],
["Ast_mapper", "Ast_mapper.html", "tool_name", "Ast_mapper.html#VALtool_name", "<div class=\"info\"> <p>Can be used within a ppx preprocessor to know which tool is calling it <code class=\"code\"><span class=\"string\">\"ocamlc\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamlopt\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamldoc\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamldep\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocaml\"</span></code>, ...</p> </div>", "Can be used within a ppx preprocessor to know which tool is calling it \"ocamlc\", \"ocamlopt\", \"ocamldoc\", \"ocamldep\", \"ocaml\", ...", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Lexer", "Lexer.html", "token_with_comments", "Lexer.html#VALtoken_with_comments", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a></code>", "Lexing.lexbuf -> Parser.token"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "token2value", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALtoken2value", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEtoken\">token</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEsemantic_value\">semantic_value</a></code>", "token ->       semantic_value"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "token2value", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALtoken2value", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.TableFormat.TABLES.html#TYPEtoken\">token</a> -&gt; Obj.t</code>", "token -> Obj.CamlinternalMenhirLib.TableFormat.TABLES.t"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "token2terminal", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALtoken2terminal", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEtoken\">token</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEterminal\">terminal</a></code>", "token ->       terminal"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "token2terminal", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALtoken2terminal", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.TableFormat.TABLES.html#TYPEtoken\">token</a> -&gt; int</code>", "token -> int"],
["Lexer", "Lexer.html", "token", "Lexer.html#VALtoken", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a></code>", "Lexing.lexbuf -> Parser.token"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "to_string", "Clflags.Compiler_pass.html#VALto_string", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> -&gt; string</code>", "Clflags.Compiler_pass.t -> string"],
["Identifiable.Set", "Identifiable.Set.html", "to_string", "Identifiable.Set.html#VALto_string", "", "", "<code class=\"type\">t -&gt; string</code>", "Identifiable.Set.t -> string"],
["Numbers.Int", "Numbers.Int.html", "to_string", "Numbers.Int.html#VALto_string", "", "", "<code class=\"type\">int -&gt; string</code>", "int -> string"],
["Targetint", "Targetint.html", "to_string", "Targetint.html#VALto_string", "<div class=\"info\"> <p>Return the string representation of its argument, in decimal.</p> </div>", "Return the string representation of its argument, in decimal.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; string</code>", "Targetint.t -> string"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "to_output_filename", "Clflags.Compiler_pass.html#VALto_output_filename", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> -&gt; prefix:string -&gt; string</code>", "Clflags.Compiler_pass.t -> prefix:string -> string"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "to_map", "Identifiable.Tbl.html#VALto_map", "", "", "<code class=\"type\">'a t -&gt; 'a Stdlib.Map.Make(T).t</code>", "'a Identifiable.Tbl.t -> 'a Stdlib.Map.Make(T).Identifiable.Tbl.t"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "to_list", "Identifiable.Tbl.html#VALto_list", "", "", "<code class=\"type\">'a t -&gt; (<a href=\"Identifiable.Tbl.T.html#TYPEt\">T.t</a> * 'a) list</code>", "'a Identifiable.Tbl.t -> (T.Identifiable.Tbl.t * 'a) list"],
["Targetint", "Targetint.html", "to_int64", "Targetint.html#VALto_int64", "<div class=\"info\"> <p>Convert the given target integer to a 64-bit integer (type <code class=\"code\">int64</code>).</p> </div>", "Convert the given target integer to a 64-bit integer (type int64).", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int64</code>", "Targetint.t -> int64"],
["Targetint", "Targetint.html", "to_int32", "Targetint.html#VALto_int32", "<div class=\"info\"> <p>Convert the given target integer to a 32-bit integer (type <code class=\"code\">int32</code>).</p> </div>", "Convert the given target integer to a 32-bit integer (type int32).", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int32</code>", "Targetint.t -> int32"],
["Numbers.Int8", "Numbers.Int8.html", "to_int", "Numbers.Int8.html#VALto_int", "", "", "<code class=\"type\"><a href=\"Numbers.Int8.html#TYPEt\">t</a> -&gt; int</code>", "Numbers.Int8.t -> int"],
["Numbers.Int16", "Numbers.Int16.html", "to_int", "Numbers.Int16.html#VALto_int", "", "", "<code class=\"type\"><a href=\"Numbers.Int16.html#TYPEt\">t</a> -&gt; int</code>", "Numbers.Int16.t -> int"],
["Targetint", "Targetint.html", "to_int", "Targetint.html#VALto_int", "<div class=\"info\"> <p>Convert the given target integer (type <code class=\"code\">t</code>) to an integer (type <code class=\"code\">int</code>).</p> </div>", "Convert the given target integer (type t) to an integer (type int).", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int</code>", "Targetint.t -> int"],
["Targetint", "Targetint.html", "to_float", "Targetint.html#VALto_float", "<div class=\"info\"> <p>Convert the given target integer to a floating-point number.</p> </div>", "Convert the given target integer to a floating-point number.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; float</code>", "Targetint.t -> float"],
["Misc", "Misc.html", "thd4", "Misc.html#VALthd4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'c</code>", "'a * 'b * 'c * 'd -> 'c"],
["Misc", "Misc.html", "thd3", "Misc.html#VALthd3", "", "", "<code class=\"type\">'a * 'b * 'c -&gt; 'c</code>", "'a * 'b * 'c -> 'c"],
["Docstrings", "Docstrings.html", "text_attr", "Docstrings.html#VALtext_attr", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "docstring -> Parsetree.attribute"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "text", "Ast_helper.Sig.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a> list</code>", "Docstrings.text -> Parsetree.signature_item list"],
["Ast_helper.Str", "Ast_helper.Str.html", "text", "Ast_helper.Str.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a> list</code>", "Docstrings.text -> Parsetree.structure_item list"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "text", "Ast_helper.Ctf.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> list</code>", "Docstrings.text -> Parsetree.class_type_field list"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "text", "Ast_helper.Cf.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> list</code>", "Docstrings.text -> Parsetree.class_field list"],
["Diffing.Define.Parameters", "Diffing.Define.Parameters.html", "test", "Diffing.Define.Parameters.html#VALtest", "<div class=\"info\"> <p><code class=\"code\">test&nbsp;st&nbsp;xl&nbsp;xr</code> tests if the elements <code class=\"code\">xl</code> and <code class=\"code\">xr</code> are co mpatible (<code class=\"code\"><span class=\"constructor\">Ok</span></code>) or not (<code class=\"code\"><span class=\"constructor\">Error</span></code>).</p> </div>", "test\194\160st\194\160xl\194\160xr tests if the elements xl and xr are co mpatible (Ok) or not (Error).", "<code class=\"type\">D.state -&gt; D.left -&gt; D.right -&gt; (D.eq, D.diff) result</code>", "D.state -> D.left -> D.right -> (D.eq, D.diff) result"],
["Diffing_with_keys.Define.Parameters", "Diffing_with_keys.Define.Parameters.html", "test", "Diffing_with_keys.Define.Parameters.html#VALtest", "", "", "<code class=\"type\">D.state -&gt;<br>       <a href=\"Diffing_with_keys.Define.html#TYPEleft\">Diffing_with_keys.Define.left</a> -&gt;<br>       <a href=\"Diffing_with_keys.Define.html#TYPEright\">Diffing_with_keys.Define.right</a> -&gt;<br>       (unit, <a href=\"Diffing_with_keys.Define.html#TYPEdiff\">Diffing_with_keys.Define.diff</a>) result</code>", "D.state ->       Diffing_with_keys.Define.left ->       Diffing_with_keys.Define.right ->       (unit, Diffing_with_keys.Define.diff) result"],
["Location", "Location.html", "terminfo_toplevel_printer", "Location.html#VALterminfo_toplevel_printer", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Location.html#TYPEreport_printer\">report_printer</a></code>", "Lexing.lexbuf -> report_printer"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "terminal", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALterminal", "", "", "<code class=\"type\">int -&gt; xsymbol</code>", "int -> xsymbol"],
["Config_boot", "Config_boot.html", "target", "Config_boot.html#VALtarget", "<div class=\"info\"> <p>Whether the compiler is a cross-compiler</p> </div>", "Whether the compiler is a cross-compiler", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "target", "Config_main.html#VALtarget", "<div class=\"info\"> <p>Whether the compiler is a cross-compiler</p> </div>", "Whether the compiler is a cross-compiler", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "target", "Config.html#VALtarget", "<div class=\"info\"> <p>Whether the compiler is a cross-compiler</p> </div>", "Whether the compiler is a cross-compiler", "<code class=\"type\">string</code>", "string"],
["CamlinternalMenhirLib.General", "CamlinternalMenhirLib.General.html", "take", "CamlinternalMenhirLib.General.html#VALtake", "", "", "<code class=\"type\">int -&gt; 'a list -&gt; 'a list</code>", "int -> 'a list -> 'a list"],
["Ast_helper.Rf", "Ast_helper.Rf.html", "tag", "Ast_helper.Rf.html#VALtag", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Ast_helper.html#TYPEwith_loc\">Ast_helper.with_loc</a> -&gt;<br>       bool -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPErow_field\">Parsetree.row_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.label Ast_helper.with_loc ->       bool -> Parsetree.core_type list -> Parsetree.row_field"],
["Ast_helper.Of", "Ast_helper.Of.html", "tag", "Ast_helper.Of.html#VALtag", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Ast_helper.html#TYPEwith_loc\">Ast_helper.with_loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEobject_field\">Parsetree.object_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.label Ast_helper.with_loc ->       Parsetree.core_type -> Parsetree.object_field"],
["Config_boot", "Config_boot.html", "systhread_supported", "Config_boot.html#VALsysthread_supported", "<div class=\"info\"> <p>Whether the system thread library is implemented</p> </div>", "Whether the system thread library is implemented", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "systhread_supported", "Config_main.html#VALsysthread_supported", "<div class=\"info\"> <p>Whether the system thread library is implemented</p> </div>", "Whether the system thread library is implemented", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "systhread_supported", "Config.html#VALsysthread_supported", "<div class=\"info\"> <p>Whether the system thread library is implemented</p> </div>", "Whether the system thread library is implemented", "<code class=\"type\">bool</code>", "bool"],
["Config_boot", "Config_boot.html", "system", "Config_boot.html#VALsystem", "<div class=\"info\"> <p>Name of operating system for the native-code compiler</p> </div>", "Name of operating system for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "system", "Config_main.html#VALsystem", "<div class=\"info\"> <p>Name of operating system for the native-code compiler</p> </div>", "Name of operating system for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "system", "Config.html#VALsystem", "<div class=\"info\"> <p>Name of operating system for the native-code compiler</p> </div>", "Name of operating system for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Docstrings", "Docstrings.html", "symbol_text_lazy", "Docstrings.html#VALsymbol_text_lazy", "", "", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a> Lazy.t</code>", "unit -> text Lazy.Docstrings.t"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "symbol_text_lazy", "Docstrings.WithMenhir.html#VALsymbol_text_lazy", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> Lazy.t</code>", "Lexing.position -> Docstrings.text Lazy.Docstrings.WithMenhir.t"],
["Docstrings", "Docstrings.html", "symbol_text", "Docstrings.html#VALsymbol_text", "<div class=\"info\"> <p>Fetch the text preceding the current symbol.</p> </div>", "Fetch the text preceding the current symbol.", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "unit -> text"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "symbol_text", "Docstrings.WithMenhir.html#VALsymbol_text", "<div class=\"info\"> <p>Fetch the text preceding the current symbol.</p> </div>", "Fetch the text preceding the current symbol.", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a></code>", "Lexing.position -> Docstrings.text"],
["Location", "Location.html", "symbol_rloc", "Location.html#VALsymbol_rloc", "", "", "<code class=\"type\">unit -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "unit -> Location.t"],
["Docstrings", "Docstrings.html", "symbol_pre_extra_text", "Docstrings.html#VALsymbol_pre_extra_text", "<div class=\"info\"> <p>Fetch additional text preceding the current symbol</p> </div>", "Fetch additional text preceding the current symbol", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "unit -> text"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "symbol_pre_extra_text", "Docstrings.WithMenhir.html#VALsymbol_pre_extra_text", "<div class=\"info\"> <p>Fetch additional text preceding the current symbol</p> </div>", "Fetch additional text preceding the current symbol", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a></code>", "Lexing.position -> Docstrings.text"],
["Docstrings", "Docstrings.html", "symbol_post_extra_text", "Docstrings.html#VALsymbol_post_extra_text", "<div class=\"info\"> <p>Fetch additional text following the current symbol</p> </div>", "Fetch additional text following the current symbol", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "unit -> text"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "symbol_post_extra_text", "Docstrings.WithMenhir.html#VALsymbol_post_extra_text", "<div class=\"info\"> <p>Fetch additional text following the current symbol</p> </div>", "Fetch additional text following the current symbol", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a></code>", "Lexing.position -> Docstrings.text"],
["Binutils", "Binutils.html", "symbol_offset", "Binutils.html#VALsymbol_offset", "", "", "<code class=\"type\"><a href=\"Binutils.html#TYPEt\">t</a> -&gt; string -&gt; int64 option</code>", "Binutils.t -> string -> int64 option"],
["Docstrings", "Docstrings.html", "symbol_info", "Docstrings.html#VALsymbol_info", "<div class=\"info\"> <p>Fetch the field info for the current symbol.</p> </div>", "Fetch the field info for the current symbol.", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEinfo\">info</a></code>", "unit -> info"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "symbol_info", "Docstrings.WithMenhir.html#VALsymbol_info", "<div class=\"info\"> <p>Fetch the field info for the current symbol.</p> </div>", "Fetch the field info for the current symbol.", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a></code>", "Lexing.position -> Docstrings.info"],
["Location", "Location.html", "symbol_gloc", "Location.html#VALsymbol_gloc", "", "", "<code class=\"type\">unit -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "unit -> Location.t"],
["Docstrings", "Docstrings.html", "symbol_docs_lazy", "Docstrings.html#VALsymbol_docs_lazy", "", "", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a> Lazy.t</code>", "unit -> docs Lazy.Docstrings.t"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "symbol_docs_lazy", "Docstrings.WithMenhir.html#VALsymbol_docs_lazy", "", "", "<code class=\"type\">Lexing.position * Lexing.position -&gt;<br>       <a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> Lazy.t</code>", "Lexing.position * Lexing.position ->       Docstrings.docs Lazy.Docstrings.WithMenhir.t"],
["Docstrings", "Docstrings.html", "symbol_docs", "Docstrings.html#VALsymbol_docs", "<div class=\"info\"> <p>Fetch the item documentation for the current symbol.</p> </div>", "Fetch the item documentation for the current symbol.", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a></code>", "unit -> docs"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "symbol_docs", "Docstrings.WithMenhir.html#VALsymbol_docs", "<div class=\"info\"> <p>Fetch the item documentation for the current symbol.</p> </div>", "Fetch the item documentation for the current symbol.", "<code class=\"type\">Lexing.position * Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a></code>", "Lexing.position * Lexing.position -> Docstrings.docs"],
["Config_boot", "Config_boot.html", "supports_shared_libraries", "Config_boot.html#VALsupports_shared_libraries", "<div class=\"info\"> <p>Whether shared libraries are supported</p> </div>", "Whether shared libraries are supported", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "supports_shared_libraries", "Config_main.html#VALsupports_shared_libraries", "<div class=\"info\"> <p>Whether shared libraries are supported</p> </div>", "Whether shared libraries are supported", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "supports_shared_libraries", "Config.html#VALsupports_shared_libraries", "<div class=\"info\"> <p>Whether shared libraries are supported</p> </div>", "Whether shared libraries are supported", "<code class=\"type\">bool</code>", "bool"],
["Targetint", "Targetint.html", "succ", "Targetint.html#VALsucc", "<div class=\"info\"> <p>Successor.</p> </div>", "Successor.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t"],
["Targetint", "Targetint.html", "sub", "Targetint.html#VALsub", "<div class=\"info\"> <p>Subtraction.</p> </div>", "Subtraction.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Diffing", "Diffing.html", "style", "Diffing.html#VALstyle", "", "", "<code class=\"type\"><a href=\"Diffing.html#TYPEchange_kind\">change_kind</a> -&gt; <a href=\"Misc.Color.html#TYPEstyle\">Misc.Color.style</a> list</code>", "change_kind -> Misc.Color.style list"],
["Pprintast", "Pprintast.html", "structure_item", "Pprintast.html#VALstructure_item", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a> -&gt; unit</code>", "Format.formatter -> Parsetree.structure_item -> unit"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "structure", "Ast_helper.Mod.html#VALstructure", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.structure -> Parsetree.module_expr"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "structure", "Ast_helper.Cl.html#VALstructure", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_structure -> Parsetree.class_expr"],
["Ast_invariants", "Ast_invariants.html", "structure", "Ast_invariants.html#VALstructure", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "Parsetree.structure -> unit"],
["Pprintast", "Pprintast.html", "structure", "Pprintast.html#VALstructure", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "Format.formatter -> Parsetree.structure -> unit"],
["Printast", "Printast.html", "structure", "Printast.html#VALstructure", "", "", "<code class=\"type\">int -&gt; Format.formatter -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "int -> Format.formatter -> Parsetree.structure -> unit"],
["Pprintast", "Pprintast.html", "string_of_structure", "Pprintast.html#VALstring_of_structure", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; string</code>", "Parsetree.structure -> string"],
["Misc.Magic_number", "Misc.Magic_number.html", "string_of_kind", "Misc.Magic_number.html#VALstring_of_kind", "<div class=\"info\"> <p>a user-printable string for a kind, eg.</p> </div>", "a user-printable string for a kind, eg.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> -&gt; string</code>", "kind -> string"],
["Misc", "Misc.html", "string_of_file", "Misc.html#VALstring_of_file", "<div class=\"info\"> <p><code class=\"code\">string_of_file&nbsp;ic</code> reads the contents of file <code class=\"code\">ic</code> and copies them to a string.</p> </div>", "string_of_file\194\160ic reads the contents of file ic and copies them to a string.", "<code class=\"type\">in_channel -&gt; string</code>", "in_channel -> string"],
["Pprintast", "Pprintast.html", "string_of_expression", "Pprintast.html#VALstring_of_expression", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; string</code>", "Parsetree.expression -> string"],
["Ast_helper.Const", "Ast_helper.Const.html", "string", "Ast_helper.Const.html#VALstring", "", "", "<code class=\"type\">?quotation_delimiter:string -&gt;<br>       ?loc:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt; string -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?quotation_delimiter:string ->       ?loc:Location.Ast_helper.Const.t -> string -> Parsetree.constant"],
["Clflags", "Clflags.html", "strict_sequence", "Clflags.html#VALstrict_sequence", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "strict_formats", "Clflags.html#VALstrict_formats", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "stop_after", "Clflags.html#VALstop_after", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">Compiler_pass.t</a> option ref</code>", "Compiler_pass.Clflags.t option ref"],
["Clflags", "Clflags.html", "std_include_flag", "Clflags.html#VALstd_include_flag", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Clflags", "Clflags.html", "std_include_dir", "Clflags.html#VALstd_include_dir", "", "", "<code class=\"type\">unit -&gt; string list</code>", "unit -> string list"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "state_has_default_reduction", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALstate_has_default_reduction", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPElr1state\">lr1state</a> -&gt;<br>       bool</code>", "'a lr1state ->       bool"],
["CamlinternalMenhirLib.EngineTypes.TABLE.Log", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html", "state", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html#VALstate", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">CamlinternalMenhirLib.EngineTypes.TABLE.state</a> -&gt; unit</code>", "CamlinternalMenhirLib.EngineTypes.TABLE.state -> unit"],
["CamlinternalMenhirLib.EngineTypes.INCREMENTAL_ENGINE_START", "CamlinternalMenhirLib.EngineTypes.INCREMENTAL_ENGINE_START.html", "start", "CamlinternalMenhirLib.EngineTypes.INCREMENTAL_ENGINE_START.html#VALstart", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.INCREMENTAL_ENGINE_START.html#TYPEstate\">state</a> -&gt;<br>       Lexing.position -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.INCREMENTAL_ENGINE_START.html#TYPEsemantic_value\">semantic_value</a><br>       <a href=\"CamlinternalMenhirLib.EngineTypes.INCREMENTAL_ENGINE_START.html#TYPEcheckpoint\">checkpoint</a></code>", "state ->       Lexing.position ->       semantic_value       checkpoint"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "start", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALstart", "", "", "<code class=\"type\">int</code>", "int"],
["Terminfo", "Terminfo.html", "standout", "Terminfo.html#VALstandout", "", "", "<code class=\"type\">out_channel -&gt; bool -&gt; unit</code>", "out_channel -> bool -> unit"],
["Config_boot", "Config_boot.html", "standard_library", "Config_boot.html#VALstandard_library", "<div class=\"info\"> <p>The directory containing the standard libraries</p> </div>", "The directory containing the standard libraries", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "standard_library", "Config_main.html#VALstandard_library", "<div class=\"info\"> <p>The directory containing the standard libraries</p> </div>", "The directory containing the standard libraries", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "standard_library", "Config.html#VALstandard_library", "<div class=\"info\"> <p>The directory containing the standard libraries</p> </div>", "The directory containing the standard libraries", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "stack_threshold", "Config_boot.html#VALstack_threshold", "<div class=\"info\"> <p>Size in words of safe area at bottom of VM stack, see runtime/caml/config.h</p> </div>", "Size in words of safe area at bottom of VM stack, see runtime/caml/config.h", "<code class=\"type\">int</code>", "int"],
["Config_main", "Config_main.html", "stack_threshold", "Config_main.html#VALstack_threshold", "<div class=\"info\"> <p>Size in words of safe area at bottom of VM stack, see runtime/caml/config.h</p> </div>", "Size in words of safe area at bottom of VM stack, see runtime/caml/config.h", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "stack_threshold", "Config.html#VALstack_threshold", "<div class=\"info\"> <p>Size in words of safe area at bottom of VM stack, see runtime/caml/config.h</p> </div>", "Size in words of safe area at bottom of VM stack, see runtime/caml/config.h", "<code class=\"type\">int</code>", "int"],
["Config_boot", "Config_boot.html", "stack_safety_margin", "Config_boot.html#VALstack_safety_margin", "<div class=\"info\"> <p>Size in words of the safety margin between the bottom of the stack and the stack pointer.</p> </div>", "Size in words of the safety margin between the bottom of the stack and the stack pointer.", "<code class=\"type\">int</code>", "int"],
["Config_main", "Config_main.html", "stack_safety_margin", "Config_main.html#VALstack_safety_margin", "<div class=\"info\"> <p>Size in words of the safety margin between the bottom of the stack and the stack pointer.</p> </div>", "Size in words of the safety margin between the bottom of the stack and the stack pointer.", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "stack_safety_margin", "Config.html#VALstack_safety_margin", "<div class=\"info\"> <p>Size in words of the safety margin between the bottom of the stack and the stack pointer.</p> </div>", "Size in words of the safety margin between the bottom of the stack and the stack pointer.", "<code class=\"type\">int</code>", "int"],
["Domainstate", "Domainstate.html", "stack_ctx_words", "Domainstate.html#VALstack_ctx_words", "", "", "<code class=\"type\">int</code>", "int"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "stack", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALstack", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEstack\">stack</a></code>", "'a env ->       stack"],
["Misc", "Misc.html", "split_path_contents", "Misc.html#VALsplit_path_contents", "<div class=\"info\"> <p><code class=\"code\">split_path_contents&nbsp;?sep&nbsp;s</code> interprets <code class=\"code\">s</code> as the value of a \"PATH\"-like variable and returns the corresponding list of directories.</p> </div>", "split_path_contents\194\160?sep\194\160s interprets s as the value of a \"PATH\"-like variable and returns the corresponding list of directories.", "<code class=\"type\">?sep:char -&gt; string -&gt; string list</code>", "?sep:char -> string -> string list"],
["Misc", "Misc.html", "split_null_terminated", "Misc.html#VALsplit_null_terminated", "<div class=\"info\"> <p><code class=\"code\">split_null_terminated&nbsp;s</code> is similar <code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;<span class=\"string\">'\\000'</span></code> but ignores the trailing separator, if any</p> </div>", "split_null_terminated\194\160s is similar String.split_on_char\194\160'\\000' but ignores the trailing separator, if any", "<code class=\"type\">string -&gt; string list</code>", "string -> string list"],
["Misc", "Misc.html", "split_last", "Misc.html#VALsplit_last", "<div class=\"info\"> <p>Return the last element and the other elements of the given list.</p> </div>", "Return the last element and the other elements of the given list.", "<code class=\"type\">'a list -&gt; 'a list * 'a</code>", "'a list -> 'a list * 'a"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "split_at", "Misc.Stdlib.List.html#VALsplit_at", "<div class=\"info\"> <p><code class=\"code\">split_at&nbsp;n&nbsp;l</code> returns the pair <code class=\"code\">before,&nbsp;after</code> where <code class=\"code\">before</code> is the <code class=\"code\">n</code> first elements of <code class=\"code\">l</code> and <code class=\"code\">after</code> the remaining ones.</p> </div>", "split_at\194\160n\194\160l returns the pair before,\194\160after where before is the n first elements of l and after the remaining ones.", "<code class=\"type\">int -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> * 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a></code>", "int -> 'a Misc.Stdlib.List.t -> 'a Misc.Stdlib.List.t * 'a Misc.Stdlib.List.t"],
["Misc", "Misc.html", "spellcheck", "Misc.html#VALspellcheck", "<div class=\"info\"> <p><code class=\"code\">spellcheck&nbsp;env&nbsp;name</code> takes a list of names <code class=\"code\">env</code> that exist in the current environment and an erroneous <code class=\"code\">name</code>, and returns a list of suggestions taken from <code class=\"code\">env</code>, that are close enough to <code class=\"code\">name</code> that it may be a typo for one of them.</p> </div>", "spellcheck\194\160env\194\160name takes a list of names env that exist in the current environment and an erroneous name, and returns a list of suggestions taken from env, that are close enough to name that it may be a typo for one of them.", "<code class=\"type\">string list -&gt; string -&gt; string list</code>", "string list -> string -> string list"],
["Consistbl.Make", "Consistbl.Make.html", "source", "Consistbl.Make.html#VALsource", "", "", "<code class=\"type\"><a href=\"Consistbl.Make.html#TYPEt\">t</a> -&gt; Module_name.t -&gt; <a href=\"Misc.html#TYPEfilepath\">Misc.filepath</a></code>", "Consistbl.Make.t -> Module_name.Consistbl.Make.t -> Misc.filepath"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "some_if_all_elements_are_some", "Misc.Stdlib.List.html#VALsome_if_all_elements_are_some", "<div class=\"info\"> <p>If all elements of the given list are <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;_</code> then <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;xs</code> is returned with the <code class=\"code\">xs</code> being the contents of those <code class=\"code\"><span class=\"constructor\">Some</span></code>s, with order preserved.</p> </div>", "If all elements of the given list are Some\194\160_ then Some\194\160xs is returned with the xs being the contents of those Somes, with order preserved.", "<code class=\"type\">'a option <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> option</code>", "'a option Misc.Stdlib.List.t -> 'a Misc.Stdlib.List.t option"],
["Misc", "Misc.html", "snd4", "Misc.html#VALsnd4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'b</code>", "'a * 'b * 'c * 'd -> 'b"],
["Misc", "Misc.html", "snd3", "Misc.html#VALsnd3", "", "", "<code class=\"type\">'a * 'b * 'c -&gt; 'b</code>", "'a * 'b * 'c -> 'b"],
["Lexer", "Lexer.html", "skip_hash_bang", "Lexer.html#VALskip_hash_bang", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; unit</code>", "Lexing.lexbuf -> unit"],
["Targetint", "Targetint.html", "size", "Targetint.html#VALsize", "<div class=\"info\"> <p>The size in bits of a target native integer.</p> </div>", "The size in bits of a target native integer.", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "simplify_rounds", "Clflags.html#VALsimplify_rounds", "", "", "<code class=\"type\">int option ref</code>", "int option ref"],
["Parse", "Parse.html", "simple_module_path", "Parse.html#VALsimple_module_path", "<div class=\"info\"> <p>This function parses a syntactically valid path for a module.</p> </div>", "This function parses a syntactically valid path for a module.", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "Lexing.lexbuf -> Longident.Parse.t"],
["Pprintast", "Pprintast.html", "signature_item", "Pprintast.html#VALsignature_item", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a> -&gt; unit</code>", "Format.formatter -> Parsetree.signature_item -> unit"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "signature", "Ast_helper.Mty.html#VALsignature", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.signature -> Parsetree.module_type"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "signature", "Ast_helper.Cty.html#VALsignature", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_signature\">Parsetree.class_signature</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_signature -> Parsetree.class_type"],
["Ast_invariants", "Ast_invariants.html", "signature", "Ast_invariants.html#VALsignature", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; unit</code>", "Parsetree.signature -> unit"],
["Pprintast", "Pprintast.html", "signature", "Pprintast.html#VALsignature", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; unit</code>", "Format.formatter -> Parsetree.signature -> unit"],
["Location", "Location.html", "show_filename", "Location.html#VALshow_filename", "<div class=\"info\"> <p>In -absname mode, return the absolute path for this filename.</p> </div>", "In -absname mode, return the absolute path for this filename.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Misc", "Misc.html", "show_config_variable_and_exit", "Misc.html#VALshow_config_variable_and_exit", "<div class=\"info\"> <p>Display the value of the given configuration variable, then exit the program with code 0.</p> </div>", "Display the value of the given configuration variable, then exit the program with code 0.", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Misc", "Misc.html", "show_config_and_exit", "Misc.html#VALshow_config_and_exit", "<div class=\"info\"> <p>Display the values of all compiler configuration variables from module <code class=\"code\"><span class=\"constructor\">Config</span></code>, then exit the program with code 0.</p> </div>", "Display the values of all compiler configuration variables from module Config, then exit the program with code 0.", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "show", "CamlinternalMenhirLib.ErrorReports.html#VALshow", "", "", "<code class=\"type\">('a -&gt; string) -&gt; 'a <a href=\"CamlinternalMenhirLib.ErrorReports.html#TYPEbuffer\">buffer</a> -&gt; string</code>", "('a -> string) -> 'a buffer -> string"],
["Clflags", "Clflags.html", "should_stop_after", "Clflags.html#VALshould_stop_after", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">Compiler_pass.t</a> -&gt; bool</code>", "Compiler_pass.Clflags.t -> bool"],
["Clflags", "Clflags.html", "should_save_ir_after", "Clflags.html#VALshould_save_ir_after", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">Compiler_pass.t</a> -&gt; bool</code>", "Compiler_pass.Clflags.t -> bool"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "shorten", "CamlinternalMenhirLib.ErrorReports.html#VALshorten", "", "", "<code class=\"type\">int -&gt; string -&gt; string</code>", "int -> string -> string"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "shifts", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALshifts", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> option</code>", "'a checkpoint ->       'a env option"],
["Targetint", "Targetint.html", "shift_right_logical", "Targetint.html#VALshift_right_logical", "<div class=\"info\"> <p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "Targetint.shift_right_logical\194\160x\194\160y shifts x to the right by y bits.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> int -> Targetint.t"],
["Targetint", "Targetint.html", "shift_right", "Targetint.html#VALshift_right", "<div class=\"info\"> <p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "Targetint.shift_right\194\160x\194\160y shifts x to the right by y bits.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> int -> Targetint.t"],
["Targetint", "Targetint.html", "shift_left", "Targetint.html#VALshift_left", "<div class=\"info\"> <p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p> </div>", "Targetint.shift_left\194\160x\194\160y shifts x to the left by y bits.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> int -> Targetint.t"],
["CamlinternalMenhirLib.EngineTypes.TABLE.Log", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html", "shift", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html#VALshift", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEterminal\">CamlinternalMenhirLib.EngineTypes.TABLE.terminal</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">CamlinternalMenhirLib.EngineTypes.TABLE.state</a> -&gt; unit</code>", "CamlinternalMenhirLib.EngineTypes.TABLE.terminal ->       CamlinternalMenhirLib.EngineTypes.TABLE.state -> unit"],
["Clflags", "Clflags.html", "shared", "Clflags.html#VALshared", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Misc.Color", "Misc.Color.html", "setup", "Misc.Color.html#VALsetup", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEsetting\">setting</a> option -&gt; unit</code>", "setting option -> unit"],
["Terminfo", "Terminfo.html", "setup", "Terminfo.html#VALsetup", "", "", "<code class=\"type\">out_channel -&gt; <a href=\"Terminfo.html#TYPEstatus\">status</a></code>", "out_channel -> status"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "setinstvar", "Ast_helper.Exp.html#VALsetinstvar", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "setfield", "Ast_helper.Exp.html#VALsetfield", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       Ast_helper.lid -> Parsetree.expression -> Parsetree.expression"],
["Arg_helper.Make", "Arg_helper.Make.html", "set_user_default", "Arg_helper.Make.html#VALset_user_default", "", "", "<code class=\"type\">S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Value.Arg_helper.Make.t -> parsed -> parsed"],
["Misc.Color", "Misc.Color.html", "set_styles", "Misc.Color.html#VALset_styles", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEstyles\">styles</a> -&gt; unit</code>", "styles -> unit"],
["Clflags", "Clflags.html", "set_save_ir_after", "Clflags.html#VALset_save_ir_after", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">Compiler_pass.t</a> -&gt; bool -&gt; unit</code>", "Compiler_pass.Clflags.t -> bool -> unit"],
["Lexer", "Lexer.html", "set_preprocessor", "Lexer.html#VALset_preprocessor", "", "", "<code class=\"type\">(unit -&gt; unit) -&gt;<br>       ((Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a>) -&gt;<br>        Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a>) -&gt;<br>       unit</code>", "(unit -> unit) ->       ((Lexing.lexbuf -> Parser.token) ->        Lexing.lexbuf -> Parser.token) ->       unit"],
["Docstrings", "Docstrings.html", "set_pre_extra_docstrings", "Docstrings.html#VALset_pre_extra_docstrings", "<div class=\"info\"> <p>Docstrings immediately following the token which precedes this one</p> </div>", "Docstrings immediately following the token which precedes this one", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Docstrings", "Docstrings.html", "set_pre_docstrings", "Docstrings.html#VALset_pre_docstrings", "<div class=\"info\"> <p>Docstrings immediately preceding a token</p> </div>", "Docstrings immediately preceding a token", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Docstrings", "Docstrings.html", "set_post_extra_docstrings", "Docstrings.html#VALset_post_extra_docstrings", "<div class=\"info\"> <p>Docstrings immediately preceding the token which follows this one</p> </div>", "Docstrings immediately preceding the token which follows this one", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Docstrings", "Docstrings.html", "set_post_docstrings", "Docstrings.html#VALset_post_docstrings", "<div class=\"info\"> <p>Docstrings immediately following a token</p> </div>", "Docstrings immediately following a token", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Misc", "Misc.html", "set_or_ignore", "Misc.html#VALset_or_ignore", "<div class=\"info\"> <p><code class=\"code\">set_or_ignore&nbsp;f&nbsp;opt&nbsp;x</code> sets <code class=\"code\">opt</code> to <code class=\"code\">f&nbsp;x</code> if it returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;_</code>, or leaves it unmodified if it returns <code class=\"code\"><span class=\"constructor\">None</span></code>.</p> </div>", "set_or_ignore\194\160f\194\160opt\194\160x sets opt to f\194\160x if it returns Some\194\160_, or leaves it unmodified if it returns None.", "<code class=\"type\">('a -&gt; 'b option) -&gt; 'b option ref -&gt; 'a -&gt; unit</code>", "('a -> 'b option) -> 'b option ref -> 'a -> unit"],
["Docstrings", "Docstrings.html", "set_floating_docstrings", "Docstrings.html#VALset_floating_docstrings", "<div class=\"info\"> <p>Docstrings not immediately adjacent to a token</p> </div>", "Docstrings not immediately adjacent to a token", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Clflags", "Clflags.html", "set_dumped_pass", "Clflags.html#VALset_dumped_pass", "", "", "<code class=\"type\">string -&gt; bool -&gt; unit</code>", "string -> bool -> unit"],
["Ast_mapper", "Ast_mapper.html", "set_cookie", "Ast_mapper.html#VALset_cookie", "", "", "<code class=\"type\">string -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; unit</code>", "string -> Parsetree.expression -> unit"],
["Misc.Color", "Misc.Color.html", "set_color_tag_handling", "Misc.Color.html#VALset_color_tag_handling", "", "", "<code class=\"type\">Format.formatter -&gt; unit</code>", "Format.formatter -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "set_base_default", "Arg_helper.Make.html#VALset_base_default", "", "", "<code class=\"type\">S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Value.Arg_helper.Make.t -> parsed -> parsed"],
["CamlinternalMenhirLib.InfiniteArray", "CamlinternalMenhirLib.InfiniteArray.html", "set", "CamlinternalMenhirLib.InfiniteArray.html#VALset", "<div class=\"info\"> <p><code class=\"code\">set&nbsp;a&nbsp;i&nbsp;x</code> sets the element contained at offset <code class=\"code\">i</code> in the array <code class=\"code\">a</code> to <code class=\"code\">x</code>.</p> </div>", "set\194\160a\194\160i\194\160x sets the element contained at offset i in the array a to x.", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.InfiniteArray.html#TYPEt\">t</a> -&gt; int -&gt; 'a -&gt; unit</code>", "'a CamlinternalMenhirLib.InfiniteArray.t -> int -> 'a -> unit"],
["Misc.LongString", "Misc.LongString.html", "set", "Misc.LongString.html#VALset", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; char -&gt; unit</code>", "Misc.LongString.t -> int -> char -> unit"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "sequence", "Ast_helper.Exp.html#VALsequence", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.expression -> Parsetree.expression"],
["Location", "Location.html", "separate_new_message", "Location.html#VALseparate_new_message", "", "", "<code class=\"type\">Format.formatter -&gt; unit</code>", "Format.formatter -> unit"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "send", "Ast_helper.Exp.html#VALsend", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Ast_helper.str -> Parsetree.expression"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "semantic_action", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALsemantic_action", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEsemantic_action\">semantic_action</a></code>", "production ->       semantic_action"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "semantic_action", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALsemantic_action", "", "", "<code class=\"type\">((int, Obj.t, <a href=\"CamlinternalMenhirLib.TableFormat.TABLES.html#TYPEtoken\">token</a>)<br>        <a href=\"CamlinternalMenhirLib.EngineTypes.html#TYPEenv\">CamlinternalMenhirLib.EngineTypes.env</a> -&gt;<br>        (int, Obj.t) <a href=\"CamlinternalMenhirLib.EngineTypes.html#TYPEstack\">CamlinternalMenhirLib.EngineTypes.stack</a>)<br>       array</code>", "((int, Obj.CamlinternalMenhirLib.TableFormat.TABLES.t, token)        CamlinternalMenhirLib.EngineTypes.env ->        (int, Obj.CamlinternalMenhirLib.TableFormat.TABLES.t) CamlinternalMenhirLib.EngineTypes.stack)       array"],
["Misc", "Misc.html", "search_substring", "Misc.html#VALsearch_substring", "<div class=\"info\"> <p><code class=\"code\">search_substring&nbsp;pat&nbsp;str&nbsp;start</code> returns the position of the first occurrence of string <code class=\"code\">pat</code> in string <code class=\"code\">str</code>.</p> </div>", "search_substring\194\160pat\194\160str\194\160start returns the position of the first occurrence of string pat in string str.", "<code class=\"type\">string -&gt; string -&gt; int -&gt; int</code>", "string -> string -> int -> int"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "sanitize", "CamlinternalMenhirLib.ErrorReports.html#VALsanitize", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Clflags", "Clflags.html", "safer_matching", "Clflags.html#VALsafer_matching", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Local_store", "Local_store.html", "s_table", "Local_store.html#VALs_table", "<div class=\"info\"> <p>Used to register hash tables.</p> </div>", "Used to register hash tables.", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a -&gt; 'b ref</code>", "('a -> 'b) -> 'a -> 'b ref"],
["Local_store", "Local_store.html", "s_ref", "Local_store.html#VALs_ref", "<div class=\"info\"> <p>Similar to <code class=\"code\"><span class=\"constructor\">Stdlib</span>.ref</code>, except the allocated reference is registered into the store.</p> </div>", "Similar to Stdlib.ref, except the allocated reference is registered into the store.", "<code class=\"type\">'a -&gt; 'a ref</code>", "'a -> 'a ref"],
["Clflags", "Clflags.html", "runtime_variant", "Clflags.html#VALruntime_variant", "", "", "<code class=\"type\">string ref</code>", "string ref"],
["Ast_mapper", "Ast_mapper.html", "run_main", "Ast_mapper.html#VALrun_main", "<div class=\"info\"> <p>Entry point to call to implement a standalone -ppx rewriter from a mapper, parametrized by the command line arguments.</p> </div>", "Entry point to call to implement a standalone -ppx rewriter from a mapper, parametrized by the command line arguments.", "<code class=\"type\">(string list -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a>) -&gt; unit</code>", "(string list -> mapper) -> unit"],
["Ccomp", "Ccomp.html", "run_command", "Ccomp.html#VALrun_command", "", "", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "row_length_via", "CamlinternalMenhirLib.LinearizedArray.html#VALrow_length_via", "", "", "<code class=\"type\">(int -&gt; int) -&gt; int -&gt; int</code>", "(int -> int) -> int -> int"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "row_length", "CamlinternalMenhirLib.LinearizedArray.html#VALrow_length", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.LinearizedArray.html#TYPEt\">t</a> -&gt; int -&gt; int</code>", "'a CamlinternalMenhirLib.LinearizedArray.t -> int -> int"],
["Clflags", "Clflags.html", "rounds", "Clflags.html#VALrounds", "", "", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Docstrings", "Docstrings.html", "rhs_text_lazy", "Docstrings.html#VALrhs_text_lazy", "", "", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a> Lazy.t</code>", "int -> text Lazy.Docstrings.t"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_text_lazy", "Docstrings.WithMenhir.html#VALrhs_text_lazy", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> Lazy.t</code>", "Lexing.position -> Docstrings.text Lazy.Docstrings.WithMenhir.t"],
["Docstrings", "Docstrings.html", "rhs_text", "Docstrings.html#VALrhs_text", "<div class=\"info\"> <p>Fetch the text preceding the symbol at the given position.</p> </div>", "Fetch the text preceding the symbol at the given position.", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_text", "Docstrings.WithMenhir.html#VALrhs_text", "<div class=\"info\"> <p>Fetch the text preceding the symbol at the given position.</p> </div>", "Fetch the text preceding the symbol at the given position.", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a></code>", "Lexing.position -> Docstrings.text"],
["Docstrings", "Docstrings.html", "rhs_pre_extra_text", "Docstrings.html#VALrhs_pre_extra_text", "<div class=\"info\"> <p>Fetch additional text preceding the symbol at the given position</p> </div>", "Fetch additional text preceding the symbol at the given position", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_pre_extra_text", "Docstrings.WithMenhir.html#VALrhs_pre_extra_text", "<div class=\"info\"> <p>Fetch additional text preceding the symbol at the given position</p> </div>", "Fetch additional text preceding the symbol at the given position", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a></code>", "Lexing.position -> Docstrings.text"],
["Docstrings", "Docstrings.html", "rhs_post_text", "Docstrings.html#VALrhs_post_text", "<div class=\"info\"> <p>Fetch text following the symbol at the given position</p> </div>", "Fetch text following the symbol at the given position", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_post_text", "Docstrings.WithMenhir.html#VALrhs_post_text", "<div class=\"info\"> <p>Fetch text following the symbol at the given position</p> </div>", "Fetch text following the symbol at the given position", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a></code>", "Lexing.position -> Docstrings.text"],
["Docstrings", "Docstrings.html", "rhs_post_extra_text", "Docstrings.html#VALrhs_post_extra_text", "<div class=\"info\"> <p>Fetch additional text following the symbol at the given position</p> </div>", "Fetch additional text following the symbol at the given position", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_post_extra_text", "Docstrings.WithMenhir.html#VALrhs_post_extra_text", "<div class=\"info\"> <p>Fetch additional text following the symbol at the given position</p> </div>", "Fetch additional text following the symbol at the given position", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a></code>", "Lexing.position -> Docstrings.text"],
["Location", "Location.html", "rhs_loc", "Location.html#VALrhs_loc", "<div class=\"info\"> <p><code class=\"code\">rhs_loc&nbsp;n</code> returns the location of the symbol at position <code class=\"code\">n</code>, starting at 1, in the current parser rule.</p> </div>", "rhs_loc\194\160n returns the location of the symbol at position n, starting at 1, in the current parser rule.", "<code class=\"type\">int -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "int -> Location.t"],
["Location", "Location.html", "rhs_interval", "Location.html#VALrhs_interval", "", "", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "int -> int -> Location.t"],
["Docstrings", "Docstrings.html", "rhs_info", "Docstrings.html#VALrhs_info", "<div class=\"info\"> <p>Fetch the field info following the symbol at a given position.</p> </div>", "Fetch the field info following the symbol at a given position.", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEinfo\">info</a></code>", "int -> info"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_info", "Docstrings.WithMenhir.html#VALrhs_info", "<div class=\"info\"> <p>Fetch the field info following the symbol at a given position.</p> </div>", "Fetch the field info following the symbol at a given position.", "<code class=\"type\">Lexing.position -&gt; <a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a></code>", "Lexing.position -> Docstrings.info"],
["Docstrings", "Docstrings.html", "rhs_docs_lazy", "Docstrings.html#VALrhs_docs_lazy", "", "", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a> Lazy.t</code>", "int -> int -> docs Lazy.Docstrings.t"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_docs_lazy", "Docstrings.WithMenhir.html#VALrhs_docs_lazy", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> Lazy.t</code>", "Lexing.position ->       Lexing.position -> Docstrings.docs Lazy.Docstrings.WithMenhir.t"],
["Docstrings", "Docstrings.html", "rhs_docs", "Docstrings.html#VALrhs_docs", "<div class=\"info\"> <p>Fetch the item documentation for the symbols between two positions.</p> </div>", "Fetch the item documentation for the symbols between two positions.", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a></code>", "int -> int -> docs"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "rhs_docs", "Docstrings.WithMenhir.html#VALrhs_docs", "<div class=\"info\"> <p>Fetch the item documentation for the symbols between two positions.</p> </div>", "Fetch the item documentation for the symbols between two positions.", "<code class=\"type\">Lexing.position -&gt; Lexing.position -&gt; <a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a></code>", "Lexing.position -> Lexing.position -> Docstrings.docs"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "rhs", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALrhs", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEproduction\">production</a> -&gt; xsymbol list</code>", "production -> xsymbol list"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "rhs", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALrhs", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a> *<br>       <a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.InspectionTableFormat.TABLES.t *       CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.InspectionTableFormat.TABLES.t"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "rewrite_first", "Build_path_prefix_map.html#VALrewrite_first", "<div class=\"info\"> <p><code class=\"code\">rewrite_first&nbsp;map&nbsp;path</code> tries to find a source in <code class=\"code\">map</code> that is a prefix of the input <code class=\"code\">path</code>.</p> </div>", "rewrite_first\194\160map\194\160path tries to find a source in map that is a prefix of the input path.", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEmap\">map</a> -&gt;<br>       <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> -&gt; <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> option</code>", "map ->       path -> path option"],
["Location", "Location.html", "rewrite_find_first_existing", "Location.html#VALrewrite_find_first_existing", "<div class=\"info\"> <p><code class=\"code\">rewrite_find_first_existing&nbsp;path</code> uses a BUILD_PATH_PREFIX_MAP mapping and tries to find a source in mapping that maps to a result that exists in the file system.</p> </div>", "rewrite_find_first_existing\194\160path uses a BUILD_PATH_PREFIX_MAP mapping and tries to find a source in mapping that maps to a result that exists in the file system.", "<code class=\"type\">string -&gt; string option</code>", "string -> string option"],
["Location", "Location.html", "rewrite_find_all_existing_dirs", "Location.html#VALrewrite_find_all_existing_dirs", "<div class=\"info\"> <p><code class=\"code\">rewrite_find_all_existing_dirs&nbsp;dir</code> accumulates a list of existing directories, <code class=\"code\">dirs</code>, that are the result of mapping a potentially abstract directory, <code class=\"code\">dir</code>, over all the mapping pairs in the BUILD_PATH_PREFIX_MAP environment variable, if any.</p> </div>", "rewrite_find_all_existing_dirs\194\160dir accumulates a list of existing directories, dirs, that are the result of mapping a potentially abstract directory, dir, over all the mapping pairs in the BUILD_PATH_PREFIX_MAP environment variable, if any.", "<code class=\"type\">string -&gt; string list</code>", "string -> string list"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "rewrite_all", "Build_path_prefix_map.html#VALrewrite_all", "<div class=\"info\"> <p><code class=\"code\">rewrite_all&nbsp;map&nbsp;path</code> finds all sources in <code class=\"code\">map</code> that are a prefix of the input <code class=\"code\">path</code>.</p> </div>", "rewrite_all\194\160map\194\160path finds all sources in map that are a prefix of the input path.", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEmap\">map</a> -&gt;<br>       <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> -&gt; <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> list</code>", "map ->       path -> path list"],
["Location", "Location.html", "rewrite_absolute_path", "Location.html#VALrewrite_absolute_path", "<div class=\"info\"> <p><code class=\"code\">rewrite_absolute_path&nbsp;path</code> rewrites <code class=\"code\">path</code> to honor the BUILD_PATH_PREFIX_MAP variable if it is set.</p> </div>", "rewrite_absolute_path\194\160path rewrites path to honor the BUILD_PATH_PREFIX_MAP variable if it is set.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "rewrite", "Build_path_prefix_map.html#VALrewrite", "<div class=\"info\"> <p><code class=\"code\">rewrite&nbsp;path</code> uses <code class=\"code\">rewrite_first</code> to try to find a mapping for path.</p> </div>", "rewrite\194\160path uses rewrite_first to try to find a mapping for path.", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEmap\">map</a> -&gt;<br>       <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> -&gt; <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a></code>", "map ->       path -> path"],
["CamlinternalMenhirLib.Convert", "CamlinternalMenhirLib.Convert.html", "revised2traditional", "CamlinternalMenhirLib.Convert.html#VALrevised2traditional", "", "", "<code class=\"type\">('raw_token -&gt; Lexing.position -&gt; Lexing.position -&gt; 'token) -&gt;<br>       ('token, 'semantic_value) <a href=\"CamlinternalMenhirLib.Convert.html#TYPErevised\">revised</a> -&gt;<br>       ('raw_token, 'semantic_value) <a href=\"CamlinternalMenhirLib.Convert.html#TYPEtraditional\">traditional</a></code>", "('raw_token -> Lexing.position -> Lexing.position -> 'token) ->       ('token, 'semantic_value) revised ->       ('raw_token, 'semantic_value) traditional"],
["CamlinternalMenhirLib.Convert.Simplified", "CamlinternalMenhirLib.Convert.Simplified.html", "revised2traditional", "CamlinternalMenhirLib.Convert.Simplified.html#VALrevised2traditional", "", "", "<code class=\"type\">('token * Lexing.position * Lexing.position, 'semantic_value)<br>       <a href=\"CamlinternalMenhirLib.Convert.html#TYPErevised\">CamlinternalMenhirLib.Convert.revised</a> -&gt;<br>       ('token, 'semantic_value) <a href=\"CamlinternalMenhirLib.Convert.html#TYPEtraditional\">CamlinternalMenhirLib.Convert.traditional</a></code>", "('token * Lexing.position * Lexing.position, 'semantic_value)       CamlinternalMenhirLib.Convert.revised ->       ('token, 'semantic_value) CamlinternalMenhirLib.Convert.traditional"],
["Misc", "Misc.html", "rev_split_words", "Misc.html#VALrev_split_words", "<div class=\"info\"> <p><code class=\"code\">rev_split_words&nbsp;s</code> splits <code class=\"code\">s</code> in blank-separated words, and returns the list of words in reverse order.</p> </div>", "rev_split_words\194\160s splits s in blank-separated words, and returns the list of words in reverse order.", "<code class=\"type\">string -&gt; string list</code>", "string -> string list"],
["CamlinternalMenhirLib.EngineTypes.TABLE.Log", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html", "resuming_error_handling", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html#VALresuming_error_handling", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "resume", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALresume", "", "", "<code class=\"type\">?strategy:<a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEstrategy\">strategy</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a></code>", "?strategy:strategy ->       'a checkpoint ->       'a checkpoint"],
["Terminfo", "Terminfo.html", "resume", "Terminfo.html#VALresume", "", "", "<code class=\"type\">out_channel -&gt; int -&gt; unit</code>", "out_channel -> int -> unit"],
["Warnings", "Warnings.html", "restore", "Warnings.html#VALrestore", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEstate\">state</a> -&gt; unit</code>", "state -> unit"],
["Warnings", "Warnings.html", "reset_fatal", "Warnings.html#VALreset_fatal", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "reset_base_overrides", "Arg_helper.Make.html#VALreset_base_overrides", "", "", "<code class=\"type\"><a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "parsed -> parsed"],
["Clflags", "Clflags.html", "reset_arguments", "Clflags.html#VALreset_arguments", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Location", "Location.html", "reset", "Location.html#VALreset", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Load_path", "Load_path.html", "reset", "Load_path.html#VALreset", "<div class=\"info\"> <p>Remove all directories</p> </div>", "Remove all directories", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Local_store", "Local_store.html", "reset", "Local_store.html#VALreset", "<div class=\"info\"> <p>Resets all the references to the initial snapshot (i.e.</p> </div>", "Resets all the references to the initial snapshot (i.e.", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Profile", "Profile.html", "reset", "Profile.html#VALreset", "<div class=\"info\"> <p>erase all recorded profile information</p> </div>", "erase all recorded profile information", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Config_boot", "Config_boot.html", "reserved_header_bits", "Config_boot.html#VALreserved_header_bits", "<div class=\"info\"> <p>How many bits of a block's header are reserved</p> </div>", "How many bits of a block's header are reserved", "<code class=\"type\">int</code>", "int"],
["Config_main", "Config_main.html", "reserved_header_bits", "Config_main.html#VALreserved_header_bits", "<div class=\"info\"> <p>How many bits of a block's header are reserved</p> </div>", "How many bits of a block's header are reserved", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "reserved_header_bits", "Config.html#VALreserved_header_bits", "<div class=\"info\"> <p>How many bits of a block's header are reserved</p> </div>", "How many bits of a block's header are reserved", "<code class=\"type\">int</code>", "int"],
["Misc", "Misc.html", "reraise_preserving_backtrace", "Misc.html#VALreraise_preserving_backtrace", "<div class=\"info\"> <p><code class=\"code\">reraise_preserving_backtrace&nbsp;e&nbsp;f</code> is (f (); raise e) except that the current backtrace is preserved, even if <code class=\"code\">f</code> uses exceptions internally.</p> </div>", "reraise_preserving_backtrace\194\160e\194\160f is (f (); raise e) except that the current backtrace is preserved, even if f uses exceptions internally.", "<code class=\"type\">exn -&gt; (unit -&gt; unit) -&gt; 'a</code>", "exn -> (unit -> unit) -> 'a"],
["CamlinternalMenhirLib.StaticVersion", "CamlinternalMenhirLib.StaticVersion.html", "require_20210419", "CamlinternalMenhirLib.StaticVersion.html#VALrequire_20210419", "", "", "<code class=\"type\">unit</code>", "unit"],
["Targetint", "Targetint.html", "repr", "Targetint.html#VALrepr", "<div class=\"info\"> <p>The concrete representation of a native integer.</p> </div>", "The concrete representation of a native integer.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPErepr\">repr</a></code>", "Targetint.t -> repr"],
["Location", "Location.html", "report_warning", "Location.html#VALreport_warning", "<div class=\"info\"> <p><code class=\"code\">report_warning&nbsp;loc&nbsp;w</code> produces a report for the given warning <code class=\"code\">w</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if the warning is not to be printed.</p> </div>", "report_warning\194\160loc\194\160w produces a report for the given warning w, or None if the warning is not to be printed.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; <a href=\"Location.html#TYPEreport\">report</a> option</code>", "Location.t -> Warnings.Location.t -> report option"],
["Location", "Location.html", "report_printer", "Location.html#VALreport_printer", "<div class=\"info\"> <p>Hook for redefining the printer of reports.</p> </div>", "Hook for redefining the printer of reports.", "<code class=\"type\">(unit -&gt; <a href=\"Location.html#TYPEreport_printer\">report_printer</a>) ref</code>", "(unit -> report_printer) ref"],
["Location", "Location.html", "report_exception", "Location.html#VALreport_exception", "<div class=\"info\"> <p>Reraise the exception if it is unknown.</p> </div>", "Reraise the exception if it is unknown.", "<code class=\"type\">Format.formatter -&gt; exn -&gt; unit</code>", "Format.formatter -> exn -> unit"],
["Attr_helper", "Attr_helper.html", "report_error", "Attr_helper.html#VALreport_error", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Attr_helper.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Pparse", "Pparse.html", "report_error", "Pparse.html#VALreport_error", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Pparse.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Location", "Location.html", "report_alert", "Location.html#VALreport_alert", "<div class=\"info\"> <p><code class=\"code\">report_alert&nbsp;loc&nbsp;w</code> produces a report for the given alert <code class=\"code\">w</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if the alert is not to be printed.</p> </div>", "report_alert\194\160loc\194\160w produces a report for the given alert w, or None if the alert is not to be printed.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEalert\">Warnings.alert</a> -&gt; <a href=\"Location.html#TYPEreport\">report</a> option</code>", "Location.t -> Warnings.alert -> report option"],
["Warnings", "Warnings.html", "report_alert", "Warnings.html#VALreport_alert", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEalert\">alert</a> -&gt; [ `Active of <a href=\"Warnings.html#TYPEreporting_information\">reporting_information</a> | `Inactive ]</code>", "alert -> [ `Active of reporting_information | `Inactive ]"],
["Warnings", "Warnings.html", "report", "Warnings.html#VALreport", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEt\">t</a> -&gt; [ `Active of <a href=\"Warnings.html#TYPEreporting_information\">reporting_information</a> | `Inactive ]</code>", "Warnings.t -> [ `Active of reporting_information | `Inactive ]"],
["Misc", "Misc.html", "replicate_list", "Misc.html#VALreplicate_list", "<div class=\"info\"> <p><code class=\"code\">replicate_list&nbsp;elem&nbsp;n</code> is the list with <code class=\"code\">n</code> elements all identical to <code class=\"code\">elem</code>.</p> </div>", "replicate_list\194\160elem\194\160n is the list with n elements all identical to elem.", "<code class=\"type\">'a -&gt; int -&gt; 'a list</code>", "'a -> int -> 'a list"],
["Misc", "Misc.html", "replace_substring", "Misc.html#VALreplace_substring", "<div class=\"info\"> <p><code class=\"code\">replace_substring&nbsp;~before&nbsp;~after&nbsp;str</code> replaces all occurrences of <code class=\"code\">before</code> with <code class=\"code\">after</code> in <code class=\"code\">str</code> and returns the resulting string.</p> </div>", "replace_substring\194\160~before\194\160~after\194\160str replaces all occurrences of before with after in str and returns the resulting string.", "<code class=\"type\">before:string -&gt; after:string -&gt; string -&gt; string</code>", "before:string -> after:string -> string -> string"],
["Identifiable.Map", "Identifiable.Map.html", "rename", "Identifiable.Map.html#VALrename", "", "", "<code class=\"type\">key t -&gt; key -&gt; key</code>", "key Identifiable.Map.t -> key -> key"],
["Clflags", "Clflags.html", "remove_unused_arguments", "Clflags.html#VALremove_unused_arguments", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Pparse", "Pparse.html", "remove_preprocessed", "Pparse.html#VALremove_preprocessed", "", "", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Misc", "Misc.html", "remove_file", "Misc.html#VALremove_file", "<div class=\"info\"> <p>Delete the given file if it exists and is a regular file.</p> </div>", "Delete the given file if it exists and is a regular file.", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Load_path", "Load_path.html", "remove_dir", "Load_path.html#VALremove_dir", "<div class=\"info\"> <p>Remove a directory from the load path</p> </div>", "Remove a directory from the load path", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Targetint", "Targetint.html", "rem", "Targetint.html#VALrem", "<div class=\"info\"> <p>Integer remainder.</p> </div>", "Integer remainder.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Ast_mapper", "Ast_mapper.html", "register_function", "Ast_mapper.html#VALregister_function", "", "", "<code class=\"type\">(string -&gt; (string list -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a>) -&gt; unit) ref</code>", "(string -> (string list -> mapper) -> unit) ref"],
["Location", "Location.html", "register_error_of_exn", "Location.html#VALregister_error_of_exn", "<div class=\"info\"> <p>Each compiler module which defines a custom type of exception which can surface as a user-visible error should register a \"printer\" for this exception using <code class=\"code\">register_error_of_exn</code>.</p> </div>", "Each compiler module which defines a custom type of exception which can surface as a user-visible error should register a \"printer\" for this exception using register_error_of_exn.", "<code class=\"type\">(exn -&gt; <a href=\"Location.html#TYPEerror\">error</a> option) -&gt; unit</code>", "(exn -> error option) -> unit"],
["Ast_mapper", "Ast_mapper.html", "register", "Ast_mapper.html#VALregister", "<div class=\"info\"> <p>Apply the <code class=\"code\">register_function</code>.</p> </div>", "Apply the register_function.", "<code class=\"type\">string -&gt; (string list -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a>) -&gt; unit</code>", "string -> (string list -> mapper) -> unit"],
["Docstrings", "Docstrings.html", "register", "Docstrings.html#VALregister", "<div class=\"info\"> <p>Register a docstring</p> </div>", "Register a docstring", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; unit</code>", "docstring -> unit"],
["CamlinternalMenhirLib.EngineTypes.TABLE.Log", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html", "reduce_or_accept", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html#VALreduce_or_accept", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">CamlinternalMenhirLib.EngineTypes.TABLE.production</a> -&gt; unit</code>", "CamlinternalMenhirLib.EngineTypes.TABLE.production -> unit"],
["Clflags", "Clflags.html", "recursive_types", "Clflags.html#VALrecursive_types", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Profile", "Profile.html", "record_call", "Profile.html#VALrecord_call", "<div class=\"info\"> <p><code class=\"code\">record_call&nbsp;pass&nbsp;f</code> calls <code class=\"code\">f</code> and records its profile information.</p> </div>", "record_call\194\160pass\194\160f calls f and records its profile information.", "<code class=\"type\">?accumulate:bool -&gt; string -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "?accumulate:bool -> string -> (unit -> 'a) -> 'a"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "record", "Ast_helper.Pat.html#VALrecord", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> * <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a>) list -&gt;<br>       <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       (Ast_helper.lid * Parsetree.pattern) list ->       Asttypes.closed_flag -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "record", "Ast_helper.Exp.html#VALrecord", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       (Ast_helper.lid * Parsetree.expression) list ->       Parsetree.expression option -> Parsetree.expression"],
["Profile", "Profile.html", "record", "Profile.html#VALrecord", "<div class=\"info\"> <p><code class=\"code\">record&nbsp;pass&nbsp;f&nbsp;arg</code> records the profile information of <code class=\"code\">f&nbsp;arg</code></p> </div>", "record\194\160pass\194\160f\194\160arg records the profile information of f\194\160arg", "<code class=\"type\">?accumulate:bool -&gt; string -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'b</code>", "?accumulate:bool -> string -> ('a -> 'b) -> 'a -> 'b"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "rec_module", "Ast_helper.Sig.html#VALrec_module", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_declaration list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "rec_module", "Ast_helper.Str.html#VALrec_module", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_binding list -> Parsetree.structure_item"],
["Ast_helper.Te", "Ast_helper.Te.html", "rebind", "Ast_helper.Te.html#VALrebind", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?info:Docstrings.info ->       Ast_helper.str -> Ast_helper.lid -> Parsetree.extension_constructor"],
["Clflags", "Clflags.html", "real_paths", "Clflags.html#VALreal_paths", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "read_via", "CamlinternalMenhirLib.LinearizedArray.html#VALread_via", "", "", "<code class=\"type\">(int -&gt; 'a) -&gt; (int -&gt; int) -&gt; int -&gt; int -&gt; 'a</code>", "(int -> 'a) -> (int -> int) -> int -> int -> 'a"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "read_row_via", "CamlinternalMenhirLib.LinearizedArray.html#VALread_row_via", "", "", "<code class=\"type\">(int -&gt; 'a) -&gt; (int -&gt; int) -&gt; int -&gt; 'a list</code>", "(int -> 'a) -> (int -> int) -> int -> 'a list"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "read_row", "CamlinternalMenhirLib.LinearizedArray.html#VALread_row", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.LinearizedArray.html#TYPEt\">t</a> -&gt; int -&gt; 'a list</code>", "'a CamlinternalMenhirLib.LinearizedArray.t -> int -> 'a list"],
["Misc.Magic_number", "Misc.Magic_number.html", "read_info", "Misc.Magic_number.html#VALread_info", "<div class=\"info\"> <p>Read a raw magic number from an input channel.</p> </div>", "Read a raw magic number from an input channel.", "<code class=\"type\">in_channel -&gt;<br>       (<a href=\"Misc.Magic_number.html#TYPEinfo\">info</a>, <a href=\"Misc.Magic_number.html#TYPEparse_error\">parse_error</a>) result</code>", "in_channel ->       (info, parse_error) result"],
["Misc.Magic_number", "Misc.Magic_number.html", "read_current_info", "Misc.Magic_number.html#VALread_current_info", "<div class=\"info\"> <p>Read a magic number as <code class=\"code\">read_info</code>, and check that it is the current version as its kind.</p> </div>", "Read a magic number as read_info, and check that it is the current version as its kind.", "<code class=\"type\">expected_kind:<a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> option -&gt;<br>       in_channel -&gt;<br>       (<a href=\"Misc.Magic_number.html#TYPEinfo\">info</a>, <a href=\"Misc.Magic_number.html#TYPEerror\">error</a>) result</code>", "expected_kind:kind option ->       in_channel ->       (info, error) result"],
["Pparse", "Pparse.html", "read_ast", "Pparse.html#VALread_ast", "", "", "<code class=\"type\">'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; string -&gt; 'a</code>", "'a ast_kind -> string -> 'a"],
["CamlinternalMenhirLib.LexerUtil", "CamlinternalMenhirLib.LexerUtil.html", "read", "CamlinternalMenhirLib.LexerUtil.html#VALread", "", "", "<code class=\"type\">string -&gt; string * Lexing.lexbuf</code>", "string -> string * Lexing.lexbuf"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "read", "CamlinternalMenhirLib.LinearizedArray.html#VALread", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.LinearizedArray.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; 'a</code>", "'a CamlinternalMenhirLib.LinearizedArray.t -> int -> int -> 'a"],
["Binutils", "Binutils.html", "read", "Binutils.html#VALread", "", "", "<code class=\"type\">string -&gt; (<a href=\"Binutils.html#TYPEt\">t</a>, <a href=\"Binutils.html#TYPEerror\">error</a>) Result.t</code>", "string -> (Binutils.t, error) Result.Binutils.t"],
["Misc.Magic_number", "Misc.Magic_number.html", "raw_kind", "Misc.Magic_number.html#VALraw_kind", "<div class=\"info\"> <p>the current raw representation of a kind.</p> </div>", "the current raw representation of a kind.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> -&gt; <a href=\"Misc.Magic_number.html#TYPEraw_kind\">raw_kind</a></code>", "kind -> raw_kind"],
["Misc.Magic_number", "Misc.Magic_number.html", "raw", "Misc.Magic_number.html#VALraw", "<div class=\"info\"> <p>A valid raw representation of the magic number.</p> </div>", "A valid raw representation of the magic number.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEinfo\">info</a> -&gt; <a href=\"Misc.Magic_number.html#TYPEraw\">raw</a></code>", "info -> raw"],
["CamlinternalMenhirLib.LexerUtil", "CamlinternalMenhirLib.LexerUtil.html", "range", "CamlinternalMenhirLib.LexerUtil.html#VALrange", "", "", "<code class=\"type\">Lexing.position * Lexing.position -&gt; string</code>", "Lexing.position * Lexing.position -> string"],
["Location", "Location.html", "raise_errorf", "Location.html#VALraise_errorf", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ?sub:<a href=\"Location.html#TYPEmsg\">msg</a> list -&gt;<br>       ('a, Format.formatter, unit, 'b) format4 -&gt; 'a</code>", "?loc:Location.t ->       ?sub:msg list ->       ('a, Format.formatter, unit, 'b) format4 -> 'a"],
["Ccomp", "Ccomp.html", "quote_optfile", "Ccomp.html#VALquote_optfile", "", "", "<code class=\"type\">string option -&gt; string</code>", "string option -> string"],
["Ccomp", "Ccomp.html", "quote_files", "Ccomp.html#VALquote_files", "", "", "<code class=\"type\">response_files:bool -&gt; string list -&gt; string</code>", "response_files:bool -> string list -> string"],
["Misc", "Misc.html", "protect_writing_to_file", "Misc.html#VALprotect_writing_to_file", "<div class=\"info\"> <p>Open the given <code class=\"code\">filename</code> for writing (in binary mode), pass the <code class=\"code\">out_channel</code> to the given function, then close the channel.</p> </div>", "Open the given filename for writing (in binary mode), pass the out_channel to the given function, then close the channel.", "<code class=\"type\">filename:string -&gt; f:(out_channel -&gt; 'a) -&gt; 'a</code>", "filename:string -> f:(out_channel -> 'a) -> 'a"],
["Misc", "Misc.html", "protect_refs", "Misc.html#VALprotect_refs", "<div class=\"info\"> <p><code class=\"code\">protect_refs&nbsp;l&nbsp;f</code> temporarily sets <code class=\"code\">r</code> to <code class=\"code\">v</code> for each <code class=\"code\"><span class=\"constructor\">R</span>&nbsp;(r,&nbsp;v)</code> in <code class=\"code\">l</code> while executing <code class=\"code\">f</code>.</p> </div>", "protect_refs\194\160l\194\160f temporarily sets r to v for each R\194\160(r,\194\160v) in l while executing f.", "<code class=\"type\"><a href=\"Misc.html#TYPEref_and_value\">ref_and_value</a> list -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "ref_and_value list -> (unit -> 'a) -> 'a"],
["Clflags", "Clflags.html", "profile_columns", "Clflags.html#VALprofile_columns", "", "", "<code class=\"type\"><a href=\"Profile.html#TYPEcolumn\">Profile.column</a> list ref</code>", "Profile.column list ref"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "production_index", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALproduction_index", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEproduction\">production</a> -&gt; int</code>", "production -> int"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "production_index", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALproduction_index", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a> -&gt; int</code>", "production -> int"],
["Lexer", "Lexer.html", "print_warnings", "Lexer.html#VALprint_warnings", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Location", "Location.html", "print_warning", "Location.html#VALprint_warning", "<div class=\"info\"> <p>Prints a warning.</p> </div>", "Prints a warning.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; Format.formatter -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; unit</code>", "Location.t -> Format.formatter -> Warnings.Location.t -> unit"],
["Clflags", "Clflags.html", "print_types", "Clflags.html#VALprint_types", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.Printers.Make", "CamlinternalMenhirLib.Printers.Make.html", "print_symbols", "CamlinternalMenhirLib.Printers.Make.html#VALprint_symbols", "", "", "<code class=\"type\">I.xsymbol list -&gt; unit</code>", "I.xsymbol list -> unit"],
["CamlinternalMenhirLib.Printers.Make", "CamlinternalMenhirLib.Printers.Make.html", "print_stack", "CamlinternalMenhirLib.Printers.Make.html#VALprint_stack", "", "", "<code class=\"type\">'a I.env -&gt; unit</code>", "'a I.env -> unit"],
["Misc", "Misc.html", "print_see_manual", "Misc.html#VALprint_see_manual", "<div class=\"info\"> <p>See manual section</p> </div>", "See manual section", "<code class=\"type\">Format.formatter -&gt; int list -&gt; unit</code>", "Format.formatter -> int list -> unit"],
["Location", "Location.html", "print_report", "Location.html#VALprint_report", "<div class=\"info\"> <p>Display an error or warning report.</p> </div>", "Display an error or warning report.", "<code class=\"type\">Format.formatter -&gt; <a href=\"Location.html#TYPEreport\">report</a> -&gt; unit</code>", "Format.formatter -> report -> unit"],
["CamlinternalMenhirLib.Printers.Make", "CamlinternalMenhirLib.Printers.Make.html", "print_production", "CamlinternalMenhirLib.Printers.Make.html#VALprint_production", "", "", "<code class=\"type\">I.production -&gt; unit</code>", "I.production -> unit"],
["Location", "Location.html", "print_locs", "Location.html#VALprint_locs", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Location.html#TYPEt\">t</a> list -&gt; unit</code>", "Format.formatter -> Location.t list -> unit"],
["Location", "Location.html", "print_loc", "Location.html#VALprint_loc", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> Location.t -> unit"],
["CamlinternalMenhirLib.Printers.Make", "CamlinternalMenhirLib.Printers.Make.html", "print_item", "CamlinternalMenhirLib.Printers.Make.html#VALprint_item", "", "", "<code class=\"type\">I.item -&gt; unit</code>", "I.item -> unit"],
["Misc", "Misc.html", "print_if", "Misc.html#VALprint_if", "<div class=\"info\"> <p><code class=\"code\">print_if&nbsp;ppf&nbsp;flag&nbsp;fmt&nbsp;x</code> prints <code class=\"code\">x</code> with <code class=\"code\">fmt</code> on <code class=\"code\">ppf</code> if <code class=\"code\">b</code> is true.</p> </div>", "print_if\194\160ppf\194\160flag\194\160fmt\194\160x prints x with fmt on ppf if b is true.", "<code class=\"type\">Format.formatter -&gt;<br>       bool ref -&gt; (Format.formatter -&gt; 'a -&gt; unit) -&gt; 'a -&gt; 'a</code>", "Format.formatter ->       bool ref -> (Format.formatter -> 'a -> unit) -> 'a -> 'a"],
["Location", "Location.html", "print_filename", "Location.html#VALprint_filename", "", "", "<code class=\"type\">Format.formatter -&gt; string -&gt; unit</code>", "Format.formatter -> string -> unit"],
["CamlinternalMenhirLib.Printers.Make", "CamlinternalMenhirLib.Printers.Make.html", "print_env", "CamlinternalMenhirLib.Printers.Make.html#VALprint_env", "", "", "<code class=\"type\">'a I.env -&gt; unit</code>", "'a I.env -> unit"],
["CamlinternalMenhirLib.Printers.Make", "CamlinternalMenhirLib.Printers.Make.html", "print_element_as_symbol", "CamlinternalMenhirLib.Printers.Make.html#VALprint_element_as_symbol", "", "", "<code class=\"type\">I.element -&gt; unit</code>", "I.element -> unit"],
["CamlinternalMenhirLib.Printers.Make", "CamlinternalMenhirLib.Printers.Make.html", "print_current_state", "CamlinternalMenhirLib.Printers.Make.html#VALprint_current_state", "", "", "<code class=\"type\">'a I.env -&gt; unit</code>", "'a I.env -> unit"],
["Config_boot", "Config_boot.html", "print_config", "Config_boot.html#VALprint_config", "<div class=\"info\"> <p>Access to configuration values</p> </div>", "Access to configuration values", "<code class=\"type\">out_channel -&gt; unit</code>", "out_channel -> unit"],
["Config_main", "Config_main.html", "print_config", "Config_main.html#VALprint_config", "<div class=\"info\"> <p>Access to configuration values</p> </div>", "Access to configuration values", "<code class=\"type\">out_channel -&gt; unit</code>", "out_channel -> unit"],
["Config", "Config.html", "print_config", "Config.html#VALprint_config", "<div class=\"info\"> <p>Access to configuration values</p> </div>", "Access to configuration values", "<code class=\"type\">out_channel -&gt; unit</code>", "out_channel -> unit"],
["Clflags", "Clflags.html", "print_arguments", "Clflags.html#VALprint_arguments", "", "", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Location", "Location.html", "print_alert", "Location.html#VALprint_alert", "<div class=\"info\"> <p>Prints an alert.</p> </div>", "Prints an alert.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; Format.formatter -&gt; <a href=\"Warnings.html#TYPEalert\">Warnings.alert</a> -&gt; unit</code>", "Location.t -> Format.formatter -> Warnings.alert -> unit"],
["Misc.Stdlib.String", "Misc.Stdlib.String.html", "print", "Misc.Stdlib.String.html#VALprint", "", "", "<code class=\"type\">Format.formatter -&gt; t -&gt; unit</code>", "Format.formatter -> Misc.Stdlib.String.t -> unit"],
["Identifiable.Thing", "Identifiable.Thing.html", "print", "Identifiable.Thing.html#VALprint", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Identifiable.Thing.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> Identifiable.Thing.t -> unit"],
["Identifiable.Set", "Identifiable.Set.html", "print", "Identifiable.Set.html#VALprint", "", "", "<code class=\"type\">Format.formatter -&gt; t -&gt; unit</code>", "Format.formatter -> Identifiable.Set.t -> unit"],
["Identifiable.Map", "Identifiable.Map.html", "print", "Identifiable.Map.html#VALprint", "", "", "<code class=\"type\">(Format.formatter -&gt; 'a -&gt; unit) -&gt;<br>       Format.formatter -&gt; 'a t -&gt; unit</code>", "(Format.formatter -> 'a -> unit) ->       Format.formatter -> 'a Identifiable.Map.t -> unit"],
["Misc.Stdlib.Option", "Misc.Stdlib.Option.html", "print", "Misc.Stdlib.Option.html#VALprint", "", "", "<code class=\"type\">(Format.formatter -&gt; 'a -&gt; unit) -&gt;<br>       Format.formatter -&gt; 'a <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a> -&gt; unit</code>", "(Format.formatter -> 'a -> unit) ->       Format.formatter -> 'a Misc.Stdlib.Option.t -> unit"],
["Profile", "Profile.html", "print", "Profile.html#VALprint", "<div class=\"info\"> <p>Prints the selected recorded profiling information to the formatter.</p> </div>", "Prints the selected recorded profiling information to the formatter.", "<code class=\"type\">Format.formatter -&gt; <a href=\"Profile.html#TYPEcolumn\">column</a> list -&gt; unit</code>", "Format.formatter -> column list -> unit"],
["Targetint", "Targetint.html", "print", "Targetint.html#VALprint", "<div class=\"info\"> <p>Print a target integer to a formatter.</p> </div>", "Print a target integer to a formatter.", "<code class=\"type\">Format.formatter -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> Targetint.t -> unit"],
["Clflags", "Clflags.html", "principal", "Clflags.html#VALprincipal", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Ast_helper.Str", "Ast_helper.Str.html", "primitive", "Ast_helper.Str.html#VALprimitive", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.value_description -> Parsetree.structure_item"],
["Location", "Location.html", "prerr_warning", "Location.html#VALprerr_warning", "<div class=\"info\"> <p>Same as <code class=\"code\">print_warning</code>, but uses <code class=\"code\">!formatter_for_warnings</code> as output formatter.</p> </div>", "Same as print_warning, but uses !formatter_for_warnings as output formatter.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; unit</code>", "Location.t -> Warnings.Location.t -> unit"],
["Location", "Location.html", "prerr_alert", "Location.html#VALprerr_alert", "<div class=\"info\"> <p>Same as <code class=\"code\">print_alert</code>, but uses <code class=\"code\">!formatter_for_warnings</code> as output formatter.</p> </div>", "Same as print_alert, but uses !formatter_for_warnings as output formatter.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEalert\">Warnings.alert</a> -&gt; unit</code>", "Location.t -> Warnings.alert -> unit"],
["Clflags", "Clflags.html", "preprocessor", "Clflags.html#VALpreprocessor", "", "", "<code class=\"type\">string option ref</code>", "string option ref"],
["Pparse", "Pparse.html", "preprocess", "Pparse.html#VALpreprocess", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Load_path", "Load_path.html", "prepend_dir", "Load_path.html#VALprepend_dir", "<div class=\"info\"> <p><code class=\"code\">prepend_dir&nbsp;d</code> adds <code class=\"code\">d</code> to the start of the load path (i.e.</p> </div>", "prepend_dir\194\160d adds d to the start of the load path (i.e.", "<code class=\"type\"><a href=\"Load_path.Dir.html#TYPEt\">Dir.t</a> -&gt; unit</code>", "Dir.Load_path.t -> unit"],
["Diffing", "Diffing.html", "prefix", "Diffing.html#VALprefix", "", "", "<code class=\"type\">Format.formatter -&gt; int * <a href=\"Diffing.html#TYPEchange_kind\">change_kind</a> -&gt; unit</code>", "Format.formatter -> int * change_kind -> unit"],
["Diffing_with_keys", "Diffing_with_keys.html", "prefix", "Diffing_with_keys.html#VALprefix", "", "", "<code class=\"type\">Format.formatter -&gt; ('l, 'r, 'diff) <a href=\"Diffing_with_keys.html#TYPEchange\">change</a> -&gt; unit</code>", "Format.formatter -> ('l, 'r, 'diff) change -> unit"],
["Targetint", "Targetint.html", "pred", "Targetint.html#VALpred", "<div class=\"info\"> <p>Predecessor.</p> </div>", "Predecessor.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t"],
["Misc", "Misc.html", "pp_two_columns", "Misc.html#VALpp_two_columns", "<div class=\"info\"> <p><code class=\"code\">pp_two_columns&nbsp;?sep&nbsp;?max_lines&nbsp;ppf&nbsp;l</code> prints the lines in <code class=\"code\">l</code> as two columns separated by <code class=\"code\">sep</code> (\"|\" by default).</p> </div>", "pp_two_columns\194\160?sep\194\160?max_lines\194\160ppf\194\160l prints the lines in l as two columns separated by sep (\"|\" by default).", "<code class=\"type\">?sep:string -&gt;<br>       ?max_lines:int -&gt; Format.formatter -&gt; (string * string) list -&gt; unit</code>", "?sep:string ->       ?max_lines:int -> Format.formatter -> (string * string) list -> unit"],
["Depend", "Depend.html", "pp_deps", "Depend.html#VALpp_deps", "<div class=\"info\"> <p>dependencies found by preprocessing tools</p> </div>", "dependencies found by preprocessing tools", "<code class=\"type\">string list ref</code>", "string list ref"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "positions", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALpositions", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.html#TYPEposition\">CamlinternalMenhirLib.IncrementalEngine.position</a> *<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.html#TYPEposition\">CamlinternalMenhirLib.IncrementalEngine.position</a></code>", "'a env ->       CamlinternalMenhirLib.IncrementalEngine.position *       CamlinternalMenhirLib.IncrementalEngine.position"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "pop_many", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALpop_many", "", "", "<code class=\"type\">int -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> option</code>", "int ->       'a env ->       'a env option"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "pop", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALpop", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> option</code>", "'a env ->       'a env option"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "poly", "Ast_helper.Typ.html#VALpoly", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str list -> Parsetree.core_type -> Parsetree.core_type"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "poly", "Ast_helper.Exp.html#VALpoly", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.core_type option -> Parsetree.expression"],
["Clflags", "Clflags.html", "plugin", "Clflags.html#VALplugin", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "pic_code", "Clflags.html#VALpic_code", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Pprintast", "Pprintast.html", "payload", "Pprintast.html#VALpayload", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEpayload\">Parsetree.payload</a> -&gt; unit</code>", "Format.formatter -> Parsetree.payload -> unit"],
["Printast", "Printast.html", "payload", "Printast.html#VALpayload", "", "", "<code class=\"type\">int -&gt; Format.formatter -&gt; <a href=\"Parsetree.html#TYPEpayload\">Parsetree.payload</a> -&gt; unit</code>", "int -> Format.formatter -> Parsetree.payload -> unit"],
["Parse", "Parse.html", "pattern", "Parse.html#VALpattern", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "Lexing.lexbuf -> Parsetree.pattern"],
["Pprintast", "Pprintast.html", "pattern", "Pprintast.html#VALpattern", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; unit</code>", "Format.formatter -> Parsetree.pattern -> unit"],
["Load_path.Dir", "Load_path.Dir.html", "path", "Load_path.Dir.html#VALpath", "", "", "<code class=\"type\"><a href=\"Load_path.Dir.html#TYPEt\">t</a> -&gt; string</code>", "Load_path.Dir.t -> string"],
["Parser", "Parser.html", "parse_val_longident", "Parser.html#VALparse_val_longident", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.Parser.t"],
["Parser.Incremental", "Parser.Incremental.html", "parse_val_longident", "Parser.Incremental.html#VALparse_val_longident", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position -> Longident.Parser.Incremental.t Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_pattern", "Parser.html#VALparse_pattern", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.pattern"],
["Parser.Incremental", "Parser.Incremental.html", "parse_pattern", "Parser.Incremental.html#VALparse_pattern", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.pattern Parser.MenhirInterpreter.checkpoint"],
["Warnings", "Warnings.html", "parse_options", "Warnings.html#VALparse_options", "", "", "<code class=\"type\">bool -&gt; string -&gt; <a href=\"Warnings.html#TYPEalert\">alert</a> option</code>", "bool -> string -> alert option"],
["Arg_helper.Make", "Arg_helper.Make.html", "parse_no_error", "Arg_helper.Make.html#VALparse_no_error", "", "", "<code class=\"type\">string -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> ref -&gt; <a href=\"Arg_helper.Make.html#TYPEparse_result\">parse_result</a></code>", "string -> parsed ref -> parse_result"],
["Clflags.Int_arg_helper", "Clflags.Int_arg_helper.html", "parse_no_error", "Clflags.Int_arg_helper.html#VALparse_no_error", "", "", "<code class=\"type\">string -&gt;<br>       <a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">parsed</a> ref -&gt;<br>       <a href=\"Clflags.Int_arg_helper.html#TYPEparse_result\">parse_result</a></code>", "string ->       parsed ref ->       parse_result"],
["Clflags.Float_arg_helper", "Clflags.Float_arg_helper.html", "parse_no_error", "Clflags.Float_arg_helper.html#VALparse_no_error", "", "", "<code class=\"type\">string -&gt;<br>       <a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">parsed</a> ref -&gt;<br>       <a href=\"Clflags.Float_arg_helper.html#TYPEparse_result\">parse_result</a></code>", "string ->       parsed ref ->       parse_result"],
["Parser", "Parser.html", "parse_mty_longident", "Parser.html#VALparse_mty_longident", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.Parser.t"],
["Parser.Incremental", "Parser.Incremental.html", "parse_mty_longident", "Parser.Incremental.html#VALparse_mty_longident", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position -> Longident.Parser.Incremental.t Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_module_type", "Parser.html#VALparse_module_type", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.module_type"],
["Parser.Incremental", "Parser.Incremental.html", "parse_module_type", "Parser.Incremental.html#VALparse_module_type", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.module_type Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_module_expr", "Parser.html#VALparse_module_expr", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.module_expr"],
["Parser.Incremental", "Parser.Incremental.html", "parse_module_expr", "Parser.Incremental.html#VALparse_module_expr", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.module_expr Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_mod_longident", "Parser.html#VALparse_mod_longident", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.Parser.t"],
["Parser.Incremental", "Parser.Incremental.html", "parse_mod_longident", "Parser.Incremental.html#VALparse_mod_longident", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position -> Longident.Parser.Incremental.t Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_mod_ext_longident", "Parser.html#VALparse_mod_ext_longident", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.Parser.t"],
["Parser.Incremental", "Parser.Incremental.html", "parse_mod_ext_longident", "Parser.Incremental.html#VALparse_mod_ext_longident", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position -> Longident.Parser.Incremental.t Parser.MenhirInterpreter.checkpoint"],
["Misc.Magic_number", "Misc.Magic_number.html", "parse_kind", "Misc.Magic_number.html#VALparse_kind", "<div class=\"info\"> <p>parse a raw kind into a kind</p> </div>", "parse a raw kind into a kind", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEraw_kind\">raw_kind</a> -&gt; <a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> option</code>", "raw_kind -> kind option"],
["Pparse", "Pparse.html", "parse_interface", "Pparse.html#VALparse_interface", "", "", "<code class=\"type\">tool_name:string -&gt; string -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "tool_name:string -> string -> Parsetree.signature"],
["Pparse", "Pparse.html", "parse_implementation", "Pparse.html#VALparse_implementation", "", "", "<code class=\"type\">tool_name:string -&gt; string -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "tool_name:string -> string -> Parsetree.structure"],
["Parser", "Parser.html", "parse_expression", "Parser.html#VALparse_expression", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.expression"],
["Parser.Incremental", "Parser.Incremental.html", "parse_expression", "Parser.Incremental.html#VALparse_expression", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.expression Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_core_type", "Parser.html#VALparse_core_type", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.core_type"],
["Parser.Incremental", "Parser.Incremental.html", "parse_core_type", "Parser.Incremental.html#VALparse_core_type", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.core_type Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_constr_longident", "Parser.html#VALparse_constr_longident", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.Parser.t"],
["Parser.Incremental", "Parser.Incremental.html", "parse_constr_longident", "Parser.Incremental.html#VALparse_constr_longident", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position -> Longident.Parser.Incremental.t Parser.MenhirInterpreter.checkpoint"],
["Parser", "Parser.html", "parse_any_longident", "Parser.html#VALparse_any_longident", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Longident.Parser.t"],
["Parser.Incremental", "Parser.Incremental.html", "parse_any_longident", "Parser.Incremental.html#VALparse_any_longident", "", "", "<code class=\"type\">Lexing.position -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position -> Longident.Parser.Incremental.t Parser.MenhirInterpreter.checkpoint"],
["Warnings", "Warnings.html", "parse_alert_option", "Warnings.html#VALparse_alert_option", "<div class=\"info\"> <p>Disable/enable alerts based on the parameter to the -alert command-line option.</p> </div>", "Disable/enable alerts based on the parameter to the -alert command-line option.", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Longident", "Longident.html", "parse", "Longident.html#VALparse", "<div class=\"info\"> <span class=\"deprecated\"><p>This function is broken on identifiers that are not just \"Word.Word.word\"; for example, it returns incorrect results on infix operators and extended module paths.</p> </span></div>", "This function is broken on identifiers that are not just \"Word.Word.word\"; for example, it returns incorrect results on infix operators and extended module paths.", "<code class=\"type\">string -&gt; <a href=\"Longident.html#TYPEt\">t</a></code>", "string -> Longident.t"],
["Arg_helper.Make", "Arg_helper.Make.html", "parse", "Arg_helper.Make.html#VALparse", "", "", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> ref -&gt; unit</code>", "string -> string -> parsed ref -> unit"],
["Clflags.Int_arg_helper", "Clflags.Int_arg_helper.html", "parse", "Clflags.Int_arg_helper.html#VALparse", "", "", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">parsed</a> ref -&gt; unit</code>", "string -> string -> parsed ref -> unit"],
["Clflags.Float_arg_helper", "Clflags.Float_arg_helper.html", "parse", "Clflags.Float_arg_helper.html#VALparse", "", "", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">parsed</a> ref -&gt; unit</code>", "string -> string -> parsed ref -> unit"],
["Misc.Magic_number", "Misc.Magic_number.html", "parse", "Misc.Magic_number.html#VALparse", "<div class=\"info\"> <p>Parses a raw magic number</p> </div>", "Parses a raw magic number", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEraw\">raw</a> -&gt;<br>       (<a href=\"Misc.Magic_number.html#TYPEinfo\">info</a>, <a href=\"Misc.Magic_number.html#TYPEparse_error\">parse_error</a>) result</code>", "raw ->       (info, parse_error) result"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "package", "Ast_helper.Typ.html#VALpackage", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> * <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a>) list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid ->       (Ast_helper.lid * Parsetree.core_type) list -> Parsetree.core_type"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "pack", "Ast_helper.Exp.html#VALpack", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.expression"],
["CamlinternalMenhirLib.PackedIntArray", "CamlinternalMenhirLib.PackedIntArray.html", "pack", "CamlinternalMenhirLib.PackedIntArray.html#VALpack", "", "", "<code class=\"type\">int array -&gt; <a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">t</a></code>", "int array -> CamlinternalMenhirLib.PackedIntArray.t"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "override", "Ast_helper.Exp.html#VALoverride", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       (Ast_helper.str * Parsetree.expression) list -> Parsetree.expression"],
["Compression", "Compression.html", "output_value", "Compression.html#VALoutput_value", "<div class=\"info\"> <p><code class=\"code\"><span class=\"constructor\">Compression</span>.output_value&nbsp;chan&nbsp;v</code> writes the representation of <code class=\"code\">v</code> on channel <code class=\"code\">chan</code>.</p> </div>", "Compression.output_value\194\160chan\194\160v writes the representation of v on channel chan.", "<code class=\"type\">out_channel -&gt; 'a -&gt; unit</code>", "out_channel -> 'a -> unit"],
["Misc", "Misc.html", "output_to_file_via_temporary", "Misc.html#VALoutput_to_file_via_temporary", "<div class=\"info\"> <p>Produce output in temporary file, then rename it (as atomically as possible) to the desired output file name.</p> </div>", "Produce output in temporary file, then rename it (as atomically as possible) to the desired output file name.", "<code class=\"type\">?mode:open_flag list -&gt;<br>       string -&gt; (string -&gt; out_channel -&gt; 'a) -&gt; 'a</code>", "?mode:open_flag list ->       string -> (string -> out_channel -> 'a) -> 'a"],
["Clflags", "Clflags.html", "output_name", "Clflags.html#VALoutput_name", "", "", "<code class=\"type\">string option ref</code>", "string option ref"],
["Clflags", "Clflags.html", "output_complete_object", "Clflags.html#VALoutput_complete_object", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "output_complete_executable", "Clflags.html#VALoutput_complete_executable", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "output_c_object", "Clflags.html#VALoutput_c_object", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Identifiable.Thing", "Identifiable.Thing.html", "output", "Identifiable.Thing.html#VALoutput", "", "", "<code class=\"type\">out_channel -&gt; <a href=\"Identifiable.Thing.html#TYPEt\">t</a> -&gt; unit</code>", "out_channel -> Identifiable.Thing.t -> unit"],
["Identifiable.Set", "Identifiable.Set.html", "output", "Identifiable.Set.html#VALoutput", "", "", "<code class=\"type\">out_channel -&gt; t -&gt; unit</code>", "out_channel -> Identifiable.Set.t -> unit"],
["Misc.LongString", "Misc.LongString.html", "output", "Misc.LongString.html#VALoutput", "", "", "<code class=\"type\">out_channel -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "out_channel -> Misc.LongString.t -> int -> int -> unit"],
["Misc", "Misc.html", "ordinal_suffix", "Misc.html#VALordinal_suffix", "<div class=\"info\"> <p><code class=\"code\">ordinal_suffix&nbsp;n</code> is the appropriate suffix to append to the numeral <code class=\"code\">n</code> as an ordinal number: <code class=\"code\">1</code> -&gt; <code class=\"code\"><span class=\"string\">\"st\"</span></code>, <code class=\"code\">2</code> -&gt; <code class=\"code\"><span class=\"string\">\"nd\"</span></code>, <code class=\"code\">3</code> -&gt; <code class=\"code\"><span class=\"string\">\"rd\"</span></code>, <code class=\"code\">4</code> -&gt; <code class=\"code\"><span class=\"string\">\"th\"</span></code>, and so on.</p> </div>", "ordinal_suffix\194\160n is the appropriate suffix to append to the numeral n as an ordinal number: 1 -> \"st\", 2 -> \"nd\", 3 -> \"rd\", 4 -> \"th\", and so on.", "<code class=\"type\">int -&gt; string</code>", "int -> string"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "or_", "Ast_helper.Pat.html#VALor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern -> Parsetree.pattern -> Parsetree.pattern"],
["Profile", "Profile.html", "options_doc", "Profile.html#VALoptions_doc", "", "", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "optimize_for_speed", "Clflags.html#VALoptimize_for_speed", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "open_modules", "Clflags.html#VALopen_modules", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Depend", "Depend.html", "open_module", "Depend.html#VALopen_module", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> -&gt; <a href=\"Depend.html#TYPEbound_map\">bound_map</a></code>", "bound_map -> Longident.Depend.t -> bound_map"],
["Pparse", "Pparse.html", "open_and_check_magic", "Pparse.html#VALopen_and_check_magic", "", "", "<code class=\"type\">string -&gt; string -&gt; in_channel * bool</code>", "string -> string -> in_channel * bool"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "open_", "Ast_helper.Pat.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.pattern -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "open_", "Ast_helper.Exp.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEopen_declaration\">Parsetree.open_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.open_declaration -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "open_", "Ast_helper.Sig.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.open_description -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "open_", "Ast_helper.Str.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEopen_declaration\">Parsetree.open_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.open_declaration -> Parsetree.structure_item"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "open_", "Ast_helper.Cty.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.open_description -> Parsetree.class_type -> Parsetree.class_type"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "open_", "Ast_helper.Cl.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.open_description -> Parsetree.class_expr -> Parsetree.class_expr"],
["Clflags", "Clflags.html", "opaque", "Clflags.html#VALopaque", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Numbers.Int8", "Numbers.Int8.html", "one", "Numbers.Int8.html#VALone", "", "", "<code class=\"type\"><a href=\"Numbers.Int8.html#TYPEt\">t</a></code>", "Numbers.Int8.t"],
["Targetint", "Targetint.html", "one", "Targetint.html#VALone", "<div class=\"info\"> <p>The target integer 1.</p> </div>", "The target integer 1.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "offer", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALoffer", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEtoken\">token</a> *<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.html#TYPEposition\">CamlinternalMenhirLib.IncrementalEngine.position</a> *<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.html#TYPEposition\">CamlinternalMenhirLib.IncrementalEngine.position</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a></code>", "'a checkpoint ->       token *       CamlinternalMenhirLib.IncrementalEngine.position *       CamlinternalMenhirLib.IncrementalEngine.position ->       'a checkpoint"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "of_string", "Clflags.Compiler_pass.html#VALof_string", "", "", "<code class=\"type\">string -&gt; <a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> option</code>", "string -> Clflags.Compiler_pass.t option"],
["Targetint", "Targetint.html", "of_string", "Targetint.html#VALof_string", "<div class=\"info\"> <p>Convert the given string to a target integer.</p> </div>", "Convert the given string to a target integer.", "<code class=\"type\">string -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "string -> Targetint.t"],
["Identifiable.Map", "Identifiable.Map.html", "of_set", "Identifiable.Map.html#VALof_set", "", "", "<code class=\"type\">(key -&gt; 'a) -&gt; Stdlib.Set.Make(T).t -&gt; 'a t</code>", "(key -> 'a) -> Stdlib.Set.Make(T).Identifiable.Map.t -> 'a Identifiable.Map.t"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "of_map", "Identifiable.Tbl.html#VALof_map", "", "", "<code class=\"type\">'a Stdlib.Map.Make(T).t -&gt; 'a t</code>", "'a Stdlib.Map.Make(T).Identifiable.Tbl.t -> 'a Identifiable.Tbl.t"],
["Identifiable.Set", "Identifiable.Set.html", "of_list", "Identifiable.Set.html#VALof_list", "", "", "<code class=\"type\">elt list -&gt; t</code>", "elt list -> Identifiable.Set.t"],
["Identifiable.Map", "Identifiable.Map.html", "of_list", "Identifiable.Map.html#VALof_list", "", "", "<code class=\"type\">(key * 'a) list -&gt; 'a t</code>", "(key * 'a) list -> 'a Identifiable.Map.t"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "of_list", "Identifiable.Tbl.html#VALof_list", "", "", "<code class=\"type\">(<a href=\"Identifiable.Tbl.T.html#TYPEt\">T.t</a> * 'a) list -&gt; 'a t</code>", "(T.Identifiable.Tbl.t * 'a) list -> 'a Identifiable.Tbl.t"],
["Numbers.Int8", "Numbers.Int8.html", "of_int_exn", "Numbers.Int8.html#VALof_int_exn", "", "", "<code class=\"type\">int -&gt; <a href=\"Numbers.Int8.html#TYPEt\">t</a></code>", "int -> Numbers.Int8.t"],
["Numbers.Int16", "Numbers.Int16.html", "of_int_exn", "Numbers.Int16.html#VALof_int_exn", "", "", "<code class=\"type\">int -&gt; <a href=\"Numbers.Int16.html#TYPEt\">t</a></code>", "int -> Numbers.Int16.t"],
["Targetint", "Targetint.html", "of_int_exn", "Targetint.html#VALof_int_exn", "<div class=\"info\"> <p>Convert the given integer (type <code class=\"code\">int</code>) to a target integer (type <code class=\"code\">t</code>).</p> </div>", "Convert the given integer (type int) to a target integer (type t).", "<code class=\"type\">int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int -> Targetint.t"],
["Numbers.Int16", "Numbers.Int16.html", "of_int64_exn", "Numbers.Int16.html#VALof_int64_exn", "", "", "<code class=\"type\">Int64.t -&gt; <a href=\"Numbers.Int16.html#TYPEt\">t</a></code>", "Int64.Numbers.Int16.t -> Numbers.Int16.t"],
["Targetint", "Targetint.html", "of_int64", "Targetint.html#VALof_int64", "<div class=\"info\"> <p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a target integer.</p> </div>", "Convert the given 64-bit integer (type int64) to a target integer.", "<code class=\"type\">int64 -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int64 -> Targetint.t"],
["Targetint", "Targetint.html", "of_int32", "Targetint.html#VALof_int32", "<div class=\"info\"> <p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to a target integer.</p> </div>", "Convert the given 32-bit integer (type int32) to a target integer.", "<code class=\"type\">int32 -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int32 -> Targetint.t"],
["Targetint", "Targetint.html", "of_int", "Targetint.html#VALof_int", "<div class=\"info\"> <p>Convert the given integer (type <code class=\"code\">int</code>) to a target integer (type <code class=\"code\">t</code>), module the target word size.</p> </div>", "Convert the given integer (type int) to a target integer (type t), module the target word size.", "<code class=\"type\">int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int -> Targetint.t"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "of_input_filename", "Clflags.Compiler_pass.html#VALof_input_filename", "", "", "<code class=\"type\">string -&gt; <a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> option</code>", "string -> Clflags.Compiler_pass.t option"],
["Targetint", "Targetint.html", "of_float", "Targetint.html#VALof_float", "<div class=\"info\"> <p>Convert the given floating-point number to a target integer, discarding the fractional part (truncate towards 0).</p> </div>", "Convert the given floating-point number to a target integer, discarding the fractional part (truncate towards 0).", "<code class=\"type\">float -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "float -> Targetint.t"],
["Config_boot", "Config_boot.html", "ocamlopt_cppflags", "Config_boot.html#VALocamlopt_cppflags", "<div class=\"info\"> <span class=\"deprecated\"></span></div>", "", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ocamlopt_cppflags", "Config_main.html#VALocamlopt_cppflags", "<div class=\"info\"> <span class=\"deprecated\"></span></div>", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ocamlopt_cppflags", "Config.html#VALocamlopt_cppflags", "<div class=\"info\"> <span class=\"deprecated\"></span></div>", "", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ocamlopt_cflags", "Config_boot.html#VALocamlopt_cflags", "<div class=\"info\"> <span class=\"deprecated\"></span></div>", "", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ocamlopt_cflags", "Config_main.html#VALocamlopt_cflags", "<div class=\"info\"> <span class=\"deprecated\"></span></div>", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ocamlopt_cflags", "Config.html#VALocamlopt_cflags", "<div class=\"info\"> <span class=\"deprecated\"></span></div>", "", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ocamlc_cppflags", "Config_boot.html#VALocamlc_cppflags", "<div class=\"info\"> <p>The flags ocamlc should pass to the C preprocessor</p> </div>", "The flags ocamlc should pass to the C preprocessor", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ocamlc_cppflags", "Config_main.html#VALocamlc_cppflags", "<div class=\"info\"> <p>The flags ocamlc should pass to the C preprocessor</p> </div>", "The flags ocamlc should pass to the C preprocessor", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ocamlc_cppflags", "Config.html#VALocamlc_cppflags", "<div class=\"info\"> <p>The flags ocamlc should pass to the C preprocessor</p> </div>", "The flags ocamlc should pass to the C preprocessor", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ocamlc_cflags", "Config_boot.html#VALocamlc_cflags", "<div class=\"info\"> <p>The flags ocamlc should pass to the C compiler</p> </div>", "The flags ocamlc should pass to the C compiler", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ocamlc_cflags", "Config_main.html#VALocamlc_cflags", "<div class=\"info\"> <p>The flags ocamlc should pass to the C compiler</p> </div>", "The flags ocamlc should pass to the C compiler", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ocamlc_cflags", "Config.html#VALocamlc_cflags", "<div class=\"info\"> <p>The flags ocamlc should pass to the C compiler</p> </div>", "The flags ocamlc should pass to the C compiler", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "objfiles", "Clflags.html#VALobjfiles", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "object_", "Ast_helper.Typ.html#VALobject_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEobject_field\">Parsetree.object_field</a> list -&gt; <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.object_field list -> Asttypes.closed_flag -> Parsetree.core_type"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "object_", "Ast_helper.Exp.html#VALobject_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_structure -> Parsetree.expression"],
["Clflags", "Clflags.html", "o3_arguments", "Clflags.html#VALo3_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["Clflags", "Clflags.html", "o2_arguments", "Clflags.html#VALo2_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["Clflags", "Clflags.html", "o1_arguments", "Clflags.html#VALo1_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "number", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALnumber", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPElr1state\">lr1state</a> -&gt; int</code>", "'a lr1state -> int"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "number", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALnumber", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt; int</code>", "state -> int"],
["Terminfo", "Terminfo.html", "num_lines", "Terminfo.html#VALnum_lines", "", "", "<code class=\"type\">out_channel -&gt; int</code>", "out_channel -> int"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "nullable", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALnullable", "", "", "<code class=\"type\">'a nonterminal -&gt; bool</code>", "'a nonterminal -> bool"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "nullable", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALnullable", "", "", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "noversion", "Clflags.html#VALnoversion", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Misc", "Misc.html", "normalise_eol", "Misc.html#VALnormalise_eol", "<div class=\"info\"> <p><code class=\"code\">normalise_eol&nbsp;s</code> returns a fresh copy of <code class=\"code\">s</code> with any '\\r' characters removed.</p> </div>", "normalise_eol\194\160s returns a fresh copy of s with any '\\r' characters removed.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Clflags", "Clflags.html", "nopromptcont", "Clflags.html#VALnopromptcont", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "noprompt", "Clflags.html#VALnoprompt", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "nopervasives", "Clflags.html#VALnopervasives", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "nonterminal", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALnonterminal", "", "", "<code class=\"type\">int -&gt; xsymbol</code>", "int -> xsymbol"],
["Location", "Location.html", "none", "Location.html#VALnone", "<div class=\"info\"> <p>An arbitrary value of type <code class=\"code\">t</code>; describes an empty ghost range.</p> </div>", "An arbitrary value of type t; describes an empty ghost range.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a></code>", "Location.t"],
["Clflags", "Clflags.html", "noinit", "Clflags.html#VALnoinit", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "noassert", "Clflags.html#VALnoassert", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "no_std_include", "Clflags.html#VALno_std_include", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Misc", "Misc.html", "no_overflow_sub", "Misc.html#VALno_overflow_sub", "<div class=\"info\"> <p><code class=\"code\">no_overflow_sub&nbsp;n1&nbsp;n2</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the computation of <code class=\"code\">n1&nbsp;-&nbsp;n2</code> does not overflow.</p> </div>", "no_overflow_sub\194\160n1\194\160n2 returns true if the computation of n1\194\160-\194\160n2 does not overflow.", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Misc", "Misc.html", "no_overflow_mul", "Misc.html#VALno_overflow_mul", "<div class=\"info\"> <p><code class=\"code\">no_overflow_mul&nbsp;n1&nbsp;n2</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the computation of <code class=\"code\">n1&nbsp;*&nbsp;n2</code> does not overflow.</p> </div>", "no_overflow_mul\194\160n1\194\160n2 returns true if the computation of n1\194\160*\194\160n2 does not overflow.", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Misc", "Misc.html", "no_overflow_lsl", "Misc.html#VALno_overflow_lsl", "<div class=\"info\"> <p><code class=\"code\">no_overflow_lsl&nbsp;n&nbsp;k</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the computation of <code class=\"code\">n&nbsp;<span class=\"keyword\">lsl</span>&nbsp;k</code> does not overflow.</p> </div>", "no_overflow_lsl\194\160n\194\160k returns true if the computation of n\194\160lsl\194\160k does not overflow.", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Misc", "Misc.html", "no_overflow_add", "Misc.html#VALno_overflow_add", "<div class=\"info\"> <p><code class=\"code\">no_overflow_add&nbsp;n1&nbsp;n2</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the computation of <code class=\"code\">n1&nbsp;+&nbsp;n2</code> does not overflow.</p> </div>", "no_overflow_add\194\160n1\194\160n2 returns true if the computation of n1\194\160+\194\160n2 does not overflow.", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Clflags", "Clflags.html", "no_cwd", "Clflags.html#VALno_cwd", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "no_check_prims", "Clflags.html#VALno_check_prims", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "no_auto_link", "Clflags.html#VALno_auto_link", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Load_path", "Load_path.html", "no_auto_include", "Load_path.html#VALno_auto_include", "<div class=\"info\"> <p>No automatic directory inclusion: misses in the load path raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> as normal.</p> </div>", "No automatic directory inclusion: misses in the load path raise Not_found as normal.", "<code class=\"type\"><a href=\"Load_path.html#TYPEauto_include_callback\">auto_include_callback</a></code>", "auto_include_callback"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "newtype", "Ast_helper.Exp.html#VALnewtype", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str -> Parsetree.expression -> Parsetree.expression"],
["CamlinternalMenhirLib.LexerUtil", "CamlinternalMenhirLib.LexerUtil.html", "newline", "CamlinternalMenhirLib.LexerUtil.html#VALnewline", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; unit</code>", "Lexing.lexbuf -> unit"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "new_", "Ast_helper.Exp.html#VALnew_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.expression"],
["Targetint", "Targetint.html", "neg", "Targetint.html#VALneg", "<div class=\"info\"> <p>Unary negation.</p> </div>", "Unary negation.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t"],
["Ast_helper.Const", "Ast_helper.Const.html", "nativeint", "Ast_helper.Const.html#VALnativeint", "", "", "<code class=\"type\">?suffix:char -&gt; nativeint -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> nativeint -> Parsetree.constant"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "nativeint", "Misc.Int_literal_converter.html#VALnativeint", "<div class=\"info\"> <p>Likewise, at type <code class=\"code\">nativeint</code></p> </div>", "Likewise, at type nativeint", "<code class=\"type\">string -&gt; nativeint</code>", "string -> nativeint"],
["Config_boot", "Config_boot.html", "native_pack_linker", "Config_boot.html#VALnative_pack_linker", "<div class=\"info\"> <p>The linker to use for packaging (ocamlopt -pack) and for partial links (ocamlopt -output-obj).</p> </div>", "The linker to use for packaging (ocamlopt -pack) and for partial links (ocamlopt -output-obj).", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "native_pack_linker", "Config_main.html#VALnative_pack_linker", "<div class=\"info\"> <p>The linker to use for packaging (ocamlopt -pack) and for partial links (ocamlopt -output-obj).</p> </div>", "The linker to use for packaging (ocamlopt -pack) and for partial links (ocamlopt -output-obj).", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "native_pack_linker", "Config.html#VALnative_pack_linker", "<div class=\"info\"> <p>The linker to use for packaging (ocamlopt -pack) and for partial links (ocamlopt -output-obj).</p> </div>", "The linker to use for packaging (ocamlopt -pack) and for partial links (ocamlopt -output-obj).", "<code class=\"type\">string</code>", "string"],
["Misc.Magic_number", "Misc.Magic_number.html", "native_obj_config", "Misc.Magic_number.html#VALnative_obj_config", "<div class=\"info\"> <p>the native object file configuration of the active/configured compiler.</p> </div>", "the native object file configuration of the active/configured compiler.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEnative_obj_config\">native_obj_config</a></code>", "native_obj_config"],
["Config_boot", "Config_boot.html", "native_dynlink", "Config_boot.html#VALnative_dynlink", "<div class=\"info\"> <p>Whether native shared libraries are supported</p> </div>", "Whether native shared libraries are supported", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "native_dynlink", "Config_main.html#VALnative_dynlink", "<div class=\"info\"> <p>Whether native shared libraries are supported</p> </div>", "Whether native shared libraries are supported", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "native_dynlink", "Config.html#VALnative_dynlink", "<div class=\"info\"> <p>Whether native shared libraries are supported</p> </div>", "Whether native shared libraries are supported", "<code class=\"type\">bool</code>", "bool"],
["Config_boot", "Config_boot.html", "native_compiler", "Config_boot.html#VALnative_compiler", "<div class=\"info\"> <p>Whether the native compiler is available or not</p> </div>", "Whether the native compiler is available or not", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "native_compiler", "Config_main.html#VALnative_compiler", "<div class=\"info\"> <p>Whether the native compiler is available or not</p> </div>", "Whether the native compiler is available or not", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "native_compiler", "Config.html#VALnative_compiler", "<div class=\"info\"> <p>Whether the native compiler is available or not</p> </div>", "Whether the native compiler is available or not", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "native_code", "Clflags.html#VALnative_code", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Config_boot", "Config_boot.html", "native_c_libraries", "Config_boot.html#VALnative_c_libraries", "<div class=\"info\"> <p>The C libraries to link with native-code programs</p> </div>", "The C libraries to link with native-code programs", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "native_c_libraries", "Config_main.html#VALnative_c_libraries", "<div class=\"info\"> <p>The C libraries to link with native-code programs</p> </div>", "The C libraries to link with native-code programs", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "native_c_libraries", "Config.html#VALnative_c_libraries", "<div class=\"info\"> <p>The C libraries to link with native-code programs</p> </div>", "The C libraries to link with native-code programs", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "naked_pointers", "Config_boot.html#VALnaked_pointers", "<div class=\"info\"> <p>Whether the runtime supports naked pointers</p> </div>", "Whether the runtime supports naked pointers", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "naked_pointers", "Config_main.html#VALnaked_pointers", "<div class=\"info\"> <p>Whether the runtime supports naked pointers</p> </div>", "Whether the runtime supports naked pointers", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "naked_pointers", "Config.html#VALnaked_pointers", "<div class=\"info\"> <p>Whether the runtime supports naked pointers</p> </div>", "Whether the runtime supports naked pointers", "<code class=\"type\">bool</code>", "bool"],
["Targetint", "Targetint.html", "mul", "Targetint.html#VALmul", "<div class=\"info\"> <p>Multiplication.</p> </div>", "Multiplication.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Location", "Location.html", "msg", "Location.html#VALmsg", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ('a, Format.formatter, unit, <a href=\"Location.html#TYPEmsg\">msg</a>) format4 -&gt; 'a</code>", "?loc:Location.t ->       ('a, Format.formatter, unit, msg) format4 -> 'a"],
["Parse", "Parse.html", "module_type", "Parse.html#VALmodule_type", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "Lexing.lexbuf -> Parsetree.module_type"],
["Pprintast", "Pprintast.html", "module_type", "Pprintast.html#VALmodule_type", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; unit</code>", "Format.formatter -> Parsetree.module_type -> unit"],
["Parse", "Parse.html", "module_expr", "Parse.html#VALmodule_expr", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "Lexing.lexbuf -> Parsetree.module_expr"],
["Pprintast", "Pprintast.html", "module_expr", "Pprintast.html#VALmodule_expr", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; unit</code>", "Format.formatter -> Parsetree.module_expr -> unit"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "module_", "Ast_helper.Sig.html#VALmodule_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_declaration -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "module_", "Ast_helper.Str.html#VALmodule_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.module_binding -> Parsetree.structure_item"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "modtype_subst", "Ast_helper.Sig.html#VALmodtype_subst", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_type_declaration -> Parsetree.signature_item"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "modtype", "Ast_helper.Sig.html#VALmodtype", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_type_declaration -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "modtype", "Ast_helper.Str.html#VALmodtype", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_type_declaration -> Parsetree.structure_item"],
["Config_boot", "Config_boot.html", "model", "Config_boot.html#VALmodel", "<div class=\"info\"> <p>Name of processor submodel for the native-code compiler</p> </div>", "Name of processor submodel for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "model", "Config_main.html#VALmodel", "<div class=\"info\"> <p>Name of processor submodel for the native-code compiler</p> </div>", "Name of processor submodel for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "model", "Config.html#VALmodel", "<div class=\"info\"> <p>Name of processor submodel for the native-code compiler</p> </div>", "Name of processor submodel for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "mod_subst", "Ast_helper.Sig.html#VALmod_subst", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_substitution\">Parsetree.module_substitution</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_substitution -> Parsetree.signature_item"],
["Config_boot", "Config_boot.html", "mksharedlibrpath", "Config_boot.html#VALmksharedlibrpath", "<div class=\"info\"> <p>Option to add a directory to be searched for shared libraries at runtime (used by ocamlmklib)</p> </div>", "Option to add a directory to be searched for shared libraries at runtime (used by ocamlmklib)", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "mksharedlibrpath", "Config_main.html#VALmksharedlibrpath", "<div class=\"info\"> <p>Option to add a directory to be searched for shared libraries at runtime (used by ocamlmklib)</p> </div>", "Option to add a directory to be searched for shared libraries at runtime (used by ocamlmklib)", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "mksharedlibrpath", "Config.html#VALmksharedlibrpath", "<div class=\"info\"> <p>Option to add a directory to be searched for shared libraries at runtime (used by ocamlmklib)</p> </div>", "Option to add a directory to be searched for shared libraries at runtime (used by ocamlmklib)", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "mknoloc", "Location.html#VALmknoloc", "", "", "<code class=\"type\">'a -&gt; 'a <a href=\"Location.html#TYPEloc\">loc</a></code>", "'a -> 'a loc"],
["Config_boot", "Config_boot.html", "mkmaindll", "Config_boot.html#VALmkmaindll", "<div class=\"info\"> <p>The linker command line to build main programs as dlls.</p> </div>", "The linker command line to build main programs as dlls.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "mkmaindll", "Config_main.html#VALmkmaindll", "<div class=\"info\"> <p>The linker command line to build main programs as dlls.</p> </div>", "The linker command line to build main programs as dlls.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "mkmaindll", "Config.html#VALmkmaindll", "<div class=\"info\"> <p>The linker command line to build main programs as dlls.</p> </div>", "The linker command line to build main programs as dlls.", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "mkloc", "Location.html#VALmkloc", "", "", "<code class=\"type\">'a -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; 'a <a href=\"Location.html#TYPEloc\">loc</a></code>", "'a -> Location.t -> 'a loc"],
["Config_boot", "Config_boot.html", "mkexe", "Config_boot.html#VALmkexe", "<div class=\"info\"> <p>The linker command line to build executables.</p> </div>", "The linker command line to build executables.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "mkexe", "Config_main.html#VALmkexe", "<div class=\"info\"> <p>The linker command line to build executables.</p> </div>", "The linker command line to build executables.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "mkexe", "Config.html#VALmkexe", "<div class=\"info\"> <p>The linker command line to build executables.</p> </div>", "The linker command line to build executables.", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "mkdll", "Config_boot.html#VALmkdll", "<div class=\"info\"> <p>The linker command line to build dynamic libraries.</p> </div>", "The linker command line to build dynamic libraries.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "mkdll", "Config_main.html#VALmkdll", "<div class=\"info\"> <p>The linker command line to build dynamic libraries.</p> </div>", "The linker command line to build dynamic libraries.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "mkdll", "Config.html#VALmkdll", "<div class=\"info\"> <p>The linker command line to build dynamic libraries.</p> </div>", "The linker command line to build dynamic libraries.", "<code class=\"type\">string</code>", "string"],
["Warnings", "Warnings.html", "mk_lazy", "Warnings.html#VALmk_lazy", "<div class=\"info\"> <p>Like <code class=\"code\"><span class=\"constructor\">Lazy</span>.of_fun</code>, but the function is applied with the warning/alert settings at the time <code class=\"code\">mk_lazy</code> is called.</p> </div>", "Like Lazy.of_fun, but the function is applied with the warning/alert settings at the time mk_lazy is called.", "<code class=\"type\">(unit -&gt; 'a) -&gt; 'a Lazy.t</code>", "(unit -> 'a) -> 'a Lazy.Warnings.t"],
["Ast_helper.Te", "Ast_helper.Te.html", "mk_exception", "Ast_helper.Te.html#VALmk_exception", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> -&gt; <a href=\"Parsetree.html#TYPEtype_exception\">Parsetree.type_exception</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       Parsetree.extension_constructor -> Parsetree.type_exception"],
["Ast_helper.Attr", "Ast_helper.Attr.html", "mk", "Ast_helper.Attr.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEpayload\">Parsetree.payload</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "?loc:Ast_helper.loc ->       Ast_helper.str -> Parsetree.payload -> Parsetree.attribute"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "mk", "Ast_helper.Typ.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type_desc\">Parsetree.core_type_desc</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.core_type_desc -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "mk", "Ast_helper.Pat.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern_desc\">Parsetree.pattern_desc</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern_desc -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "mk", "Ast_helper.Exp.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression_desc\">Parsetree.expression_desc</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression_desc -> Parsetree.expression"],
["Ast_helper.Val", "Ast_helper.Val.html", "mk", "Ast_helper.Val.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?prim:string list -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?prim:string list ->       Ast_helper.str -> Parsetree.core_type -> Parsetree.value_description"],
["Ast_helper.Type", "Ast_helper.Type.html", "mk", "Ast_helper.Type.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       ?params:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * (<a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a> * <a href=\"Asttypes.html#TYPEinjectivity\">Asttypes.injectivity</a>))<br>               list -&gt;<br>       ?cstrs:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * <a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a>) list -&gt;<br>       ?kind:<a href=\"Parsetree.html#TYPEtype_kind\">Parsetree.type_kind</a> -&gt;<br>       ?priv:<a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt;<br>       ?manifest:<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       ?params:(Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))               list ->       ?cstrs:(Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list ->       ?kind:Parsetree.type_kind ->       ?priv:Asttypes.private_flag ->       ?manifest:Parsetree.core_type -> Ast_helper.str -> Parsetree.type_declaration"],
["Ast_helper.Te", "Ast_helper.Te.html", "mk", "Ast_helper.Te.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?params:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * (<a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a> * <a href=\"Asttypes.html#TYPEinjectivity\">Asttypes.injectivity</a>))<br>               list -&gt;<br>       ?priv:<a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> list -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?params:(Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))               list ->       ?priv:Asttypes.private_flag ->       Ast_helper.lid ->       Parsetree.extension_constructor list -> Parsetree.type_extension"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "mk", "Ast_helper.Mty.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_desc\">Parsetree.module_type_desc</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_type_desc -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "mk", "Ast_helper.Mod.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr_desc\">Parsetree.module_expr_desc</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_expr_desc -> Parsetree.module_expr"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "mk", "Ast_helper.Sig.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEsignature_item_desc\">Parsetree.signature_item_desc</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.signature_item_desc -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "mk", "Ast_helper.Str.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEstructure_item_desc\">Parsetree.structure_item_desc</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.structure_item_desc -> Parsetree.structure_item"],
["Ast_helper.Md", "Ast_helper.Md.html", "mk", "Ast_helper.Md.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr_opt\">Ast_helper.str_opt</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       Ast_helper.str_opt -> Parsetree.module_type -> Parsetree.module_declaration"],
["Ast_helper.Ms", "Ast_helper.Ms.html", "mk", "Ast_helper.Ms.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_substitution\">Parsetree.module_substitution</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       Ast_helper.str -> Ast_helper.lid -> Parsetree.module_substitution"],
["Ast_helper.Mtd", "Ast_helper.Mtd.html", "mk", "Ast_helper.Mtd.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       ?typ:<a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       ?typ:Parsetree.module_type ->       Ast_helper.str -> Parsetree.module_type_declaration"],
["Ast_helper.Mb", "Ast_helper.Mb.html", "mk", "Ast_helper.Mb.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr_opt\">Ast_helper.str_opt</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       Ast_helper.str_opt -> Parsetree.module_expr -> Parsetree.module_binding"],
["Ast_helper.Opn", "Ast_helper.Opn.html", "mk", "Ast_helper.Opn.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?override:<a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt; 'a -&gt; 'a <a href=\"Parsetree.html#TYPEopen_infos\">Parsetree.open_infos</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?override:Asttypes.override_flag -> 'a -> 'a Parsetree.open_infos"],
["Ast_helper.Incl", "Ast_helper.Incl.html", "mk", "Ast_helper.Incl.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt; 'a -&gt; 'a <a href=\"Parsetree.html#TYPEinclude_infos\">Parsetree.include_infos</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs -> 'a -> 'a Parsetree.include_infos"],
["Ast_helper.Vb", "Ast_helper.Vb.html", "mk", "Ast_helper.Vb.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       ?value_constraint:<a href=\"Parsetree.html#TYPEvalue_constraint\">Parsetree.value_constraint</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       ?value_constraint:Parsetree.value_constraint ->       Parsetree.pattern -> Parsetree.expression -> Parsetree.value_binding"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "mk", "Ast_helper.Cty.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_desc\">Parsetree.class_type_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_type_desc -> Parsetree.class_type"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "mk", "Ast_helper.Ctf.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_field_desc\">Parsetree.class_type_field_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       Parsetree.class_type_field_desc -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "mk", "Ast_helper.Cl.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr_desc\">Parsetree.class_expr_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_expr_desc -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "mk", "Ast_helper.Cf.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_desc\">Parsetree.class_field_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs -> Parsetree.class_field_desc -> Parsetree.class_field"],
["Ast_helper.Ci", "Ast_helper.Ci.html", "mk", "Ast_helper.Ci.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       ?virt:<a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> -&gt;<br>       ?params:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * (<a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a> * <a href=\"Asttypes.html#TYPEinjectivity\">Asttypes.injectivity</a>))<br>               list -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; 'a -&gt; 'a <a href=\"Parsetree.html#TYPEclass_infos\">Parsetree.class_infos</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       ?virt:Asttypes.virtual_flag ->       ?params:(Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))               list ->       Ast_helper.str -> 'a -> 'a Parsetree.class_infos"],
["Ast_helper.Csig", "Ast_helper.Csig.html", "mk", "Ast_helper.Csig.html#VALmk", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_signature\">Parsetree.class_signature</a></code>", "Parsetree.core_type ->       Parsetree.class_type_field list -> Parsetree.class_signature"],
["Ast_helper.Cstr", "Ast_helper.Cstr.html", "mk", "Ast_helper.Cstr.html#VALmk", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a></code>", "Parsetree.pattern -> Parsetree.class_field list -> Parsetree.class_structure"],
["Ast_helper.Rf", "Ast_helper.Rf.html", "mk", "Ast_helper.Rf.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPErow_field_desc\">Parsetree.row_field_desc</a> -&gt; <a href=\"Parsetree.html#TYPErow_field\">Parsetree.row_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.row_field_desc -> Parsetree.row_field"],
["Ast_helper.Of", "Ast_helper.Of.html", "mk", "Ast_helper.Of.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEobject_field_desc\">Parsetree.object_field_desc</a> -&gt; <a href=\"Parsetree.html#TYPEobject_field\">Parsetree.object_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.object_field_desc -> Parsetree.object_field"],
["Targetint", "Targetint.html", "minus_one", "Targetint.html#VALminus_one", "<div class=\"info\"> <p>The target integer -1.</p> </div>", "The target integer -1.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t"],
["Targetint", "Targetint.html", "min_int", "Targetint.html#VALmin_int", "<div class=\"info\"> <p>The smallest representable target integer, either -2<sup class=\"superscript\">31</sup> on a 32-bit platform, or -2<sup class=\"superscript\">63</sup> on a 64-bit platform.</p> </div>", "The smallest representable target integer, either -231 on a 32-bit platform, or -263 on a 64-bit platform.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "method_", "Ast_helper.Ctf.html#VALmethod_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.private_flag ->       Asttypes.virtual_flag -> Parsetree.core_type -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "method_", "Ast_helper.Cf.html#VALmethod_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.private_flag -> Parsetree.class_field_kind -> Parsetree.class_field"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "memoize", "Identifiable.Tbl.html#VALmemoize", "", "", "<code class=\"type\">'a t -&gt; (key -&gt; 'a) -&gt; key -&gt; 'a</code>", "'a Identifiable.Tbl.t -> (key -> 'a) -> key -> 'a"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "maybe_goto_nt", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALmaybe_goto_nt", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEnonterminal\">nonterminal</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> option</code>", "state ->       nonterminal ->       state option"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "may_reduce", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALmay_reduce", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a> -&gt; bool</code>", "state ->       production -> bool"],
["Config_boot", "Config_boot.html", "max_young_wosize", "Config_boot.html#VALmax_young_wosize", "<div class=\"info\"> <p>Maximal size of arrays that are directly allocated in the minor heap</p> </div>", "Maximal size of arrays that are directly allocated in the minor heap", "<code class=\"type\">int</code>", "int"],
["Config_main", "Config_main.html", "max_young_wosize", "Config_main.html#VALmax_young_wosize", "<div class=\"info\"> <p>Maximal size of arrays that are directly allocated in the minor heap</p> </div>", "Maximal size of arrays that are directly allocated in the minor heap", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "max_young_wosize", "Config.html#VALmax_young_wosize", "<div class=\"info\"> <p>Maximal size of arrays that are directly allocated in the minor heap</p> </div>", "Maximal size of arrays that are directly allocated in the minor heap", "<code class=\"type\">int</code>", "int"],
["Config_boot", "Config_boot.html", "max_tag", "Config_boot.html#VALmax_tag", "<div class=\"info\"> <p>Biggest tag that can be stored in the header of a regular block.</p> </div>", "Biggest tag that can be stored in the header of a regular block.", "<code class=\"type\">int</code>", "int"],
["Config_main", "Config_main.html", "max_tag", "Config_main.html#VALmax_tag", "<div class=\"info\"> <p>Biggest tag that can be stored in the header of a regular block.</p> </div>", "Biggest tag that can be stored in the header of a regular block.", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "max_tag", "Config.html#VALmax_tag", "<div class=\"info\"> <p>Biggest tag that can be stored in the header of a regular block.</p> </div>", "Biggest tag that can be stored in the header of a regular block.", "<code class=\"type\">int</code>", "int"],
["Targetint", "Targetint.html", "max_int", "Targetint.html#VALmax_int", "<div class=\"info\"> <p>The greatest representable target integer, either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform, or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform.</p> </div>", "The greatest representable target integer, either 231 - 1 on a 32-bit platform, or 263 - 1 on a 64-bit platform.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t"],
["Clflags", "Clflags.html", "match_context_rows", "Clflags.html#VALmatch_context_rows", "", "", "<code class=\"type\">int ref</code>", "int ref"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "match_", "Ast_helper.Exp.html#VALmatch_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.case list -> Parsetree.expression"],
["Docstrings", "Docstrings.html", "mark_symbol_docs", "Docstrings.html#VALmark_symbol_docs", "<div class=\"info\"> <p>Mark the item documentation for the current symbol (for ambiguity warnings).</p> </div>", "Mark the item documentation for the current symbol (for ambiguity warnings).", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "mark_symbol_docs", "Docstrings.WithMenhir.html#VALmark_symbol_docs", "<div class=\"info\"> <p>Mark the item documentation for the current symbol (for ambiguity warnings).</p> </div>", "Mark the item documentation for the current symbol (for ambiguity warnings).", "<code class=\"type\">Lexing.position * Lexing.position -&gt; unit</code>", "Lexing.position * Lexing.position -> unit"],
["Docstrings", "Docstrings.html", "mark_rhs_docs", "Docstrings.html#VALmark_rhs_docs", "<div class=\"info\"> <p>Mark as associated the item documentation for the symbols between two positions (for ambiguity warnings)</p> </div>", "Mark as associated the item documentation for the symbols between two positions (for ambiguity warnings)", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Docstrings.WithMenhir", "Docstrings.WithMenhir.html", "mark_rhs_docs", "Docstrings.WithMenhir.html#VALmark_rhs_docs", "<div class=\"info\"> <p>Mark as associated the item documentation for the symbols between two positions (for ambiguity warnings)</p> </div>", "Mark as associated the item documentation for the symbols between two positions (for ambiguity warnings)", "<code class=\"type\">Lexing.position -&gt; Lexing.position -&gt; unit</code>", "Lexing.position -> Lexing.position -> unit"],
["Ast_mapper", "Ast_mapper.html", "map_opt", "Ast_mapper.html#VALmap_opt", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a option -&gt; 'b option</code>", "('a -> 'b) -> 'a option -> 'b option"],
["Misc", "Misc.html", "map_left_right", "Misc.html#VALmap_left_right", "<div class=\"info\"> <p>Like <code class=\"code\"><span class=\"constructor\">List</span>.map</code>, with guaranteed left-to-right evaluation order</p> </div>", "Like List.map, with guaranteed left-to-right evaluation order", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "('a -> 'b) -> 'a list -> 'b list"],
["Identifiable.Map", "Identifiable.Map.html", "map_keys", "Identifiable.Map.html#VALmap_keys", "", "", "<code class=\"type\">(key -&gt; key) -&gt; 'a t -&gt; 'a t</code>", "(key -> key) -> 'a Identifiable.Map.t -> 'a Identifiable.Map.t"],
["Misc", "Misc.html", "map_end", "Misc.html#VALmap_end", "<div class=\"info\"> <p><code class=\"code\">map_end&nbsp;f&nbsp;l&nbsp;t</code> is <code class=\"code\">map&nbsp;f&nbsp;l&nbsp;@&nbsp;t</code>, just more efficient.</p> </div>", "map_end\194\160f\194\160l\194\160t is map\194\160f\194\160l\194\160@\194\160t, just more efficient.", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a list -&gt; 'b list -&gt; 'b list</code>", "('a -> 'b) -> 'a list -> 'b list -> 'b list"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "map2_prefix", "Misc.Stdlib.List.html#VALmap2_prefix", "<div class=\"info\"> <p><code class=\"code\"><span class=\"keyword\">let</span>&nbsp;r1,&nbsp;r2&nbsp;=&nbsp;map2_prefix&nbsp;f&nbsp;l1&nbsp;l2</code> If <code class=\"code\">l1</code> is of length n and <code class=\"code\">l2&nbsp;=&nbsp;h2&nbsp;@&nbsp;t2</code> with h2 of length n, r1 is <code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;l1&nbsp;h1</code> and r2 is t2.</p> </div>", "let\194\160r1,\194\160r2\194\160=\194\160map2_prefix\194\160f\194\160l1\194\160l2 If l1 is of length n and l2\194\160=\194\160h2\194\160@\194\160t2 with h2 of length n, r1 is List.map2\194\160f\194\160l1\194\160h1 and r2 is t2.", "<code class=\"type\">('a -&gt; 'b -&gt; 'c) -&gt;<br>       'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt;<br>       'b <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'c <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> * 'b <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a></code>", "('a -> 'b -> 'c) ->       'a Misc.Stdlib.List.t ->       'b Misc.Stdlib.List.t -> 'c Misc.Stdlib.List.t * 'b Misc.Stdlib.List.t"],
["Identifiable.Set", "Identifiable.Set.html", "map", "Identifiable.Set.html#VALmap", "", "", "<code class=\"type\">(elt -&gt; elt) -&gt; t -&gt; t</code>", "(elt -> elt) -> Identifiable.Set.t -> Identifiable.Set.t"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "map", "Identifiable.Tbl.html#VALmap", "", "", "<code class=\"type\">'a t -&gt; ('a -&gt; 'b) -&gt; 'b t</code>", "'a Identifiable.Tbl.t -> ('a -> 'b) -> 'b Identifiable.Tbl.t"],
["Clflags", "Clflags.html", "make_runtime", "Clflags.html#VALmake_runtime", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "make_package", "Clflags.html#VALmake_package", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Depend", "Depend.html", "make_node", "Depend.html#VALmake_node", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a></code>", "bound_map -> map_tree"],
["Depend", "Depend.html", "make_leaf", "Depend.html#VALmake_leaf", "", "", "<code class=\"type\">string -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a></code>", "string -> map_tree"],
["Clflags", "Clflags.html", "make_archive", "Clflags.html#VALmake_archive", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.InfiniteArray", "CamlinternalMenhirLib.InfiniteArray.html", "make", "CamlinternalMenhirLib.InfiniteArray.html#VALmake", "<div class=\"info\"> <p><code class=\"code\">make&nbsp;x</code> creates an infinite array, where every slot contains <code class=\"code\">x</code>.</p> </div>", "make\194\160x creates an infinite array, where every slot contains x.", "<code class=\"type\">'a -&gt; 'a <a href=\"CamlinternalMenhirLib.InfiniteArray.html#TYPEt\">t</a></code>", "'a -> 'a CamlinternalMenhirLib.InfiniteArray.t"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "make", "CamlinternalMenhirLib.LinearizedArray.html#VALmake", "", "", "<code class=\"type\">'a array array -&gt; 'a <a href=\"CamlinternalMenhirLib.LinearizedArray.html#TYPEt\">t</a></code>", "'a array array -> 'a CamlinternalMenhirLib.LinearizedArray.t"],
["Misc.Magic_number", "Misc.Magic_number.html", "magic_length", "Misc.Magic_number.html#VALmagic_length", "<div class=\"info\"> <p>all magic numbers take the same number of bytes</p> </div>", "all magic numbers take the same number of bytes", "<code class=\"type\">int</code>", "int"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "lr0_items", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALlr0_items", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a> *<br>       <a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.InspectionTableFormat.TABLES.t *       CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.InspectionTableFormat.TABLES.t"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "lr0_incoming", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALlr0_incoming", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.InspectionTableFormat.TABLES.t"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "lr0_core", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALlr0_core", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.InspectionTableFormat.TABLES.t"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "loop_handle_undo", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALloop_handle_undo", "", "", "<code class=\"type\">('a -&gt; 'answer) -&gt;<br>       ('a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>        'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>        'answer) -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEsupplier\">supplier</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>       'answer</code>", "('a -> 'answer) ->       ('a checkpoint ->        'a checkpoint ->        'answer) ->       supplier ->       'a checkpoint ->       'answer"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "loop_handle", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALloop_handle", "", "", "<code class=\"type\">('a -&gt; 'answer) -&gt;<br>       ('a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>        'answer) -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEsupplier\">supplier</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>       'answer</code>", "('a -> 'answer) ->       ('a checkpoint ->        'answer) ->       supplier ->       'a checkpoint ->       'answer"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "loop", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALloop", "", "", "<code class=\"type\">?strategy:<a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEstrategy\">strategy</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEsupplier\">supplier</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>       'a</code>", "?strategy:strategy ->       supplier ->       'a checkpoint ->       'a"],
["CamlinternalMenhirLib.EngineTypes.TABLE.Log", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html", "lookahead_token", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html#VALlookahead_token", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEterminal\">CamlinternalMenhirLib.EngineTypes.TABLE.terminal</a> -&gt;<br>       Lexing.position -&gt; Lexing.position -&gt; unit</code>", "CamlinternalMenhirLib.EngineTypes.TABLE.terminal ->       Lexing.position -> Lexing.position -> unit"],
["Parse", "Parse.html", "longident", "Parse.html#VALlongident", "<div class=\"info\"> <p>The function <code class=\"code\">longident</code> is guaranteed to parse all subclasses of <a href=\"Longident.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Longident</span>.t</code></a> used in OCaml: values, constructors, simple or extended module paths, and types or module types.</p> </div>", "The function longident is guaranteed to parse all subclasses of Longident.t used in OCaml: values, constructors, simple or extended module paths, and types or module types.", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "Lexing.lexbuf -> Longident.Parse.t"],
["Pprintast", "Pprintast.html", "longident", "Pprintast.html#VALlongident", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> -&gt; unit</code>", "Format.formatter -> Longident.Pprintast.t -> unit"],
["Targetint", "Targetint.html", "logxor", "Targetint.html#VALlogxor", "<div class=\"info\"> <p>Bitwise logical exclusive or.</p> </div>", "Bitwise logical exclusive or.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Targetint", "Targetint.html", "logor", "Targetint.html#VALlogor", "<div class=\"info\"> <p>Bitwise logical or.</p> </div>", "Bitwise logical or.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Targetint", "Targetint.html", "lognot", "Targetint.html#VALlognot", "<div class=\"info\"> <p>Bitwise logical negation.</p> </div>", "Bitwise logical negation.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t"],
["Targetint", "Targetint.html", "logand", "Targetint.html#VALlogand", "<div class=\"info\"> <p>Bitwise logical and.</p> </div>", "Bitwise logical and.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Misc", "Misc.html", "log2", "Misc.html#VALlog2", "<div class=\"info\"> <p><code class=\"code\">log2&nbsp;n</code> returns <code class=\"code\">s</code> such that <code class=\"code\">n&nbsp;=&nbsp;1&nbsp;<span class=\"keyword\">lsl</span>&nbsp;s</code> if <code class=\"code\">n</code> is a power of 2</p> </div>", "log2\194\160n returns s such that n\194\160=\194\1601\194\160lsl\194\160s if n is a power of 2", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "log", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALlog", "", "", "<code class=\"type\">bool</code>", "bool"],
["Lazy_backtrack", "Lazy_backtrack.html", "log", "Lazy_backtrack.html#VALlog", "", "", "<code class=\"type\">unit -&gt; <a href=\"Lazy_backtrack.html#TYPElog\">log</a></code>", "unit -> log"],
["Clflags", "Clflags.html", "locations", "Clflags.html#VALlocations", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Syntaxerr", "Syntaxerr.html", "location_of_error", "Syntaxerr.html#VALlocation_of_error", "", "", "<code class=\"type\"><a href=\"Syntaxerr.html#TYPEerror\">error</a> -&gt; <a href=\"Location.html#TYPEt\">Location.t</a></code>", "error -> Location.Syntaxerr.t"],
["Misc", "Misc.html", "list_remove", "Misc.html#VALlist_remove", "<div class=\"info\"> <p><code class=\"code\">list_remove&nbsp;x&nbsp;l</code> returns a copy of <code class=\"code\">l</code> with the first element equal to <code class=\"code\">x</code> removed.</p> </div>", "list_remove\194\160x\194\160l returns a copy of l with the first element equal to x removed.", "<code class=\"type\">'a -&gt; 'a list -&gt; 'a list</code>", "'a -> 'a list -> 'a list"],
["Ccomp", "Ccomp.html", "linker_is_flexlink", "Ccomp.html#VALlinker_is_flexlink", "", "", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "link_everything", "Clflags.html#VALlink_everything", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Config_boot", "Config_boot.html", "linear_magic_number", "Config_boot.html#VALlinear_magic_number", "<div class=\"info\"> <p>Magic number for Linear internal representation files</p> </div>", "Magic number for Linear internal representation files", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "linear_magic_number", "Config_main.html#VALlinear_magic_number", "<div class=\"info\"> <p>Magic number for Linear internal representation files</p> </div>", "Magic number for Linear internal representation files", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "linear_magic_number", "Config.html#VALlinear_magic_number", "<div class=\"info\"> <p>Magic number for Linear internal representation files</p> </div>", "Magic number for Linear internal representation files", "<code class=\"type\">string</code>", "string"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "lhs", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALlhs", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEproduction\">production</a> -&gt; xsymbol</code>", "production -> xsymbol"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "lhs", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALlhs", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.TableFormat.TABLES.t"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "lexer_lexbuf_to_supplier", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALlexer_lexbuf_to_supplier", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt;<br>        <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEsupplier\">supplier</a></code>", "(Lexing.lexbuf ->        token) ->       Lexing.lexbuf ->       supplier"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "letop", "Ast_helper.Exp.html#VALletop", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEbinding_op\">Parsetree.binding_op</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEbinding_op\">Parsetree.binding_op</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.binding_op ->       Parsetree.binding_op list -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "letmodule", "Ast_helper.Exp.html#VALletmodule", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr_opt\">Ast_helper.str_opt</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str_opt ->       Parsetree.module_expr -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "letexception", "Ast_helper.Exp.html#VALletexception", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.extension_constructor ->       Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "let_", "Ast_helper.Exp.html#VALlet_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.rec_flag ->       Parsetree.value_binding list -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "let_", "Ast_helper.Cl.html#VALlet_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.rec_flag ->       Parsetree.value_binding list -> Parsetree.class_expr -> Parsetree.class_expr"],
["CamlinternalMenhirLib.General", "CamlinternalMenhirLib.General.html", "length", "CamlinternalMenhirLib.General.html#VALlength", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.General.html#TYPEstream\">stream</a> -&gt; int</code>", "'a stream -> int"],
["CamlinternalMenhirLib.LinearizedArray", "CamlinternalMenhirLib.LinearizedArray.html", "length", "CamlinternalMenhirLib.LinearizedArray.html#VALlength", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.LinearizedArray.html#TYPEt\">t</a> -&gt; int</code>", "'a CamlinternalMenhirLib.LinearizedArray.t -> int"],
["Misc.LongString", "Misc.LongString.html", "length", "Misc.LongString.html#VALlength", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int</code>", "Misc.LongString.t -> int"],
["Config_boot", "Config_boot.html", "lazy_tag", "Config_boot.html#VALlazy_tag", "<div class=\"info\"> <p>Normally the same as Obj.lazy_tag.</p> </div>", "Normally the same as Obj.lazy_tag.", "<code class=\"type\">int</code>", "int"],
["Config_main", "Config_main.html", "lazy_tag", "Config_main.html#VALlazy_tag", "<div class=\"info\"> <p>Normally the same as Obj.lazy_tag.</p> </div>", "Normally the same as Obj.lazy_tag.", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "lazy_tag", "Config.html#VALlazy_tag", "<div class=\"info\"> <p>Normally the same as Obj.lazy_tag.</p> </div>", "Normally the same as Obj.lazy_tag.", "<code class=\"type\">int</code>", "int"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "lazy_", "Ast_helper.Pat.html#VALlazy_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "lazy_", "Ast_helper.Exp.html#VALlazy_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "last", "CamlinternalMenhirLib.ErrorReports.html#VALlast", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.ErrorReports.html#TYPEbuffer\">buffer</a> -&gt; 'a</code>", "'a buffer -> 'a"],
["Longident", "Longident.html", "last", "Longident.html#VALlast", "", "", "<code class=\"type\"><a href=\"Longident.html#TYPEt\">t</a> -&gt; string</code>", "Longident.t -> string"],
["Identifiable.Map", "Identifiable.Map.html", "keys", "Identifiable.Map.html#VALkeys", "", "", "<code class=\"type\">'a t -&gt; Stdlib.Set.Make(T).t</code>", "'a Identifiable.Map.t -> Stdlib.Set.Make(T).Identifiable.Map.t"],
["Diffing_with_keys.Define.Parameters", "Diffing_with_keys.Define.Parameters.html", "key_right", "Diffing_with_keys.Define.Parameters.html#VALkey_right", "", "", "<code class=\"type\">D.right -&gt; string</code>", "D.right -> string"],
["Diffing_with_keys.Define.Parameters", "Diffing_with_keys.Define.Parameters.html", "key_left", "Diffing_with_keys.Define.Parameters.html#VALkey_left", "", "", "<code class=\"type\">D.left -&gt; string</code>", "D.left -> string"],
["Clflags", "Clflags.html", "keep_startup_file", "Clflags.html#VALkeep_startup_file", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "keep_locs", "Clflags.html#VALkeep_locs", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "keep_docs", "Clflags.html#VALkeep_docs", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "keep_camlprimc_file", "Clflags.html#VALkeep_camlprimc_file", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "keep_asm_file", "Clflags.html#VALkeep_asm_file", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "items", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALitems", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPElr1state\">lr1state</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEitem\">item</a> list</code>", "'a lr1state ->       item list"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "is_start", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALis_start", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a> -&gt; bool</code>", "production -> bool"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "is_prefix", "Misc.Stdlib.List.html#VALis_prefix", "<div class=\"info\"> <p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if and only if the given list, with respect to the given equality function on list members, is a prefix of the list <code class=\"code\">of_</code>.</p> </div>", "Returns true if and only if the given list, with respect to the given equality function on list members, is a prefix of the list of_.", "<code class=\"type\">equal:('a -&gt; 'a -&gt; bool) -&gt; 'a list -&gt; of_:'a list -&gt; bool</code>", "equal:('a -> 'a -> bool) -> 'a list -> of_:'a list -> bool"],
["Location", "Location.html", "is_none", "Location.html#VALis_none", "<div class=\"info\"> <p>True for <code class=\"code\"><span class=\"constructor\">Location</span>.none</code>, false any other location</p> </div>", "True for Location.none, false any other location", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; bool</code>", "Location.t -> bool"],
["Warnings", "Warnings.html", "is_error", "Warnings.html#VALis_error", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEt\">t</a> -&gt; bool</code>", "Warnings.t -> bool"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "is_compilation_pass", "Clflags.Compiler_pass.html#VALis_compilation_pass", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> -&gt; bool</code>", "Clflags.Compiler_pass.t -> bool"],
["Local_store", "Local_store.html", "is_bound", "Local_store.html#VALis_bound", "<div class=\"info\"> <p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> when a store is active (i.e.</p> </div>", "Returns true when a store is active (i.e.", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Warnings", "Warnings.html", "is_active", "Warnings.html#VALis_active", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEt\">t</a> -&gt; bool</code>", "Warnings.t -> bool"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "interval", "Ast_helper.Pat.html#VALinterval", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.constant -> Parsetree.constant -> Parsetree.pattern"],
["Config_boot", "Config_boot.html", "interface_suffix", "Config_boot.html#VALinterface_suffix", "<div class=\"info\"> <p>Suffix for interface file names</p> </div>", "Suffix for interface file names", "<code class=\"type\">string ref</code>", "string ref"],
["Config_main", "Config_main.html", "interface_suffix", "Config_main.html#VALinterface_suffix", "<div class=\"info\"> <p>Suffix for interface file names</p> </div>", "Suffix for interface file names", "<code class=\"type\">string ref</code>", "string ref"],
["Config", "Config.html", "interface_suffix", "Config.html#VALinterface_suffix", "<div class=\"info\"> <p>Suffix for interface file names</p> </div>", "Suffix for interface file names", "<code class=\"type\">string ref</code>", "string ref"],
["Parse", "Parse.html", "interface", "Parse.html#VALinterface", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "Lexing.lexbuf -> Parsetree.signature"],
["Parser", "Parser.html", "interface", "Parser.html#VALinterface", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.signature"],
["Parser.Incremental", "Parser.Incremental.html", "interface", "Parser.Incremental.html#VALinterface", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.signature Parser.MenhirInterpreter.checkpoint"],
["Printast", "Printast.html", "interface", "Printast.html#VALinterface", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a> list -&gt; unit</code>", "Format.formatter -> Parsetree.signature_item list -> unit"],
["Ast_helper.Const", "Ast_helper.Const.html", "integer", "Ast_helper.Const.html#VALinteger", "", "", "<code class=\"type\">?suffix:char -&gt; string -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> string -> Parsetree.constant"],
["Ast_helper.Const", "Ast_helper.Const.html", "int64", "Ast_helper.Const.html#VALint64", "", "", "<code class=\"type\">?suffix:char -&gt; int64 -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> int64 -> Parsetree.constant"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "int64", "Misc.Int_literal_converter.html#VALint64", "<div class=\"info\"> <p>Likewise, at type <code class=\"code\">int64</code></p> </div>", "Likewise, at type int64", "<code class=\"type\">string -&gt; int64</code>", "string -> int64"],
["Ast_helper.Const", "Ast_helper.Const.html", "int32", "Ast_helper.Const.html#VALint32", "", "", "<code class=\"type\">?suffix:char -&gt; int32 -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> int32 -> Parsetree.constant"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "int32", "Misc.Int_literal_converter.html#VALint32", "<div class=\"info\"> <p>Likewise, at type <code class=\"code\">int32</code></p> </div>", "Likewise, at type int32", "<code class=\"type\">string -&gt; int32</code>", "string -> int32"],
["Ast_helper.Const", "Ast_helper.Const.html", "int", "Ast_helper.Const.html#VALint", "", "", "<code class=\"type\">?suffix:char -&gt; int -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> int -> Parsetree.constant"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "int", "Misc.Int_literal_converter.html#VALint", "<div class=\"info\"> <p>Convert a string to an integer.</p> </div>", "Convert a string to an integer.", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["Clflags", "Clflags.html", "insn_sched_default", "Clflags.html#VALinsn_sched_default", "", "", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "insn_sched", "Clflags.html#VALinsn_sched", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Compression", "Compression.html", "input_value", "Compression.html#VALinput_value", "<div class=\"info\"> <p><code class=\"code\"><span class=\"constructor\">Compression</span>.input_value&nbsp;chan</code> reads from channel <code class=\"code\">chan</code> the byte representation of a structured value, as produced by <code class=\"code\"><span class=\"constructor\">Compression</span>.output_value</code>, and reconstructs and returns the corresponding value.</p> </div>", "Compression.input_value\194\160chan reads from channel chan the byte representation of a structured value, as produced by Compression.output_value, and reconstructs and returns the corresponding value.", "<code class=\"type\">in_channel -&gt; 'a</code>", "in_channel -> 'a"],
["Location", "Location.html", "input_phrase_buffer", "Location.html#VALinput_phrase_buffer", "", "", "<code class=\"type\">Buffer.t option ref</code>", "Buffer.Location.t option ref"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "input_needed", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALinput_needed", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a></code>", "'a env ->       'a checkpoint"],
["Location", "Location.html", "input_name", "Location.html#VALinput_name", "", "", "<code class=\"type\">string ref</code>", "string ref"],
["Location", "Location.html", "input_lexbuf", "Location.html#VALinput_lexbuf", "", "", "<code class=\"type\">Lexing.lexbuf option ref</code>", "Lexing.lexbuf option ref"],
["Misc.LongString", "Misc.LongString.html", "input_bytes_into", "Misc.LongString.html#VALinput_bytes_into", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; in_channel -&gt; int -&gt; unit</code>", "Misc.LongString.t -> in_channel -> int -> unit"],
["Misc.LongString", "Misc.LongString.html", "input_bytes", "Misc.LongString.html#VALinput_bytes", "", "", "<code class=\"type\">in_channel -&gt; int -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a></code>", "in_channel -> int -> Misc.LongString.t"],
["Clflags", "Clflags.html", "inlining_report", "Clflags.html#VALinlining_report", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "inline_toplevel_threshold", "Clflags.html#VALinline_toplevel_threshold", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_threshold", "Clflags.html#VALinline_threshold", "", "", "<code class=\"type\"><a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">Float_arg_helper.parsed</a> ref</code>", "Float_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_prim_cost", "Clflags.html#VALinline_prim_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_max_unroll", "Clflags.html#VALinline_max_unroll", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_max_depth", "Clflags.html#VALinline_max_depth", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_lifting_benefit", "Clflags.html#VALinline_lifting_benefit", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_indirect_cost", "Clflags.html#VALinline_indirect_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_call_cost", "Clflags.html#VALinline_call_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_branch_factor", "Clflags.html#VALinline_branch_factor", "", "", "<code class=\"type\"><a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">Float_arg_helper.parsed</a> ref</code>", "Float_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_branch_cost", "Clflags.html#VALinline_branch_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_alloc_cost", "Clflags.html#VALinline_alloc_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> ref</code>", "Int_arg_helper.parsed ref"],
["CamlinternalMenhirLib.EngineTypes.TABLE.Log", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html", "initiating_error_handling", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html#VALinitiating_error_handling", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "initializer_", "Ast_helper.Cf.html#VALinitializer_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.class_field"],
["Clflags", "Clflags.html", "init_file", "Clflags.html#VALinit_file", "", "", "<code class=\"type\">string option ref</code>", "string option ref"],
["CamlinternalMenhirLib.LexerUtil", "CamlinternalMenhirLib.LexerUtil.html", "init", "CamlinternalMenhirLib.LexerUtil.html#VALinit", "", "", "<code class=\"type\">string -&gt; Lexing.lexbuf -&gt; Lexing.lexbuf</code>", "string -> Lexing.lexbuf -> Lexing.lexbuf"],
["Docstrings", "Docstrings.html", "init", "Docstrings.html#VALinit", "<div class=\"info\"> <p>(Re)Initialise all docstring state</p> </div>", "(Re)Initialise all docstring state", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Lexer", "Lexer.html", "init", "Lexer.html#VALinit", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Location", "Location.html", "init", "Location.html#VALinit", "<div class=\"info\"> <p>Set the file name and line number of the <code class=\"code\">lexbuf</code> to be the start of the named file.</p> </div>", "Set the file name and line number of the lexbuf to be the start of the named file.", "<code class=\"type\">Lexing.lexbuf -&gt; string -&gt; unit</code>", "Lexing.lexbuf -> string -> unit"],
["Load_path", "Load_path.html", "init", "Load_path.html#VALinit", "<div class=\"info\"> <p><code class=\"code\">init&nbsp;l</code> is the same as <code class=\"code\">reset&nbsp;();&nbsp;<span class=\"constructor\">List</span>.iter&nbsp;add_dir&nbsp;(<span class=\"constructor\">List</span>.rev&nbsp;l)</code></p> </div>", "init\194\160l is the same as reset\194\160();\194\160List.iter\194\160add_dir\194\160(List.rev\194\160l)", "<code class=\"type\">auto_include:<a href=\"Load_path.html#TYPEauto_include_callback\">auto_include_callback</a> -&gt; string list -&gt; unit</code>", "auto_include:auto_include_callback -> string list -> unit"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "inherit_", "Ast_helper.Ctf.html#VALinherit_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_type -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "inherit_", "Ast_helper.Cf.html#VALinherit_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> option -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.override_flag ->       Parsetree.class_expr -> Ast_helper.str option -> Parsetree.class_field"],
["Ast_helper.Rf", "Ast_helper.Rf.html", "inherit_", "Ast_helper.Rf.html#VALinherit_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPErow_field\">Parsetree.row_field</a></code>", "?loc:Ast_helper.loc -> Parsetree.core_type -> Parsetree.row_field"],
["Ast_helper.Of", "Ast_helper.Of.html", "inherit_", "Ast_helper.Of.html#VALinherit_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEobject_field\">Parsetree.object_field</a></code>", "?loc:Ast_helper.loc -> Parsetree.core_type -> Parsetree.object_field"],
["Docstrings", "Docstrings.html", "info_attr", "Docstrings.html#VALinfo_attr", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "docstring -> Parsetree.attribute"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "incoming_symbol", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALincoming_symbol", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPElr1state\">lr1state</a> -&gt; 'a symbol</code>", "'a lr1state -> 'a symbol"],
["Clflags", "Clflags.html", "include_dirs", "Clflags.html#VALinclude_dirs", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "include_", "Ast_helper.Sig.html#VALinclude_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEinclude_description\">Parsetree.include_description</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.include_description -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "include_", "Ast_helper.Str.html#VALinclude_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEinclude_declaration\">Parsetree.include_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.include_declaration -> Parsetree.structure_item"],
["Lexer", "Lexer.html", "in_string", "Lexer.html#VALin_string", "", "", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Location", "Location.html", "in_file", "Location.html#VALin_file", "<div class=\"info\"> <p>Return an empty ghost range located in a given file.</p> </div>", "Return an empty ghost range located in a given file.", "<code class=\"type\">string -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "string -> Location.t"],
["Lexer", "Lexer.html", "in_comment", "Lexer.html#VALin_comment", "", "", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Parse", "Parse.html", "implementation", "Parse.html#VALimplementation", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "Lexing.lexbuf -> Parsetree.structure"],
["Parser", "Parser.html", "implementation", "Parser.html#VALimplementation", "", "", "<code class=\"type\">(Lexing.lexbuf -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.structure"],
["Parser.Incremental", "Parser.Incremental.html", "implementation", "Parser.Incremental.html#VALimplementation", "", "", "<code class=\"type\">Lexing.position -&gt;<br>       <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> Parser.MenhirInterpreter.checkpoint</code>", "Lexing.position ->       Parsetree.structure Parser.MenhirInterpreter.checkpoint"],
["Printast", "Printast.html", "implementation", "Printast.html#VALimplementation", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a> list -&gt; unit</code>", "Format.formatter -> Parsetree.structure_item list -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "immediate64", "Builtin_attributes.html#VALimmediate64", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Builtin_attributes", "Builtin_attributes.html", "immediate", "Builtin_attributes.html#VALimmediate", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Syntaxerr", "Syntaxerr.html", "ill_formed_ast", "Syntaxerr.html#VALill_formed_ast", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; string -&gt; 'a</code>", "Location.Syntaxerr.t -> string -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "ifthenelse", "Ast_helper.Exp.html#VALifthenelse", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       Parsetree.expression -> Parsetree.expression option -> Parsetree.expression"],
["Domainstate", "Domainstate.html", "idx_of_field", "Domainstate.html#VALidx_of_field", "", "", "<code class=\"type\"><a href=\"Domainstate.html#TYPEt\">t</a> -&gt; int</code>", "Domainstate.t -> int"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "ident", "Ast_helper.Exp.html#VALident", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.expression"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "ident", "Ast_helper.Mty.html#VALident", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "ident", "Ast_helper.Mod.html#VALident", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_expr"],
["Misc.Magic_number", "Misc.Magic_number.html", "human_name_of_kind", "Misc.Magic_number.html#VALhuman_name_of_kind", "<div class=\"info\"> <p>a user-meaningful name for a kind, eg.</p> </div>", "a user-meaningful name for a kind, eg.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> -&gt; string</code>", "kind -> string"],
["Config_boot", "Config_boot.html", "host", "Config_boot.html#VALhost", "<div class=\"info\"> <p>Whether the compiler is a cross-compiler</p> </div>", "Whether the compiler is a cross-compiler", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "host", "Config_main.html#VALhost", "<div class=\"info\"> <p>Whether the compiler is a cross-compiler</p> </div>", "Whether the compiler is a cross-compiler", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "host", "Config.html#VALhost", "<div class=\"info\"> <p>Whether the compiler is a cross-compiler</p> </div>", "Whether the compiler is a cross-compiler", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "highlight_terminfo", "Location.html#VALhighlight_terminfo", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; Format.formatter -&gt; <a href=\"Location.html#TYPEt\">t</a> list -&gt; unit</code>", "Lexing.lexbuf -> Format.formatter -> Location.t list -> unit"],
["Warnings", "Warnings.html", "help_warnings", "Warnings.html#VALhelp_warnings", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "has_unboxed", "Builtin_attributes.html#VALhas_unboxed", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Attr_helper", "Attr_helper.html", "has_no_payload_attribute", "Attr_helper.html#VALhas_no_payload_attribute", "", "", "<code class=\"type\">string list -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "string list -> Parsetree.attributes -> bool"],
["Builtin_attributes", "Builtin_attributes.html", "has_boxed", "Builtin_attributes.html#VALhas_boxed", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["CamlinternalMenhirLib.EngineTypes.TABLE.Log", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html", "handling_error", "CamlinternalMenhirLib.EngineTypes.TABLE.Log.html#VALhandling_error", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">CamlinternalMenhirLib.EngineTypes.TABLE.state</a> -&gt; unit</code>", "CamlinternalMenhirLib.EngineTypes.TABLE.state -> unit"],
["Lexer", "Lexer.html", "handle_docstrings", "Lexer.html#VALhandle_docstrings", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "goto_prod", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALgoto_prod", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a></code>", "state ->       production ->       state"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "goto_nt", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALgoto_nt", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEnonterminal\">nonterminal</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a></code>", "state ->       nonterminal ->       state"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "goto", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALgoto", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a> *<br>       <a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.TableFormat.TABLES.t *       CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.TableFormat.TABLES.t"],
["Warnings", "Warnings.html", "ghost_loc_in_file", "Warnings.html#VALghost_loc_in_file", "<div class=\"info\"> <p>Return an empty ghost range located in a given file</p> </div>", "Return an empty ghost range located in a given file", "<code class=\"type\">string -&gt; <a href=\"Warnings.html#TYPEloc\">loc</a></code>", "string -> loc"],
["CamlinternalMenhirLib.RowDisplacement", "CamlinternalMenhirLib.RowDisplacement.html", "getget", "CamlinternalMenhirLib.RowDisplacement.html#VALgetget", "", "", "<code class=\"type\">('displacement -&gt; int -&gt; int) -&gt;<br>       ('data -&gt; int -&gt; 'a) -&gt; 'displacement * 'data -&gt; int -&gt; int -&gt; 'a</code>", "('displacement -> int -> int) ->       ('data -> int -> 'a) -> 'displacement * 'data -> int -> int -> 'a"],
["Misc.Color", "Misc.Color.html", "get_styles", "Misc.Color.html#VALget_styles", "", "", "<code class=\"type\">unit -&gt; <a href=\"Misc.Color.html#TYPEstyles\">styles</a></code>", "unit -> styles"],
["Misc", "Misc.html", "get_ref", "Misc.html#VALget_ref", "<div class=\"info\"> <p><code class=\"code\">get_ref&nbsp;lr</code> returns the content of the list reference <code class=\"code\">lr</code> and reset its content to the empty list.</p> </div>", "get_ref\194\160lr returns the content of the list reference lr and reset its content to the empty list.", "<code class=\"type\">'a list ref -&gt; 'a list</code>", "'a list ref -> 'a list"],
["Location", "Location.html", "get_pos_info", "Location.html#VALget_pos_info", "<div class=\"info\"> <p>file, line, char</p> </div>", "file, line, char", "<code class=\"type\">Lexing.position -&gt; string * int * int</code>", "Lexing.position -> string * int * int"],
["Load_path", "Load_path.html", "get_paths", "Load_path.html#VALget_paths", "<div class=\"info\"> <p>Return the list of directories passed to <code class=\"code\">add_dir</code> so far.</p> </div>", "Return the list of directories passed to add_dir so far.", "<code class=\"type\">unit -&gt; string list</code>", "unit -> string list"],
["Attr_helper", "Attr_helper.html", "get_no_payload_attribute", "Attr_helper.html#VALget_no_payload_attribute", "<div class=\"info\"> <p>The <code class=\"code\">string&nbsp;list</code> argument of the following functions is a list of alternative names for the attribute we are looking for.</p> </div>", "The string\194\160list argument of the following functions is a list of alternative names for the attribute we are looking for.", "<code class=\"type\">string list -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> option</code>", "string list -> Parsetree.attributes -> string Asttypes.loc option"],
["Ast_mapper", "Ast_mapper.html", "get_cookie", "Ast_mapper.html#VALget_cookie", "", "", "<code class=\"type\">string -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option</code>", "string -> Parsetree.expression option"],
["Lazy_backtrack", "Lazy_backtrack.html", "get_contents", "Lazy_backtrack.html#VALget_contents", "", "", "<code class=\"type\">('a, 'b) <a href=\"Lazy_backtrack.html#TYPEt\">t</a> -&gt; ('a, 'b) Either.t</code>", "('a, 'b) Lazy_backtrack.t -> ('a, 'b) Either.Lazy_backtrack.t"],
["Misc", "Misc.html", "get_build_path_prefix_map", "Misc.html#VALget_build_path_prefix_map", "<div class=\"info\"> <p>Returns the map encoded in the <code class=\"code\"><span class=\"constructor\">BUILD_PATH_PREFIX_MAP</span></code> environment variable.</p> </div>", "Returns the map encoded in the BUILD_PATH_PREFIX_MAP environment variable.", "<code class=\"type\">unit -&gt; <a href=\"Build_path_prefix_map.html#TYPEmap\">Build_path_prefix_map.map</a> option</code>", "unit -> Build_path_prefix_map.map option"],
["Lazy_backtrack", "Lazy_backtrack.html", "get_arg", "Lazy_backtrack.html#VALget_arg", "", "", "<code class=\"type\">('a, 'b) <a href=\"Lazy_backtrack.html#TYPEt\">t</a> -&gt; 'a option</code>", "('a, 'b) Lazy_backtrack.t -> 'a option"],
["CamlinternalMenhirLib.PackedIntArray", "CamlinternalMenhirLib.PackedIntArray.html", "get1", "CamlinternalMenhirLib.PackedIntArray.html#VALget1", "", "", "<code class=\"type\">string -&gt; int -&gt; int</code>", "string -> int -> int"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "get", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALget", "", "", "<code class=\"type\">int -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEelement\">element</a> option</code>", "int ->       'a env ->       element option"],
["CamlinternalMenhirLib.InfiniteArray", "CamlinternalMenhirLib.InfiniteArray.html", "get", "CamlinternalMenhirLib.InfiniteArray.html#VALget", "<div class=\"info\"> <p><code class=\"code\">get&nbsp;a&nbsp;i</code> returns the element contained at offset <code class=\"code\">i</code> in the array <code class=\"code\">a</code>.</p> </div>", "get\194\160a\194\160i returns the element contained at offset i in the array a.", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.InfiniteArray.html#TYPEt\">t</a> -&gt; int -&gt; 'a</code>", "'a CamlinternalMenhirLib.InfiniteArray.t -> int -> 'a"],
["CamlinternalMenhirLib.PackedIntArray", "CamlinternalMenhirLib.PackedIntArray.html", "get", "CamlinternalMenhirLib.PackedIntArray.html#VALget", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">t</a> -&gt; int -&gt; int</code>", "CamlinternalMenhirLib.PackedIntArray.t -> int -> int"],
["CamlinternalMenhirLib.RowDisplacement", "CamlinternalMenhirLib.RowDisplacement.html", "get", "CamlinternalMenhirLib.RowDisplacement.html#VALget", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.RowDisplacement.html#TYPEtable\">table</a> -&gt; int -&gt; int -&gt; 'a</code>", "'a table -> int -> int -> 'a"],
["Arg_helper.Make", "Arg_helper.Make.html", "get", "Arg_helper.Make.html#VALget", "", "", "<code class=\"type\">key:S.Key.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; S.Value.t</code>", "key:S.Key.Arg_helper.Make.t -> parsed -> S.Value.Arg_helper.Make.t"],
["Clflags.Int_arg_helper", "Clflags.Int_arg_helper.html", "get", "Clflags.Int_arg_helper.html#VALget", "", "", "<code class=\"type\">key:int -&gt; <a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">parsed</a> -&gt; int</code>", "key:int -> parsed -> int"],
["Clflags.Float_arg_helper", "Clflags.Float_arg_helper.html", "get", "Clflags.Float_arg_helper.html#VALget", "", "", "<code class=\"type\">key:int -&gt; <a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">parsed</a> -&gt; float</code>", "key:int -> parsed -> float"],
["Load_path", "Load_path.html", "get", "Load_path.html#VALget", "<div class=\"info\"> <p>Same as <code class=\"code\">get_paths&nbsp;()</code>, except that it returns a <code class=\"code\"><span class=\"constructor\">Dir</span>.t&nbsp;list</code>.</p> </div>", "Same as get_paths\194\160(), except that it returns a Dir.t\194\160list.", "<code class=\"type\">unit -&gt; <a href=\"Load_path.Dir.html#TYPEt\">Dir.t</a> list</code>", "unit -> Dir.Load_path.t list"],
["Misc.LongString", "Misc.LongString.html", "get", "Misc.LongString.html#VALget", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; char</code>", "Misc.LongString.t -> int -> char"],
["Profile", "Profile.html", "generate", "Profile.html#VALgenerate", "", "", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "functor_", "Ast_helper.Mty.html#VALfunctor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEfunctor_parameter\">Parsetree.functor_parameter</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.functor_parameter -> Parsetree.module_type -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "functor_", "Ast_helper.Mod.html#VALfunctor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEfunctor_parameter\">Parsetree.functor_parameter</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.functor_parameter -> Parsetree.module_expr -> Parsetree.module_expr"],
["Clflags", "Clflags.html", "function_sections", "Clflags.html#VALfunction_sections", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Config_boot", "Config_boot.html", "function_sections", "Config_boot.html#VALfunction_sections", "<div class=\"info\"> <p>Whether the compiler was configured to generate each function in a separate section</p> </div>", "Whether the compiler was configured to generate each function in a separate section", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "function_sections", "Config_main.html#VALfunction_sections", "<div class=\"info\"> <p>Whether the compiler was configured to generate each function in a separate section</p> </div>", "Whether the compiler was configured to generate each function in a separate section", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "function_sections", "Config.html#VALfunction_sections", "<div class=\"info\"> <p>Whether the compiler was configured to generate each function in a separate section</p> </div>", "Whether the compiler was configured to generate each function in a separate section", "<code class=\"type\">bool</code>", "bool"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "function_", "Ast_helper.Exp.html#VALfunction_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.case list -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "fun_", "Ast_helper.Exp.html#VALfun_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.expression option ->       Parsetree.pattern -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "fun_", "Ast_helper.Cl.html#VALfun_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.expression option ->       Parsetree.pattern -> Parsetree.class_expr -> Parsetree.class_expr"],
["Misc", "Misc.html", "fst4", "Misc.html#VALfst4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'a</code>", "'a * 'b * 'c * 'd -> 'a"],
["Misc", "Misc.html", "fst3", "Misc.html#VALfst3", "", "", "<code class=\"type\">'a * 'b * 'c -&gt; 'a</code>", "'a * 'b * 'c -> 'a"],
["Local_store", "Local_store.html", "fresh", "Local_store.html#VALfresh", "<div class=\"info\"> <p>Returns a fresh instance of the store.</p> </div>", "Returns a fresh instance of the store.", "<code class=\"type\">unit -&gt; <a href=\"Local_store.html#TYPEstore\">store</a></code>", "unit -> store"],
["Depend", "Depend.html", "free_structure_names", "Depend.html#VALfree_structure_names", "", "", "<code class=\"type\">String.Set.t ref</code>", "String.Set.Depend.t ref"],
["Location", "Location.html", "formatter_for_warnings", "Location.html#VALformatter_for_warnings", "", "", "<code class=\"type\">Format.formatter ref</code>", "Format.formatter ref"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "foreach_terminal_but_error", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALforeach_terminal_but_error", "", "", "<code class=\"type\">(xsymbol -&gt; 'a -&gt; 'a) -&gt; 'a -&gt; 'a</code>", "(xsymbol -> 'a -> 'a) -> 'a -> 'a"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "foreach_terminal", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALforeach_terminal", "", "", "<code class=\"type\">(xsymbol -&gt; 'a -&gt; 'a) -&gt; 'a -&gt; 'a</code>", "(xsymbol -> 'a -> 'a) -> 'a -> 'a"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "foreach_terminal", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALforeach_terminal", "", "", "<code class=\"type\">(<a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEterminal\">terminal</a> -&gt; 'a -&gt; 'a) -&gt; 'a -&gt; 'a</code>", "(terminal -> 'a -> 'a) -> 'a -> 'a"],
["Clflags", "Clflags.html", "force_slash", "Clflags.html#VALforce_slash", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "force_reduction", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALforce_reduction", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEproduction\">production</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a></code>", "production ->       'a env ->       'a env"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "force_poly", "Ast_helper.Typ.html#VALforce_poly", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Parsetree.core_type -> Parsetree.core_type"],
["Lazy_backtrack", "Lazy_backtrack.html", "force_logged", "Lazy_backtrack.html#VALforce_logged", "", "", "<code class=\"type\"><a href=\"Lazy_backtrack.html#TYPElog\">log</a> -&gt;<br>       ('a -&gt; ('b, 'c) result) -&gt;<br>       ('a, ('b, 'c) result) <a href=\"Lazy_backtrack.html#TYPEt\">t</a> -&gt; ('b, 'c) result</code>", "log ->       ('a -> ('b, 'c) result) ->       ('a, ('b, 'c) result) Lazy_backtrack.t -> ('b, 'c) result"],
["Lazy_backtrack", "Lazy_backtrack.html", "force", "Lazy_backtrack.html#VALforce", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; ('a, 'b) <a href=\"Lazy_backtrack.html#TYPEt\">t</a> -&gt; 'b</code>", "('a -> 'b) -> ('a, 'b) Lazy_backtrack.t -> 'b"],
["Clflags", "Clflags.html", "for_package", "Clflags.html#VALfor_package", "", "", "<code class=\"type\">string option ref</code>", "string option ref"],
["Misc.Stdlib.Array", "Misc.Stdlib.Array.html", "for_alli", "Misc.Stdlib.Array.html#VALfor_alli", "<div class=\"info\"> <p>Same as <code class=\"code\"><span class=\"constructor\">Array</span>.for_all</code> from the standard library, but the function is applied with the index of the element as first argument, and the element itself as second argument.</p> </div>", "Same as Array.for_all from the standard library, but the function is applied with the index of the element as first argument, and the element itself as second argument.", "<code class=\"type\">(int -&gt; 'a -&gt; bool) -&gt; 'a array -&gt; bool</code>", "(int -> 'a -> bool) -> 'a array -> bool"],
["Misc", "Misc.html", "for_all2", "Misc.html#VALfor_all2", "<div class=\"info\"> <p>Same as <code class=\"code\"><span class=\"constructor\">List</span>.for_all</code> but for a binary predicate.</p> </div>", "Same as List.for_all but for a binary predicate.", "<code class=\"type\">('a -&gt; 'b -&gt; bool) -&gt; 'a list -&gt; 'b list -&gt; bool</code>", "('a -> 'b -> bool) -> 'a list -> 'b list -> bool"],
["Misc.Stdlib.String", "Misc.Stdlib.String.html", "for_all", "Misc.Stdlib.String.html#VALfor_all", "", "", "<code class=\"type\">(char -&gt; bool) -&gt; t -&gt; bool</code>", "(char -> bool) -> Misc.Stdlib.String.t -> bool"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "for_", "Ast_helper.Exp.html#VALfor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEdirection_flag\">Asttypes.direction_flag</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern ->       Parsetree.expression ->       Parsetree.expression ->       Asttypes.direction_flag -> Parsetree.expression -> Parsetree.expression"],
["Misc", "Misc.html", "for4", "Misc.html#VALfor4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'd</code>", "'a * 'b * 'c * 'd -> 'd"],
["CamlinternalMenhirLib.General", "CamlinternalMenhirLib.General.html", "foldr", "CamlinternalMenhirLib.General.html#VALfoldr", "", "", "<code class=\"type\">('a -&gt; 'b -&gt; 'b) -&gt; 'a <a href=\"CamlinternalMenhirLib.General.html#TYPEstream\">stream</a> -&gt; 'b -&gt; 'b</code>", "('a -> 'b -> 'b) -> 'a stream -> 'b -> 'b"],
["Clflags", "Clflags.html", "float_const_prop", "Clflags.html#VALfloat_const_prop", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Ast_helper.Const", "Ast_helper.Const.html", "float", "Ast_helper.Const.html#VALfloat", "", "", "<code class=\"type\">?suffix:char -&gt; string -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> string -> Parsetree.constant"],
["Config_boot", "Config_boot.html", "flexdll_dirs", "Config_boot.html#VALflexdll_dirs", "<div class=\"info\"> <p>Directories needed for the FlexDLL objects</p> </div>", "Directories needed for the FlexDLL objects", "<code class=\"type\">string list</code>", "string list"],
["Config_main", "Config_main.html", "flexdll_dirs", "Config_main.html#VALflexdll_dirs", "<div class=\"info\"> <p>Directories needed for the FlexDLL objects</p> </div>", "Directories needed for the FlexDLL objects", "<code class=\"type\">string list</code>", "string list"],
["Config", "Config.html", "flexdll_dirs", "Config.html#VALflexdll_dirs", "<div class=\"info\"> <p>Directories needed for the FlexDLL objects</p> </div>", "Directories needed for the FlexDLL objects", "<code class=\"type\">string list</code>", "string list"],
["Longident", "Longident.html", "flatten", "Longident.html#VALflatten", "", "", "<code class=\"type\"><a href=\"Longident.html#TYPEt\">t</a> -&gt; string list</code>", "Longident.t -> string list"],
["Config_boot", "Config_boot.html", "flat_float_array", "Config_boot.html#VALflat_float_array", "<div class=\"info\"> <p>Whether the compiler and runtime automagically flatten float arrays</p> </div>", "Whether the compiler and runtime automagically flatten float arrays", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "flat_float_array", "Config_main.html#VALflat_float_array", "<div class=\"info\"> <p>Whether the compiler and runtime automagically flatten float arrays</p> </div>", "Whether the compiler and runtime automagically flatten float arrays", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "flat_float_array", "Config.html#VALflat_float_array", "<div class=\"info\"> <p>Whether the compiler and runtime automagically flatten float arrays</p> </div>", "Whether the compiler and runtime automagically flatten float arrays", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "flambda_invariant_checks", "Clflags.html#VALflambda_invariant_checks", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Config_boot", "Config_boot.html", "flambda", "Config_boot.html#VALflambda", "<div class=\"info\"> <p>Whether the compiler was configured for flambda</p> </div>", "Whether the compiler was configured for flambda", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "flambda", "Config_main.html#VALflambda", "<div class=\"info\"> <p>Whether the compiler was configured for flambda</p> </div>", "Whether the compiler was configured for flambda", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "flambda", "Config.html#VALflambda", "<div class=\"info\"> <p>Whether the compiler was configured for flambda</p> </div>", "Whether the compiler was configured for flambda", "<code class=\"type\">bool</code>", "bool"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "first", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALfirst", "", "", "<code class=\"type\">'a nonterminal -&gt; 'b terminal -&gt; bool</code>", "'a nonterminal -> 'b terminal -> bool"],
["CamlinternalMenhirLib.InspectionTableFormat.TABLES", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html", "first", "CamlinternalMenhirLib.InspectionTableFormat.TABLES.html#VALfirst", "", "", "<code class=\"type\">int * string</code>", "int * string"],
["Load_path", "Load_path.html", "find_uncap", "Load_path.html#VALfind_uncap", "<div class=\"info\"> <p>Same as <code class=\"code\">find</code>, but search also for uncapitalized name, i.e.</p> </div>", "Same as find, but search also for uncapitalized name, i.e.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Load_path.Dir", "Load_path.Dir.html", "find_uncap", "Load_path.Dir.html#VALfind_uncap", "<div class=\"info\"> <p>As <a href=\"Load_path.Dir.html#VALfind\"><code class=\"code\"><span class=\"constructor\">Load_path</span>.<span class=\"constructor\">Dir</span>.find</code></a>, but search also for uncapitalized name, i.e.</p> </div>", "As Load_path.Dir.find, but search also for uncapitalized name, i.e.", "<code class=\"type\"><a href=\"Load_path.Dir.html#TYPEt\">t</a> -&gt; string -&gt; string option</code>", "Load_path.Dir.t -> string -> string option"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "find_production", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALfind_production", "", "", "<code class=\"type\">int -&gt; <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEproduction\">production</a></code>", "int -> production"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "find_production", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALfind_production", "", "", "<code class=\"type\">int -&gt; <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a></code>", "int -> production"],
["Misc", "Misc.html", "find_in_path_uncap", "Misc.html#VALfind_in_path_uncap", "<div class=\"info\"> <p>Same, but search also for uncapitalized name, i.e.</p> </div>", "Same, but search also for uncapitalized name, i.e.", "<code class=\"type\">string list -&gt; string -&gt; string</code>", "string list -> string -> string"],
["Misc", "Misc.html", "find_in_path_rel", "Misc.html#VALfind_in_path_rel", "<div class=\"info\"> <p>Search a relative file in a list of directories.</p> </div>", "Search a relative file in a list of directories.", "<code class=\"type\">string list -&gt; string -&gt; string</code>", "string list -> string -> string"],
["Misc", "Misc.html", "find_in_path", "Misc.html#VALfind_in_path", "<div class=\"info\"> <p>Search a file in a list of directories.</p> </div>", "Search a file in a list of directories.", "<code class=\"type\">string list -&gt; string -&gt; string</code>", "string list -> string -> string"],
["Misc", "Misc.html", "find_first_mono", "Misc.html#VALfind_first_mono", "<div class=\"info\"> <p><code class=\"code\">find_first_mono&nbsp;p</code> takes an integer predicate <code class=\"code\">p&nbsp;:&nbsp;int&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;bool</code> that we assume: 1.</p> </div>", "find_first_mono\194\160p takes an integer predicate p\194\160:\194\160int\194\160->\194\160bool that we assume: 1.", "<code class=\"type\">(int -&gt; bool) -&gt; int</code>", "(int -> bool) -> int"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "find_and_chop_longest_common_prefix", "Misc.Stdlib.List.html#VALfind_and_chop_longest_common_prefix", "<div class=\"info\"> <p>Returns the longest list that, with respect to the provided equality function, is a prefix of both of the given lists.</p> </div>", "Returns the longest list that, with respect to the provided equality function, is a prefix of both of the given lists.", "<code class=\"type\">equal:('a -&gt; 'a -&gt; bool) -&gt;<br>       first:'a list -&gt;<br>       second:'a list -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPElongest_common_prefix_result\">longest_common_prefix_result</a></code>", "equal:('a -> 'a -> bool) ->       first:'a list ->       second:'a list -> 'a longest_common_prefix_result"],
["Load_path", "Load_path.html", "find", "Load_path.html#VALfind", "<div class=\"info\"> <p>Locate a file in the load path.</p> </div>", "Locate a file in the load path.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Load_path.Dir", "Load_path.Dir.html", "find", "Load_path.Dir.html#VALfind", "<div class=\"info\"> <p><code class=\"code\">find&nbsp;dir&nbsp;fn</code> returns the full path to <code class=\"code\">fn</code> in <code class=\"code\">dir</code>.</p> </div>", "find\194\160dir\194\160fn returns the full path to fn in dir.", "<code class=\"type\"><a href=\"Load_path.Dir.html#TYPEt\">t</a> -&gt; string -&gt; string option</code>", "Load_path.Dir.t -> string -> string option"],
["Consistbl.Make", "Consistbl.Make.html", "filter", "Consistbl.Make.html#VALfilter", "", "", "<code class=\"type\">(Module_name.t -&gt; bool) -&gt; <a href=\"Consistbl.Make.html#TYPEt\">t</a> -&gt; unit</code>", "(Module_name.Consistbl.Make.t -> bool) -> Consistbl.Make.t -> unit"],
["Load_path.Dir", "Load_path.Dir.html", "files", "Load_path.Dir.html#VALfiles", "<div class=\"info\"> <p>All the files in that directory.</p> </div>", "All the files in that directory.", "<code class=\"type\"><a href=\"Load_path.Dir.html#TYPEt\">t</a> -&gt; string list</code>", "Load_path.Dir.t -> string list"],
["Pparse", "Pparse.html", "file", "Pparse.html#VALfile", "", "", "<code class=\"type\">tool_name:string -&gt;<br>       string -&gt; (Lexing.lexbuf -&gt; 'a) -&gt; 'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; 'a</code>", "tool_name:string ->       string -> (Lexing.lexbuf -> 'a) -> 'a ast_kind -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "field", "Ast_helper.Exp.html#VALfield", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Ast_helper.lid -> Parsetree.expression"],
["Ast_helper.Type", "Ast_helper.Type.html", "field", "Ast_helper.Type.html#VALfield", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       ?mut:<a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPElabel_declaration\">Parsetree.label_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?info:Docstrings.info ->       ?mut:Asttypes.mutable_flag ->       Ast_helper.str -> Parsetree.core_type -> Parsetree.label_declaration"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "feed", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALfeed", "", "", "<code class=\"type\">'a symbol -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.html#TYPEposition\">CamlinternalMenhirLib.IncrementalEngine.position</a> -&gt;<br>       'a -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.html#TYPEposition\">CamlinternalMenhirLib.IncrementalEngine.position</a> -&gt;<br>       'b <a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEenv\">env</a> -&gt;<br>       'b <a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEenv\">env</a></code>", "'a symbol ->       CamlinternalMenhirLib.IncrementalEngine.position ->       'a ->       CamlinternalMenhirLib.IncrementalEngine.position ->       'b env ->       'b env"],
["Misc", "Misc.html", "fatal_errorf", "Misc.html#VALfatal_errorf", "<div class=\"info\"> <p>Format the arguments according to the given format string and raise <code class=\"code\"><span class=\"constructor\">Fatal_error</span></code> with the resulting string.</p> </div>", "Format the arguments according to the given format string and raise Fatal_error with the resulting string.", "<code class=\"type\">('a, Format.formatter, unit, 'b) format4 -&gt; 'a</code>", "('a, Format.formatter, unit, 'b) format4 -> 'a"],
["Misc", "Misc.html", "fatal_error", "Misc.html#VALfatal_error", "<div class=\"info\"> <p>Raise the <code class=\"code\"><span class=\"constructor\">Fatal_error</span></code> exception with the given string.</p> </div>", "Raise the Fatal_error exception with the given string.", "<code class=\"type\">string -&gt; 'a</code>", "string -> 'a"],
["Consistbl.Make", "Consistbl.Make.html", "extract_map", "Consistbl.Make.html#VALextract_map", "", "", "<code class=\"type\">Module_name.Set.t -&gt;<br>       <a href=\"Consistbl.Make.html#TYPEt\">t</a> -&gt; Digest.t option Module_name.Map.t</code>", "Module_name.Set.Consistbl.Make.t ->       Consistbl.Make.t -> Digest.Consistbl.Make.t option Module_name.Map.Consistbl.Make.t"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "extract", "CamlinternalMenhirLib.ErrorReports.html#VALextract", "", "", "<code class=\"type\">string -&gt; Lexing.position * Lexing.position -&gt; string</code>", "string -> Lexing.position * Lexing.position -> string"],
["Consistbl.Make", "Consistbl.Make.html", "extract", "Consistbl.Make.html#VALextract", "", "", "<code class=\"type\">Module_name.t list -&gt;<br>       <a href=\"Consistbl.Make.html#TYPEt\">t</a> -&gt; (Module_name.t * Digest.t option) list</code>", "Module_name.Consistbl.Make.t list ->       Consistbl.Make.t -> (Module_name.Consistbl.Make.t * Digest.Consistbl.Make.t option) list"],
["CamlinternalMenhirLib.InfiniteArray", "CamlinternalMenhirLib.InfiniteArray.html", "extent", "CamlinternalMenhirLib.InfiniteArray.html#VALextent", "<div class=\"info\"> <p><code class=\"code\">extent&nbsp;a</code> is the length of an initial segment of the array <code class=\"code\">a</code> that is sufficiently large to contain all <code class=\"code\">set</code> operations ever performed.</p> </div>", "extent\194\160a is the length of an initial segment of the array a that is sufficiently large to contain all set operations ever performed.", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.InfiniteArray.html#TYPEt\">t</a> -&gt; int</code>", "'a CamlinternalMenhirLib.InfiniteArray.t -> int"],
["Ast_mapper", "Ast_mapper.html", "extension_of_error", "Ast_mapper.html#VALextension_of_error", "<div class=\"info\"> <p>Encode an error into an 'ocaml.error' extension node which can be inserted in a generated Parsetree.</p> </div>", "Encode an error into an 'ocaml.error' extension node which can be inserted in a generated Parsetree.", "<code class=\"type\"><a href=\"Location.html#TYPEerror\">Location.error</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a></code>", "Location.error -> Parsetree.extension"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "extension", "Ast_helper.Typ.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "extension", "Ast_helper.Pat.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "extension", "Ast_helper.Exp.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.expression"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "extension", "Ast_helper.Mty.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "extension", "Ast_helper.Mod.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.module_expr"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "extension", "Ast_helper.Sig.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "extension", "Ast_helper.Str.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.structure_item"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "extension", "Ast_helper.Cty.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_type"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "extension", "Ast_helper.Ctf.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "extension", "Ast_helper.Cl.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "extension", "Ast_helper.Cf.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_field"],
["Parse", "Parse.html", "extended_module_path", "Parse.html#VALextended_module_path", "<div class=\"info\"> <p>This function parse syntactically valid path for an extended module.</p> </div>", "This function parse syntactically valid path for an extended module.", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "Lexing.lexbuf -> Longident.Parse.t"],
["Config_boot", "Config_boot.html", "ext_obj", "Config_boot.html#VALext_obj", "<div class=\"info\"> <p>Extension for object files, e.g.</p> </div>", "Extension for object files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ext_obj", "Config_main.html#VALext_obj", "<div class=\"info\"> <p>Extension for object files, e.g.</p> </div>", "Extension for object files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_obj", "Config.html#VALext_obj", "<div class=\"info\"> <p>Extension for object files, e.g.</p> </div>", "Extension for object files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ext_lib", "Config_boot.html#VALext_lib", "<div class=\"info\"> <p>Extension for library files, e.g.</p> </div>", "Extension for library files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ext_lib", "Config_main.html#VALext_lib", "<div class=\"info\"> <p>Extension for library files, e.g.</p> </div>", "Extension for library files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_lib", "Config.html#VALext_lib", "<div class=\"info\"> <p>Extension for library files, e.g.</p> </div>", "Extension for library files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ext_exe", "Config_boot.html#VALext_exe", "<div class=\"info\"> <p>Extension for executable programs, e.g.</p> </div>", "Extension for executable programs, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ext_exe", "Config_main.html#VALext_exe", "<div class=\"info\"> <p>Extension for executable programs, e.g.</p> </div>", "Extension for executable programs, e.g.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_exe", "Config.html#VALext_exe", "<div class=\"info\"> <p>Extension for executable programs, e.g.</p> </div>", "Extension for executable programs, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ext_dll", "Config_boot.html#VALext_dll", "<div class=\"info\"> <p>Extension for dynamically-loaded libraries, e.g.</p> </div>", "Extension for dynamically-loaded libraries, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ext_dll", "Config_main.html#VALext_dll", "<div class=\"info\"> <p>Extension for dynamically-loaded libraries, e.g.</p> </div>", "Extension for dynamically-loaded libraries, e.g.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_dll", "Config.html#VALext_dll", "<div class=\"info\"> <p>Extension for dynamically-loaded libraries, e.g.</p> </div>", "Extension for dynamically-loaded libraries, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ext_asm", "Config_boot.html#VALext_asm", "<div class=\"info\"> <p>Extension for assembler files, e.g.</p> </div>", "Extension for assembler files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ext_asm", "Config_main.html#VALext_asm", "<div class=\"info\"> <p>Extension for assembler files, e.g.</p> </div>", "Extension for assembler files, e.g.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_asm", "Config.html#VALext_asm", "<div class=\"info\"> <p>Extension for assembler files, e.g.</p> </div>", "Extension for assembler files, e.g.", "<code class=\"type\">string</code>", "string"],
["Parse", "Parse.html", "expression", "Parse.html#VALexpression", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "Lexing.lexbuf -> Parsetree.expression"],
["Pprintast", "Pprintast.html", "expression", "Pprintast.html#VALexpression", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; unit</code>", "Format.formatter -> Parsetree.expression -> unit"],
["Printast", "Printast.html", "expression", "Printast.html#VALexpression", "", "", "<code class=\"type\">int -&gt; Format.formatter -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; unit</code>", "int -> Format.formatter -> Parsetree.expression -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "explicit_arity", "Builtin_attributes.html#VALexplicit_arity", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Misc.Magic_number", "Misc.Magic_number.html", "explain_unexpected_error", "Misc.Magic_number.html#VALexplain_unexpected_error", "<div class=\"info\"> <p>Provides an explanation of the <code class=\"code\">unexpected_error</code>.</p> </div>", "Provides an explanation of the unexpected_error.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEunexpected_error\">unexpected_error</a> -&gt; string</code>", "unexpected_error -> string"],
["Misc.Magic_number", "Misc.Magic_number.html", "explain_parse_error", "Misc.Magic_number.html#VALexplain_parse_error", "<div class=\"info\"> <p>Produces an explanation for a parse error.</p> </div>", "Produces an explanation for a parse error.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> option -&gt; <a href=\"Misc.Magic_number.html#TYPEparse_error\">parse_error</a> -&gt; string</code>", "kind option -> parse_error -> string"],
["Misc", "Misc.html", "expand_directory", "Misc.html#VALexpand_directory", "<div class=\"info\"> <p><code class=\"code\">expand_directory&nbsp;alt&nbsp;file</code> eventually expands a <code class=\"code\">+</code> at the beginning of file into <code class=\"code\">alt</code> (an alternate root directory)</p> </div>", "expand_directory\194\160alt\194\160file eventually expands a + at the beginning of file into alt (an alternate root directory)", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "expand", "CamlinternalMenhirLib.ErrorReports.html#VALexpand", "", "", "<code class=\"type\">(int -&gt; string) -&gt; string -&gt; string</code>", "(int -> string) -> string -> string"],
["Misc.Stdlib.Array", "Misc.Stdlib.Array.html", "exists2", "Misc.Stdlib.Array.html#VALexists2", "<div class=\"info\"> <p>Same as <code class=\"code\"><span class=\"constructor\">Array</span>.exists2</code> from the standard library.</p> </div>", "Same as Array.exists2 from the standard library.", "<code class=\"type\">('a -&gt; 'b -&gt; bool) -&gt; 'a array -&gt; 'b array -&gt; bool</code>", "('a -> 'b -> bool) -> 'a array -> 'b array -> bool"],
["Config_boot", "Config_boot.html", "exec_magic_number", "Config_boot.html#VALexec_magic_number", "<div class=\"info\"> <p>Magic number for bytecode executable files</p> </div>", "Magic number for bytecode executable files", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "exec_magic_number", "Config_main.html#VALexec_magic_number", "<div class=\"info\"> <p>Magic number for bytecode executable files</p> </div>", "Magic number for bytecode executable files", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "exec_magic_number", "Config.html#VALexec_magic_number", "<div class=\"info\"> <p>Magic number for bytecode executable files</p> </div>", "Magic number for bytecode executable files", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "exception_", "Ast_helper.Pat.html#VALexception_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern -> Parsetree.pattern"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "exception_", "Ast_helper.Sig.html#VALexception_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEtype_exception\">Parsetree.type_exception</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.type_exception -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "exception_", "Ast_helper.Str.html#VALexception_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEtype_exception\">Parsetree.type_exception</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.type_exception -> Parsetree.structure_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "eval", "Ast_helper.Str.html#VALeval", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Parsetree.attributes ->       Parsetree.expression -> Parsetree.structure_item"],
["Location", "Location.html", "errorf", "Location.html#VALerrorf", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ?sub:<a href=\"Location.html#TYPEmsg\">msg</a> list -&gt;<br>       ('a, Format.formatter, unit, <a href=\"Location.html#TYPEerror\">error</a>) format4 -&gt; 'a</code>", "?loc:Location.t ->       ?sub:msg list ->       ('a, Format.formatter, unit, error) format4 -> 'a"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "error_value", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALerror_value", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEsemantic_value\">semantic_value</a></code>", "semantic_value"],
["Binutils", "Binutils.html", "error_to_string", "Binutils.html#VALerror_to_string", "", "", "<code class=\"type\"><a href=\"Binutils.html#TYPEerror\">error</a> -&gt; string</code>", "error -> string"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "error_terminal", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALerror_terminal", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEterminal\">terminal</a></code>", "terminal"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "error_terminal", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALerror_terminal", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "error_style_reader", "Clflags.html#VALerror_style_reader", "", "", "<code class=\"type\"><a href=\"Misc.Error_style.html#TYPEsetting\">Misc.Error_style.setting</a> <a href=\"Clflags.html#TYPEenv_reader\">env_reader</a></code>", "Misc.Error_style.setting env_reader"],
["Clflags", "Clflags.html", "error_style", "Clflags.html#VALerror_style", "", "", "<code class=\"type\"><a href=\"Misc.Error_style.html#TYPEsetting\">Misc.Error_style.setting</a> option ref</code>", "Misc.Error_style.setting option ref"],
["Clflags", "Clflags.html", "error_size", "Clflags.html#VALerror_size", "", "", "<code class=\"type\">int ref</code>", "int ref"],
["Location", "Location.html", "error_of_printer_file", "Location.html#VALerror_of_printer_file", "", "", "<code class=\"type\">(Format.formatter -&gt; 'a -&gt; unit) -&gt; 'a -&gt; <a href=\"Location.html#TYPEerror\">error</a></code>", "(Format.formatter -> 'a -> unit) -> 'a -> error"],
["Location", "Location.html", "error_of_printer", "Location.html#VALerror_of_printer", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ?sub:<a href=\"Location.html#TYPEmsg\">msg</a> list -&gt;<br>       (Format.formatter -&gt; 'a -&gt; unit) -&gt; 'a -&gt; <a href=\"Location.html#TYPEerror\">error</a></code>", "?loc:Location.t ->       ?sub:msg list ->       (Format.formatter -> 'a -> unit) -> 'a -> error"],
["Builtin_attributes", "Builtin_attributes.html", "error_of_extension", "Builtin_attributes.html#VALerror_of_extension", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Location.html#TYPEerror\">Location.error</a></code>", "Parsetree.extension -> Location.error"],
["Location", "Location.html", "error_of_exn", "Location.html#VALerror_of_exn", "", "", "<code class=\"type\">exn -&gt; [ `Already_displayed | `Ok of <a href=\"Location.html#TYPEerror\">error</a> ] option</code>", "exn -> [ `Already_displayed | `Ok of error ] option"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "error", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALerror", "", "", "<code class=\"type\">int * string</code>", "int * string"],
["Location", "Location.html", "error", "Location.html#VALerror", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt; ?sub:<a href=\"Location.html#TYPEmsg\">msg</a> list -&gt; string -&gt; <a href=\"Location.html#TYPEerror\">error</a></code>", "?loc:Location.t -> ?sub:msg list -> string -> error"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "equal", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALequal", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt;<br>       'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt; bool</code>", "'a env ->       'a env -> bool"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "equal", "Misc.Stdlib.List.html#VALequal", "<div class=\"info\"> <p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if and only if the given lists have the same length and content with respect to the given equality function.</p> </div>", "Returns true if and only if the given lists have the same length and content with respect to the given equality function.", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; bool</code>", "('a -> 'a -> bool) -> 'a Misc.Stdlib.List.t -> 'a Misc.Stdlib.List.t -> bool"],
["Targetint", "Targetint.html", "equal", "Targetint.html#VALequal", "<div class=\"info\"> <p>The equal function for target ints.</p> </div>", "The equal function for target ints.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; bool</code>", "Targetint.t -> Targetint.t -> bool"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "env_has_default_reduction", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALenv_has_default_reduction", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt; bool</code>", "'a env -> bool"],
["CamlinternalMenhirLib.EngineTypes.MONOLITHIC_ENGINE", "CamlinternalMenhirLib.EngineTypes.MONOLITHIC_ENGINE.html", "entry", "CamlinternalMenhirLib.EngineTypes.MONOLITHIC_ENGINE.html#VALentry", "", "", "<code class=\"type\">[ `Legacy | `Simplified ] -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.MONOLITHIC_ENGINE.html#TYPEstate\">state</a> -&gt;<br>       (Lexing.lexbuf -&gt;<br>        <a href=\"CamlinternalMenhirLib.EngineTypes.MONOLITHIC_ENGINE.html#TYPEtoken\">token</a>) -&gt;<br>       Lexing.lexbuf -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.MONOLITHIC_ENGINE.html#TYPEsemantic_value\">semantic_value</a></code>", "[ `Legacy | `Simplified ] ->       state ->       (Lexing.lexbuf ->        token) ->       Lexing.lexbuf ->       semantic_value"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "encode_prefix", "Build_path_prefix_map.html#VALencode_prefix", "", "", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEpath_prefix\">path_prefix</a> -&gt; string</code>", "path_prefix -> string"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "encode_pair", "Build_path_prefix_map.html#VALencode_pair", "", "", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEpair\">pair</a> -&gt; string</code>", "pair -> string"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "encode_map", "Build_path_prefix_map.html#VALencode_map", "", "", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEmap\">map</a> -&gt; string</code>", "map -> string"],
["Docstrings", "Docstrings.html", "empty_text_lazy", "Docstrings.html#VALempty_text_lazy", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">text</a> Lazy.t</code>", "text Lazy.Docstrings.t"],
["Docstrings", "Docstrings.html", "empty_text", "Docstrings.html#VALempty_text", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">text</a></code>", "text"],
["Docstrings", "Docstrings.html", "empty_info", "Docstrings.html#VALempty_info", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEinfo\">info</a></code>", "info"],
["Docstrings", "Docstrings.html", "empty_docs", "Docstrings.html#VALempty_docs", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocs\">docs</a></code>", "docs"],
["Misc", "Misc.html", "edit_distance", "Misc.html#VALedit_distance", "<div class=\"info\"> <p><code class=\"code\">edit_distance&nbsp;a&nbsp;b&nbsp;cutoff</code> computes the edit distance between strings <code class=\"code\">a</code> and <code class=\"code\">b</code>.</p> </div>", "edit_distance\194\160a\194\160b\194\160cutoff computes the edit distance between strings a and b.", "<code class=\"type\">string -&gt; string -&gt; int -&gt; int option</code>", "string -> string -> int -> int option"],
["Location", "Location.html", "echo_eof", "Location.html#VALecho_eof", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Clflags", "Clflags.html", "dumped_pass", "Clflags.html#VALdumped_pass", "", "", "<code class=\"type\">string -&gt; bool</code>", "string -> bool"],
["Clflags", "Clflags.html", "dump_typedtree", "Clflags.html#VALdump_typedtree", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_split", "Clflags.html#VALdump_split", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_spill", "Clflags.html#VALdump_spill", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_source", "Clflags.html#VALdump_source", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_shape", "Clflags.html#VALdump_shape", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_selection", "Clflags.html#VALdump_selection", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_scheduling", "Clflags.html#VALdump_scheduling", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_reload", "Clflags.html#VALdump_reload", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_regalloc", "Clflags.html#VALdump_regalloc", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_rawlambda", "Clflags.html#VALdump_rawlambda", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_rawflambda", "Clflags.html#VALdump_rawflambda", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_rawclambda", "Clflags.html#VALdump_rawclambda", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_prefer", "Clflags.html#VALdump_prefer", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_parsetree", "Clflags.html#VALdump_parsetree", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_live", "Clflags.html#VALdump_live", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_linear", "Clflags.html#VALdump_linear", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_lambda", "Clflags.html#VALdump_lambda", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_into_file", "Clflags.html#VALdump_into_file", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_interval", "Clflags.html#VALdump_interval", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_interf", "Clflags.html#VALdump_interf", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_instr", "Clflags.html#VALdump_instr", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_flambda_verbose", "Clflags.html#VALdump_flambda_verbose", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_flambda_let", "Clflags.html#VALdump_flambda_let", "", "", "<code class=\"type\">int option ref</code>", "int option ref"],
["Clflags", "Clflags.html", "dump_flambda", "Clflags.html#VALdump_flambda", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_dir", "Clflags.html#VALdump_dir", "", "", "<code class=\"type\">string option ref</code>", "string option ref"],
["Clflags", "Clflags.html", "dump_cse", "Clflags.html#VALdump_cse", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_combine", "Clflags.html#VALdump_combine", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_cmm", "Clflags.html#VALdump_cmm", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "dump_clambda", "Clflags.html#VALdump_clambda", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Ast_mapper", "Ast_mapper.html", "drop_ppx_context_str", "Ast_mapper.html#VALdrop_ppx_context_str", "<div class=\"info\"> <p>Drop the ocaml.ppx.context attribute from a structure.</p> </div>", "Drop the ocaml.ppx.context attribute from a structure.", "<code class=\"type\">restore:bool -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "restore:bool -> Parsetree.structure -> Parsetree.structure"],
["Ast_mapper", "Ast_mapper.html", "drop_ppx_context_sig", "Ast_mapper.html#VALdrop_ppx_context_sig", "<div class=\"info\"> <p>Same as <code class=\"code\">drop_ppx_context_str</code>, but for signatures.</p> </div>", "Same as drop_ppx_context_str, but for signatures.", "<code class=\"type\">restore:bool -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "restore:bool -> Parsetree.signature -> Parsetree.signature"],
["CamlinternalMenhirLib.General", "CamlinternalMenhirLib.General.html", "drop", "CamlinternalMenhirLib.General.html#VALdrop", "", "", "<code class=\"type\">int -&gt; 'a list -&gt; 'a list</code>", "int -> 'a list -> 'a list"],
["Clflags", "Clflags.html", "dont_write_files", "Clflags.html#VALdont_write_files", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["CamlinternalMenhirLib.InfiniteArray", "CamlinternalMenhirLib.InfiniteArray.html", "domain", "CamlinternalMenhirLib.InfiniteArray.html#VALdomain", "<div class=\"info\"> <p><code class=\"code\">domain&nbsp;a</code> is a fresh copy of an initial segment of the array <code class=\"code\">a</code> whose length is <code class=\"code\">extent&nbsp;a</code>.</p> </div>", "domain\194\160a is a fresh copy of an initial segment of the array a whose length is extent\194\160a.", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.InfiniteArray.html#TYPEt\">t</a> -&gt; 'a array</code>", "'a CamlinternalMenhirLib.InfiniteArray.t -> 'a array"],
["Docstrings", "Docstrings.html", "docstring_loc", "Docstrings.html#VALdocstring_loc", "<div class=\"info\"> <p>Get the location of a docstring</p> </div>", "Get the location of a docstring", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Location.html#TYPEt\">Location.t</a></code>", "docstring -> Location.Docstrings.t"],
["Docstrings", "Docstrings.html", "docstring_body", "Docstrings.html#VALdocstring_body", "<div class=\"info\"> <p>Get the text of a docstring</p> </div>", "Get the text of a docstring", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; string</code>", "docstring -> string"],
["Docstrings", "Docstrings.html", "docstring", "Docstrings.html#VALdocstring", "<div class=\"info\"> <p>Create a docstring</p> </div>", "Create a docstring", "<code class=\"type\">string -&gt; <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a></code>", "string -> Location.Docstrings.t -> docstring"],
["Docstrings", "Docstrings.html", "docs_attr", "Docstrings.html#VALdocs_attr", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "docstring -> Parsetree.attribute"],
["Clflags", "Clflags.html", "dllpaths", "Clflags.html#VALdllpaths", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Clflags", "Clflags.html", "dllibs", "Clflags.html#VALdllibs", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Clflags", "Clflags.html", "dlcode", "Clflags.html#VALdlcode", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Targetint", "Targetint.html", "div", "Targetint.html#VALdiv", "<div class=\"info\"> <p>Integer division.</p> </div>", "Integer division.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["Identifiable.Map", "Identifiable.Map.html", "disjoint_union", "Identifiable.Map.html#VALdisjoint_union", "<div class=\"info\"> <p><code class=\"code\">disjoint_union&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and <code class=\"code\">m2</code>.</p> </div>", "disjoint_union\194\160m1\194\160m2 contains all bindings from m1 and m2.", "<code class=\"type\">?eq:('a -&gt; 'a -&gt; bool) -&gt;<br>       ?print:(Format.formatter -&gt; 'a -&gt; unit) -&gt; 'a t -&gt; 'a t -&gt; 'a t</code>", "?eq:('a -> 'a -> bool) ->       ?print:(Format.formatter -> 'a -> unit) -> 'a Identifiable.Map.t -> 'a Identifiable.Map.t -> 'a Identifiable.Map.t"],
["Diffing.Define.S", "Diffing.Define.S.html", "diff", "Diffing.Define.S.html#VALdiff", "<div class=\"info\"> <p><code class=\"code\">diff&nbsp;state&nbsp;l&nbsp;r</code> computes the optimal patch between <code class=\"code\">l</code> and <code class=\"code\">r</code>, using the initial state <code class=\"code\">state</code>.</p> </div>", "diff\194\160state\194\160l\194\160r computes the optimal patch between l and r, using the initial state state.", "<code class=\"type\">D.state -&gt; D.left array -&gt; D.right array -&gt; <a href=\"Diffing.Define.html#TYPEpatch\">Diffing.Define.patch</a></code>", "D.state -> D.left array -> D.right array -> Diffing.Define.patch"],
["Diffing_with_keys.Define.Simple", "Diffing_with_keys.Define.Simple.html", "diff", "Diffing_with_keys.Define.Simple.html#VALdiff", "", "", "<code class=\"type\">D.state -&gt; D.left list -&gt; D.right list -&gt; <a href=\"Diffing_with_keys.Define.html#TYPEpatch\">Diffing_with_keys.Define.patch</a></code>", "D.state -> D.left list -> D.right list -> Diffing_with_keys.Define.patch"],
["Misc", "Misc.html", "did_you_mean", "Misc.html#VALdid_you_mean", "<div class=\"info\"> <p><code class=\"code\">did_you_mean&nbsp;ppf&nbsp;get_choices</code> hints that the user may have meant one of the option returned by calling <code class=\"code\">get_choices</code>.</p> </div>", "did_you_mean\194\160ppf\194\160get_choices hints that the user may have meant one of the option returned by calling get_choices.", "<code class=\"type\">Format.formatter -&gt; (unit -&gt; string list) -&gt; unit</code>", "Format.formatter -> (unit -> string list) -> unit"],
["Warnings", "Warnings.html", "descriptions", "Warnings.html#VALdescriptions", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEdescription\">description</a> list</code>", "description list"],
["Location", "Location.html", "deprecated_script_alert", "Location.html#VALdeprecated_script_alert", "<div class=\"info\"> <p><code class=\"code\">deprecated_script_alert&nbsp;command</code> prints an alert that <code class=\"code\">command&nbsp;foo</code> has been deprecated in favour of <code class=\"code\">command&nbsp;./foo</code></p> </div>", "deprecated_script_alert\194\160command prints an alert that command\194\160foo has been deprecated in favour of command\194\160./foo", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Location", "Location.html", "deprecated", "Location.html#VALdeprecated", "<div class=\"info\"> <p>Prints a deprecation alert.</p> </div>", "Prints a deprecation alert.", "<code class=\"type\">?def:<a href=\"Location.html#TYPEt\">t</a> -&gt; ?use:<a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; string -&gt; unit</code>", "?def:Location.t -> ?use:Location.t -> Location.t -> string -> unit"],
["Misc", "Misc.html", "delete_eol_spaces", "Misc.html#VALdelete_eol_spaces", "<div class=\"info\"> <p><code class=\"code\">delete_eol_spaces&nbsp;s</code> returns a fresh copy of <code class=\"code\">s</code> with any end of line spaces removed.</p> </div>", "delete_eol_spaces\194\160s returns a fresh copy of s with any end of line spaces removed.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Binutils", "Binutils.html", "defines_symbol", "Binutils.html#VALdefines_symbol", "", "", "<code class=\"type\"><a href=\"Binutils.html#TYPEt\">t</a> -&gt; string -&gt; bool</code>", "Binutils.t -> string -> bool"],
["Warnings", "Warnings.html", "defaults_warn_error", "Warnings.html#VALdefaults_warn_error", "", "", "<code class=\"type\">string</code>", "string"],
["Warnings", "Warnings.html", "defaults_w", "Warnings.html#VALdefaults_w", "", "", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "default_warning_reporter", "Location.html#VALdefault_warning_reporter", "<div class=\"info\"> <p>Original warning reporter for use in hooks.</p> </div>", "Original warning reporter for use in hooks.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; <a href=\"Location.html#TYPEreport\">report</a> option</code>", "Location.t -> Warnings.Location.t -> report option"],
["Clflags", "Clflags.html", "default_unbox_closures_factor", "Clflags.html#VALdefault_unbox_closures_factor", "", "", "<code class=\"type\">int</code>", "int"],
["Misc.Color", "Misc.Color.html", "default_styles", "Misc.Color.html#VALdefault_styles", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEstyles\">styles</a></code>", "styles"],
["Clflags", "Clflags.html", "default_simplify_rounds", "Clflags.html#VALdefault_simplify_rounds", "", "", "<code class=\"type\">int ref</code>", "int ref"],
["Misc.Color", "Misc.Color.html", "default_setting", "Misc.Color.html#VALdefault_setting", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEsetting\">setting</a></code>", "setting"],
["Misc.Error_style", "Misc.Error_style.html", "default_setting", "Misc.Error_style.html#VALdefault_setting", "", "", "<code class=\"type\"><a href=\"Misc.Error_style.html#TYPEsetting\">setting</a></code>", "setting"],
["Config_boot", "Config_boot.html", "default_rpath", "Config_boot.html#VALdefault_rpath", "<div class=\"info\"> <p>Option to add a directory to be searched for libraries at runtime (used by ocamlmklib)</p> </div>", "Option to add a directory to be searched for libraries at runtime (used by ocamlmklib)", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "default_rpath", "Config_main.html#VALdefault_rpath", "<div class=\"info\"> <p>Option to add a directory to be searched for libraries at runtime (used by ocamlmklib)</p> </div>", "Option to add a directory to be searched for libraries at runtime (used by ocamlmklib)", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "default_rpath", "Config.html#VALdefault_rpath", "<div class=\"info\"> <p>Option to add a directory to be searched for libraries at runtime (used by ocamlmklib)</p> </div>", "Option to add a directory to be searched for libraries at runtime (used by ocamlmklib)", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "default_report_printer", "Location.html#VALdefault_report_printer", "<div class=\"info\"> <p>Original report printer for use in hooks.</p> </div>", "Original report printer for use in hooks.", "<code class=\"type\">unit -&gt; <a href=\"Location.html#TYPEreport_printer\">report_printer</a></code>", "unit -> report_printer"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "default_reduction", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALdefault_reduction", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt;<br>       ('env -&gt; <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a> -&gt; 'answer) -&gt;<br>       ('env -&gt; 'answer) -&gt; 'env -&gt; 'answer</code>", "state ->       ('env -> production -> 'answer) ->       ('env -> 'answer) -> 'env -> 'answer"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "default_reduction", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALdefault_reduction", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.TableFormat.TABLES.t"],
["Ast_mapper", "Ast_mapper.html", "default_mapper", "Ast_mapper.html#VALdefault_mapper", "<div class=\"info\"> <p>A default mapper, which implements a \"deep identity\" mapping.</p> </div>", "A default mapper, which implements a \"deep identity\" mapping.", "<code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a></code>", "mapper"],
["Ast_helper", "Ast_helper.html", "default_loc", "Ast_helper.html#VALdefault_loc", "<div class=\"info\"> <p>Default value for all optional location arguments.</p> </div>", "Default value for all optional location arguments.", "<code class=\"type\"><a href=\"Ast_helper.html#TYPEloc\">loc</a> ref</code>", "loc ref"],
["Ast_iterator", "Ast_iterator.html", "default_iterator", "Ast_iterator.html#VALdefault_iterator", "<div class=\"info\"> <p>A default iterator, which implements a \"do not do anything\" mapping.</p> </div>", "A default iterator, which implements a \"do not do anything\" mapping.", "<code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a></code>", "iterator"],
["Clflags", "Clflags.html", "default_inline_toplevel_threshold", "Clflags.html#VALdefault_inline_toplevel_threshold", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_threshold", "Clflags.html#VALdefault_inline_threshold", "", "", "<code class=\"type\">float</code>", "float"],
["Clflags", "Clflags.html", "default_inline_prim_cost", "Clflags.html#VALdefault_inline_prim_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_max_unroll", "Clflags.html#VALdefault_inline_max_unroll", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_max_depth", "Clflags.html#VALdefault_inline_max_depth", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_lifting_benefit", "Clflags.html#VALdefault_inline_lifting_benefit", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_indirect_cost", "Clflags.html#VALdefault_inline_indirect_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_call_cost", "Clflags.html#VALdefault_inline_call_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_branch_factor", "Clflags.html#VALdefault_inline_branch_factor", "", "", "<code class=\"type\">float</code>", "float"],
["Clflags", "Clflags.html", "default_inline_branch_cost", "Clflags.html#VALdefault_inline_branch_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_alloc_cost", "Clflags.html#VALdefault_inline_alloc_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Config_boot", "Config_boot.html", "default_executable_name", "Config_boot.html#VALdefault_executable_name", "<div class=\"info\"> <p>Name of executable produced by linking if none is given with -o, e.g.</p> </div>", "Name of executable produced by linking if none is given with -o, e.g.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "default_executable_name", "Config_main.html#VALdefault_executable_name", "<div class=\"info\"> <p>Name of executable produced by linking if none is given with -o, e.g.</p> </div>", "Name of executable produced by linking if none is given with -o, e.g.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "default_executable_name", "Config.html#VALdefault_executable_name", "<div class=\"info\"> <p>Name of executable produced by linking if none is given with -o, e.g.</p> </div>", "Name of executable produced by linking if none is given with -o, e.g.", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "default_alert_reporter", "Location.html#VALdefault_alert_reporter", "<div class=\"info\"> <p>Original alert reporter for use in hooks.</p> </div>", "Original alert reporter for use in hooks.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEalert\">Warnings.alert</a> -&gt; <a href=\"Location.html#TYPEreport\">report</a> option</code>", "Location.t -> Warnings.alert -> report option"],
["Arg_helper.Make", "Arg_helper.Make.html", "default", "Arg_helper.Make.html#VALdefault", "", "", "<code class=\"type\">S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Value.Arg_helper.Make.t -> parsed"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "decode_prefix", "Build_path_prefix_map.html#VALdecode_prefix", "", "", "<code class=\"type\">string -&gt;<br>       (<a href=\"Build_path_prefix_map.html#TYPEpath_prefix\">path_prefix</a>, <a href=\"Build_path_prefix_map.html#TYPEerror_message\">error_message</a>)<br>       result</code>", "string ->       (path_prefix, error_message)       result"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "decode_pair", "Build_path_prefix_map.html#VALdecode_pair", "", "", "<code class=\"type\">string -&gt;<br>       (<a href=\"Build_path_prefix_map.html#TYPEpair\">pair</a>, <a href=\"Build_path_prefix_map.html#TYPEerror_message\">error_message</a>)<br>       result</code>", "string ->       (pair, error_message)       result"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "decode_map", "Build_path_prefix_map.html#VALdecode_map", "", "", "<code class=\"type\">string -&gt;<br>       (<a href=\"Build_path_prefix_map.html#TYPEmap\">map</a>, <a href=\"Build_path_prefix_map.html#TYPEerror_message\">error_message</a>)<br>       result</code>", "string ->       (map, error_message)       result"],
["Ast_helper.Te", "Ast_helper.Te.html", "decl", "Ast_helper.Te.html#VALdecl", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       ?vars:<a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> list -&gt;<br>       ?args:<a href=\"Parsetree.html#TYPEconstructor_arguments\">Parsetree.constructor_arguments</a> -&gt;<br>       ?res:<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?info:Docstrings.info ->       ?vars:Ast_helper.str list ->       ?args:Parsetree.constructor_arguments ->       ?res:Parsetree.core_type -> Ast_helper.str -> Parsetree.extension_constructor"],
["Misc", "Misc.html", "debug_prefix_map_flags", "Misc.html#VALdebug_prefix_map_flags", "<div class=\"info\"> <p>Returns the list of <code class=\"code\">--debug-prefix-map</code> flags to be passed to the assembler, built from the <code class=\"code\"><span class=\"constructor\">BUILD_PATH_PREFIX_MAP</span></code> environment variable.</p> </div>", "Returns the list of --debug-prefix-map flags to be passed to the assembler, built from the BUILD_PATH_PREFIX_MAP environment variable.", "<code class=\"type\">unit -&gt; string list</code>", "unit -> string list"],
["Clflags", "Clflags.html", "debug_full", "Clflags.html#VALdebug_full", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "debug", "Clflags.html#VALdebug", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Identifiable.Map", "Identifiable.Map.html", "data", "Identifiable.Map.html#VALdata", "", "", "<code class=\"type\">'a t -&gt; 'a list</code>", "'a Identifiable.Map.t -> 'a list"],
["Misc", "Misc.html", "cut_at", "Misc.html#VALcut_at", "<div class=\"info\"> <p><code class=\"code\"><span class=\"constructor\">String</span>.cut_at&nbsp;s&nbsp;c</code> returns a pair containing the sub-string before the first occurrence of <code class=\"code\">c</code> in <code class=\"code\">s</code>, and the sub-string after the first occurrence of <code class=\"code\">c</code> in <code class=\"code\">s</code>.</p> </div>", "String.cut_at\194\160s\194\160c returns a pair containing the sub-string before the first occurrence of c in s, and the sub-string after the first occurrence of c in s.", "<code class=\"type\">string -&gt; char -&gt; string * string</code>", "string -> char -> string * string"],
["Clflags", "Clflags.html", "custom_runtime", "Clflags.html#VALcustom_runtime", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Misc.Magic_number", "Misc.Magic_number.html", "current_version", "Misc.Magic_number.html#VALcurrent_version", "<div class=\"info\"> <p>the current version of each kind</p> </div>", "the current version of each kind", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> -&gt; <a href=\"Misc.Magic_number.html#TYPEversion\">version</a></code>", "kind -> version"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "current_state_number", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALcurrent_state_number", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEenv\">env</a> -&gt; int</code>", "'a env -> int"],
["Misc.Magic_number", "Misc.Magic_number.html", "current_raw", "Misc.Magic_number.html#VALcurrent_raw", "<div class=\"info\"> <p>the current magic number of each kind</p> </div>", "the current magic number of each kind", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> -&gt; <a href=\"Misc.Magic_number.html#TYPEraw\">raw</a></code>", "kind -> raw"],
["Location", "Location.html", "curr", "Location.html#VALcurr", "<div class=\"info\"> <p>Get the location of the current token from the <code class=\"code\">lexbuf</code>.</p> </div>", "Get the location of the current token from the lexbuf.", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "Lexing.lexbuf -> Location.t"],
["Clflags", "Clflags.html", "create_usage_msg", "Clflags.html#VALcreate_usage_msg", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Misc", "Misc.html", "create_hashtable", "Misc.html#VALcreate_hashtable", "<div class=\"info\"> <p>Create a hashtable with the given initial size and fills it with the given bindings.</p> </div>", "Create a hashtable with the given initial size and fills it with the given bindings.", "<code class=\"type\">int -&gt; ('a * 'b) list -&gt; ('a, 'b) Hashtbl.t</code>", "int -> ('a * 'b) list -> ('a, 'b) Hashtbl.Misc.t"],
["Lazy_backtrack", "Lazy_backtrack.html", "create_forced", "Lazy_backtrack.html#VALcreate_forced", "", "", "<code class=\"type\">'b -&gt; ('a, 'b) <a href=\"Lazy_backtrack.html#TYPEt\">t</a></code>", "'b -> ('a, 'b) Lazy_backtrack.t"],
["Lazy_backtrack", "Lazy_backtrack.html", "create_failed", "Lazy_backtrack.html#VALcreate_failed", "", "", "<code class=\"type\">exn -&gt; ('a, 'b) <a href=\"Lazy_backtrack.html#TYPEt\">t</a></code>", "exn -> ('a, 'b) Lazy_backtrack.t"],
["Ccomp", "Ccomp.html", "create_archive", "Ccomp.html#VALcreate_archive", "", "", "<code class=\"type\">string -&gt; string list -&gt; int</code>", "string -> string list -> int"],
["Consistbl.Make", "Consistbl.Make.html", "create", "Consistbl.Make.html#VALcreate", "", "", "<code class=\"type\">unit -&gt; <a href=\"Consistbl.Make.html#TYPEt\">t</a></code>", "unit -> Consistbl.Make.t"],
["Lazy_backtrack", "Lazy_backtrack.html", "create", "Lazy_backtrack.html#VALcreate", "", "", "<code class=\"type\">'a -&gt; ('a, 'b) <a href=\"Lazy_backtrack.html#TYPEt\">t</a></code>", "'a -> ('a, 'b) Lazy_backtrack.t"],
["Load_path.Dir", "Load_path.Dir.html", "create", "Load_path.Dir.html#VALcreate", "", "", "<code class=\"type\">string -&gt; <a href=\"Load_path.Dir.html#TYPEt\">t</a></code>", "string -> Load_path.Dir.t"],
["Misc.LongString", "Misc.LongString.html", "create", "Misc.LongString.html#VALcreate", "", "", "<code class=\"type\">int -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a></code>", "int -> Misc.LongString.t"],
["Parse", "Parse.html", "core_type", "Parse.html#VALcore_type", "", "", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Lexing.lexbuf -> Parsetree.core_type"],
["Pprintast", "Pprintast.html", "core_type", "Pprintast.html#VALcore_type", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; unit</code>", "Format.formatter -> Parsetree.core_type -> unit"],
["Misc", "Misc.html", "copy_file_chunk", "Misc.html#VALcopy_file_chunk", "<div class=\"info\"> <p><code class=\"code\">copy_file_chunk&nbsp;ic&nbsp;oc&nbsp;n</code> reads <code class=\"code\">n</code> bytes from <code class=\"code\">ic</code> and copies them to <code class=\"code\">oc</code>.</p> </div>", "copy_file_chunk\194\160ic\194\160oc\194\160n reads n bytes from ic and copies them to oc.", "<code class=\"type\">in_channel -&gt; out_channel -&gt; int -&gt; unit</code>", "in_channel -> out_channel -> int -> unit"],
["Misc", "Misc.html", "copy_file", "Misc.html#VALcopy_file", "<div class=\"info\"> <p><code class=\"code\">copy_file&nbsp;ic&nbsp;oc</code> reads the contents of file <code class=\"code\">ic</code> and copies them to <code class=\"code\">oc</code>.</p> </div>", "copy_file\194\160ic\194\160oc reads the contents of file ic and copies them to oc.", "<code class=\"type\">in_channel -&gt; out_channel -&gt; unit</code>", "in_channel -> out_channel -> unit"],
["Ast_helper.Type", "Ast_helper.Type.html", "constructor", "Ast_helper.Type.html#VALconstructor", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       ?vars:<a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> list -&gt;<br>       ?args:<a href=\"Parsetree.html#TYPEconstructor_arguments\">Parsetree.constructor_arguments</a> -&gt;<br>       ?res:<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEconstructor_declaration\">Parsetree.constructor_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?info:Docstrings.info ->       ?vars:Ast_helper.str list ->       ?args:Parsetree.constructor_arguments ->       ?res:Parsetree.core_type ->       Ast_helper.str -> Parsetree.constructor_declaration"],
["Ast_helper.Te", "Ast_helper.Te.html", "constructor", "Ast_helper.Te.html#VALconstructor", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor_kind\">Parsetree.extension_constructor_kind</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?info:Docstrings.info ->       Ast_helper.str ->       Parsetree.extension_constructor_kind -> Parsetree.extension_constructor"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "construct", "Ast_helper.Pat.html#VALconstruct", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> list * <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a>) option -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid ->       (Ast_helper.str list * Parsetree.pattern) option -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "construct", "Ast_helper.Exp.html#VALconstruct", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.expression option -> Parsetree.expression"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "constraint_", "Ast_helper.Pat.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern -> Parsetree.core_type -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "constraint_", "Ast_helper.Exp.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.core_type -> Parsetree.expression"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "constraint_", "Ast_helper.Mod.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_expr -> Parsetree.module_type -> Parsetree.module_expr"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "constraint_", "Ast_helper.Ctf.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.core_type -> Parsetree.core_type -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "constraint_", "Ast_helper.Cl.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.class_expr -> Parsetree.class_type -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "constraint_", "Ast_helper.Cf.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.core_type -> Parsetree.core_type -> Parsetree.class_field"],
["Parse", "Parse.html", "constr_ident", "Parse.html#VALconstr_ident", "<div class=\"info\"> <p>This function parses a syntactically valid path for a variant constructor.</p> </div>", "This function parses a syntactically valid path for a variant constructor.", "<code class=\"type\">Lexing.lexbuf -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a></code>", "Lexing.lexbuf -> Longident.Parse.t"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "constr", "Ast_helper.Typ.html#VALconstr", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "constr", "Ast_helper.Cty.html#VALconstr", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.class_type"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "constr", "Ast_helper.Cl.html#VALconstr", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.class_expr"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "constant", "Ast_helper.Pat.html#VALconstant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.constant -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "constant", "Ast_helper.Exp.html#VALconstant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.constant -> Parsetree.expression"],
["Strongly_connected_components.S", "Strongly_connected_components.S.html", "connected_components_sorted_from_roots_to_leaf", "Strongly_connected_components.S.html#VALconnected_components_sorted_from_roots_to_leaf", "", "", "<code class=\"type\"><a href=\"Strongly_connected_components.S.html#TYPEdirected_graph\">directed_graph</a> -&gt;<br>       <a href=\"Strongly_connected_components.S.html#TYPEcomponent\">component</a> array</code>", "directed_graph ->       component array"],
["Config_boot", "Config_boot.html", "config_var", "Config_boot.html#VALconfig_var", "<div class=\"info\"> <p>the configuration value of a variable, if it exists</p> </div>", "the configuration value of a variable, if it exists", "<code class=\"type\">string -&gt; string option</code>", "string -> string option"],
["Config_main", "Config_main.html", "config_var", "Config_main.html#VALconfig_var", "<div class=\"info\"> <p>the configuration value of a variable, if it exists</p> </div>", "the configuration value of a variable, if it exists", "<code class=\"type\">string -&gt; string option</code>", "string -> string option"],
["Config", "Config.html", "config_var", "Config.html#VALconfig_var", "<div class=\"info\"> <p>the configuration value of a variable, if it exists</p> </div>", "the configuration value of a variable, if it exists", "<code class=\"type\">string -&gt; string option</code>", "string -> string option"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "concrete", "Ast_helper.Cf.html#VALconcrete", "", "", "<code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a></code>", "Asttypes.override_flag -> Parsetree.expression -> Parsetree.class_field_kind"],
["Misc", "Misc.html", "concat_null_terminated", "Misc.html#VALconcat_null_terminated", "<div class=\"info\"> <p><code class=\"code\">concat_null_terminated&nbsp;[x1;x2;&nbsp;...&nbsp;xn]</code> is <code class=\"code\">x1&nbsp;^&nbsp;<span class=\"string\">\"\\000\"</span>&nbsp;^&nbsp;x2&nbsp;^&nbsp;<span class=\"string\">\"\\000\"</span>&nbsp;^&nbsp;...&nbsp;^&nbsp;xn&nbsp;^&nbsp;<span class=\"string\">\"\\000\"</span></code></p> </div>", "concat_null_terminated\194\160[x1;x2;\194\160...\194\160xn] is x1\194\160^\194\160\"\\000\"\194\160^\194\160x2\194\160^\194\160\"\\000\"\194\160^\194\160...\194\160^\194\160xn\194\160^\194\160\"\\000\"", "<code class=\"type\">string list -&gt; string</code>", "string list -> string"],
["Compression", "Compression.html", "compression_supported", "Compression.html#VALcompression_supported", "<div class=\"info\"> <p>Reports whether compression is supported.</p> </div>", "Reports whether compression is supported.", "<code class=\"type\">bool</code>", "bool"],
["CamlinternalMenhirLib.ErrorReports", "CamlinternalMenhirLib.ErrorReports.html", "compress", "CamlinternalMenhirLib.ErrorReports.html#VALcompress", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["CamlinternalMenhirLib.RowDisplacement", "CamlinternalMenhirLib.RowDisplacement.html", "compress", "CamlinternalMenhirLib.RowDisplacement.html#VALcompress", "", "", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt;<br>       ('a -&gt; bool) -&gt;<br>       'a -&gt;<br>       int -&gt;<br>       int -&gt; 'a array array -&gt; 'a <a href=\"CamlinternalMenhirLib.RowDisplacement.html#TYPEtable\">table</a></code>", "('a -> 'a -> bool) ->       ('a -> bool) ->       'a ->       int ->       int -> 'a array array -> 'a table"],
["Strongly_connected_components.S", "Strongly_connected_components.S.html", "component_graph", "Strongly_connected_components.S.html#VALcomponent_graph", "", "", "<code class=\"type\"><a href=\"Strongly_connected_components.S.html#TYPEdirected_graph\">directed_graph</a> -&gt;<br>       (<a href=\"Strongly_connected_components.S.html#TYPEcomponent\">component</a> * int list) array</code>", "directed_graph ->       (component * int list) array"],
["Clflags", "Clflags.html", "compile_only", "Clflags.html#VALcompile_only", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Ccomp", "Ccomp.html", "compile_file", "Ccomp.html#VALcompile_file", "", "", "<code class=\"type\">?output:string -&gt; ?opt:string -&gt; ?stable_name:string -&gt; string -&gt; int</code>", "?output:string -> ?opt:string -> ?stable_name:string -> string -> int"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "compare_terminals", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALcompare_terminals", "", "", "<code class=\"type\">'a terminal -&gt; 'b terminal -&gt; int</code>", "'a terminal -> 'b terminal -> int"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "compare_symbols", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALcompare_symbols", "", "", "<code class=\"type\">xsymbol -&gt; xsymbol -&gt; int</code>", "xsymbol -> xsymbol -> int"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "compare_productions", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALcompare_productions", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEproduction\">production</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEproduction\">production</a> -&gt; int</code>", "production ->       production -> int"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "compare_nonterminals", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALcompare_nonterminals", "", "", "<code class=\"type\">'a nonterminal -&gt; 'b nonterminal -&gt; int</code>", "'a nonterminal -> 'b nonterminal -> int"],
["CamlinternalMenhirLib.IncrementalEngine.INSPECTION", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html", "compare_items", "CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#VALcompare_items", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEitem\">item</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INSPECTION.html#TYPEitem\">item</a> -&gt; int</code>", "item ->       item -> int"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "compare", "Clflags.Compiler_pass.html#VALcompare", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> -&gt; <a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> -&gt; int</code>", "Clflags.Compiler_pass.t -> Clflags.Compiler_pass.t -> int"],
["Int_replace_polymorphic_compare", "Int_replace_polymorphic_compare.html", "compare", "Int_replace_polymorphic_compare.html#VALcompare", "", "", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Misc.Stdlib", "Misc.Stdlib.html", "compare", "Misc.Stdlib.html#VALcompare", "", "", "<code class=\"type\">'a -&gt; 'a -&gt; int</code>", "'a -> 'a -> int"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "compare", "Misc.Stdlib.List.html#VALcompare", "<div class=\"info\"> <p>The lexicographic order supported by the provided order.</p> </div>", "The lexicographic order supported by the provided order.", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; int</code>", "('a -> 'a -> int) -> 'a Misc.Stdlib.List.t -> 'a Misc.Stdlib.List.t -> int"],
["Targetint", "Targetint.html", "compare", "Targetint.html#VALcompare", "<div class=\"info\"> <p>The comparison function for target integers, with the same specification as <code class=\"code\"><span class=\"constructor\">Stdlib</span>.compare</code>.</p> </div>", "The comparison function for target integers, with the same specification as Stdlib.compare.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; int</code>", "Targetint.t -> Targetint.t -> int"],
["Lexer", "Lexer.html", "comments", "Lexer.html#VALcomments", "", "", "<code class=\"type\">unit -&gt; (string * <a href=\"Location.html#TYPEt\">Location.t</a>) list</code>", "unit -> (string * Location.Lexer.t) list"],
["Ccomp", "Ccomp.html", "command", "Ccomp.html#VALcommand", "", "", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["Clflags", "Clflags.html", "color_reader", "Clflags.html#VALcolor_reader", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEsetting\">Misc.Color.setting</a> <a href=\"Clflags.html#TYPEenv_reader\">env_reader</a></code>", "Misc.Color.setting env_reader"],
["Clflags", "Clflags.html", "color", "Clflags.html#VALcolor", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEsetting\">Misc.Color.setting</a> option ref</code>", "Misc.Color.setting option ref"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "coerce", "Ast_helper.Exp.html#VALcoerce", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> option -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       Parsetree.core_type option -> Parsetree.core_type -> Parsetree.expression"],
["Config_boot", "Config_boot.html", "cmxs_magic_number", "Config_boot.html#VALcmxs_magic_number", "<div class=\"info\"> <p>Magic number for dynamically-loadable plugins</p> </div>", "Magic number for dynamically-loadable plugins", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "cmxs_magic_number", "Config_main.html#VALcmxs_magic_number", "<div class=\"info\"> <p>Magic number for dynamically-loadable plugins</p> </div>", "Magic number for dynamically-loadable plugins", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmxs_magic_number", "Config.html#VALcmxs_magic_number", "<div class=\"info\"> <p>Magic number for dynamically-loadable plugins</p> </div>", "Magic number for dynamically-loadable plugins", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "cmxa_magic_number", "Config_boot.html#VALcmxa_magic_number", "<div class=\"info\"> <p>Magic number for libraries of compilation unit descriptions</p> </div>", "Magic number for libraries of compilation unit descriptions", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "cmxa_magic_number", "Config_main.html#VALcmxa_magic_number", "<div class=\"info\"> <p>Magic number for libraries of compilation unit descriptions</p> </div>", "Magic number for libraries of compilation unit descriptions", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmxa_magic_number", "Config.html#VALcmxa_magic_number", "<div class=\"info\"> <p>Magic number for libraries of compilation unit descriptions</p> </div>", "Magic number for libraries of compilation unit descriptions", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "cmx_magic_number", "Config_boot.html#VALcmx_magic_number", "<div class=\"info\"> <p>Magic number for compilation unit descriptions</p> </div>", "Magic number for compilation unit descriptions", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "cmx_magic_number", "Config_main.html#VALcmx_magic_number", "<div class=\"info\"> <p>Magic number for compilation unit descriptions</p> </div>", "Magic number for compilation unit descriptions", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmx_magic_number", "Config.html#VALcmx_magic_number", "<div class=\"info\"> <p>Magic number for compilation unit descriptions</p> </div>", "Magic number for compilation unit descriptions", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "cmt_magic_number", "Config_boot.html#VALcmt_magic_number", "<div class=\"info\"> <p>Magic number for compiled interface files</p> </div>", "Magic number for compiled interface files", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "cmt_magic_number", "Config_main.html#VALcmt_magic_number", "<div class=\"info\"> <p>Magic number for compiled interface files</p> </div>", "Magic number for compiled interface files", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmt_magic_number", "Config.html#VALcmt_magic_number", "<div class=\"info\"> <p>Magic number for compiled interface files</p> </div>", "Magic number for compiled interface files", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "cmo_magic_number", "Config_boot.html#VALcmo_magic_number", "<div class=\"info\"> <p>Magic number for object bytecode files</p> </div>", "Magic number for object bytecode files", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "cmo_magic_number", "Config_main.html#VALcmo_magic_number", "<div class=\"info\"> <p>Magic number for object bytecode files</p> </div>", "Magic number for object bytecode files", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmo_magic_number", "Config.html#VALcmo_magic_number", "<div class=\"info\"> <p>Magic number for object bytecode files</p> </div>", "Magic number for object bytecode files", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "cmm_invariants", "Clflags.html#VALcmm_invariants", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Config_boot", "Config_boot.html", "cmi_magic_number", "Config_boot.html#VALcmi_magic_number", "<div class=\"info\"> <p>Magic number for compiled interface files</p> </div>", "Magic number for compiled interface files", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "cmi_magic_number", "Config_main.html#VALcmi_magic_number", "<div class=\"info\"> <p>Magic number for compiled interface files</p> </div>", "Magic number for compiled interface files", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmi_magic_number", "Config.html#VALcmi_magic_number", "<div class=\"info\"> <p>Magic number for compiled interface files</p> </div>", "Magic number for compiled interface files", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "cmi_file", "Clflags.html#VALcmi_file", "", "", "<code class=\"type\">string option ref</code>", "string option ref"],
["Config_boot", "Config_boot.html", "cma_magic_number", "Config_boot.html#VALcma_magic_number", "<div class=\"info\"> <p>Magic number for archive files</p> </div>", "Magic number for archive files", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "cma_magic_number", "Config_main.html#VALcma_magic_number", "<div class=\"info\"> <p>Magic number for archive files</p> </div>", "Magic number for archive files", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cma_magic_number", "Config.html#VALcma_magic_number", "<div class=\"info\"> <p>Magic number for archive files</p> </div>", "Magic number for archive files", "<code class=\"type\">string</code>", "string"],
["Consistbl.Make", "Consistbl.Make.html", "clear", "Consistbl.Make.html#VALclear", "", "", "<code class=\"type\"><a href=\"Consistbl.Make.html#TYPEt\">t</a> -&gt; unit</code>", "Consistbl.Make.t -> unit"],
["Diffing", "Diffing.html", "classify", "Diffing.html#VALclassify", "", "", "<code class=\"type\">('a, 'b, 'c, 'd) <a href=\"Diffing.html#TYPEchange\">change</a> -&gt; <a href=\"Diffing.html#TYPEchange_kind\">change_kind</a></code>", "('a, 'b, 'c, 'd) change -> change_kind"],
["Clflags", "Clflags.html", "classic_inlining", "Clflags.html#VALclassic_inlining", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Clflags", "Clflags.html", "classic_arguments", "Clflags.html#VALclassic_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["Clflags", "Clflags.html", "classic", "Clflags.html#VALclassic", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Pprintast", "Pprintast.html", "class_type_field", "Pprintast.html#VALclass_type_field", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> -&gt; unit</code>", "Format.formatter -> Parsetree.class_type_field -> unit"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "class_type", "Ast_helper.Sig.html#VALclass_type", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_declaration\">Parsetree.class_type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_type_declaration list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "class_type", "Ast_helper.Str.html#VALclass_type", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_declaration\">Parsetree.class_type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_type_declaration list -> Parsetree.structure_item"],
["Pprintast", "Pprintast.html", "class_type", "Pprintast.html#VALclass_type", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; unit</code>", "Format.formatter -> Parsetree.class_type -> unit"],
["Pprintast", "Pprintast.html", "class_field", "Pprintast.html#VALclass_field", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> -&gt; unit</code>", "Format.formatter -> Parsetree.class_field -> unit"],
["Pprintast", "Pprintast.html", "class_expr", "Pprintast.html#VALclass_expr", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; unit</code>", "Format.formatter -> Parsetree.class_expr -> unit"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "class_", "Ast_helper.Typ.html#VALclass_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "class_", "Ast_helper.Sig.html#VALclass_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_description\">Parsetree.class_description</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_description list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "class_", "Ast_helper.Str.html#VALclass_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_declaration\">Parsetree.class_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_declaration list -> Parsetree.structure_item"],
["Clflags", "Clflags.html", "clambda_checks", "Clflags.html#VALclambda_checks", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Misc", "Misc.html", "chop_extensions", "Misc.html#VALchop_extensions", "<div class=\"info\"> <p>Return the given file name without its extensions.</p> </div>", "Return the given file name without its extensions.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Consistbl.Make", "Consistbl.Make.html", "check_noadd", "Consistbl.Make.html#VALcheck_noadd", "", "", "<code class=\"type\"><a href=\"Consistbl.Make.html#TYPEt\">t</a> -&gt; Module_name.t -&gt; Digest.t -&gt; <a href=\"Misc.html#TYPEfilepath\">Misc.filepath</a> -&gt; unit</code>", "Consistbl.Make.t -> Module_name.Consistbl.Make.t -> Digest.Consistbl.Make.t -> Misc.filepath -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_no_alert", "Builtin_attributes.html#VALcheck_no_alert", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; unit</code>", "Parsetree.attributes -> unit"],
["Warnings", "Warnings.html", "check_fatal", "Warnings.html#VALcheck_fatal", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_deprecated_mutable_inclusion", "Builtin_attributes.html#VALcheck_deprecated_mutable_inclusion", "", "", "<code class=\"type\">def:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       use:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "def:Location.Builtin_attributes.t ->       use:Location.Builtin_attributes.t ->       Location.Builtin_attributes.t -> Parsetree.attributes -> Parsetree.attributes -> string -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_deprecated_mutable", "Builtin_attributes.html#VALcheck_deprecated_mutable", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "Location.Builtin_attributes.t -> Parsetree.attributes -> string -> unit"],
["Misc.Magic_number", "Misc.Magic_number.html", "check_current", "Misc.Magic_number.html#VALcheck_current", "<div class=\"info\"> <p><code class=\"code\">check_current&nbsp;kind&nbsp;info</code> checks that the provided magic <code class=\"code\">info</code> is the current version of <code class=\"code\">kind</code>'s magic header.</p> </div>", "check_current\194\160kind\194\160info checks that the provided magic info is the current version of kind's magic header.", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> -&gt;<br>       <a href=\"Misc.Magic_number.html#TYPEinfo\">info</a> -&gt;<br>       (unit, <a href=\"Misc.Magic_number.html#TYPEunexpected_error\">unexpected_error</a>) result</code>", "kind ->       info ->       (unit, unexpected_error) result"],
["Builtin_attributes", "Builtin_attributes.html", "check_alerts_inclusion", "Builtin_attributes.html#VALcheck_alerts_inclusion", "", "", "<code class=\"type\">def:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       use:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "def:Location.Builtin_attributes.t ->       use:Location.Builtin_attributes.t ->       Location.Builtin_attributes.t -> Parsetree.attributes -> Parsetree.attributes -> string -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_alerts", "Builtin_attributes.html#VALcheck_alerts", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "Location.Builtin_attributes.t -> Parsetree.attributes -> string -> unit"],
["Consistbl.Make", "Consistbl.Make.html", "check", "Consistbl.Make.html#VALcheck", "", "", "<code class=\"type\"><a href=\"Consistbl.Make.html#TYPEt\">t</a> -&gt; Module_name.t -&gt; Digest.t -&gt; <a href=\"Misc.html#TYPEfilepath\">Misc.filepath</a> -&gt; unit</code>", "Consistbl.Make.t -> Module_name.Consistbl.Make.t -> Digest.Consistbl.Make.t -> Misc.filepath -> unit"],
["Ast_helper.Const", "Ast_helper.Const.html", "char", "Ast_helper.Const.html#VALchar", "", "", "<code class=\"type\">char -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "char -> Parsetree.constant"],
["Config_boot", "Config_boot.html", "ccomp_type", "Config_boot.html#VALccomp_type", "<div class=\"info\"> <p>The \"kind\" of the C compiler, assembler and linker used: one of \"cc\" (for Unix-style C compilers) \"msvc\" (for Microsoft Visual C++ and MASM)</p> </div>", "The \"kind\" of the C compiler, assembler and linker used: one of \"cc\" (for Unix-style C compilers) \"msvc\" (for Microsoft Visual C++ and MASM)", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ccomp_type", "Config_main.html#VALccomp_type", "<div class=\"info\"> <p>The \"kind\" of the C compiler, assembler and linker used: one of \"cc\" (for Unix-style C compilers) \"msvc\" (for Microsoft Visual C++ and MASM)</p> </div>", "The \"kind\" of the C compiler, assembler and linker used: one of \"cc\" (for Unix-style C compilers) \"msvc\" (for Microsoft Visual C++ and MASM)", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ccomp_type", "Config.html#VALccomp_type", "<div class=\"info\"> <p>The \"kind\" of the C compiler, assembler and linker used: one of \"cc\" (for Unix-style C compilers) \"msvc\" (for Microsoft Visual C++ and MASM)</p> </div>", "The \"kind\" of the C compiler, assembler and linker used: one of \"cc\" (for Unix-style C compilers) \"msvc\" (for Microsoft Visual C++ and MASM)", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "ccobjs", "Clflags.html#VALccobjs", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "case", "Ast_helper.Exp.html#VALcase", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt;<br>       ?guard:<a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a></code>", "Parsetree.pattern ->       ?guard:Parsetree.expression -> Parsetree.expression -> Parsetree.case"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "can_save_ir_after", "Clflags.Compiler_pass.html#VALcan_save_ir_after", "", "", "<code class=\"type\"><a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> -&gt; bool</code>", "Clflags.Compiler_pass.t -> bool"],
["Ccomp", "Ccomp.html", "call_linker", "Ccomp.html#VALcall_linker", "", "", "<code class=\"type\"><a href=\"Ccomp.html#TYPElink_mode\">link_mode</a> -&gt; string -&gt; string list -&gt; string -&gt; int</code>", "link_mode -> string -> string list -> string -> int"],
["Pparse", "Pparse.html", "call_external_preprocessor", "Pparse.html#VALcall_external_preprocessor", "", "", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["Config_boot", "Config_boot.html", "c_output_obj", "Config_boot.html#VALc_output_obj", "<div class=\"info\"> <p>Name of the option of the C compiler for specifying the output file</p> </div>", "Name of the option of the C compiler for specifying the output file", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "c_output_obj", "Config_main.html#VALc_output_obj", "<div class=\"info\"> <p>Name of the option of the C compiler for specifying the output file</p> </div>", "Name of the option of the C compiler for specifying the output file", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "c_output_obj", "Config.html#VALc_output_obj", "<div class=\"info\"> <p>Name of the option of the C compiler for specifying the output file</p> </div>", "Name of the option of the C compiler for specifying the output file", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "c_has_debug_prefix_map", "Config_boot.html#VALc_has_debug_prefix_map", "<div class=\"info\"> <p>Whether the C compiler supports -fdebug-prefix-map</p> </div>", "Whether the C compiler supports -fdebug-prefix-map", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "c_has_debug_prefix_map", "Config_main.html#VALc_has_debug_prefix_map", "<div class=\"info\"> <p>Whether the C compiler supports -fdebug-prefix-map</p> </div>", "Whether the C compiler supports -fdebug-prefix-map", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "c_has_debug_prefix_map", "Config.html#VALc_has_debug_prefix_map", "<div class=\"info\"> <p>Whether the C compiler supports -fdebug-prefix-map</p> </div>", "Whether the C compiler supports -fdebug-prefix-map", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "c_compiler", "Clflags.html#VALc_compiler", "", "", "<code class=\"type\">string option ref</code>", "string option ref"],
["Config_boot", "Config_boot.html", "c_compiler", "Config_boot.html#VALc_compiler", "<div class=\"info\"> <p>The compiler to use for compiling C files</p> </div>", "The compiler to use for compiling C files", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "c_compiler", "Config_main.html#VALc_compiler", "<div class=\"info\"> <p>The compiler to use for compiling C files</p> </div>", "The compiler to use for compiling C files", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "c_compiler", "Config.html#VALc_compiler", "<div class=\"info\"> <p>The compiler to use for compiling C files</p> </div>", "The compiler to use for compiling C files", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "bytecomp_c_libraries", "Config_boot.html#VALbytecomp_c_libraries", "<div class=\"info\"> <p>The C libraries to link with custom runtimes</p> </div>", "The C libraries to link with custom runtimes", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "bytecomp_c_libraries", "Config_main.html#VALbytecomp_c_libraries", "<div class=\"info\"> <p>The C libraries to link with custom runtimes</p> </div>", "The C libraries to link with custom runtimes", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "bytecomp_c_libraries", "Config.html#VALbytecomp_c_libraries", "<div class=\"info\"> <p>The C libraries to link with custom runtimes</p> </div>", "The C libraries to link with custom runtimes", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "bytecode_compatible_32", "Clflags.html#VALbytecode_compatible_32", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Misc.LongString", "Misc.LongString.html", "blit_string", "Misc.LongString.html#VALblit_string", "", "", "<code class=\"type\">string -&gt; int -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "string -> int -> Misc.LongString.t -> int -> int -> unit"],
["Misc.LongString", "Misc.LongString.html", "blit", "Misc.LongString.html#VALblit", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "Misc.LongString.t -> int -> Misc.LongString.t -> int -> int -> unit"],
["Config_boot", "Config_boot.html", "bindir", "Config_boot.html#VALbindir", "<div class=\"info\"> <p>The directory containing the binary programs</p> </div>", "The directory containing the binary programs", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "bindir", "Config_main.html#VALbindir", "<div class=\"info\"> <p>The directory containing the binary programs</p> </div>", "The directory containing the binary programs", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "bindir", "Config.html#VALbindir", "<div class=\"info\"> <p>The directory containing the binary programs</p> </div>", "The directory containing the binary programs", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "binding_op", "Ast_helper.Exp.html#VALbinding_op", "", "", "<code class=\"type\"><a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEbinding_op\">Parsetree.binding_op</a></code>", "Ast_helper.str ->       Parsetree.pattern ->       Parsetree.expression -> Ast_helper.loc -> Parsetree.binding_op"],
["Pprintast", "Pprintast.html", "binding", "Pprintast.html#VALbinding", "", "", "<code class=\"type\">Format.formatter -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> -&gt; unit</code>", "Format.formatter -> Parsetree.value_binding -> unit"],
["Clflags", "Clflags.html", "binary_annotations", "Clflags.html#VALbinary_annotations", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Location", "Location.html", "best_toplevel_printer", "Location.html#VALbest_toplevel_printer", "<div class=\"info\"> <p>Detects the terminal capabilities and selects an adequate printer</p> </div>", "Detects the terminal capabilities and selects an adequate printer", "<code class=\"type\">unit -&gt; <a href=\"Location.html#TYPEreport_printer\">report_printer</a></code>", "unit -> report_printer"],
["Location", "Location.html", "batch_mode_printer", "Location.html#VALbatch_mode_printer", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEreport_printer\">report_printer</a></code>", "report_printer"],
["Terminfo", "Terminfo.html", "backup", "Terminfo.html#VALbackup", "", "", "<code class=\"type\">out_channel -&gt; int -&gt; unit</code>", "out_channel -> int -> unit"],
["Warnings", "Warnings.html", "backup", "Warnings.html#VALbackup", "", "", "<code class=\"type\">unit -&gt; <a href=\"Warnings.html#TYPEstate\">state</a></code>", "unit -> state"],
["Lazy_backtrack", "Lazy_backtrack.html", "backtrack", "Lazy_backtrack.html#VALbacktrack", "", "", "<code class=\"type\"><a href=\"Lazy_backtrack.html#TYPElog\">log</a> -&gt; unit</code>", "log -> unit"],
["Clflags.Compiler_pass", "Clflags.Compiler_pass.html", "available_pass_names", "Clflags.Compiler_pass.html#VALavailable_pass_names", "", "", "<code class=\"type\">filter:(<a href=\"Clflags.Compiler_pass.html#TYPEt\">t</a> -&gt; bool) -&gt; native:bool -&gt; string list</code>", "filter:(Clflags.Compiler_pass.t -> bool) -> native:bool -> string list"],
["Load_path", "Load_path.html", "auto_include_otherlibs", "Load_path.html#VALauto_include_otherlibs", "<div class=\"info\"> <p><code class=\"code\">auto_include_otherlibs&nbsp;alert</code> is a callback function to be passed to <a href=\"Load_path.html#VALinit\"><code class=\"code\"><span class=\"constructor\">Load_path</span>.init</code></a> and automatically adds <code class=\"code\">-<span class=\"constructor\">I</span>&nbsp;+lib</code> to the load path after calling <code class=\"code\">alert&nbsp;lib</code>.</p> </div>", "auto_include_otherlibs\194\160alert is a callback function to be passed to Load_path.init and automatically adds -I\194\160+lib to the load path after calling alert\194\160lib.", "<code class=\"type\">(string -&gt; unit) -&gt; <a href=\"Load_path.html#TYPEauto_include_callback\">auto_include_callback</a></code>", "(string -> unit) -> auto_include_callback"],
["Location", "Location.html", "auto_include_alert", "Location.html#VALauto_include_alert", "<div class=\"info\"> <p>Prints an alert that -I +lib has been automatically added to the load path</p> </div>", "Prints an alert that -I +lib has been automatically added to the load path", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Ast_mapper", "Ast_mapper.html", "attribute_of_warning", "Ast_mapper.html#VALattribute_of_warning", "<div class=\"info\"> <p>Encode a warning message into an 'ocaml.ppwarning' attribute which can be inserted in a generated Parsetree.</p> </div>", "Encode a warning message into an 'ocaml.ppwarning' attribute which can be inserted in a generated Parsetree.", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; string -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "Location.Ast_mapper.t -> string -> Parsetree.attribute"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "attribute", "Ast_helper.Sig.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "attribute", "Ast_helper.Str.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.structure_item"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "attribute", "Ast_helper.Ctf.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "attribute", "Ast_helper.Cf.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.class_field"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "attr", "Ast_helper.Typ.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Parsetree.core_type -> Parsetree.attribute -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "attr", "Ast_helper.Pat.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "Parsetree.pattern -> Parsetree.attribute -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "attr", "Ast_helper.Exp.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "Parsetree.expression -> Parsetree.attribute -> Parsetree.expression"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "attr", "Ast_helper.Mty.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "Parsetree.module_type -> Parsetree.attribute -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "attr", "Ast_helper.Mod.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "Parsetree.module_expr -> Parsetree.attribute -> Parsetree.module_expr"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "attr", "Ast_helper.Cty.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "Parsetree.class_type -> Parsetree.attribute -> Parsetree.class_type"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "attr", "Ast_helper.Ctf.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "Parsetree.class_type_field ->       Parsetree.attribute -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "attr", "Ast_helper.Cl.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "Parsetree.class_expr -> Parsetree.attribute -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "attr", "Ast_helper.Cf.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "Parsetree.class_field -> Parsetree.attribute -> Parsetree.class_field"],
["Config_boot", "Config_boot.html", "ast_intf_magic_number", "Config_boot.html#VALast_intf_magic_number", "<div class=\"info\"> <p>Magic number for file holding an interface syntax tree</p> </div>", "Magic number for file holding an interface syntax tree", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ast_intf_magic_number", "Config_main.html#VALast_intf_magic_number", "<div class=\"info\"> <p>Magic number for file holding an interface syntax tree</p> </div>", "Magic number for file holding an interface syntax tree", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ast_intf_magic_number", "Config.html#VALast_intf_magic_number", "<div class=\"info\"> <p>Magic number for file holding an interface syntax tree</p> </div>", "Magic number for file holding an interface syntax tree", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ast_impl_magic_number", "Config_boot.html#VALast_impl_magic_number", "<div class=\"info\"> <p>Magic number for file holding an implementation syntax tree</p> </div>", "Magic number for file holding an implementation syntax tree", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ast_impl_magic_number", "Config_main.html#VALast_impl_magic_number", "<div class=\"info\"> <p>Magic number for file holding an implementation syntax tree</p> </div>", "Magic number for file holding an implementation syntax tree", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ast_impl_magic_number", "Config.html#VALast_impl_magic_number", "<div class=\"info\"> <p>Magic number for file holding an implementation syntax tree</p> </div>", "Magic number for file holding an implementation syntax tree", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "assert_", "Ast_helper.Exp.html#VALassert_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression"],
["Config_boot", "Config_boot.html", "asm_cfi_supported", "Config_boot.html#VALasm_cfi_supported", "<div class=\"info\"> <p>Whether assembler understands CFI directives</p> </div>", "Whether assembler understands CFI directives", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "asm_cfi_supported", "Config_main.html#VALasm_cfi_supported", "<div class=\"info\"> <p>Whether assembler understands CFI directives</p> </div>", "Whether assembler understands CFI directives", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "asm_cfi_supported", "Config.html#VALasm_cfi_supported", "<div class=\"info\"> <p>Whether assembler understands CFI directives</p> </div>", "Whether assembler understands CFI directives", "<code class=\"type\">bool</code>", "bool"],
["Config_boot", "Config_boot.html", "asm", "Config_boot.html#VALasm", "<div class=\"info\"> <p>The assembler (and flags) to use for assembling ocamlopt-generated code.</p> </div>", "The assembler (and flags) to use for assembling ocamlopt-generated code.", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "asm", "Config_main.html#VALasm", "<div class=\"info\"> <p>The assembler (and flags) to use for assembling ocamlopt-generated code.</p> </div>", "The assembler (and flags) to use for assembling ocamlopt-generated code.", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "asm", "Config.html#VALasm", "<div class=\"info\"> <p>The assembler (and flags) to use for assembling ocamlopt-generated code.</p> </div>", "The assembler (and flags) to use for assembling ocamlopt-generated code.", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "as_has_debug_prefix_map", "Config_boot.html#VALas_has_debug_prefix_map", "<div class=\"info\"> <p>Whether the assembler supports --debug-prefix-map</p> </div>", "Whether the assembler supports --debug-prefix-map", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "as_has_debug_prefix_map", "Config_main.html#VALas_has_debug_prefix_map", "<div class=\"info\"> <p>Whether the assembler supports --debug-prefix-map</p> </div>", "Whether the assembler supports --debug-prefix-map", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "as_has_debug_prefix_map", "Config.html#VALas_has_debug_prefix_map", "<div class=\"info\"> <p>Whether the assembler supports --debug-prefix-map</p> </div>", "Whether the assembler supports --debug-prefix-map", "<code class=\"type\">bool</code>", "bool"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "arrow", "Ast_helper.Typ.html#VALarrow", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.core_type -> Parsetree.core_type -> Parsetree.core_type"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "arrow", "Ast_helper.Cty.html#VALarrow", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.core_type -> Parsetree.class_type -> Parsetree.class_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "array", "Ast_helper.Pat.html#VALarray", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> list -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern list -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "array", "Ast_helper.Exp.html#VALarray", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression list -> Parsetree.expression"],
["Clflags", "Clflags.html", "arg_spec", "Clflags.html#VALarg_spec", "", "", "<code class=\"type\">(string * Arg.spec * string) list ref</code>", "(string * Arg.spec * string) list ref"],
["Config_boot", "Config_boot.html", "architecture", "Config_boot.html#VALarchitecture", "<div class=\"info\"> <p>Name of processor type for the native-code compiler</p> </div>", "Name of processor type for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "architecture", "Config_main.html#VALarchitecture", "<div class=\"info\"> <p>Name of processor type for the native-code compiler</p> </div>", "Name of processor type for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "architecture", "Config.html#VALarchitecture", "<div class=\"info\"> <p>Name of processor type for the native-code compiler</p> </div>", "Name of processor type for the native-code compiler", "<code class=\"type\">string</code>", "string"],
["Config_boot", "Config_boot.html", "ar_supports_response_files", "Config_boot.html#VALar_supports_response_files", "<div class=\"info\"> <p>Whether ar supports @FILE arguments.</p> </div>", "Whether ar supports @FILE arguments.", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "ar_supports_response_files", "Config_main.html#VALar_supports_response_files", "<div class=\"info\"> <p>Whether ar supports @FILE arguments.</p> </div>", "Whether ar supports @FILE arguments.", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "ar_supports_response_files", "Config.html#VALar_supports_response_files", "<div class=\"info\"> <p>Whether ar supports @FILE arguments.</p> </div>", "Whether ar supports @FILE arguments.", "<code class=\"type\">bool</code>", "bool"],
["Config_boot", "Config_boot.html", "ar", "Config_boot.html#VALar", "<div class=\"info\"> <p>Name of the ar command, or \"\" if not needed (MSVC)</p> </div>", "Name of the ar command, or \"\" if not needed (MSVC)", "<code class=\"type\">string</code>", "string"],
["Config_main", "Config_main.html", "ar", "Config_main.html#VALar", "<div class=\"info\"> <p>Name of the ar command, or \"\" if not needed (MSVC)</p> </div>", "Name of the ar command, or \"\" if not needed (MSVC)", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ar", "Config.html#VALar", "<div class=\"info\"> <p>Name of the ar command, or \"\" if not needed (MSVC)</p> </div>", "Name of the ar command, or \"\" if not needed (MSVC)", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "apply_unit", "Ast_helper.Mod.html#VALapply_unit", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.module_expr"],
["Pparse", "Pparse.html", "apply_rewriters_str", "Pparse.html#VALapply_rewriters_str", "", "", "<code class=\"type\">?restore:bool -&gt;<br>       tool_name:string -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "?restore:bool ->       tool_name:string -> Parsetree.structure -> Parsetree.structure"],
["Pparse", "Pparse.html", "apply_rewriters_sig", "Pparse.html#VALapply_rewriters_sig", "", "", "<code class=\"type\">?restore:bool -&gt;<br>       tool_name:string -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "?restore:bool ->       tool_name:string -> Parsetree.signature -> Parsetree.signature"],
["Pparse", "Pparse.html", "apply_rewriters", "Pparse.html#VALapply_rewriters", "<div class=\"info\"> <p>If <code class=\"code\">restore&nbsp;=&nbsp;<span class=\"keyword\">true</span></code> (the default), cookies set by external rewriters will be kept for later calls.</p> </div>", "If restore\194\160=\194\160true (the default), cookies set by external rewriters will be kept for later calls.", "<code class=\"type\">?restore:bool -&gt; tool_name:string -&gt; 'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; 'a -&gt; 'a</code>", "?restore:bool -> tool_name:string -> 'a ast_kind -> 'a -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "apply", "Ast_helper.Exp.html#VALapply", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       (<a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       (Asttypes.arg_label * Parsetree.expression) list -> Parsetree.expression"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "apply", "Ast_helper.Mod.html#VALapply", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_expr -> Parsetree.module_expr -> Parsetree.module_expr"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "apply", "Ast_helper.Cl.html#VALapply", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt;<br>       (<a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.class_expr ->       (Asttypes.arg_label * Parsetree.expression) list -> Parsetree.class_expr"],
["Ast_mapper", "Ast_mapper.html", "apply", "Ast_mapper.html#VALapply", "<div class=\"info\"> <p>Apply a mapper (parametrized by the unit name) to a dumped parsetree found in the <code class=\"code\">source</code> file and put the result in the <code class=\"code\">target</code> file.</p> </div>", "Apply a mapper (parametrized by the unit name) to a dumped parsetree found in the source file and put the result in the target file.", "<code class=\"type\">source:string -&gt; target:string -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; unit</code>", "source:string -> target:string -> mapper -> unit"],
["Clflags", "Clflags.html", "applicative_functors", "Clflags.html#VALapplicative_functors", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Load_path", "Load_path.html", "append_dir", "Load_path.html#VALappend_dir", "<div class=\"info\"> <p><code class=\"code\">append_dir&nbsp;d</code> adds <code class=\"code\">d</code> to the end of the load path (i.e.</p> </div>", "append_dir\194\160d adds d to the end of the load path (i.e.", "<code class=\"type\"><a href=\"Load_path.Dir.html#TYPEt\">Dir.t</a> -&gt; unit</code>", "Dir.Load_path.t -> unit"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "any", "Ast_helper.Typ.html#VALany", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; unit -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc -> ?attrs:Ast_helper.attrs -> unit -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "any", "Ast_helper.Pat.html#VALany", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; unit -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc -> ?attrs:Ast_helper.attrs -> unit -> Parsetree.pattern"],
["Misc.Color", "Misc.Color.html", "ansi_of_style_l", "Misc.Color.html#VALansi_of_style_l", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEstyle\">style</a> list -&gt; string</code>", "style list -> string"],
["Clflags", "Clflags.html", "annotations", "Clflags.html#VALannotations", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Misc.Stdlib.Array", "Misc.Stdlib.Array.html", "all_somes", "Misc.Stdlib.Array.html#VALall_somes", "", "", "<code class=\"type\">'a option array -&gt; 'a array option</code>", "'a option array -> 'a array option"],
["Clflags", "Clflags.html", "all_ppx", "Clflags.html#VALall_ppx", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Clflags", "Clflags.html", "all_passes", "Clflags.html#VALall_passes", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Misc.Magic_number", "Misc.Magic_number.html", "all_kinds", "Misc.Magic_number.html#VALall_kinds", "", "", "<code class=\"type\"><a href=\"Misc.Magic_number.html#TYPEkind\">kind</a> list</code>", "kind list"],
["Profile", "Profile.html", "all_columns", "Profile.html#VALall_columns", "", "", "<code class=\"type\"><a href=\"Profile.html#TYPEcolumn\">column</a> list</code>", "column list"],
["Clflags", "Clflags.html", "all_ccopts", "Clflags.html#VALall_ccopts", "", "", "<code class=\"type\">string list ref</code>", "string list ref"],
["Misc", "Misc.html", "align", "Misc.html#VALalign", "<div class=\"info\"> <p><code class=\"code\">align&nbsp;n&nbsp;a</code> rounds <code class=\"code\">n</code> upwards to a multiple of <code class=\"code\">a</code> (a power of 2).</p> </div>", "align\194\160n\194\160a rounds n upwards to a multiple of a (a power of 2).", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "alias", "Ast_helper.Typ.html#VALalias", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; string -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.core_type -> string -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "alias", "Ast_helper.Pat.html#VALalias", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern -> Ast_helper.str -> Parsetree.pattern"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "alias", "Ast_helper.Mty.html#VALalias", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_type"],
["Builtin_attributes", "Builtin_attributes.html", "alerts_of_str", "Builtin_attributes.html#VALalerts_of_str", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Misc.html#TYPEalerts\">Misc.alerts</a></code>", "Parsetree.structure -> Misc.alerts"],
["Builtin_attributes", "Builtin_attributes.html", "alerts_of_sig", "Builtin_attributes.html#VALalerts_of_sig", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Misc.html#TYPEalerts\">Misc.alerts</a></code>", "Parsetree.signature -> Misc.alerts"],
["Builtin_attributes", "Builtin_attributes.html", "alerts_of_attrs", "Builtin_attributes.html#VALalerts_of_attrs", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Misc.html#TYPEalerts\">Misc.alerts</a></code>", "Parsetree.attributes -> Misc.alerts"],
["Location", "Location.html", "alert_reporter", "Location.html#VALalert_reporter", "<div class=\"info\"> <p>Hook for intercepting alerts.</p> </div>", "Hook for intercepting alerts.", "<code class=\"type\">(<a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEalert\">Warnings.alert</a> -&gt; <a href=\"Location.html#TYPEreport\">report</a> option) ref</code>", "(Location.t -> Warnings.alert -> report option) ref"],
["Location", "Location.html", "alert", "Location.html#VALalert", "<div class=\"info\"> <p>Prints an arbitrary alert.</p> </div>", "Prints an arbitrary alert.", "<code class=\"type\">?def:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ?use:<a href=\"Location.html#TYPEt\">t</a> -&gt; kind:string -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; string -&gt; unit</code>", "?def:Location.t ->       ?use:Location.t -> kind:string -> Location.t -> string -> unit"],
["Clflags", "Clflags.html", "afl_instrument", "Clflags.html#VALafl_instrument", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Config_boot", "Config_boot.html", "afl_instrument", "Config_boot.html#VALafl_instrument", "<div class=\"info\"> <p>Whether afl-fuzz instrumentation is generated by default</p> </div>", "Whether afl-fuzz instrumentation is generated by default", "<code class=\"type\">bool</code>", "bool"],
["Config_main", "Config_main.html", "afl_instrument", "Config_main.html#VALafl_instrument", "<div class=\"info\"> <p>Whether afl-fuzz instrumentation is generated by default</p> </div>", "Whether afl-fuzz instrumentation is generated by default", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "afl_instrument", "Config.html#VALafl_instrument", "<div class=\"info\"> <p>Whether afl-fuzz instrumentation is generated by default</p> </div>", "Whether afl-fuzz instrumentation is generated by default", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "afl_inst_ratio", "Clflags.html#VALafl_inst_ratio", "", "", "<code class=\"type\">int ref</code>", "int ref"],
["Arg_helper.Make", "Arg_helper.Make.html", "add_user_override", "Arg_helper.Make.html#VALadd_user_override", "", "", "<code class=\"type\">S.Key.t -&gt; S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Key.Arg_helper.Make.t -> S.Value.Arg_helper.Make.t -> parsed -> parsed"],
["Depend", "Depend.html", "add_use_file", "Depend.html#VALadd_use_file", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> list -&gt; unit</code>", "bound_map -> Parsetree.toplevel_phrase list -> unit"],
["Docstrings", "Docstrings.html", "add_text_attrs", "Docstrings.html#VALadd_text_attrs", "<div class=\"info\"> <p>Convert text to attributes and add them to an attribute list</p> </div>", "Convert text to attributes and add them to an attribute list", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">text</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a></code>", "text -> Parsetree.attributes -> Parsetree.attributes"],
["Depend", "Depend.html", "add_signature_binding", "Depend.html#VALadd_signature_binding", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Depend.html#TYPEbound_map\">bound_map</a></code>", "bound_map -> Parsetree.signature -> bound_map"],
["Depend", "Depend.html", "add_signature", "Depend.html#VALadd_signature", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; unit</code>", "bound_map -> Parsetree.signature -> unit"],
["Ast_mapper", "Ast_mapper.html", "add_ppx_context_str", "Ast_mapper.html#VALadd_ppx_context_str", "<div class=\"info\"> <p>Extract information from the current environment and encode it into an attribute which is prepended to the list of structure items in order to pass the information to an external processor.</p> </div>", "Extract information from the current environment and encode it into an attribute which is prepended to the list of structure items in order to pass the information to an external processor.", "<code class=\"type\">tool_name:string -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "tool_name:string -> Parsetree.structure -> Parsetree.structure"],
["Ast_mapper", "Ast_mapper.html", "add_ppx_context_sig", "Ast_mapper.html#VALadd_ppx_context_sig", "<div class=\"info\"> <p>Same as <code class=\"code\">add_ppx_context_str</code>, but for signatures.</p> </div>", "Same as add_ppx_context_str, but for signatures.", "<code class=\"type\">tool_name:string -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "tool_name:string -> Parsetree.signature -> Parsetree.signature"],
["Docstrings", "Docstrings.html", "add_info_attrs", "Docstrings.html#VALadd_info_attrs", "<div class=\"info\"> <p>Convert field info to attributes and add them to an attribute list</p> </div>", "Convert field info to attributes and add them to an attribute list", "<code class=\"type\"><a href=\"Docstrings.html#TYPEinfo\">info</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a></code>", "info -> Parsetree.attributes -> Parsetree.attributes"],
["Depend", "Depend.html", "add_implementation_binding", "Depend.html#VALadd_implementation_binding", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Depend.html#TYPEbound_map\">bound_map</a></code>", "bound_map -> Parsetree.structure -> bound_map"],
["Depend", "Depend.html", "add_implementation", "Depend.html#VALadd_implementation", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "bound_map -> Parsetree.structure -> unit"],
["Docstrings", "Docstrings.html", "add_docs_attrs", "Docstrings.html#VALadd_docs_attrs", "<div class=\"info\"> <p>Convert item documentation to attributes and add them to an attribute list</p> </div>", "Convert item documentation to attributes and add them to an attribute list", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocs\">docs</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a></code>", "docs -> Parsetree.attributes -> Parsetree.attributes"],
["Load_path", "Load_path.html", "add_dir", "Load_path.html#VALadd_dir", "<div class=\"info\"> <p>Add a directory to the end of the load path (i.e.</p> </div>", "Add a directory to the end of the load path (i.e.", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "add_base_override", "Arg_helper.Make.html#VALadd_base_override", "", "", "<code class=\"type\">S.Key.t -&gt; S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Key.Arg_helper.Make.t -> S.Value.Arg_helper.Make.t -> parsed -> parsed"],
["Clflags", "Clflags.html", "add_arguments", "Clflags.html#VALadd_arguments", "", "", "<code class=\"type\">string -&gt; (string * Arg.spec * string) list -&gt; unit</code>", "string -> (string * Arg.spec * string) list -> unit"],
["Load_path", "Load_path.html", "add", "Load_path.html#VALadd", "<div class=\"info\"> <span class=\"deprecated\"><p>Old name for <a href=\"Load_path.html#VALappend_dir\"><code class=\"code\"><span class=\"constructor\">Load_path</span>.append_dir</code></a></p> </span></div>", "Old name for Load_path.append_dir", "<code class=\"type\"><a href=\"Load_path.Dir.html#TYPEt\">Dir.t</a> -&gt; unit</code>", "Dir.Load_path.t -> unit"],
["Targetint", "Targetint.html", "add", "Targetint.html#VALadd", "<div class=\"info\"> <p>Addition.</p> </div>", "Addition.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t -> Targetint.t"],
["CamlinternalMenhirLib.EngineTypes.TABLE", "CamlinternalMenhirLib.EngineTypes.TABLE.html", "action", "CamlinternalMenhirLib.EngineTypes.TABLE.html#VALaction", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEterminal\">terminal</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEsemantic_value\">semantic_value</a> -&gt;<br>       ('env -&gt;<br>        bool -&gt;<br>        <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEterminal\">terminal</a> -&gt;<br>        <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEsemantic_value\">semantic_value</a> -&gt;<br>        <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEstate\">state</a> -&gt; 'answer) -&gt;<br>       ('env -&gt; <a href=\"CamlinternalMenhirLib.EngineTypes.TABLE.html#TYPEproduction\">production</a> -&gt; 'answer) -&gt;<br>       ('env -&gt; 'answer) -&gt; 'env -&gt; 'answer</code>", "state ->       terminal ->       semantic_value ->       ('env ->        bool ->        terminal ->        semantic_value ->        state -> 'answer) ->       ('env -> production -> 'answer) ->       ('env -> 'answer) -> 'env -> 'answer"],
["CamlinternalMenhirLib.TableFormat.TABLES", "CamlinternalMenhirLib.TableFormat.TABLES.html", "action", "CamlinternalMenhirLib.TableFormat.TABLES.html#VALaction", "", "", "<code class=\"type\"><a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a> *<br>       <a href=\"CamlinternalMenhirLib.PackedIntArray.html#TYPEt\">CamlinternalMenhirLib.PackedIntArray.t</a></code>", "CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.TableFormat.TABLES.t *       CamlinternalMenhirLib.PackedIntArray.CamlinternalMenhirLib.TableFormat.TABLES.t"],
["CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html", "acceptable", "CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#VALacceptable", "", "", "<code class=\"type\">'a <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEcheckpoint\">checkpoint</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.INCREMENTAL_ENGINE.html#TYPEtoken\">token</a> -&gt;<br>       <a href=\"CamlinternalMenhirLib.IncrementalEngine.html#TYPEposition\">CamlinternalMenhirLib.IncrementalEngine.position</a> -&gt; bool</code>", "'a checkpoint ->       token ->       CamlinternalMenhirLib.IncrementalEngine.position -> bool"],
["Location", "Location.html", "absolute_path", "Location.html#VALabsolute_path", "<div class=\"info\"> <p><code class=\"code\">absolute_path&nbsp;path</code> first makes an absolute path, <code class=\"code\">s</code> from <code class=\"code\">path</code>, prepending the current working directory if <code class=\"code\">path</code> was relative.</p> </div>", "absolute_path\194\160path first makes an absolute path, s from path, prepending the current working directory if path was relative.", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Clflags", "Clflags.html", "absname", "Clflags.html#VALabsname", "", "", "<code class=\"type\">bool ref</code>", "bool ref"],
["Targetint", "Targetint.html", "abs", "Targetint.html#VALabs", "<div class=\"info\"> <p><code class=\"code\">abs&nbsp;x</code> is the absolute value of <code class=\"code\">x</code>.</p> </div>", "abs\194\160x is the absolute value of x.", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "Targetint.t -> Targetint.t"],
["Int_replace_polymorphic_compare", "Int_replace_polymorphic_compare.html", "(>=)", "Int_replace_polymorphic_compare.html#VAL(>=)", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Int_replace_polymorphic_compare", "Int_replace_polymorphic_compare.html", "(>)", "Int_replace_polymorphic_compare.html#VAL(>)", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Int_replace_polymorphic_compare", "Int_replace_polymorphic_compare.html", "(=)", "Int_replace_polymorphic_compare.html#VAL(=)", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Int_replace_polymorphic_compare", "Int_replace_polymorphic_compare.html", "(<>)", "Int_replace_polymorphic_compare.html#VAL(<>)", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Int_replace_polymorphic_compare", "Int_replace_polymorphic_compare.html", "(<=)", "Int_replace_polymorphic_compare.html#VAL(<=)", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Int_replace_polymorphic_compare", "Int_replace_polymorphic_compare.html", "(<)", "Int_replace_polymorphic_compare.html#VAL(<)", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
]
