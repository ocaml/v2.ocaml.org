var GENERAL_INDEX = [
["Numbers.Int", "Numbers.Int.html", "zero_to_n", "Numbers.Int.html#VALzero_to_n", "<div class=\"info\">  <p><code class=\"code\">zero_to_n&nbsp;n</code> is the set of numbers {0, ..., n} (inclusive).</p> </div>", "  zero_to_n\194\160n is the set of numbers {0, ..., n} (inclusive). ", "<code class=\"type\">int -&gt; Set.t</code>", "int -> Set.t"],
["Complex", "Complex.html", "zero", "Complex.html#VALzero", "<div class=\"info\">  <p>The complex number <code class=\"code\">0</code>.</p> </div>", "  The complex number 0. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a></code>", "t"],
["Int32", "Int32.html", "zero", "Int32.html#VALzero", "<div class=\"info\">  <p>The 32-bit integer 0.</p> </div>", "  The 32-bit integer 0. ", "<code class=\"type\">int32</code>", "int32"],
["Int64", "Int64.html", "zero", "Int64.html#VALzero", "<div class=\"info\">  <p>The 64-bit integer 0.</p> </div>", "  The 64-bit integer 0. ", "<code class=\"type\">int64</code>", "int64"],
["Nativeint", "Nativeint.html", "zero", "Nativeint.html#VALzero", "<div class=\"info\">  <p>The native integer 0.</p> </div>", "  The native integer 0. ", "<code class=\"type\">nativeint</code>", "nativeint"],
["Numbers.Int8", "Numbers.Int8.html", "zero", "Numbers.Int8.html#VALzero", "", "", "<code class=\"type\"><a href=\"Numbers.Int8.html#TYPEt\">t</a></code>", "t"],
["Targetint", "Targetint.html", "zero", "Targetint.html#VALzero", "<div class=\"info\">  <p>The target integer 0.</p> </div>", "  The target integer 0. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "t"],
["Thread", "Thread.html", "yield", "Thread.html#VALyield", "<div class=\"info\">  <p>Re-schedule the calling thread without suspending it.</p> </div>", "  Re-schedule the calling thread without suspending it. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Graphics", "Graphics.html", "yellow", "Graphics.html#VALyellow", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["ThreadUnix", "ThreadUnix.html", "write_substring", "ThreadUnix.html#VALwrite_substring", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; string -&gt; int -&gt; int -&gt; int</code>", "Unix.file_descr -> string -> int -> int -> int"],
["Unix", "Unix.html", "write_substring", "Unix.html#VALwrite_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as write, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; string -&gt; int -&gt; int -&gt; int</code>", "file_descr -> string -> int -> int -> int"],
["UnixLabels", "UnixLabels.html", "write_substring", "UnixLabels.html#VALwrite_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as write, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; buf:string -&gt; pos:int -&gt; len:int -&gt; int</code>", "file_descr -> buf:string -> pos:int -> len:int -> int"],
["Pparse", "Pparse.html", "write_ast", "Pparse.html#VALwrite_ast", "", "", "<code class=\"type\">'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; string -&gt; 'a -&gt; unit</code>", "'a ast_kind -> string -> 'a -> unit"],
["Arg", "Arg.html", "write_arg0", "Arg.html#VALwrite_arg0", "<div class=\"info\">  <p>Identical to <a href=\"Arg.html#VALwrite_arg\"><code class=\"code\"><span class=\"constructor\">Arg</span>.write_arg</code></a> but uses the null character for terminator instead of newline.</p> </div>", "  Identical to Arg.write_arg but uses the null character for terminator instead of newline. ", "<code class=\"type\">string -&gt; string array -&gt; unit</code>", "string -> string array -> unit"],
["Arg", "Arg.html", "write_arg", "Arg.html#VALwrite_arg", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Arg</span>.write_arg&nbsp;file&nbsp;args</code> writes the arguments <code class=\"code\">args</code> newline-terminated into the file <code class=\"code\">file</code>.</p> </div>", "  Arg.write_arg\194\160file\194\160args writes the arguments args newline-terminated into the file file. ", "<code class=\"type\">string -&gt; string array -&gt; unit</code>", "string -> string array -> unit"],
["ThreadUnix", "ThreadUnix.html", "write", "ThreadUnix.html#VALwrite", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; int</code>", "Unix.file_descr -> bytes -> int -> int -> int"],
["Unix", "Unix.html", "write", "Unix.html#VALwrite", "<div class=\"info\">  <p><code class=\"code\">write&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>, taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>.</p> </div>", "  write\194\160fd\194\160buff\194\160ofs\194\160len writes len bytes to descriptor fd, taking them from byte sequence buff, starting at position ofs in buff. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; int</code>", "file_descr -> bytes -> int -> int -> int"],
["UnixLabels", "UnixLabels.html", "write", "UnixLabels.html#VALwrite", "<div class=\"info\">  <p><code class=\"code\">write&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>, taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>.</p> </div>", "  write\194\160fd\194\160buff\194\160ofs\194\160len writes len bytes to descriptor fd, taking them from byte sequence buff, starting at position ofs in buff. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; buf:bytes -&gt; pos:int -&gt; len:int -&gt; int</code>", "file_descr -> buf:bytes -> pos:int -> len:int -> int"],
["Event", "Event.html", "wrap_abort", "Event.html#VALwrap_abort", "<div class=\"info\">  <p><code class=\"code\">wrap_abort&nbsp;ev&nbsp;fn</code> returns the event that performs the same communications as <code class=\"code\">ev</code>, but if it is not selected the function <code class=\"code\">fn</code> is called after the synchronization.</p> </div>", "  wrap_abort\194\160ev\194\160fn returns the event that performs the same communications as ev, but if it is not selected the function fn is called after the synchronization. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEevent\">event</a> -&gt; (unit -&gt; unit) -&gt; 'a <a href=\"Event.html#TYPEevent\">event</a></code>", "'a event -> (unit -> unit) -> 'a event"],
["Event", "Event.html", "wrap", "Event.html#VALwrap", "<div class=\"info\">  <p><code class=\"code\">wrap&nbsp;ev&nbsp;fn</code> returns the event that performs the same communications as <code class=\"code\">ev</code>, then applies the post-processing function <code class=\"code\">fn</code> on the return value.</p> </div>", "  wrap\194\160ev\194\160fn returns the event that performs the same communications as ev, then applies the post-processing function fn on the return value. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEevent\">event</a> -&gt; ('a -&gt; 'b) -&gt; 'b <a href=\"Event.html#TYPEevent\">event</a></code>", "'a event -> ('a -> 'b) -> 'b event"],
["Sys", "Sys.html", "word_size", "Sys.html#VALword_size", "<div class=\"info\">  <p>Size of one word on the machine currently executing the OCaml program, in bits: 32 or 64.</p> </div>", "  Size of one word on the machine currently executing the OCaml program, in bits: 32 or 64. ", "<code class=\"type\">int</code>", "int"],
["Warnings", "Warnings.html", "without_warnings", "Warnings.html#VALwithout_warnings", "", "", "<code class=\"type\">(unit -&gt; 'a) -&gt; 'a</code>", "(unit -> 'a) -> 'a"],
["Config", "Config.html", "with_frame_pointers", "Config.html#VALwith_frame_pointers", "", "", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "with_flambda_invariants", "Config.html#VALwith_flambda_invariants", "", "", "<code class=\"type\">bool</code>", "bool"],
["Ast_helper", "Ast_helper.html", "with_default_loc", "Ast_helper.html#VALwith_default_loc", "<div class=\"info\">  <p>Set the <code class=\"code\">default_loc</code> within the scope of the execution of the provided function.</p> </div>", "  Set the default_loc within the scope of the execution of the provided function. ", "<code class=\"type\"><a href=\"Ast_helper.html#TYPEloc\">loc</a> -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "loc -> (unit -> 'a) -> 'a"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "with_", "Ast_helper.Mty.html#VALwith_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEwith_constraint\">Parsetree.with_constraint</a> list -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_type ->       Parsetree.with_constraint list -> Parsetree.module_type"],
["Config", "Config.html", "windows_unicode", "Config.html#VALwindows_unicode", "", "", "<code class=\"type\">bool</code>", "bool"],
["GraphicsX11", "GraphicsX11.html", "window_id", "GraphicsX11.html#VALwindow_id", "<div class=\"info\">  <p>Return the unique identifier of the OCaml graphics window.</p> </div>", "  Return the unique identifier of the OCaml graphics window. ", "<code class=\"type\">unit -&gt; <a href=\"GraphicsX11.html#TYPEwindow_id\">window_id</a></code>", "unit -> window_id"],
["Sys", "Sys.html", "win32", "Sys.html#VALwin32", "<div class=\"info\">  <p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Win32\"</span></code>.</p> </div>", "  True if Sys.os_type\194\160=\194\160\"Win32\". ", "<code class=\"type\">bool</code>", "bool"],
["CamlinternalOO", "CamlinternalOO.html", "widen", "CamlinternalOO.html#VALwiden", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; unit</code>", "table -> unit"],
["Graphics", "Graphics.html", "white", "Graphics.html#VALwhite", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "while_", "Ast_helper.Exp.html#VALwhile_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.expression -> Parsetree.expression"],
["Depend", "Depend.html", "weaken_map", "Depend.html#VALweaken_map", "", "", "<code class=\"type\">StringSet.t -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a> -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a></code>", "StringSet.t -> map_tree -> map_tree"],
["Builtin_attributes", "Builtin_attributes.html", "warning_scope", "Builtin_attributes.html#VALwarning_scope", "<div class=\"info\">  <p>Execute a function in a new scope for warning settings.</p> </div>", "  Execute a function in a new scope for warning settings. ", "<code class=\"type\">?ppwarning:bool -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "?ppwarning:bool -> Parsetree.attributes -> (unit -> 'a) -> 'a"],
["Location", "Location.html", "warning_printer", "Location.html#VALwarning_printer", "<div class=\"info\">  <p>Hook for intercepting warnings.</p> </div>", "  Hook for intercepting warnings. ", "<code class=\"type\">(<a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; unit) <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "(t -> Format.formatter -> Warnings.t -> unit) ref"],
["Builtin_attributes", "Builtin_attributes.html", "warning_attribute", "Builtin_attributes.html#VALwarning_attribute", "<div class=\"info\">  <p>Apply warning settings from the specified attribute.</p> </div>", "  Apply warning settings from the specified attribute. ", "<code class=\"type\">?ppwarning:bool -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; unit</code>", "?ppwarning:bool -> Parsetree.attribute -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "warn_on_literal_pattern", "Builtin_attributes.html#VALwarn_on_literal_pattern", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Docstrings", "Docstrings.html", "warn_bad_docstrings", "Docstrings.html#VALwarn_bad_docstrings", "<div class=\"info\">  <p>Emit warnings for unattached and ambiguous docstrings</p> </div>", "  Emit warnings for unattached and ambiguous docstrings ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["ThreadUnix", "ThreadUnix.html", "waitpid", "ThreadUnix.html#VALwaitpid", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEwait_flag\">Unix.wait_flag</a> list -&gt; int -&gt; int * <a href=\"Unix.html#TYPEprocess_status\">Unix.process_status</a></code>", "Unix.wait_flag list -> int -> int * Unix.process_status"],
["Unix", "Unix.html", "waitpid", "Unix.html#VALwaitpid", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALwait\"><code class=\"code\"><span class=\"constructor\">Unix</span>.wait</code></a>, but waits for the child process whose pid is given.</p> </div>", "  Same as Unix.wait, but waits for the child process whose pid is given. ", "<code class=\"type\"><a href=\"Unix.html#TYPEwait_flag\">wait_flag</a> list -&gt; int -&gt; int * <a href=\"Unix.html#TYPEprocess_status\">process_status</a></code>", "wait_flag list -> int -> int * process_status"],
["UnixLabels", "UnixLabels.html", "waitpid", "UnixLabels.html#VALwaitpid", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALwait\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.wait</code></a>, but waits for the child process whose pid is given.</p> </div>", "  Same as UnixLabels.wait, but waits for the child process whose pid is given. ", "<code class=\"type\">mode:<a href=\"UnixLabels.html#TYPEwait_flag\">wait_flag</a> list -&gt; int -&gt; int * <a href=\"UnixLabels.html#TYPEprocess_status\">process_status</a></code>", "mode:wait_flag list -> int -> int * process_status"],
["Thread", "Thread.html", "wait_write", "Thread.html#VALwait_write", "<div class=\"info\">  <p>Suspend the execution of the calling thread until at least one character or EOF is available for reading (<a href=\"Thread.html#VALwait_read\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_read</code></a>) or one character can be written without blocking (<code class=\"code\">wait_write</code>) on the given Unix file descriptor.</p> </div>", "  Suspend the execution of the calling thread until at least one character or EOF is available for reading (Thread.wait_read) or one character can be written without blocking (wait_write) on the given Unix file descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; unit</code>", "Unix.file_descr -> unit"],
["Thread", "Thread.html", "wait_timed_write", "Thread.html#VALwait_timed_write", "<div class=\"info\">  <p>Same as <a href=\"Thread.html#VALwait_read\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_read</code></a> and <a href=\"Thread.html#VALwait_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_write</code></a>, but wait for at most the amount of time given as second argument (in seconds).</p> </div>", "  Same as Thread.wait_read and Thread.wait_write, but wait for at most the amount of time given as second argument (in seconds). ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; float -&gt; bool</code>", "Unix.file_descr -> float -> bool"],
["Thread", "Thread.html", "wait_timed_read", "Thread.html#VALwait_timed_read", "<div class=\"info\">  <p>See <a href=\"Thread.html#VALwait_timed_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_timed_write</code></a>.</p> </div>", "  See Thread.wait_timed_write. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; float -&gt; bool</code>", "Unix.file_descr -> float -> bool"],
["Thread", "Thread.html", "wait_signal", "Thread.html#VALwait_signal", "<div class=\"info\">  <p><code class=\"code\">wait_signal&nbsp;sigs</code> suspends the execution of the calling thread until the process receives one of the signals specified in the list <code class=\"code\">sigs</code>.</p> </div>", "  wait_signal\194\160sigs suspends the execution of the calling thread until the process receives one of the signals specified in the list sigs. ", "<code class=\"type\">int list -&gt; int</code>", "int list -> int"],
["Thread", "Thread.html", "wait_read", "Thread.html#VALwait_read", "<div class=\"info\">  <p>See <a href=\"Thread.html#VALwait_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_write</code></a>.</p> </div>", "  See Thread.wait_write. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; unit</code>", "Unix.file_descr -> unit"],
["Thread", "Thread.html", "wait_pid", "Thread.html#VALwait_pid", "<div class=\"info\">  <p><code class=\"code\">wait_pid&nbsp;p</code> suspends the execution of the calling thread until the Unix process specified by the process identifier <code class=\"code\">p</code> terminates.</p> </div>", "  wait_pid\194\160p suspends the execution of the calling thread until the Unix process specified by the process identifier p terminates. ", "<code class=\"type\">int -&gt; int * <a href=\"Unix.html#TYPEprocess_status\">Unix.process_status</a></code>", "int -> int * Unix.process_status"],
["Graphics", "Graphics.html", "wait_next_event", "Graphics.html#VALwait_next_event", "<div class=\"info\">  <p>Wait until one of the events specified in the given event list occurs, and return the status of the mouse and keyboard at that time.</p> </div>", "  Wait until one of the events specified in the given event list occurs, and return the status of the mouse and keyboard at that time. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEevent\">event</a> list -&gt; <a href=\"Graphics.html#TYPEstatus\">status</a></code>", "event list -> status"],
["Condition", "Condition.html", "wait", "Condition.html#VALwait", "<div class=\"info\">  <p><code class=\"code\">wait&nbsp;c&nbsp;m</code> atomically unlocks the mutex <code class=\"code\">m</code> and suspends the calling process on the condition variable <code class=\"code\">c</code>.</p> </div>", "  wait\194\160c\194\160m atomically unlocks the mutex m and suspends the calling process on the condition variable c. ", "<code class=\"type\"><a href=\"Condition.html#TYPEt\">t</a> -&gt; <a href=\"Mutex.html#TYPEt\">Mutex.t</a> -&gt; unit</code>", "t -> Mutex.t -> unit"],
["ThreadUnix", "ThreadUnix.html", "wait", "ThreadUnix.html#VALwait", "", "", "<code class=\"type\">unit -&gt; int * <a href=\"Unix.html#TYPEprocess_status\">Unix.process_status</a></code>", "unit -> int * Unix.process_status"],
["Unix", "Unix.html", "wait", "Unix.html#VALwait", "<div class=\"info\">  <p>Wait until one of the children processes die, and return its pid and termination status.</p> </div>", "  Wait until one of the children processes die, and return its pid and termination status. ", "<code class=\"type\">unit -&gt; int * <a href=\"Unix.html#TYPEprocess_status\">process_status</a></code>", "unit -> int * process_status"],
["UnixLabels", "UnixLabels.html", "wait", "UnixLabels.html#VALwait", "<div class=\"info\">  <p>Wait until one of the children processes die, and return its pid and termination status.</p> </div>", "  Wait until one of the children processes die, and return its pid and termination status. ", "<code class=\"type\">unit -&gt; int * <a href=\"UnixLabels.html#TYPEprocess_status\">process_status</a></code>", "unit -> int * process_status"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "virtual_", "Ast_helper.Cf.html#VALvirtual_", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a></code>", "Parsetree.core_type -> Parsetree.class_field_kind"],
["Config", "Config.html", "version", "Config.html#VALversion", "", "", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "verbose", "Clflags.html#VALverbose", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "varify_constructors", "Ast_helper.Typ.html#VALvarify_constructors", "<div class=\"info\">  <p><code class=\"code\">varify_constructors&nbsp;newtypes&nbsp;te</code> is type expression <code class=\"code\">te</code>, of which any of nullary type constructor <code class=\"code\">tc</code> is replaced by type variable of the same name, if <code class=\"code\">tc</code>'s name appears in <code class=\"code\">newtypes</code>.</p> </div>", "  varify_constructors\194\160newtypes\194\160te is type expression te, of which any of nullary type constructor tc is replaced by type variable of the same name, if tc's name appears in newtypes. ", "<code class=\"type\"><a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Ast_helper.str list -> Parsetree.core_type -> Parsetree.core_type"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "variant", "Ast_helper.Typ.html#VALvariant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPErow_field\">Parsetree.row_field</a> list -&gt;<br>       <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a> -&gt; <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> list option -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.row_field list ->       Asttypes.closed_flag -> Asttypes.label list option -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "variant", "Ast_helper.Pat.html#VALvariant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> option -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.label -> Parsetree.pattern option -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "variant", "Ast_helper.Exp.html#VALvariant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.label -> Parsetree.expression option -> Parsetree.expression"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "var", "Ast_helper.Typ.html#VALvar", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; string -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> string -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "var", "Ast_helper.Pat.html#VALvar", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.str -> Parsetree.pattern"],
["Misc.Stdlib.Option", "Misc.Stdlib.Option.html", "value_default", "Misc.Stdlib.Option.html#VALvalue_default", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; default:'b -&gt; 'a <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a> -&gt; 'b</code>", "('a -> 'b) -> default:'b -> 'a t -> 'b"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "value", "Ast_helper.Sig.html#VALvalue", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.value_description -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "value", "Ast_helper.Str.html#VALvalue", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Asttypes.rec_flag -> Parsetree.value_binding list -> Parsetree.structure_item"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "val_", "Ast_helper.Ctf.html#VALval_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.mutable_flag ->       Asttypes.virtual_flag -> Parsetree.core_type -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "val_", "Ast_helper.Cf.html#VALval_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.mutable_flag -> Parsetree.class_field_kind -> Parsetree.class_field"],
["Unix", "Unix.html", "utimes", "Unix.html#VALutimes", "<div class=\"info\">  <p>Set the last access time (second arg) and last modification time (third arg) for a file.</p> </div>", "  Set the last access time (second arg) and last modification time (third arg) for a file. ", "<code class=\"type\">string -&gt; float -&gt; float -&gt; unit</code>", "string -> float -> float -> unit"],
["UnixLabels", "UnixLabels.html", "utimes", "UnixLabels.html#VALutimes", "<div class=\"info\">  <p>Set the last access time (second arg) and last modification time (third arg) for a file.</p> </div>", "  Set the last access time (second arg) and last modification time (third arg) for a file. ", "<code class=\"type\">string -&gt; access:float -&gt; modif:float -&gt; unit</code>", "string -> access:float -> modif:float -> unit"],
["Clflags", "Clflags.html", "use_vmthreads", "Clflags.html#VALuse_vmthreads", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "use_threads", "Clflags.html#VALuse_threads", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "use_runtime", "Clflags.html#VALuse_runtime", "", "", "<code class=\"type\">string <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string ref"],
["Clflags", "Clflags.html", "use_prims", "Clflags.html#VALuse_prims", "", "", "<code class=\"type\">string <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string ref"],
["Clflags", "Clflags.html", "use_linscan", "Clflags.html#VALuse_linscan", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "use_inlining_arguments_set", "Clflags.html#VALuse_inlining_arguments_set", "<div class=\"info\">  <p>Set all the inlining arguments for a round.</p> </div>", "  Set all the inlining arguments for a round. ", "<code class=\"type\">?round:int -&gt; <a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a> -&gt; unit</code>", "?round:int -> inlining_arguments -> unit"],
["Parse", "Parse.html", "use_file", "Parse.html#VALuse_file", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> list</code>", "Lexing.lexbuf -> Parsetree.toplevel_phrase list"],
["Parser", "Parser.html", "use_file", "Parser.html#VALuse_file", "", "", "<code class=\"type\">(<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt;<br>       <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> list</code>", "(Lexing.lexbuf -> token) ->       Lexing.lexbuf -> Parsetree.toplevel_phrase list"],
["Arg", "Arg.html", "usage_string", "Arg.html#VALusage_string", "<div class=\"info\">  <p>Returns the message that would have been printed by <a href=\"Arg.html#VALusage\"><code class=\"code\"><span class=\"constructor\">Arg</span>.usage</code></a>, if provided with the same parameters.</p> </div>", "  Returns the message that would have been printed by Arg.usage, if provided with the same parameters. ", "<code class=\"type\">(<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list -&gt; <a href=\"Arg.html#TYPEusage_msg\">usage_msg</a> -&gt; string</code>", "(key * spec * doc) list -> usage_msg -> string"],
["Arg", "Arg.html", "usage", "Arg.html#VALusage", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Arg</span>.usage&nbsp;speclist&nbsp;usage_msg</code> prints to standard error an error message that includes the list of valid options.</p> </div>", "  Arg.usage\194\160speclist\194\160usage_msg prints to standard error an error message that includes the list of valid options. ", "<code class=\"type\">(<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list -&gt; <a href=\"Arg.html#TYPEusage_msg\">usage_msg</a> -&gt; unit</code>", "(key * spec * doc) list -> usage_msg -> unit"],
["Bytes", "Bytes.html", "uppercase_ascii", "Bytes.html#VALuppercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "uppercase_ascii", "BytesLabels.html#VALuppercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["Char", "Char.html", "uppercase_ascii", "Char.html#VALuppercase_ascii", "<div class=\"info\">  <p>Convert the given character to its equivalent uppercase character, using the US-ASCII character set.</p> </div>", "  Convert the given character to its equivalent uppercase character, using the US-ASCII character set. ", "<code class=\"type\">char -&gt; char</code>", "char -> char"],
["StringLabels", "StringLabels.html", "uppercase_ascii", "StringLabels.html#VALuppercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "uppercase_ascii", "String.html#VALuppercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Bytes", "Bytes.html", "uppercase", "Bytes.html#VALuppercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "uppercase", "BytesLabels.html#VALuppercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["Char", "Char.html", "uppercase", "Char.html#VALuppercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Convert the given character to its equivalent uppercase character, using the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Convert the given character to its equivalent uppercase character, using the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">char -&gt; char</code>", "char -> char"],
["StringLabels", "StringLabels.html", "uppercase", "StringLabels.html#VALuppercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "uppercase", "String.html#VALuppercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["CamlinternalMod", "CamlinternalMod.html", "update_mod", "CamlinternalMod.html#VALupdate_mod", "", "", "<code class=\"type\"><a href=\"CamlinternalMod.html#TYPEshape\">shape</a> -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a> -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a> -&gt; unit</code>", "shape -> Obj.t -> Obj.t -> unit"],
["Map.S", "Map.S.html", "update", "Map.S.html#VALupdate", "<div class=\"info\">  <p><code class=\"code\">update&nbsp;x&nbsp;f&nbsp;m</code> returns a map containing the same bindings as <code class=\"code\">m</code>, except for the binding of <code class=\"code\">x</code>.</p> </div>", "  update\194\160x\194\160f\194\160m returns a map containing the same bindings as m, except for the binding of x. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; ('a option -&gt; 'a option) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "key -> ('a option -> 'a option) -> 'a t -> 'a t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "update", "MoreLabels.Map.S.html#VALupdate", "", "", "<code class=\"type\">key:<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt;<br>       f:('a option -&gt; 'a option) -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "key:key ->       f:('a option -> 'a option) -> 'a t -> 'a t"],
["Ephemeron.K2", "Ephemeron.K2.html", "unset_key2", "Ephemeron.K2.html#VALunset_key2", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p> </div>", "  Same as Ephemeron.K1.unset_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; unit</code>", "('k1, 'k2, 'd) t -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "unset_key1", "Ephemeron.K2.html#VALunset_key1", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p> </div>", "  Same as Ephemeron.K1.unset_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; unit</code>", "('k1, 'k2, 'd) t -> unit"],
["Ephemeron.K1", "Ephemeron.K1.html", "unset_key", "Ephemeron.K1.html#VALunset_key", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be an empty key.</p> </div>", "  Ephemeron.K1.unset_key\194\160eph\194\160el sets the key of eph to be an empty key. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; unit</code>", "('k, 'd) t -> unit"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "unset_key", "Ephemeron.Kn.html#VALunset_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p> </div>", "  Same as Ephemeron.K1.unset_key ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; int -&gt; unit</code>", "('k, 'd) t -> int -> unit"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "unset_key", "Obj.Ephemeron.html#VALunset_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p> </div>", "  Same as Ephemeron.K1.unset_key ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int -&gt; unit</code>", "t -> int -> unit"],
["Ephemeron.K1", "Ephemeron.K1.html", "unset_data", "Ephemeron.K1.html#VALunset_data", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be an empty key.</p> </div>", "  Ephemeron.K1.unset_data\194\160eph\194\160el sets the key of eph to be an empty key. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; unit</code>", "('k, 'd) t -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "unset_data", "Ephemeron.K2.html#VALunset_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p> </div>", "  Same as Ephemeron.K1.unset_data ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; unit</code>", "('k1, 'k2, 'd) t -> unit"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "unset_data", "Ephemeron.Kn.html#VALunset_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p> </div>", "  Same as Ephemeron.K1.unset_data ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; unit</code>", "('k, 'd) t -> unit"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "unset_data", "Obj.Ephemeron.html#VALunset_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p> </div>", "  Same as Ephemeron.K1.unset_data ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Bytes", "Bytes.html", "unsafe_to_string", "Bytes.html#VALunsafe_to_string", "<div class=\"info\">  <p>Unsafely convert a byte sequence into a string.</p> </div>", "  Unsafely convert a byte sequence into a string. ", "<code class=\"type\">bytes -&gt; string</code>", "bytes -> string"],
["Clflags", "Clflags.html", "unsafe_string", "Clflags.html#VALunsafe_string", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Bigarray.Array1", "Bigarray.Array1.html", "unsafe_set", "Bigarray.Array1.html#VALunsafe_set", "<div class=\"info\">  <p>Like <a href=\"Bigarray.Array1.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.set</code></a>, but bounds checking is not always performed.</p> </div>", "  Like Bigarray.Array1.set, but bounds checking is not always performed. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; int -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> int -> 'a -> unit"],
["Bigarray.Array2", "Bigarray.Array2.html", "unsafe_set", "Bigarray.Array2.html#VALunsafe_set", "<div class=\"info\">  <p>Like <a href=\"Bigarray.Array2.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.set</code></a>, but bounds checking is not always performed.</p> </div>", "  Like Bigarray.Array2.set, but bounds checking is not always performed. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> int -> int -> 'a -> unit"],
["Bigarray.Array3", "Bigarray.Array3.html", "unsafe_set", "Bigarray.Array3.html#VALunsafe_set", "<div class=\"info\">  <p>Like <a href=\"Bigarray.Array3.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.set</code></a>, but bounds checking is not always performed.</p> </div>", "  Like Bigarray.Array3.set, but bounds checking is not always performed. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; int -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit"],
["Float.Array", "Float.Array.html", "unsafe_set", "Float.Array.html#VALunsafe_set", "", "", "<code class=\"type\"><a href=\"Float.Array.html#TYPEt\">t</a> -&gt; int -&gt; float -&gt; unit</code>", "t -> int -> float -> unit"],
["Bytes", "Bytes.html", "unsafe_of_string", "Bytes.html#VALunsafe_of_string", "<div class=\"info\">  <p>Unsafely convert a shared string to a byte sequence that should not be mutated.</p> </div>", "  Unsafely convert a shared string to a byte sequence that should not be mutated. ", "<code class=\"type\">string -&gt; bytes</code>", "string -> bytes"],
["Unix", "Unix.html", "unsafe_getenv", "Unix.html#VALunsafe_getenv", "<div class=\"info\">  <p>Return the value associated to a variable in the process environment.</p> </div>", "  Return the value associated to a variable in the process environment. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["UnixLabels", "UnixLabels.html", "unsafe_getenv", "UnixLabels.html#VALunsafe_getenv", "<div class=\"info\">  <p>Return the value associated to a variable in the process environment.</p> </div>", "  Return the value associated to a variable in the process environment. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Bigarray.Array1", "Bigarray.Array1.html", "unsafe_get", "Bigarray.Array1.html#VALunsafe_get", "<div class=\"info\">  <p>Like <a href=\"Bigarray.Array1.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.get</code></a>, but bounds checking is not always performed.</p> </div>", "  Like Bigarray.Array1.get, but bounds checking is not always performed. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; int -&gt; 'a</code>", "('a, 'b, 'c) t -> int -> 'a"],
["Bigarray.Array2", "Bigarray.Array2.html", "unsafe_get", "Bigarray.Array2.html#VALunsafe_get", "<div class=\"info\">  <p>Like <a href=\"Bigarray.Array2.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.get</code></a>, but bounds checking is not always performed.</p> </div>", "  Like Bigarray.Array2.get, but bounds checking is not always performed. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; 'a</code>", "('a, 'b, 'c) t -> int -> int -> 'a"],
["Bigarray.Array3", "Bigarray.Array3.html", "unsafe_get", "Bigarray.Array3.html#VALunsafe_get", "<div class=\"info\">  <p>Like <a href=\"Bigarray.Array3.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.get</code></a>, but bounds checking is not always performed.</p> </div>", "  Like Bigarray.Array3.get, but bounds checking is not always performed. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; int -&gt; 'a</code>", "('a, 'b, 'c) t -> int -> int -> int -> 'a"],
["Float.Array", "Float.Array.html", "unsafe_get", "Float.Array.html#VALunsafe_get", "", "", "<code class=\"type\"><a href=\"Float.Array.html#TYPEt\">t</a> -&gt; int -&gt; float</code>", "t -> int -> float"],
["Unix", "Unix.html", "unsafe_environment", "Unix.html#VALunsafe_environment", "<div class=\"info\">  <p>Return the process environment, as an array of strings with the format ``variable=value''.</p> </div>", "  Return the process environment, as an array of strings with the format ``variable=value''. ", "<code class=\"type\">unit -&gt; string array</code>", "unit -> string array"],
["Misc.LongString", "Misc.LongString.html", "unsafe_blit_to_bytes", "Misc.LongString.html#VALunsafe_blit_to_bytes", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "t -> int -> bytes -> int -> int -> unit"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "unreachable", "Ast_helper.Exp.html#VALunreachable", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; unit -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> unit -> Parsetree.expression"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "unpack", "Ast_helper.Pat.html#VALunpack", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.str -> Parsetree.pattern"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "unpack", "Ast_helper.Mod.html#VALunpack", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.module_expr"],
["Obj", "Obj.html", "unmarshal", "Obj.html#VALunmarshal", "", "", "<code class=\"type\">bytes -&gt; int -&gt; <a href=\"Obj.html#TYPEt\">t</a> * int</code>", "bytes -> int -> t * int"],
["Mutex", "Mutex.html", "unlock", "Mutex.html#VALunlock", "<div class=\"info\">  <p>Unlock the given mutex.</p> </div>", "  Unlock the given mutex. ", "<code class=\"type\"><a href=\"Mutex.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Unix", "Unix.html", "unlink", "Unix.html#VALunlink", "<div class=\"info\">  <p>Removes the named file.</p> </div>", "  Removes the named file. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["UnixLabels", "UnixLabels.html", "unlink", "UnixLabels.html#VALunlink", "<div class=\"info\">  <p>Removes the named file</p> </div>", "  Removes the named file ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Sys", "Sys.html", "unix", "Sys.html#VALunix", "<div class=\"info\">  <p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Unix\"</span></code>.</p> </div>", "  True if Sys.os_type\194\160=\194\160\"Unix\". ", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "unique_ids", "Clflags.html#VALunique_ids", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Identifiable.Map", "Identifiable.Map.html", "union_right", "Identifiable.Map.html#VALunion_right", "<div class=\"info\">  <p><code class=\"code\">union_right&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and <code class=\"code\">m2</code>.</p> </div>", "  union_right\194\160m1\194\160m2 contains all bindings from m1 and m2. ", "<code class=\"type\">'a t -&gt; 'a t -&gt; 'a t</code>", "'a t -> 'a t -> 'a t"],
["Identifiable.Map", "Identifiable.Map.html", "union_merge", "Identifiable.Map.html#VALunion_merge", "", "", "<code class=\"type\">('a -&gt; 'a -&gt; 'a) -&gt; 'a t -&gt; 'a t -&gt; 'a t</code>", "('a -> 'a -> 'a) -> 'a t -> 'a t -> 'a t"],
["Identifiable.Map", "Identifiable.Map.html", "union_left", "Identifiable.Map.html#VALunion_left", "<div class=\"info\">  <p><code class=\"code\">union_left&nbsp;m1&nbsp;m2&nbsp;=&nbsp;union_right&nbsp;m2&nbsp;m1</code></p> </div>", "  union_left\194\160m1\194\160m2\194\160=\194\160union_right\194\160m2\194\160m1 ", "<code class=\"type\">'a t -&gt; 'a t -&gt; 'a t</code>", "'a t -> 'a t -> 'a t"],
["Set.S", "Set.S.html", "union", "Set.S.html#VALunion", "<div class=\"info\">  <p>Set union.</p> </div>", "  Set union. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Map.S", "Map.S.html", "union", "Map.S.html#VALunion", "<div class=\"info\">  <p><code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is the union of keys of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>.</p> </div>", "  union\194\160f\194\160m1\194\160m2 computes a map whose keys is the union of keys of m1 and of m2. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'a -&gt; 'a option) -&gt;<br>       'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "(key -> 'a -> 'a -> 'a option) ->       'a t -> 'a t -> 'a t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "union", "MoreLabels.Map.S.html#VALunion", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'a -&gt; 'a option) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "f:(key -> 'a -> 'a -> 'a option) ->       'a t -> 'a t -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "union", "MoreLabels.Set.S.html#VALunion", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Longident", "Longident.html", "unflatten", "Longident.html#VALunflatten", "", "", "<code class=\"type\">string list -&gt; <a href=\"Longident.html#TYPEt\">t</a> option</code>", "string list -> t option"],
["Scanf", "Scanf.html", "unescaped", "Scanf.html#VALunescaped", "<div class=\"info\">  <p><code class=\"code\">unescaped&nbsp;s</code> return a copy of <code class=\"code\">s</code> with escape sequences (according to the lexical conventions of OCaml) replaced by their corresponding special characters.</p> </div>", "  unescaped\194\160s return a copy of s with escape sequences (according to the lexical conventions of OCaml) replaced by their corresponding special characters. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Bytes", "Bytes.html", "uncapitalize_ascii", "Bytes.html#VALuncapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "uncapitalize_ascii", "BytesLabels.html#VALuncapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["StringLabels", "StringLabels.html", "uncapitalize_ascii", "StringLabels.html#VALuncapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "uncapitalize_ascii", "String.html#VALuncapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Bytes", "Bytes.html", "uncapitalize", "Bytes.html#VALuncapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "uncapitalize", "BytesLabels.html#VALuncapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["StringLabels", "StringLabels.html", "uncapitalize", "StringLabels.html#VALuncapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "uncapitalize", "String.html#VALuncapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Clflags", "Clflags.html", "unboxed_types", "Clflags.html#VALunboxed_types", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "unbox_specialised_args", "Clflags.html#VALunbox_specialised_args", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "unbox_free_vars_of_closures", "Clflags.html#VALunbox_free_vars_of_closures", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "unbox_closures_factor", "Clflags.html#VALunbox_closures_factor", "", "", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "int ref"],
["Clflags", "Clflags.html", "unbox_closures", "Clflags.html#VALunbox_closures", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Obj", "Obj.html", "unaligned_tag", "Obj.html#VALunaligned_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Unix", "Unix.html", "umask", "Unix.html#VALumask", "<div class=\"info\">  <p>Set the process's file mode creation mask, and return the previous mask.</p> </div>", "  Set the process's file mode creation mask, and return the previous mask. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["UnixLabels", "UnixLabels.html", "umask", "UnixLabels.html#VALumask", "<div class=\"info\">  <p>Set the process's file mode creation mask, and return the previous mask.</p> </div>", "  Set the process's file mode creation mask, and return the previous mask. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Profile", "Profile.html", "typing", "Profile.html#VALtyping", "", "", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "typeof_", "Ast_helper.Mty.html#VALtypeof_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.module_type"],
["Typemod", "Typemod.html", "type_toplevel_phrase", "Typemod.html#VALtype_toplevel_phrase", "", "", "<code class=\"type\">Env.t -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; Typedtree.structure * Types.signature * Env.t</code>", "Env.t -> Parsetree.structure -> Typedtree.structure * Types.signature * Env.t"],
["Typemod", "Typemod.html", "type_structure", "Typemod.html#VALtype_structure", "", "", "<code class=\"type\">Env.t -&gt;<br>       <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt;<br>       <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; Typedtree.structure * Types.signature * Env.t</code>", "Env.t ->       Parsetree.structure ->       Location.t -> Typedtree.structure * Types.signature * Env.t"],
["Typemod", "Typemod.html", "type_open_", "Typemod.html#VALtype_open_", "", "", "<code class=\"type\">?used_slot:bool <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       ?toplevel:bool -&gt;<br>       <a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt;<br>       Env.t -&gt; <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> -&gt; Path.t * Env.t</code>", "?used_slot:bool ref ->       ?toplevel:bool ->       Asttypes.override_flag ->       Env.t -> Location.t -> Longident.t Asttypes.loc -> Path.t * Env.t"],
["Typemod", "Typemod.html", "type_module", "Typemod.html#VALtype_module", "", "", "<code class=\"type\">Env.t -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; Typedtree.module_expr</code>", "Env.t -> Parsetree.module_expr -> Typedtree.module_expr"],
["Typemod", "Typemod.html", "type_interface", "Typemod.html#VALtype_interface", "", "", "<code class=\"type\">string -&gt; Env.t -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; Typedtree.signature</code>", "string -> Env.t -> Parsetree.signature -> Typedtree.signature"],
["Typemod", "Typemod.html", "type_implementation", "Typemod.html#VALtype_implementation", "", "", "<code class=\"type\">string -&gt;<br>       string -&gt;<br>       string -&gt;<br>       Env.t -&gt;<br>       <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; Typedtree.structure * Typedtree.module_coercion</code>", "string ->       string ->       string ->       Env.t ->       Parsetree.structure -> Typedtree.structure * Typedtree.module_coercion"],
["CamlinternalFormat", "CamlinternalFormat.html", "type_format", "CamlinternalFormat.html#VALtype_format", "", "", "<code class=\"type\">('x, 'b, 'c, 't, 'u, 'v) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">CamlinternalFormatBasics.fmtty</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a></code>", "('x, 'b, 'c, 't, 'u, 'v) CamlinternalFormatBasics.fmt ->       ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmtty ->       ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "type_extension", "Ast_helper.Sig.html#VALtype_extension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.type_extension -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "type_extension", "Ast_helper.Str.html#VALtype_extension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.type_extension -> Parsetree.structure_item"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "type_", "Ast_helper.Pat.html#VALtype_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.pattern"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "type_", "Ast_helper.Sig.html#VALtype_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Asttypes.rec_flag ->       Parsetree.type_declaration list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "type_", "Ast_helper.Str.html#VALtype_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Asttypes.rec_flag ->       Parsetree.type_declaration list -> Parsetree.structure_item"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "tuple", "Ast_helper.Typ.html#VALtuple", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.core_type list -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "tuple", "Ast_helper.Pat.html#VALtuple", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> list -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern list -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "tuple", "Ast_helper.Exp.html#VALtuple", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression list -> Parsetree.expression"],
["Mutex", "Mutex.html", "try_lock", "Mutex.html#VALtry_lock", "<div class=\"info\">  <p>Same as <a href=\"Mutex.html#VALlock\"><code class=\"code\"><span class=\"constructor\">Mutex</span>.lock</code></a>, but does not suspend the calling thread if the mutex is already locked: just return <code class=\"code\"><span class=\"keyword\">false</span></code> immediately in that case.</p> </div>", "  Same as Mutex.lock, but does not suspend the calling thread if the mutex is already locked: just return false immediately in that case. ", "<code class=\"type\"><a href=\"Mutex.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Misc", "Misc.html", "try_finally", "Misc.html#VALtry_finally", "", "", "<code class=\"type\">(unit -&gt; 'a) -&gt; (unit -&gt; unit) -&gt; 'a</code>", "(unit -> 'a) -> (unit -> unit) -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "try_", "Ast_helper.Exp.html#VALtry_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.case list -> Parsetree.expression"],
["Buffer", "Buffer.html", "truncate", "Buffer.html#VALtruncate", "<div class=\"info\">  <p><code class=\"code\">truncate&nbsp;b&nbsp;len</code> truncates the length of <code class=\"code\">b</code> to <code class=\"code\">len</code> Note: the internal byte sequence is not shortened.</p> </div>", "  truncate\194\160b\194\160len truncates the length of b to len Note: the internal byte sequence is not shortened. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; int -&gt; unit</code>", "t -> int -> unit"],
["Obj", "Obj.html", "truncate", "Obj.html#VALtruncate", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int -&gt; unit</code>", "t -> int -> unit"],
["Pervasives", "Pervasives.html", "truncate", "Pervasives.html#VALtruncate", "<div class=\"info\">  <p>Same as <a href=\"Pervasives.html#VALint_of_float\"><code class=\"code\">int_of_float</code></a>.</p> </div>", "  Same as int_of_float. ", "<code class=\"type\">float -&gt; int</code>", "float -> int"],
["Unix", "Unix.html", "truncate", "Unix.html#VALtruncate", "<div class=\"info\">  <p>Truncates the named file to the given size.</p> </div>", "  Truncates the named file to the given size. ", "<code class=\"type\">string -&gt; int -&gt; unit</code>", "string -> int -> unit"],
["Unix.LargeFile", "Unix.LargeFile.html", "truncate", "Unix.LargeFile.html#VALtruncate", "<div class=\"info\">  <p>See <a href=\"Unix.html#VALtruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.truncate</code></a>.</p> </div>", "  See Unix.truncate. ", "<code class=\"type\">string -&gt; int64 -&gt; unit</code>", "string -> int64 -> unit"],
["UnixLabels", "UnixLabels.html", "truncate", "UnixLabels.html#VALtruncate", "<div class=\"info\">  <p>Truncates the named file to the given size.</p> </div>", "  Truncates the named file to the given size. ", "<code class=\"type\">string -&gt; len:int -&gt; unit</code>", "string -> len:int -> unit"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "truncate", "UnixLabels.LargeFile.html#VALtruncate", "", "", "<code class=\"type\">string -&gt; len:int64 -&gt; unit</code>", "string -> len:int64 -> unit"],
["Bytes", "Bytes.html", "trim", "Bytes.html#VALtrim", "<div class=\"info\">  <p>Return a copy of the argument, without leading and trailing whitespace.</p> </div>", "  Return a copy of the argument, without leading and trailing whitespace. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "trim", "BytesLabels.html#VALtrim", "<div class=\"info\">  <p>Return a copy of the argument, without leading and trailing whitespace.</p> </div>", "  Return a copy of the argument, without leading and trailing whitespace. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["StringLabels", "StringLabels.html", "trim", "StringLabels.html#VALtrim", "<div class=\"info\">  <p>Return a copy of the argument, without leading and trailing whitespace.</p> </div>", "  Return a copy of the argument, without leading and trailing whitespace. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "trim", "String.html#VALtrim", "<div class=\"info\">  <p>Return a copy of the argument, without leading and trailing whitespace.</p> </div>", "  Return a copy of the argument, without leading and trailing whitespace. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Identifiable.Map", "Identifiable.Map.html", "transpose_keys_and_data_set", "Identifiable.Map.html#VALtranspose_keys_and_data_set", "", "", "<code class=\"type\">key t -&gt; Set.Make(T).t t</code>", "key t -> Set.Make(T).t t"],
["Identifiable.Map", "Identifiable.Map.html", "transpose_keys_and_data", "Identifiable.Map.html#VALtranspose_keys_and_data", "", "", "<code class=\"type\">key t -&gt; key t</code>", "key t -> key t"],
["Clflags", "Clflags.html", "transparent_modules", "Clflags.html#VALtransparent_modules", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Graphics", "Graphics.html", "transp", "Graphics.html#VALtransp", "<div class=\"info\">  <p>In matrices of colors, this color represent a 'transparent' point: when drawing the corresponding image, all pixels on the screen corresponding to a transparent pixel in the image will not be modified, while other points will be set to the color of the corresponding point in the image.</p> </div>", "  In matrices of colors, this color represent a 'transparent' point: when drawing the corresponding image, all pixels on the screen corresponding to a transparent pixel in the image will not be modified, while other points will be set to the color of the corresponding point in the image. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Typemod", "Typemod.html", "transl_signature", "Typemod.html#VALtransl_signature", "", "", "<code class=\"type\">Env.t -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; Typedtree.signature</code>", "Env.t -> Parsetree.signature -> Typedtree.signature"],
["Profile", "Profile.html", "transl", "Profile.html#VALtransl", "", "", "<code class=\"type\">string</code>", "string"],
["Queue", "Queue.html", "transfer", "Queue.html#VALtransfer", "<div class=\"info\">  <p><code class=\"code\">transfer&nbsp;q1&nbsp;q2</code> adds all of <code class=\"code\">q1</code>'s elements at the end of the queue <code class=\"code\">q2</code>, then clears <code class=\"code\">q1</code>.</p> </div>", "  transfer\194\160q1\194\160q2 adds all of q1's elements at the end of the queue q2, then clears q1. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> 'a t -> unit"],
["CamlinternalFormat", "CamlinternalFormat.html", "trans", "CamlinternalFormat.html#VALtrans", "", "", "<code class=\"type\">('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">CamlinternalFormatBasics.fmtty_rel</a> -&gt;<br>       ('a2, 'b2, 'c2, 'd2, 'e2, 'f2, 'a3, 'b3, 'c3, 'd3, 'e3, 'f3)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">CamlinternalFormatBasics.fmtty_rel</a> -&gt;<br>       ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a3, 'b3, 'c3, 'd3, 'e3, 'f3)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">CamlinternalFormatBasics.fmtty_rel</a></code>", "('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)       CamlinternalFormatBasics.fmtty_rel ->       ('a2, 'b2, 'c2, 'd2, 'e2, 'f2, 'a3, 'b3, 'c3, 'd3, 'e3, 'f3)       CamlinternalFormatBasics.fmtty_rel ->       ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a3, 'b3, 'c3, 'd3, 'e3, 'f3)       CamlinternalFormatBasics.fmtty_rel"],
["Marshal", "Marshal.html", "total_size", "Marshal.html#VALtotal_size", "<div class=\"info\">  <p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p> </div>", "  See Marshal.header_size. ", "<code class=\"type\">bytes -&gt; int -&gt; int</code>", "bytes -> int -> int"],
["Parse", "Parse.html", "toplevel_phrase", "Parse.html#VALtoplevel_phrase", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a></code>", "Lexing.lexbuf -> Parsetree.toplevel_phrase"],
["Parser", "Parser.html", "toplevel_phrase", "Parser.html#VALtoplevel_phrase", "", "", "<code class=\"type\">(<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.toplevel_phrase"],
["Pprintast", "Pprintast.html", "toplevel_phrase", "Pprintast.html#VALtoplevel_phrase", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> -&gt; unit</code>", "Format.formatter -> Parsetree.toplevel_phrase -> unit"],
["Pprintast", "Pprintast.html", "top_phrase", "Pprintast.html#VALtop_phrase", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> -&gt; unit</code>", "Format.formatter -> Parsetree.toplevel_phrase -> unit"],
["Printast", "Printast.html", "top_phrase", "Printast.html#VALtop_phrase", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> -&gt; unit</code>", "Format.formatter -> Parsetree.toplevel_phrase -> unit"],
["Queue", "Queue.html", "top", "Queue.html#VALtop", "<div class=\"info\">  <p><code class=\"code\">top</code> is a synonym for <code class=\"code\">peek</code>.</p> </div>", "  top is a synonym for peek. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Stack", "Stack.html", "top", "Stack.html#VALtop", "<div class=\"info\">  <p><code class=\"code\">top&nbsp;s</code> returns the topmost element in stack <code class=\"code\">s</code>, or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p> </div>", "  top\194\160s returns the topmost element in stack s, or raises Stack.Empty if the stack is empty. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Ast_mapper", "Ast_mapper.html", "tool_name", "Ast_mapper.html#VALtool_name", "<div class=\"info\">  <p>Can be used within a ppx preprocessor to know which tool is calling it <code class=\"code\"><span class=\"string\">\"ocamlc\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamlopt\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamldoc\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamldep\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocaml\"</span></code>, ...</p> </div>", "  Can be used within a ppx preprocessor to know which tool is calling it \"ocamlc\", \"ocamlopt\", \"ocamldoc\", \"ocamldep\", \"ocaml\", ... ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Lexer", "Lexer.html", "token_with_comments", "Lexer.html#VALtoken_with_comments", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a></code>", "Lexing.lexbuf -> Parser.token"],
["Lexer", "Lexer.html", "token", "Lexer.html#VALtoken", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a></code>", "Lexing.lexbuf -> Parser.token"],
["Bytes", "Bytes.html", "to_string", "Bytes.html#VALto_string", "<div class=\"info\">  <p>Return a new string that contains the same bytes as the given byte sequence.</p> </div>", "  Return a new string that contains the same bytes as the given byte sequence. ", "<code class=\"type\">bytes -&gt; string</code>", "bytes -> string"],
["BytesLabels", "BytesLabels.html", "to_string", "BytesLabels.html#VALto_string", "<div class=\"info\">  <p>Return a new string that contains the same bytes as the given byte sequence.</p> </div>", "  Return a new string that contains the same bytes as the given byte sequence. ", "<code class=\"type\">bytes -&gt; string</code>", "bytes -> string"],
["Float", "Float.html", "to_string", "Float.html#VALto_string", "<div class=\"info\">  <p>Return the string representation of a floating-point number.</p> </div>", "  Return the string representation of a floating-point number. ", "<code class=\"type\">float -&gt; string</code>", "float -> string"],
["Identifiable.Set", "Identifiable.Set.html", "to_string", "Identifiable.Set.html#VALto_string", "", "", "<code class=\"type\">t -&gt; string</code>", "t -> string"],
["Int32", "Int32.html", "to_string", "Int32.html#VALto_string", "<div class=\"info\">  <p>Return the string representation of its argument, in signed decimal.</p> </div>", "  Return the string representation of its argument, in signed decimal. ", "<code class=\"type\">int32 -&gt; string</code>", "int32 -> string"],
["Int64", "Int64.html", "to_string", "Int64.html#VALto_string", "<div class=\"info\">  <p>Return the string representation of its argument, in decimal.</p> </div>", "  Return the string representation of its argument, in decimal. ", "<code class=\"type\">int64 -&gt; string</code>", "int64 -> string"],
["Marshal", "Marshal.html", "to_string", "Marshal.html#VALto_string", "<div class=\"info\">  <p>Same as <code class=\"code\">to_bytes</code> but return the result as a string instead of a byte sequence.</p> </div>", "  Same as to_bytes but return the result as a string instead of a byte sequence. ", "<code class=\"type\">'a -&gt; <a href=\"Marshal.html#TYPEextern_flags\">extern_flags</a> list -&gt; string</code>", "'a -> extern_flags list -> string"],
["Nativeint", "Nativeint.html", "to_string", "Nativeint.html#VALto_string", "<div class=\"info\">  <p>Return the string representation of its argument, in decimal.</p> </div>", "  Return the string representation of its argument, in decimal. ", "<code class=\"type\">nativeint -&gt; string</code>", "nativeint -> string"],
["Printexc", "Printexc.html", "to_string", "Printexc.html#VALto_string", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.to_string&nbsp;e</code> returns a string representation of the exception <code class=\"code\">e</code>.</p> </div>", "  Printexc.to_string\194\160e returns a string representation of the exception e. ", "<code class=\"type\">exn -&gt; string</code>", "exn -> string"],
["Targetint", "Targetint.html", "to_string", "Targetint.html#VALto_string", "<div class=\"info\">  <p>Return the string representation of its argument, in decimal.</p> </div>", "  Return the string representation of its argument, in decimal. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; string</code>", "t -> string"],
["Array", "Array.html", "to_seqi", "Array.html#VALto_seqi", "<div class=\"info\">  <p>Iterate on the array, in increasing order, yielding indices along elements.</p> </div>", "  Iterate on the array, in increasing order, yielding indices along elements. ", "<code class=\"type\">'a array -&gt; (int * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a array -> (int * 'a) Seq.t"],
["ArrayLabels", "ArrayLabels.html", "to_seqi", "ArrayLabels.html#VALto_seqi", "<div class=\"info\">  <p>Iterate on the array, in increasing order, yielding indices along elements</p> </div>", "  Iterate on the array, in increasing order, yielding indices along elements ", "<code class=\"type\">'a array -&gt; (int * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a array -> (int * 'a) Seq.t"],
["Buffer", "Buffer.html", "to_seqi", "Buffer.html#VALto_seqi", "<div class=\"info\">  <p>Iterate on the buffer, in increasing order, yielding indices along chars.</p> </div>", "  Iterate on the buffer, in increasing order, yielding indices along chars. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; (int * char) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> (int * char) Seq.t"],
["Bytes", "Bytes.html", "to_seqi", "Bytes.html#VALto_seqi", "<div class=\"info\">  <p>Iterate on the string, in increasing order, yielding indices along chars</p> </div>", "  Iterate on the string, in increasing order, yielding indices along chars ", "<code class=\"type\"><a href=\"Bytes.html#TYPEt\">t</a> -&gt; (int * char) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> (int * char) Seq.t"],
["BytesLabels", "BytesLabels.html", "to_seqi", "BytesLabels.html#VALto_seqi", "<div class=\"info\">  <p>Iterate on the string, in increasing order, yielding indices along chars</p> </div>", "  Iterate on the string, in increasing order, yielding indices along chars ", "<code class=\"type\"><a href=\"BytesLabels.html#TYPEt\">t</a> -&gt; (int * char) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> (int * char) Seq.t"],
["StringLabels", "StringLabels.html", "to_seqi", "StringLabels.html#VALto_seqi", "<div class=\"info\">  <p>Iterate on the string, in increasing order, yielding indices along chars</p> </div>", "  Iterate on the string, in increasing order, yielding indices along chars ", "<code class=\"type\"><a href=\"StringLabels.html#TYPEt\">t</a> -&gt; (int * char) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> (int * char) Seq.t"],
["String", "String.html", "to_seqi", "String.html#VALto_seqi", "<div class=\"info\">  <p>Iterate on the string, in increasing order, yielding indices along chars</p> </div>", "  Iterate on the string, in increasing order, yielding indices along chars ", "<code class=\"type\"><a href=\"String.html#TYPEt\">t</a> -&gt; (int * char) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> (int * char) Seq.t"],
["Hashtbl", "Hashtbl.html", "to_seq_values", "Hashtbl.html#VALto_seq_values", "<div class=\"info\">  <p>Iterate on values, in ascending order of their corresponding 'a</p> </div>", "  Iterate on values, in ascending order of their corresponding 'a ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'b <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "('a, 'b) t -> 'b Seq.t"],
["Hashtbl.S", "Hashtbl.S.html", "to_seq_values", "Hashtbl.S.html#VALto_seq_values", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> 'a Seq.t"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "to_seq_values", "Hashtbl.SeededS.html#VALto_seq_values", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> 'a Seq.t"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "to_seq_values", "MoreLabels.Hashtbl.html#VALto_seq_values", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; 'b <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "('a, 'b) t -> 'b Seq.t"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "to_seq_values", "MoreLabels.Hashtbl.S.html#VALto_seq_values", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> 'a Seq.t"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "to_seq_values", "MoreLabels.Hashtbl.SeededS.html#VALto_seq_values", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> 'a Seq.t"],
["Hashtbl", "Hashtbl.html", "to_seq_keys", "Hashtbl.html#VALto_seq_keys", "<div class=\"info\">  <p>Iterate on 'as, in ascending order</p> </div>", "  Iterate on 'as, in ascending order ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "('a, 'b) t -> 'a Seq.t"],
["Hashtbl.S", "Hashtbl.S.html", "to_seq_keys", "Hashtbl.S.html#VALto_seq_keys", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> key Seq.t"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "to_seq_keys", "Hashtbl.SeededS.html#VALto_seq_keys", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> key Seq.t"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "to_seq_keys", "MoreLabels.Hashtbl.html#VALto_seq_keys", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "('a, 'b) t -> 'a Seq.t"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "to_seq_keys", "MoreLabels.Hashtbl.S.html#VALto_seq_keys", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> key Seq.t"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "to_seq_keys", "MoreLabels.Hashtbl.SeededS.html#VALto_seq_keys", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> key Seq.t"],
["Set.S", "Set.S.html", "to_seq_from", "Set.S.html#VALto_seq_from", "<div class=\"info\">  <p><code class=\"code\">to_seq_from&nbsp;x&nbsp;s</code> iterates on a subset of the elements of <code class=\"code\">s</code> in ascending order, from <code class=\"code\">x</code> or above.</p> </div>", "  to_seq_from\194\160x\194\160s iterates on a subset of the elements of s in ascending order, from x or above. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "elt -> t -> elt Seq.t"],
["Map.S", "Map.S.html", "to_seq_from", "Map.S.html#VALto_seq_from", "<div class=\"info\">  <p><code class=\"code\">to_seq_from&nbsp;k&nbsp;m</code> iterates on a subset of the bindings of <code class=\"code\">m</code>, in ascending order, from key <code class=\"code\">k</code> or above.</p> </div>", "  to_seq_from\194\160k\194\160m iterates on a subset of the bindings of m, in ascending order, from key k or above. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "key -> 'a t -> (key * 'a) Seq.t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "to_seq_from", "MoreLabels.Map.S.html#VALto_seq_from", "", "", "<code class=\"type\"><a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "key ->       'a t -> (key * 'a) Seq.t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "to_seq_from", "MoreLabels.Set.S.html#VALto_seq_from", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "elt -> t -> elt Seq.t"],
["Array", "Array.html", "to_seq", "Array.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the array, in increasing order.</p> </div>", "  Iterate on the array, in increasing order. ", "<code class=\"type\">'a array -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a array -> 'a Seq.t"],
["ArrayLabels", "ArrayLabels.html", "to_seq", "ArrayLabels.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the array, in increasing order</p> </div>", "  Iterate on the array, in increasing order ", "<code class=\"type\">'a array -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a array -> 'a Seq.t"],
["Buffer", "Buffer.html", "to_seq", "Buffer.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the buffer, in increasing order.</p> </div>", "  Iterate on the buffer, in increasing order. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; char <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> char Seq.t"],
["Bytes", "Bytes.html", "to_seq", "Bytes.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the string, in increasing index order.</p> </div>", "  Iterate on the string, in increasing index order. ", "<code class=\"type\"><a href=\"Bytes.html#TYPEt\">t</a> -&gt; char <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> char Seq.t"],
["BytesLabels", "BytesLabels.html", "to_seq", "BytesLabels.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the string, in increasing index order.</p> </div>", "  Iterate on the string, in increasing index order. ", "<code class=\"type\"><a href=\"BytesLabels.html#TYPEt\">t</a> -&gt; char <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> char Seq.t"],
["Set.S", "Set.S.html", "to_seq", "Set.S.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the whole set, in ascending order</p> </div>", "  Iterate on the whole set, in ascending order ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> elt Seq.t"],
["Map.S", "Map.S.html", "to_seq", "Map.S.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the whole map, in ascending order</p> </div>", "  Iterate on the whole map, in ascending order ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> (key * 'a) Seq.t"],
["Hashtbl", "Hashtbl.html", "to_seq", "Hashtbl.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the whole table, in unspecified order.</p> </div>", "  Iterate on the whole table, in unspecified order. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; ('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "('a, 'b) t -> ('a * 'b) Seq.t"],
["Hashtbl.S", "Hashtbl.S.html", "to_seq", "Hashtbl.S.html#VALto_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; (<a href=\"Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> (key * 'a) Seq.t"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "to_seq", "Hashtbl.SeededS.html#VALto_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; (<a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> (key * 'a) Seq.t"],
["List", "List.html", "to_seq", "List.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the list</p> </div>", "  Iterate on the list ", "<code class=\"type\">'a list -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a list -> 'a Seq.t"],
["ListLabels", "ListLabels.html", "to_seq", "ListLabels.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the list</p> </div>", "  Iterate on the list ", "<code class=\"type\">'a list -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a list -> 'a Seq.t"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "to_seq", "MoreLabels.Hashtbl.html#VALto_seq", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; ('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "('a, 'b) t -> ('a * 'b) Seq.t"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "to_seq", "MoreLabels.Hashtbl.S.html#VALto_seq", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> (key * 'a) Seq.t"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "to_seq", "MoreLabels.Hashtbl.SeededS.html#VALto_seq", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt;<br>       (<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t ->       (key * 'a) Seq.t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "to_seq", "MoreLabels.Map.S.html#VALto_seq", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> (key * 'a) Seq.t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "to_seq", "MoreLabels.Set.S.html#VALto_seq", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> elt Seq.t"],
["Queue", "Queue.html", "to_seq", "Queue.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the queue, in front-to-back order.</p> </div>", "  Iterate on the queue, in front-to-back order. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> 'a Seq.t"],
["Stack", "Stack.html", "to_seq", "Stack.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the stack, top to bottom.</p> </div>", "  Iterate on the stack, top to bottom. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "'a t -> 'a Seq.t"],
["StringLabels", "StringLabels.html", "to_seq", "StringLabels.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the string, in increasing index order.</p> </div>", "  Iterate on the string, in increasing index order. ", "<code class=\"type\"><a href=\"StringLabels.html#TYPEt\">t</a> -&gt; char <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> char Seq.t"],
["String", "String.html", "to_seq", "String.html#VALto_seq", "<div class=\"info\">  <p>Iterate on the string, in increasing index order.</p> </div>", "  Iterate on the string, in increasing index order. ", "<code class=\"type\"><a href=\"String.html#TYPEt\">t</a> -&gt; char <a href=\"Seq.html#TYPEt\">Seq.t</a></code>", "t -> char Seq.t"],
["Int64", "Int64.html", "to_nativeint", "Int64.html#VALto_nativeint", "<div class=\"info\">  <p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a native integer.</p> </div>", "  Convert the given 64-bit integer (type int64) to a native integer. ", "<code class=\"type\">int64 -&gt; nativeint</code>", "int64 -> nativeint"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "to_map", "Identifiable.Tbl.html#VALto_map", "", "", "<code class=\"type\">'a t -&gt; 'a Map.Make(T).t</code>", "'a t -> 'a Map.Make(T).t"],
["Array", "Array.html", "to_list", "Array.html#VALto_list", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p> </div>", "  Array.to_list\194\160a returns the list of all the elements of a. ", "<code class=\"type\">'a array -&gt; 'a list</code>", "'a array -> 'a list"],
["ArrayLabels", "ArrayLabels.html", "to_list", "ArrayLabels.html#VALto_list", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p> </div>", "  Array.to_list\194\160a returns the list of all the elements of a. ", "<code class=\"type\">'a array -&gt; 'a list</code>", "'a array -> 'a list"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "to_list", "Identifiable.Tbl.html#VALto_list", "", "", "<code class=\"type\">'a t -&gt; (<a href=\"Identifiable.Tbl.T.html#TYPEt\">T.t</a> * 'a) list</code>", "'a t -> (T.t * 'a) list"],
["Targetint", "Targetint.html", "to_int64", "Targetint.html#VALto_int64", "<div class=\"info\">  <p>Convert the given target integer to a 64-bit integer (type <code class=\"code\">int64</code>).</p> </div>", "  Convert the given target integer to a 64-bit integer (type int64). ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int64</code>", "t -> int64"],
["Int64", "Int64.html", "to_int32", "Int64.html#VALto_int32", "<div class=\"info\">  <p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a 32-bit integer (type <code class=\"code\">int32</code>).</p> </div>", "  Convert the given 64-bit integer (type int64) to a 32-bit integer (type int32). ", "<code class=\"type\">int64 -&gt; int32</code>", "int64 -> int32"],
["Nativeint", "Nativeint.html", "to_int32", "Nativeint.html#VALto_int32", "<div class=\"info\">  <p>Convert the given native integer to a 32-bit integer (type <code class=\"code\">int32</code>).</p> </div>", "  Convert the given native integer to a 32-bit integer (type int32). ", "<code class=\"type\">nativeint -&gt; int32</code>", "nativeint -> int32"],
["Targetint", "Targetint.html", "to_int32", "Targetint.html#VALto_int32", "<div class=\"info\">  <p>Convert the given target integer to a 32-bit integer (type <code class=\"code\">int32</code>).</p> </div>", "  Convert the given target integer to a 32-bit integer (type int32). ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int32</code>", "t -> int32"],
["Float", "Float.html", "to_int", "Float.html#VALto_int", "<div class=\"info\">  <p>Truncate the given floating-point number to an integer.</p> </div>", "  Truncate the given floating-point number to an integer. ", "<code class=\"type\">float -&gt; int</code>", "float -> int"],
["Int32", "Int32.html", "to_int", "Int32.html#VALto_int", "<div class=\"info\">  <p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to an integer (type <code class=\"code\">int</code>).</p> </div>", "  Convert the given 32-bit integer (type int32) to an integer (type int). ", "<code class=\"type\">int32 -&gt; int</code>", "int32 -> int"],
["Int64", "Int64.html", "to_int", "Int64.html#VALto_int", "<div class=\"info\">  <p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to an integer (type <code class=\"code\">int</code>).</p> </div>", "  Convert the given 64-bit integer (type int64) to an integer (type int). ", "<code class=\"type\">int64 -&gt; int</code>", "int64 -> int"],
["Nativeint", "Nativeint.html", "to_int", "Nativeint.html#VALto_int", "<div class=\"info\">  <p>Convert the given native integer (type <code class=\"code\">nativeint</code>) to an integer (type <code class=\"code\">int</code>).</p> </div>", "  Convert the given native integer (type nativeint) to an integer (type int). ", "<code class=\"type\">nativeint -&gt; int</code>", "nativeint -> int"],
["Numbers.Int8", "Numbers.Int8.html", "to_int", "Numbers.Int8.html#VALto_int", "", "", "<code class=\"type\"><a href=\"Numbers.Int8.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Numbers.Int16", "Numbers.Int16.html", "to_int", "Numbers.Int16.html#VALto_int", "", "", "<code class=\"type\"><a href=\"Numbers.Int16.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Targetint", "Targetint.html", "to_int", "Targetint.html#VALto_int", "<div class=\"info\">  <p>Convert the given target integer (type <code class=\"code\">t</code>) to an integer (type <code class=\"code\">int</code>).</p> </div>", "  Convert the given target integer (type t) to an integer (type int). ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Uchar", "Uchar.html", "to_int", "Uchar.html#VALto_int", "<div class=\"info\">  <p><code class=\"code\">to_int&nbsp;u</code> is <code class=\"code\">u</code> as an integer.</p> </div>", "  to_int\194\160u is u as an integer. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Digest", "Digest.html", "to_hex", "Digest.html#VALto_hex", "<div class=\"info\">  <p>Return the printable hexadecimal representation of the given digest.</p> </div>", "  Return the printable hexadecimal representation of the given digest. ", "<code class=\"type\"><a href=\"Digest.html#TYPEt\">t</a> -&gt; string</code>", "t -> string"],
["Int32", "Int32.html", "to_float", "Int32.html#VALto_float", "<div class=\"info\">  <p>Convert the given 32-bit integer to a floating-point number.</p> </div>", "  Convert the given 32-bit integer to a floating-point number. ", "<code class=\"type\">int32 -&gt; float</code>", "int32 -> float"],
["Int64", "Int64.html", "to_float", "Int64.html#VALto_float", "<div class=\"info\">  <p>Convert the given 64-bit integer to a floating-point number.</p> </div>", "  Convert the given 64-bit integer to a floating-point number. ", "<code class=\"type\">int64 -&gt; float</code>", "int64 -> float"],
["Nativeint", "Nativeint.html", "to_float", "Nativeint.html#VALto_float", "<div class=\"info\">  <p>Convert the given native integer to a floating-point number.</p> </div>", "  Convert the given native integer to a floating-point number. ", "<code class=\"type\">nativeint -&gt; float</code>", "nativeint -> float"],
["Targetint", "Targetint.html", "to_float", "Targetint.html#VALto_float", "<div class=\"info\">  <p>Convert the given target integer to a floating-point number.</p> </div>", "  Convert the given target integer to a floating-point number. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; float</code>", "t -> float"],
["Uchar", "Uchar.html", "to_char", "Uchar.html#VALto_char", "<div class=\"info\">  <p><code class=\"code\">to_char&nbsp;u</code> is <code class=\"code\">u</code> as an OCaml latin1 character.</p> </div>", "  to_char\194\160u is u as an OCaml latin1 character. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; char</code>", "t -> char"],
["Marshal", "Marshal.html", "to_channel", "Marshal.html#VALto_channel", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel&nbsp;chan&nbsp;v&nbsp;flags</code> writes the representation of <code class=\"code\">v</code> on channel <code class=\"code\">chan</code>.</p> </div>", "  Marshal.to_channel\194\160chan\194\160v\194\160flags writes the representation of v on channel chan. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; 'a -&gt; <a href=\"Marshal.html#TYPEextern_flags\">extern_flags</a> list -&gt; unit</code>", "out_channel -> 'a -> extern_flags list -> unit"],
["Buffer", "Buffer.html", "to_bytes", "Buffer.html#VALto_bytes", "<div class=\"info\">  <p>Return a copy of the current contents of the buffer.</p> </div>", "  Return a copy of the current contents of the buffer. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; bytes</code>", "t -> bytes"],
["Marshal", "Marshal.html", "to_bytes", "Marshal.html#VALto_bytes", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_bytes&nbsp;v&nbsp;flags</code> returns a byte sequence containing the representation of <code class=\"code\">v</code>.</p> </div>", "  Marshal.to_bytes\194\160v\194\160flags returns a byte sequence containing the representation of v. ", "<code class=\"type\">'a -&gt; <a href=\"Marshal.html#TYPEextern_flags\">extern_flags</a> list -&gt; bytes</code>", "'a -> extern_flags list -> bytes"],
["Marshal", "Marshal.html", "to_buffer", "Marshal.html#VALto_buffer", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_buffer&nbsp;buff&nbsp;ofs&nbsp;len&nbsp;v&nbsp;flags</code> marshals the value <code class=\"code\">v</code>, storing its byte representation in the sequence <code class=\"code\">buff</code>, starting at index <code class=\"code\">ofs</code>, and writing at most <code class=\"code\">len</code> bytes.</p> </div>", "  Marshal.to_buffer\194\160buff\194\160ofs\194\160len\194\160v\194\160flags marshals the value v, storing its byte representation in the sequence buff, starting at index ofs, and writing at most len bytes. ", "<code class=\"type\">bytes -&gt; int -&gt; int -&gt; 'a -&gt; <a href=\"Marshal.html#TYPEextern_flags\">extern_flags</a> list -&gt; int</code>", "bytes -> int -> int -> 'a -> extern_flags list -> int"],
["List", "List.html", "tl", "List.html#VALtl", "<div class=\"info\">  <p>Return the given list without its first element.</p> </div>", "  Return the given list without its first element. ", "<code class=\"type\">'a list -&gt; 'a list</code>", "'a list -> 'a list"],
["ListLabels", "ListLabels.html", "tl", "ListLabels.html#VALtl", "<div class=\"info\">  <p>Return the given list without its first element.</p> </div>", "  Return the given list without its first element. ", "<code class=\"type\">'a list -&gt; 'a list</code>", "'a list -> 'a list"],
["Unix", "Unix.html", "times", "Unix.html#VALtimes", "<div class=\"info\">  <p>Return the execution times of the process.</p> </div>", "  Return the execution times of the process. ", "<code class=\"type\">unit -&gt; <a href=\"Unix.html#TYPEprocess_times\">process_times</a></code>", "unit -> process_times"],
["UnixLabels", "UnixLabels.html", "times", "UnixLabels.html#VALtimes", "<div class=\"info\">  <p>Return the execution times of the process.</p> </div>", "  Return the execution times of the process. ", "<code class=\"type\">unit -&gt; <a href=\"UnixLabels.html#TYPEprocess_times\">process_times</a></code>", "unit -> process_times"],
["ThreadUnix", "ThreadUnix.html", "timed_write_substring", "ThreadUnix.html#VALtimed_write_substring", "<div class=\"info\">  <p>See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>.</p> </div>", "  See ThreadUnix.timed_write. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; string -&gt; int -&gt; int -&gt; float -&gt; int</code>", "Unix.file_descr -> string -> int -> int -> float -> int"],
["ThreadUnix", "ThreadUnix.html", "timed_write", "ThreadUnix.html#VALtimed_write", "<div class=\"info\">  <p>Behave as <a href=\"ThreadUnix.html#VALread\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.read</code></a> and <a href=\"ThreadUnix.html#VALwrite\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.write</code></a>, except that <code class=\"code\"><span class=\"constructor\">Unix_error</span>(<span class=\"constructor\">ETIMEDOUT</span>,_,_)</code> is raised if no data is available for reading or ready for writing after <code class=\"code\">d</code> seconds.</p> </div>", "  Behave as ThreadUnix.read and ThreadUnix.write, except that Unix_error(ETIMEDOUT,_,_) is raised if no data is available for reading or ready for writing after d seconds. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; float -&gt; int</code>", "Unix.file_descr -> bytes -> int -> int -> float -> int"],
["ThreadUnix", "ThreadUnix.html", "timed_read", "ThreadUnix.html#VALtimed_read", "<div class=\"info\">  <p>See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>.</p> </div>", "  See ThreadUnix.timed_write. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; float -&gt; int</code>", "Unix.file_descr -> bytes -> int -> int -> float -> int"],
["Sys", "Sys.html", "time", "Sys.html#VALtime", "<div class=\"info\">  <p>Return the processor time, in seconds, used by the program since the beginning of execution.</p> </div>", "  Return the processor time, in seconds, used by the program since the beginning of execution. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["Unix", "Unix.html", "time", "Unix.html#VALtime", "<div class=\"info\">  <p>Return the current time since 00:00:00 GMT, Jan.</p> </div>", "  Return the current time since 00:00:00 GMT, Jan. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["UnixLabels", "UnixLabels.html", "time", "UnixLabels.html#VALtime", "<div class=\"info\">  <p>Return the current time since 00:00:00 GMT, Jan.</p> </div>", "  Return the current time since 00:00:00 GMT, Jan. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["Misc", "Misc.html", "thd4", "Misc.html#VALthd4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'c</code>", "'a * 'b * 'c * 'd -> 'c"],
["Misc", "Misc.html", "thd3", "Misc.html#VALthd3", "", "", "<code class=\"type\">'a * 'b * 'c -&gt; 'c</code>", "'a * 'b * 'c -> 'c"],
["Graphics", "Graphics.html", "text_size", "Graphics.html#VALtext_size", "<div class=\"info\">  <p>Return the dimensions of the given text, if it were drawn with the current font and size.</p> </div>", "  Return the dimensions of the given text, if it were drawn with the current font and size. ", "<code class=\"type\">string -&gt; int * int</code>", "string -> int * int"],
["Docstrings", "Docstrings.html", "text_attr", "Docstrings.html#VALtext_attr", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "docstring -> Parsetree.attribute"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "text", "Ast_helper.Sig.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a> list</code>", "Docstrings.text -> Parsetree.signature_item list"],
["Ast_helper.Str", "Ast_helper.Str.html", "text", "Ast_helper.Str.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a> list</code>", "Docstrings.text -> Parsetree.structure_item list"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "text", "Ast_helper.Ctf.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> list</code>", "Docstrings.text -> Parsetree.class_type_field list"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "text", "Ast_helper.Cf.html#VALtext", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> list</code>", "Docstrings.text -> Parsetree.class_field list"],
["Filename", "Filename.html", "temp_file", "Filename.html#VALtemp_file", "<div class=\"info\">  <p><code class=\"code\">temp_file&nbsp;prefix&nbsp;suffix</code> returns the name of a fresh temporary file in the temporary directory.</p> </div>", "  temp_file\194\160prefix\194\160suffix returns the name of a fresh temporary file in the temporary directory. ", "<code class=\"type\">?temp_dir:string -&gt; string -&gt; string -&gt; string</code>", "?temp_dir:string -> string -> string -> string"],
["Filename", "Filename.html", "temp_dir_name", "Filename.html#VALtemp_dir_name", "<div class=\"info\">  <span class=\"deprecated\"><p>The name of the initial temporary directory: Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\" if the variable is not set.</p> </span></div>", "  The name of the initial temporary directory: Under Unix, the value of the TMPDIR environment variable, or \"/tmp\" if the variable is not set. ", "<code class=\"type\">string</code>", "string"],
["Unix", "Unix.html", "tcsetattr", "Unix.html#VALtcsetattr", "<div class=\"info\">  <p>Set the status of the terminal referred to by the given file descriptor.</p> </div>", "  Set the status of the terminal referred to by the given file descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsetattr_when\">setattr_when</a> -&gt; <a href=\"Unix.html#TYPEterminal_io\">terminal_io</a> -&gt; unit</code>", "file_descr -> setattr_when -> terminal_io -> unit"],
["UnixLabels", "UnixLabels.html", "tcsetattr", "UnixLabels.html#VALtcsetattr", "<div class=\"info\">  <p>Set the status of the terminal referred to by the given file descriptor.</p> </div>", "  Set the status of the terminal referred to by the given file descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       mode:<a href=\"UnixLabels.html#TYPEsetattr_when\">setattr_when</a> -&gt; <a href=\"UnixLabels.html#TYPEterminal_io\">terminal_io</a> -&gt; unit</code>", "file_descr ->       mode:setattr_when -> terminal_io -> unit"],
["Unix", "Unix.html", "tcsendbreak", "Unix.html#VALtcsendbreak", "<div class=\"info\">  <p>Send a break condition on the given file descriptor.</p> </div>", "  Send a break condition on the given file descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; int -&gt; unit</code>", "file_descr -> int -> unit"],
["UnixLabels", "UnixLabels.html", "tcsendbreak", "UnixLabels.html#VALtcsendbreak", "<div class=\"info\">  <p>Send a break condition on the given file descriptor.</p> </div>", "  Send a break condition on the given file descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; duration:int -&gt; unit</code>", "file_descr -> duration:int -> unit"],
["Unix", "Unix.html", "tcgetattr", "Unix.html#VALtcgetattr", "<div class=\"info\">  <p>Return the status of the terminal referred to by the given file descriptor.</p> </div>", "  Return the status of the terminal referred to by the given file descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEterminal_io\">terminal_io</a></code>", "file_descr -> terminal_io"],
["UnixLabels", "UnixLabels.html", "tcgetattr", "UnixLabels.html#VALtcgetattr", "<div class=\"info\">  <p>Return the status of the terminal referred to by the given file descriptor.</p> </div>", "  Return the status of the terminal referred to by the given file descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEterminal_io\">terminal_io</a></code>", "file_descr -> terminal_io"],
["Unix", "Unix.html", "tcflush", "Unix.html#VALtcflush", "<div class=\"info\">  <p>Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read, <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both.</p> </div>", "  Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: TCIFLUSH flushes data received but not read, TCOFLUSH flushes data written but not transmitted, and TCIOFLUSH flushes both. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEflush_queue\">flush_queue</a> -&gt; unit</code>", "file_descr -> flush_queue -> unit"],
["UnixLabels", "UnixLabels.html", "tcflush", "UnixLabels.html#VALtcflush", "<div class=\"info\">  <p>Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read, <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both.</p> </div>", "  Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: TCIFLUSH flushes data received but not read, TCOFLUSH flushes data written but not transmitted, and TCIOFLUSH flushes both. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; mode:<a href=\"UnixLabels.html#TYPEflush_queue\">flush_queue</a> -&gt; unit</code>", "file_descr -> mode:flush_queue -> unit"],
["Unix", "Unix.html", "tcflow", "Unix.html#VALtcflow", "<div class=\"info\">  <p>Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output, <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input, and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input.</p> </div>", "  Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: TCOOFF suspends output, TCOON restarts output, TCIOFF transmits a STOP character to suspend input, and TCION transmits a START character to restart input. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEflow_action\">flow_action</a> -&gt; unit</code>", "file_descr -> flow_action -> unit"],
["UnixLabels", "UnixLabels.html", "tcflow", "UnixLabels.html#VALtcflow", "<div class=\"info\">  <p>Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output, <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input, and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input.</p> </div>", "  Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: TCOOFF suspends output, TCOON restarts output, TCIOFF transmits a STOP character to suspend input, and TCION transmits a START character to restart input. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; mode:<a href=\"UnixLabels.html#TYPEflow_action\">flow_action</a> -&gt; unit</code>", "file_descr -> mode:flow_action -> unit"],
["Unix", "Unix.html", "tcdrain", "Unix.html#VALtcdrain", "<div class=\"info\">  <p>Waits until all output written on the given file descriptor has been transmitted.</p> </div>", "  Waits until all output written on the given file descriptor has been transmitted. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["UnixLabels", "UnixLabels.html", "tcdrain", "UnixLabels.html#VALtcdrain", "<div class=\"info\">  <p>Waits until all output written on the given file descriptor has been transmitted.</p> </div>", "  Waits until all output written on the given file descriptor has been transmitted. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["Config", "Config.html", "target", "Config.html#VALtarget", "", "", "<code class=\"type\">string</code>", "string"],
["Float", "Float.html", "tanh", "Float.html#VALtanh", "<div class=\"info\">  <p>Hyperbolic tangent.</p> </div>", "  Hyperbolic tangent. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "tanh", "Pervasives.html#VALtanh", "<div class=\"info\">  <p>Hyperbolic tangent.</p> </div>", "  Hyperbolic tangent. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Float", "Float.html", "tan", "Float.html#VALtan", "<div class=\"info\">  <p>Tangent.</p> </div>", "  Tangent. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "tan", "Pervasives.html#VALtan", "<div class=\"info\">  <p>Tangent.</p> </div>", "  Tangent. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Queue", "Queue.html", "take", "Queue.html#VALtake", "<div class=\"info\">  <p><code class=\"code\">take&nbsp;q</code> removes and returns the first element in queue <code class=\"code\">q</code>, or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p> </div>", "  take\194\160q removes and returns the first element in queue q, or raises Queue.Empty if the queue is empty. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Spacetime.Snapshot", "Spacetime.Snapshot.html", "take", "Spacetime.Snapshot.html#VALtake", "<div class=\"info\">  <p><code class=\"code\">take&nbsp;series</code> takes a snapshot of the profiling annotations on the values in the minor and major heaps, together with GC stats, and write the result to the <code class=\"code\">series</code> file.</p> </div>", "  take\194\160series takes a snapshot of the profiling annotations on the values in the minor and major heaps, together with GC stats, and write the result to the series file. ", "<code class=\"type\">?time:float -&gt; <a href=\"Spacetime.Series.html#TYPEt\">Spacetime.Series.t</a> -&gt; unit</code>", "?time:float -> Spacetime.Series.t -> unit"],
["Obj", "Obj.html", "tag", "Obj.html#VALtag", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Config", "Config.html", "systhread_supported", "Config.html#VALsysthread_supported", "", "", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "system", "Config.html#VALsystem", "", "", "<code class=\"type\">string</code>", "string"],
["ThreadUnix", "ThreadUnix.html", "system", "ThreadUnix.html#VALsystem", "", "", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEprocess_status\">Unix.process_status</a></code>", "string -> Unix.process_status"],
["Unix", "Unix.html", "system", "Unix.html#VALsystem", "<div class=\"info\">  <p>Execute the given command, wait until it terminates, and return its termination status.</p> </div>", "  Execute the given command, wait until it terminates, and return its termination status. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEprocess_status\">process_status</a></code>", "string -> process_status"],
["UnixLabels", "UnixLabels.html", "system", "UnixLabels.html#VALsystem", "<div class=\"info\">  <p>Execute the given command, wait until it terminates, and return its termination status.</p> </div>", "  Execute the given command, wait until it terminates, and return its termination status. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEprocess_status\">process_status</a></code>", "string -> process_status"],
["Graphics", "Graphics.html", "synchronize", "Graphics.html#VALsynchronize", "<div class=\"info\">  <p>Synchronize the backing store and the on-screen window, by copying the contents of the backing store onto the graphics window.</p> </div>", "  Synchronize the backing store and the on-screen window, by copying the contents of the backing store onto the graphics window. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Event", "Event.html", "sync", "Event.html#VALsync", "<div class=\"info\">  <p>``Synchronize'' on an event: offer all the communication possibilities specified in the event to the outside world, and block until one of the communications succeed.</p> </div>", "  ``Synchronize'' on an event: offer all the communication possibilities specified in the event to the outside world, and block until one of the communications succeed. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEevent\">event</a> -&gt; 'a</code>", "'a event -> 'a"],
["CamlinternalFormat", "CamlinternalFormat.html", "symm", "CamlinternalFormat.html#VALsymm", "", "", "<code class=\"type\">('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">CamlinternalFormatBasics.fmtty_rel</a> -&gt;<br>       ('a2, 'b2, 'c2, 'd2, 'e2, 'f2, 'a1, 'b1, 'c1, 'd1, 'e1, 'f1)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">CamlinternalFormatBasics.fmtty_rel</a></code>", "('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)       CamlinternalFormatBasics.fmtty_rel ->       ('a2, 'b2, 'c2, 'd2, 'e2, 'f2, 'a1, 'b1, 'c1, 'd1, 'e1, 'f1)       CamlinternalFormatBasics.fmtty_rel"],
["Unix", "Unix.html", "symlink", "Unix.html#VALsymlink", "<div class=\"info\">  <p><code class=\"code\">symlink&nbsp;?to_dir&nbsp;source&nbsp;dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link to the file <code class=\"code\">source</code>.</p> </div>", "  symlink\194\160?to_dir\194\160source\194\160dest creates the file dest as a symbolic link to the file source. ", "<code class=\"type\">?to_dir:bool -&gt; string -&gt; string -&gt; unit</code>", "?to_dir:bool -> string -> string -> unit"],
["UnixLabels", "UnixLabels.html", "symlink", "UnixLabels.html#VALsymlink", "<div class=\"info\">  <p><code class=\"code\">symlink&nbsp;source&nbsp;dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link to the file <code class=\"code\">source</code>.</p> </div>", "  symlink\194\160source\194\160dest creates the file dest as a symbolic link to the file source. ", "<code class=\"type\">?to_dir:bool -&gt; src:string -&gt; dst:string -&gt; unit</code>", "?to_dir:bool -> src:string -> dst:string -> unit"],
["Docstrings", "Docstrings.html", "symbol_text_lazy", "Docstrings.html#VALsymbol_text_lazy", "", "", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a> <a href=\"Lazy.html#TYPEt\">Lazy.t</a></code>", "unit -> text Lazy.t"],
["Docstrings", "Docstrings.html", "symbol_text", "Docstrings.html#VALsymbol_text", "<div class=\"info\">  <p>Fetch the text preceding the current symbol.</p> </div>", "  Fetch the text preceding the current symbol. ", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "unit -> text"],
["Parsing", "Parsing.html", "symbol_start_pos", "Parsing.html#VALsymbol_start_pos", "<div class=\"info\">  <p>Same as <code class=\"code\">symbol_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p> </div>", "  Same as symbol_start, but return a position instead of an offset. ", "<code class=\"type\">unit -&gt; <a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>", "unit -> Lexing.position"],
["Parsing", "Parsing.html", "symbol_start", "Parsing.html#VALsymbol_start", "<div class=\"info\">  <p><code class=\"code\">symbol_start</code> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a> are to be called in the action part of a grammar rule only.</p> </div>", "  symbol_start and Parsing.symbol_end are to be called in the action part of a grammar rule only. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Location", "Location.html", "symbol_rloc", "Location.html#VALsymbol_rloc", "", "", "<code class=\"type\">unit -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "unit -> t"],
["Docstrings", "Docstrings.html", "symbol_pre_extra_text", "Docstrings.html#VALsymbol_pre_extra_text", "<div class=\"info\">  <p>Fetch additional text preceding the current symbol</p> </div>", "  Fetch additional text preceding the current symbol ", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "unit -> text"],
["Docstrings", "Docstrings.html", "symbol_post_extra_text", "Docstrings.html#VALsymbol_post_extra_text", "<div class=\"info\">  <p>Fetch additional text following the current symbol</p> </div>", "  Fetch additional text following the current symbol ", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "unit -> text"],
["Docstrings", "Docstrings.html", "symbol_info", "Docstrings.html#VALsymbol_info", "<div class=\"info\">  <p>Fetch the field info for the current symbol.</p> </div>", "  Fetch the field info for the current symbol. ", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEinfo\">info</a></code>", "unit -> info"],
["Location", "Location.html", "symbol_gloc", "Location.html#VALsymbol_gloc", "", "", "<code class=\"type\">unit -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "unit -> t"],
["Parsing", "Parsing.html", "symbol_end_pos", "Parsing.html#VALsymbol_end_pos", "<div class=\"info\">  <p>Same as <code class=\"code\">symbol_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p> </div>", "  Same as symbol_end, but return a position instead of an offset. ", "<code class=\"type\">unit -&gt; <a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>", "unit -> Lexing.position"],
["Parsing", "Parsing.html", "symbol_end", "Parsing.html#VALsymbol_end", "<div class=\"info\">  <p>See <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a>.</p> </div>", "  See Parsing.symbol_start. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Docstrings", "Docstrings.html", "symbol_docs_lazy", "Docstrings.html#VALsymbol_docs_lazy", "", "", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a> <a href=\"Lazy.html#TYPEt\">Lazy.t</a></code>", "unit -> docs Lazy.t"],
["Docstrings", "Docstrings.html", "symbol_docs", "Docstrings.html#VALsymbol_docs", "<div class=\"info\">  <p>Fetch the item documentation for the current symbol.</p> </div>", "  Fetch the item documentation for the current symbol. ", "<code class=\"type\">unit -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a></code>", "unit -> docs"],
["Int32", "Int32.html", "succ", "Int32.html#VALsucc", "<div class=\"info\">  <p>Successor.</p> </div>", "  Successor. ", "<code class=\"type\">int32 -&gt; int32</code>", "int32 -> int32"],
["Int64", "Int64.html", "succ", "Int64.html#VALsucc", "<div class=\"info\">  <p>Successor.</p> </div>", "  Successor. ", "<code class=\"type\">int64 -&gt; int64</code>", "int64 -> int64"],
["Nativeint", "Nativeint.html", "succ", "Nativeint.html#VALsucc", "<div class=\"info\">  <p>Successor.</p> </div>", "  Successor. ", "<code class=\"type\">nativeint -&gt; nativeint</code>", "nativeint -> nativeint"],
["Pervasives", "Pervasives.html", "succ", "Pervasives.html#VALsucc", "<div class=\"info\">  <p><code class=\"code\">succ&nbsp;x</code> is <code class=\"code\">x&nbsp;+&nbsp;1</code>.</p> </div>", "  succ\194\160x is x\194\160+\194\1601. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Targetint", "Targetint.html", "succ", "Targetint.html#VALsucc", "<div class=\"info\">  <p>Successor.</p> </div>", "  Successor. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t"],
["Uchar", "Uchar.html", "succ", "Uchar.html#VALsucc", "<div class=\"info\">  <p><code class=\"code\">succ&nbsp;u</code> is the scalar value after <code class=\"code\">u</code> in the set of Unicode scalar values.</p> </div>", "  succ\194\160u is the scalar value after u in the set of Unicode scalar values. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; <a href=\"Uchar.html#TYPEt\">t</a></code>", "t -> t"],
["Digest", "Digest.html", "substring", "Digest.html#VALsubstring", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Digest</span>.substring&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the substring of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> characters.</p> </div>", "  Digest.substring\194\160s\194\160ofs\194\160len returns the digest of the substring of s starting at index ofs and containing len characters. ", "<code class=\"type\">string -&gt; int -&gt; int -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "string -> int -> int -> t"],
["Str", "Str.html", "substitute_first", "Str.html#VALsubstitute_first", "<div class=\"info\">  <p>Same as <a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a>, except that only the first substring matching the regular expression is replaced.</p> </div>", "  Same as Str.global_substitute, except that only the first substring matching the regular expression is replaced. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; (string -&gt; string) -&gt; string -&gt; string</code>", "regexp -> (string -> string) -> string -> string"],
["Set.S", "Set.S.html", "subset", "Set.S.html#VALsubset", "<div class=\"info\">  <p><code class=\"code\">subset&nbsp;s1&nbsp;s2</code> tests whether the set <code class=\"code\">s1</code> is a subset of the set <code class=\"code\">s2</code>.</p> </div>", "  subset\194\160s1\194\160s2 tests whether the set s1 is a subset of the set s2. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "subset", "MoreLabels.Set.S.html#VALsubset", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Digest", "Digest.html", "subbytes", "Digest.html#VALsubbytes", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Digest</span>.subbytes&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the subsequence of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> bytes.</p> </div>", "  Digest.subbytes\194\160s\194\160ofs\194\160len returns the digest of the subsequence of s starting at index ofs and containing len bytes. ", "<code class=\"type\">bytes -&gt; int -&gt; int -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "bytes -> int -> int -> t"],
["Bytes", "Bytes.html", "sub_string", "Bytes.html#VALsub_string", "<div class=\"info\">  <p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p> </div>", "  Same as sub but return a string instead of a byte sequence. ", "<code class=\"type\">bytes -&gt; int -&gt; int -&gt; string</code>", "bytes -> int -> int -> string"],
["BytesLabels", "BytesLabels.html", "sub_string", "BytesLabels.html#VALsub_string", "<div class=\"info\">  <p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p> </div>", "  Same as sub but return a string instead of a byte sequence. ", "<code class=\"type\">bytes -&gt; pos:int -&gt; len:int -&gt; string</code>", "bytes -> pos:int -> len:int -> string"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "sub_right", "Bigarray.Genarray.html#VALsub_right", "<div class=\"info\">  <p>Extract a sub-array of the given big array by restricting the last (right-most) dimension.</p> </div>", "  Extract a sub-array of the given big array by restricting the last (right-most) dimension. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.fortran_layout) t ->       int -> int -> ('a, 'b, Bigarray.fortran_layout) t"],
["Bigarray.Array2", "Bigarray.Array2.html", "sub_right", "Bigarray.Array2.html#VALsub_right", "<div class=\"info\">  <p>Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the second dimension.</p> </div>", "  Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the second dimension. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.fortran_layout) t ->       int -> int -> ('a, 'b, Bigarray.fortran_layout) t"],
["Bigarray.Array3", "Bigarray.Array3.html", "sub_right", "Bigarray.Array3.html#VALsub_right", "<div class=\"info\">  <p>Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the second dimension.</p> </div>", "  Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the second dimension. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.fortran_layout) t ->       int -> int -> ('a, 'b, Bigarray.fortran_layout) t"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "sub_left", "Bigarray.Genarray.html#VALsub_left", "<div class=\"info\">  <p>Extract a sub-array of the given big array by restricting the first (left-most) dimension.</p> </div>", "  Extract a sub-array of the given big array by restricting the first (left-most) dimension. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.c_layout) t ->       int -> int -> ('a, 'b, Bigarray.c_layout) t"],
["Bigarray.Array2", "Bigarray.Array2.html", "sub_left", "Bigarray.Array2.html#VALsub_left", "<div class=\"info\">  <p>Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the first dimension.</p> </div>", "  Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the first dimension. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.c_layout) t ->       int -> int -> ('a, 'b, Bigarray.c_layout) t"],
["Bigarray.Array3", "Bigarray.Array3.html", "sub_left", "Bigarray.Array3.html#VALsub_left", "<div class=\"info\">  <p>Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the first dimension.</p> </div>", "  Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the first dimension. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.c_layout) t ->       int -> int -> ('a, 'b, Bigarray.c_layout) t"],
["Array", "Array.html", "sub", "Array.html#VALsub", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>, containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code> of array <code class=\"code\">a</code>.</p> </div>", "  Array.sub\194\160a\194\160start\194\160len returns a fresh array of length len, containing the elements number start to start\194\160+\194\160len\194\160-\194\1601 of array a. ", "<code class=\"type\">'a array -&gt; int -&gt; int -&gt; 'a array</code>", "'a array -> int -> int -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "sub", "ArrayLabels.html#VALsub", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>, containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code> of array <code class=\"code\">a</code>.</p> </div>", "  Array.sub\194\160a\194\160start\194\160len returns a fresh array of length len, containing the elements number start to start\194\160+\194\160len\194\160-\194\1601 of array a. ", "<code class=\"type\">'a array -&gt; pos:int -&gt; len:int -&gt; 'a array</code>", "'a array -> pos:int -> len:int -> 'a array"],
["Bigarray.Array1", "Bigarray.Array1.html", "sub", "Bigarray.Array1.html#VALsub", "<div class=\"info\">  <p>Extract a sub-array of the given one-dimensional big array.</p> </div>", "  Extract a sub-array of the given one-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a></code>", "('a, 'b, 'c) t ->       int -> int -> ('a, 'b, 'c) t"],
["Buffer", "Buffer.html", "sub", "Buffer.html#VALsub", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Buffer</span>.sub&nbsp;b&nbsp;off&nbsp;len</code> returns a copy of <code class=\"code\">len</code> bytes from the current contents of the buffer <code class=\"code\">b</code>, starting at offset <code class=\"code\">off</code>.</p> </div>", "  Buffer.sub\194\160b\194\160off\194\160len returns a copy of len bytes from the current contents of the buffer b, starting at offset off. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; string</code>", "t -> int -> int -> string"],
["Bytes", "Bytes.html", "sub", "Bytes.html#VALsub", "<div class=\"info\">  <p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>, containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>.</p> </div>", "  sub\194\160s\194\160start\194\160len returns a new byte sequence of length len, containing the subsequence of s that starts at position start and has length len. ", "<code class=\"type\">bytes -&gt; int -&gt; int -&gt; bytes</code>", "bytes -> int -> int -> bytes"],
["BytesLabels", "BytesLabels.html", "sub", "BytesLabels.html#VALsub", "<div class=\"info\">  <p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>, containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>.</p> </div>", "  sub\194\160s\194\160start\194\160len returns a new byte sequence of length len, containing the subsequence of s that starts at position start and has length len. ", "<code class=\"type\">bytes -&gt; pos:int -&gt; len:int -&gt; bytes</code>", "bytes -> pos:int -> len:int -> bytes"],
["Complex", "Complex.html", "sub", "Complex.html#VALsub", "<div class=\"info\">  <p>Subtraction</p> </div>", "  Subtraction ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Float", "Float.html", "sub", "Float.html#VALsub", "<div class=\"info\">  <p>Floating-point subtraction.</p> </div>", "  Floating-point subtraction. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Int32", "Int32.html", "sub", "Int32.html#VALsub", "<div class=\"info\">  <p>Subtraction.</p> </div>", "  Subtraction. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "sub", "Int64.html#VALsub", "<div class=\"info\">  <p>Subtraction.</p> </div>", "  Subtraction. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["Nativeint", "Nativeint.html", "sub", "Nativeint.html#VALsub", "<div class=\"info\">  <p>Subtraction.</p> </div>", "  Subtraction. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["StringLabels", "StringLabels.html", "sub", "StringLabels.html#VALsub", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>, containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>.</p> </div>", "  String.sub\194\160s\194\160start\194\160len returns a fresh string of length len, containing the substring of s that starts at position start and has length len. ", "<code class=\"type\">string -&gt; pos:int -&gt; len:int -&gt; string</code>", "string -> pos:int -> len:int -> string"],
["String", "String.html", "sub", "String.html#VALsub", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>, containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>.</p> </div>", "  String.sub\194\160s\194\160start\194\160len returns a fresh string of length len, containing the substring of s that starts at position start and has length len. ", "<code class=\"type\">string -&gt; int -&gt; int -&gt; string</code>", "string -> int -> int -> string"],
["Targetint", "Targetint.html", "sub", "Targetint.html#VALsub", "<div class=\"info\">  <p>Subtraction.</p> </div>", "  Subtraction. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "structure", "Ast_helper.Mod.html#VALstructure", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.structure -> Parsetree.module_expr"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "structure", "Ast_helper.Cl.html#VALstructure", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_structure -> Parsetree.class_expr"],
["Ast_invariants", "Ast_invariants.html", "structure", "Ast_invariants.html#VALstructure", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "Parsetree.structure -> unit"],
["Pprintast", "Pprintast.html", "structure", "Pprintast.html#VALstructure", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "Format.formatter -> Parsetree.structure -> unit"],
["Printast", "Printast.html", "structure", "Printast.html#VALstructure", "", "", "<code class=\"type\">int -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "int -> Format.formatter -> Parsetree.structure -> unit"],
["CamlinternalFormat", "CamlinternalFormat.html", "strput_acc", "CamlinternalFormat.html#VALstrput_acc", "", "", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">Buffer.t</a> -&gt; (unit, string) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> -&gt; unit</code>", "Buffer.t -> (unit, string) acc -> unit"],
["Obj", "Obj.html", "string_tag", "Obj.html#VALstring_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Str", "Str.html", "string_partial_match", "Str.html#VALstring_partial_match", "<div class=\"info\">  <p>Similar to <a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a>, but also returns true if the argument string is a prefix of a string that matches.</p> </div>", "  Similar to Str.string_match, but also returns true if the argument string is a prefix of a string that matches. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; int -&gt; bool</code>", "regexp -> string -> int -> bool"],
["Pprintast", "Pprintast.html", "string_of_structure", "Pprintast.html#VALstring_of_structure", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; string</code>", "Parsetree.structure -> string"],
["Pervasives", "Pervasives.html", "string_of_int", "Pervasives.html#VALstring_of_int", "<div class=\"info\">  <p>Return the string representation of an integer, in decimal.</p> </div>", "  Return the string representation of an integer, in decimal. ", "<code class=\"type\">int -&gt; string</code>", "int -> string"],
["Unix", "Unix.html", "string_of_inet_addr", "Unix.html#VALstring_of_inet_addr", "<div class=\"info\">  <p>Return the printable representation of the given Internet address.</p> </div>", "  Return the printable representation of the given Internet address. ", "<code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a> -&gt; string</code>", "inet_addr -> string"],
["UnixLabels", "UnixLabels.html", "string_of_inet_addr", "UnixLabels.html#VALstring_of_inet_addr", "<div class=\"info\">  <p>Return the printable representation of the given Internet address.</p> </div>", "  Return the printable representation of the given Internet address. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a> -&gt; string</code>", "inet_addr -> string"],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_formatting_lit", "CamlinternalFormat.html#VALstring_of_formatting_lit", "", "", "<code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEformatting_lit\">CamlinternalFormatBasics.formatting_lit</a> -&gt; string</code>", "CamlinternalFormatBasics.formatting_lit -> string"],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_formatting_gen", "CamlinternalFormat.html#VALstring_of_formatting_gen", "", "", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEformatting_gen\">CamlinternalFormatBasics.formatting_gen</a> -&gt; string</code>", "('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.formatting_gen -> string"],
["Pervasives", "Pervasives.html", "string_of_format", "Pervasives.html#VALstring_of_format", "<div class=\"info\">  <p>Converts a format string into a string.</p> </div>", "  Converts a format string into a string. ", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt; string</code>", "('a, 'b, 'c, 'd, 'e, 'f) format6 -> string"],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_fmtty", "CamlinternalFormat.html#VALstring_of_fmtty", "", "", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">CamlinternalFormatBasics.fmtty</a> -&gt; string</code>", "('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmtty -> string"],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_fmt", "CamlinternalFormat.html#VALstring_of_fmt", "", "", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a> -&gt; string</code>", "('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt -> string"],
["Pervasives", "Pervasives.html", "string_of_float", "Pervasives.html#VALstring_of_float", "<div class=\"info\">  <p>Return the string representation of a floating-point number.</p> </div>", "  Return the string representation of a floating-point number. ", "<code class=\"type\">float -&gt; string</code>", "float -> string"],
["Misc", "Misc.html", "string_of_file", "Misc.html#VALstring_of_file", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; string</code>", "in_channel -> string"],
["Pprintast", "Pprintast.html", "string_of_expression", "Pprintast.html#VALstring_of_expression", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; string</code>", "Parsetree.expression -> string"],
["Pervasives", "Pervasives.html", "string_of_bool", "Pervasives.html#VALstring_of_bool", "<div class=\"info\">  <p>Return the string representation of a boolean.</p> </div>", "  Return the string representation of a boolean. ", "<code class=\"type\">bool -&gt; string</code>", "bool -> string"],
["Str", "Str.html", "string_match", "Str.html#VALstring_match", "<div class=\"info\">  <p><code class=\"code\">string_match&nbsp;r&nbsp;s&nbsp;start</code> tests whether a substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> matches the regular expression <code class=\"code\">r</code>.</p> </div>", "  string_match\194\160r\194\160s\194\160start tests whether a substring of s that starts at position start matches the regular expression r. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; int -&gt; bool</code>", "regexp -> string -> int -> bool"],
["Str", "Str.html", "string_before", "Str.html#VALstring_before", "<div class=\"info\">  <p><code class=\"code\">string_before&nbsp;s&nbsp;n</code> returns the substring of all characters of <code class=\"code\">s</code> that precede position <code class=\"code\">n</code> (excluding the character at position <code class=\"code\">n</code>).</p> </div>", "  string_before\194\160s\194\160n returns the substring of all characters of s that precede position n (excluding the character at position n). ", "<code class=\"type\">string -&gt; int -&gt; string</code>", "string -> int -> string"],
["Str", "Str.html", "string_after", "Str.html#VALstring_after", "<div class=\"info\">  <p><code class=\"code\">string_after&nbsp;s&nbsp;n</code> returns the substring of all characters of <code class=\"code\">s</code> that follow position <code class=\"code\">n</code> (including the character at position <code class=\"code\">n</code>).</p> </div>", "  string_after\194\160s\194\160n returns the substring of all characters of s that follow position n (including the character at position n). ", "<code class=\"type\">string -&gt; int -&gt; string</code>", "string -> int -> string"],
["Ast_helper.Const", "Ast_helper.Const.html", "string", "Ast_helper.Const.html#VALstring", "", "", "<code class=\"type\">?quotation_delimiter:string -&gt; string -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?quotation_delimiter:string -> string -> Parsetree.constant"],
["Digest", "Digest.html", "string", "Digest.html#VALstring", "<div class=\"info\">  <p>Return the digest of the given string.</p> </div>", "  Return the digest of the given string. ", "<code class=\"type\">string -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "string -> t"],
["Clflags", "Clflags.html", "strict_sequence", "Clflags.html#VALstrict_sequence", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "strict_formats", "Clflags.html#VALstrict_formats", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Format", "Format.html", "str_formatter", "Format.html#VALstr_formatter", "<div class=\"info\">  <p>A formatter to output to the <a href=\"Format.html#VALstdbuf\"><code class=\"code\"><span class=\"constructor\">Format</span>.stdbuf</code></a> string buffer.</p> </div>", "  A formatter to output to the Format.stdbuf string buffer. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a></code>", "formatter"],
["Pervasives", "Pervasives.html", "stdout", "Pervasives.html#VALstdout", "<div class=\"info\">  <p>The standard output for the process.</p> </div>", "  The standard output for the process. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "out_channel"],
["Unix", "Unix.html", "stdout", "Unix.html#VALstdout", "<div class=\"info\">  <p>File descriptor for standard output.</p> </div>", "  File descriptor for standard output. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "file_descr"],
["UnixLabels", "UnixLabels.html", "stdout", "UnixLabels.html#VALstdout", "<div class=\"info\">  <p>File descriptor for standard output.</p> </div>", "  File descriptor for standard output. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "file_descr"],
["Pervasives", "Pervasives.html", "stdin", "Pervasives.html#VALstdin", "<div class=\"info\">  <p>The standard input for the process.</p> </div>", "  The standard input for the process. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "in_channel"],
["Scanf.Scanning", "Scanf.Scanning.html", "stdin", "Scanf.Scanning.html#VALstdin", "<div class=\"info\">  <p>The standard input notion for the <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> module.</p> </div>", "  The standard input notion for the Scanf module. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "in_channel"],
["Unix", "Unix.html", "stdin", "Unix.html#VALstdin", "<div class=\"info\">  <p>File descriptor for standard input.</p> </div>", "  File descriptor for standard input. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "file_descr"],
["UnixLabels", "UnixLabels.html", "stdin", "UnixLabels.html#VALstdin", "<div class=\"info\">  <p>File descriptor for standard input.</p> </div>", "  File descriptor for standard input. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "file_descr"],
["Scanf.Scanning", "Scanf.Scanning.html", "stdib", "Scanf.Scanning.html#VALstdib", "<div class=\"info\">  <p>A deprecated alias for <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a>, the scanning buffer reading from <a href=\"Pervasives.html#VALstdin\"><code class=\"code\">stdin</code></a>.</p> </div>", "  A deprecated alias for Scanf.Scanning.stdin, the scanning buffer reading from stdin. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "in_channel"],
["Pervasives", "Pervasives.html", "stderr", "Pervasives.html#VALstderr", "<div class=\"info\">  <p>The standard error output for the process.</p> </div>", "  The standard error output for the process. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "out_channel"],
["Unix", "Unix.html", "stderr", "Unix.html#VALstderr", "<div class=\"info\">  <p>File descriptor for standard error.</p> </div>", "  File descriptor for standard error. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "file_descr"],
["UnixLabels", "UnixLabels.html", "stderr", "UnixLabels.html#VALstderr", "<div class=\"info\">  <p>File descriptor for standard error.</p> </div>", "  File descriptor for standard error. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "file_descr"],
["Format", "Format.html", "stdbuf", "Format.html#VALstdbuf", "<div class=\"info\">  <p>The string buffer in which <code class=\"code\">str_formatter</code> writes.</p> </div>", "  The string buffer in which str_formatter writes. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">Buffer.t</a></code>", "Buffer.t"],
["Clflags", "Clflags.html", "std_include_flag", "Clflags.html#VALstd_include_flag", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Clflags", "Clflags.html", "std_include_dir", "Clflags.html#VALstd_include_dir", "", "", "<code class=\"type\">unit -&gt; string list</code>", "unit -> string list"],
["Format", "Format.html", "std_formatter", "Format.html#VALstd_formatter", "<div class=\"info\">  <p>The standard formatter to write to standard output.</p> </div>", "  The standard formatter to write to standard output. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a></code>", "formatter"],
["Ephemeron.S", "Ephemeron.S.html", "stats_alive", "Ephemeron.S.html#VALstats_alive", "<div class=\"info\">  <p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p> </div>", "  same as Hashtbl.SeededS.stats but only count the alive bindings ", "<code class=\"type\">'a t -&gt; <a href=\"Hashtbl.html#TYPEstatistics\">Hashtbl.statistics</a></code>", "'a t -> Hashtbl.statistics"],
["Ephemeron.SeededS", "Ephemeron.SeededS.html", "stats_alive", "Ephemeron.SeededS.html#VALstats_alive", "<div class=\"info\">  <p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p> </div>", "  same as Hashtbl.SeededS.stats but only count the alive bindings ", "<code class=\"type\">'a t -&gt; <a href=\"Hashtbl.html#TYPEstatistics\">Hashtbl.statistics</a></code>", "'a t -> Hashtbl.statistics"],
["CamlinternalOO", "CamlinternalOO.html", "stats", "CamlinternalOO.html#VALstats", "", "", "<code class=\"type\">unit -&gt; <a href=\"CamlinternalOO.html#TYPEstats\">stats</a></code>", "unit -> stats"],
["Hashtbl", "Hashtbl.html", "stats", "Hashtbl.html#VALstats", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.stats&nbsp;tbl</code> returns statistics about the table <code class=\"code\">tbl</code>: number of buckets, size of the biggest bucket, distribution of buckets by size.</p> </div>", "  Hashtbl.stats\194\160tbl returns statistics about the table tbl: number of buckets, size of the biggest bucket, distribution of buckets by size. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.html#TYPEstatistics\">statistics</a></code>", "('a, 'b) t -> statistics"],
["Hashtbl.S", "Hashtbl.S.html", "stats", "Hashtbl.S.html#VALstats", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.html#TYPEstatistics\">Hashtbl.statistics</a></code>", "'a t -> Hashtbl.statistics"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "stats", "Hashtbl.SeededS.html#VALstats", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.html#TYPEstatistics\">Hashtbl.statistics</a></code>", "'a t -> Hashtbl.statistics"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "stats", "MoreLabels.Hashtbl.html#VALstats", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.html#TYPEstatistics\">statistics</a></code>", "('a, 'b) t -> statistics"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "stats", "MoreLabels.Hashtbl.S.html#VALstats", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.html#TYPEstatistics\">MoreLabels.Hashtbl.statistics</a></code>", "'a t -> MoreLabels.Hashtbl.statistics"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "stats", "MoreLabels.Hashtbl.SeededS.html#VALstats", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.html#TYPEstatistics\">MoreLabels.Hashtbl.statistics</a></code>", "'a t -> MoreLabels.Hashtbl.statistics"],
["Weak.S", "Weak.S.html", "stats", "Weak.S.html#VALstats", "<div class=\"info\">  <p>Return statistics on the table.</p> </div>", "  Return statistics on the table. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; int * int * int * int * int * int</code>", "t -> int * int * int * int * int * int"],
["Gc", "Gc.html", "stat", "Gc.html#VALstat", "<div class=\"info\">  <p>Return the current values of the memory management counters in a <code class=\"code\">stat</code> record.</p> </div>", "  Return the current values of the memory management counters in a stat record. ", "<code class=\"type\">unit -&gt; <a href=\"Gc.html#TYPEstat\">stat</a></code>", "unit -> stat"],
["Unix", "Unix.html", "stat", "Unix.html#VALstat", "<div class=\"info\">  <p>Return the information for the named file.</p> </div>", "  Return the information for the named file. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEstats\">stats</a></code>", "string -> stats"],
["Unix.LargeFile", "Unix.LargeFile.html", "stat", "Unix.LargeFile.html#VALstat", "", "", "<code class=\"type\">string -&gt; <a href=\"Unix.LargeFile.html#TYPEstats\">stats</a></code>", "string -> stats"],
["UnixLabels", "UnixLabels.html", "stat", "UnixLabels.html#VALstat", "<div class=\"info\">  <p>Return the information for the named file.</p> </div>", "  Return the information for the named file. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEstats\">stats</a></code>", "string -> stats"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "stat", "UnixLabels.LargeFile.html#VALstat", "", "", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.LargeFile.html#TYPEstats\">stats</a></code>", "string -> stats"],
["Terminfo", "Terminfo.html", "standout", "Terminfo.html#VALstandout", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; bool -&gt; unit</code>", "out_channel -> bool -> unit"],
["Config", "Config.html", "standard_runtime", "Config.html#VALstandard_runtime", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "standard_library", "Config.html#VALstandard_library", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "stack_threshold", "Config.html#VALstack_threshold", "", "", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "stack_safety_margin", "Config.html#VALstack_safety_margin", "", "", "<code class=\"type\">int</code>", "int"],
["Array", "Array.html", "stable_sort", "Array.html#VALstable_sort", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.</p> </div>", "  Same as Array.sort, but the sorting algorithm is stable (i.e. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a array -&gt; unit</code>", "('a -> 'a -> int) -> 'a array -> unit"],
["ArrayLabels", "ArrayLabels.html", "stable_sort", "ArrayLabels.html#VALstable_sort", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.</p> </div>", "  Same as Array.sort, but the sorting algorithm is stable (i.e. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a array -&gt; unit</code>", "cmp:('a -> 'a -> int) -> 'a array -> unit"],
["List", "List.html", "stable_sort", "List.html#VALstable_sort", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to be stable (i.e.</p> </div>", "  Same as List.sort, but the sorting algorithm is guaranteed to be stable (i.e. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> int) -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "stable_sort", "ListLabels.html#VALstable_sort", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to be stable (i.e.</p> </div>", "  Same as List.sort, but the sorting algorithm is guaranteed to be stable (i.e. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "cmp:('a -> 'a -> int) -> 'a list -> 'a list"],
["Scanf", "Scanf.html", "sscanf_format", "Scanf.html#VALsscanf_format", "<div class=\"info\">  <p>Same as <a href=\"Scanf.html#VALbscanf_format\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf_format</code></a>, but reads from the given string.</p> </div>", "  Same as Scanf.bscanf_format, but reads from the given string. ", "<code class=\"type\">string -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt;<br>       (('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt; 'g) -&gt; 'g</code>", "string ->       ('a, 'b, 'c, 'd, 'e, 'f) format6 ->       (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g"],
["Scanf", "Scanf.html", "sscanf", "Scanf.html#VALsscanf", "<div class=\"info\">  <p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the given string.</p> </div>", "  Same as Scanf.bscanf, but reads from the given string. ", "<code class=\"type\">string -&gt; ('a, 'b, 'c, 'd) <a href=\"Scanf.html#TYPEscanner\">scanner</a></code>", "string -> ('a, 'b, 'c, 'd) scanner"],
["Complex", "Complex.html", "sqrt", "Complex.html#VALsqrt", "<div class=\"info\">  <p>Square root.</p> </div>", "  Square root. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t"],
["Float", "Float.html", "sqrt", "Float.html#VALsqrt", "<div class=\"info\">  <p>Square root.</p> </div>", "  Square root. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "sqrt", "Pervasives.html#VALsqrt", "<div class=\"info\">  <p>Square root.</p> </div>", "  Square root. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Format", "Format.html", "sprintf", "Format.html#VALsprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments.</p> </div>", "  Same as printf above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. ", "<code class=\"type\">('a, unit, string) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "('a, unit, string) format -> 'a"],
["Printf", "Printf.html", "sprintf", "Printf.html#VALsprintf", "<div class=\"info\">  <p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel, return a string containing the result of formatting the arguments.</p> </div>", "  Same as Printf.fprintf, but instead of printing on an output channel, return a string containing the result of formatting the arguments. ", "<code class=\"type\">('a, unit, string) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "('a, unit, string) format -> 'a"],
["StringLabels", "StringLabels.html", "split_on_char", "StringLabels.html#VALsplit_on_char", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty) substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p> </div>", "  String.split_on_char\194\160sep\194\160s returns the list of all (possibly empty) substrings of s that are delimited by the sep character. ", "<code class=\"type\">sep:char -&gt; string -&gt; string list</code>", "sep:char -> string -> string list"],
["String", "String.html", "split_on_char", "String.html#VALsplit_on_char", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty) substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p> </div>", "  String.split_on_char\194\160sep\194\160s returns the list of all (possibly empty) substrings of s that are delimited by the sep character. ", "<code class=\"type\">char -&gt; string -&gt; string list</code>", "char -> string -> string list"],
["Misc", "Misc.html", "split_last", "Misc.html#VALsplit_last", "", "", "<code class=\"type\">'a list -&gt; 'a list * 'a</code>", "'a list -> 'a list * 'a"],
["Str", "Str.html", "split_delim", "Str.html#VALsplit_delim", "<div class=\"info\">  <p>Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a> but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result.</p> </div>", "  Same as Str.split but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; string list</code>", "regexp -> string -> string list"],
["Simplif", "Simplif.html", "split_default_wrapper", "Simplif.html#VALsplit_default_wrapper", "", "", "<code class=\"type\">id:Ident.t -&gt;<br>       kind:Lambda.function_kind -&gt;<br>       params:Ident.t list -&gt;<br>       body:Lambda.lambda -&gt;<br>       attr:Lambda.function_attribute -&gt;<br>       loc:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt; (Ident.t * Lambda.lambda) list</code>", "id:Ident.t ->       kind:Lambda.function_kind ->       params:Ident.t list ->       body:Lambda.lambda ->       attr:Lambda.function_attribute ->       loc:Location.t -> (Ident.t * Lambda.lambda) list"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "split_at", "Misc.Stdlib.List.html#VALsplit_at", "<div class=\"info\">  <p><code class=\"code\">split_at&nbsp;n&nbsp;l</code> returns the pair <code class=\"code\">before,&nbsp;after</code> where <code class=\"code\">before</code> is the <code class=\"code\">n</code> first elements of <code class=\"code\">l</code> and <code class=\"code\">after</code> the remaining ones.</p> </div>", "  split_at\194\160n\194\160l returns the pair before,\194\160after where before is the n first elements of l and after the remaining ones. ", "<code class=\"type\">int -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> * 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a></code>", "int -> 'a t -> 'a t * 'a t"],
["Set.S", "Set.S.html", "split", "Set.S.html#VALsplit", "<div class=\"info\">  <p><code class=\"code\">split&nbsp;x&nbsp;s</code> returns a triple <code class=\"code\">(l,&nbsp;present,&nbsp;r)</code>, where <code class=\"code\">l</code> is the set of elements of <code class=\"code\">s</code> that are strictly less than <code class=\"code\">x</code>; <code class=\"code\">r</code> is the set of elements of <code class=\"code\">s</code> that are strictly greater than <code class=\"code\">x</code>; <code class=\"code\">present</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> if <code class=\"code\">s</code> contains no element equal to <code class=\"code\">x</code>, or <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">s</code> contains an element equal to <code class=\"code\">x</code>.</p> </div>", "  split\194\160x\194\160s returns a triple (l,\194\160present,\194\160r), where l is the set of elements of s that are strictly less than x; r is the set of elements of s that are strictly greater than x; present is false if s contains no element equal to x, or true if s contains an element equal to x. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> * bool * <a href=\"Set.S.html#TYPEt\">t</a></code>", "elt -> t -> t * bool * t"],
["Map.S", "Map.S.html", "split", "Map.S.html#VALsplit", "<div class=\"info\">  <p><code class=\"code\">split&nbsp;x&nbsp;m</code> returns a triple <code class=\"code\">(l,&nbsp;data,&nbsp;r)</code>, where <code class=\"code\">l</code> is the map with all the bindings of <code class=\"code\">m</code> whose key is strictly less than <code class=\"code\">x</code>; <code class=\"code\">r</code> is the map with all the bindings of <code class=\"code\">m</code> whose key is strictly greater than <code class=\"code\">x</code>; <code class=\"code\">data</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">m</code> contains no binding for <code class=\"code\">x</code>, or <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if <code class=\"code\">m</code> binds <code class=\"code\">v</code> to <code class=\"code\">x</code>.</p> </div>", "  split\194\160x\194\160m returns a triple (l,\194\160data,\194\160r), where l is the map with all the bindings of m whose key is strictly less than x; r is the map with all the bindings of m whose key is strictly greater than x; data is None if m contains no binding for x, or Some\194\160v if m binds v to x. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> * 'a option * 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "key -> 'a t -> 'a t * 'a option * 'a t"],
["List", "List.html", "split", "List.html#VALsplit", "<div class=\"info\">  <p>Transform a list of pairs into a pair of lists: <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.</p> </div>", "  Transform a list of pairs into a pair of lists: split\194\160[(a1,b1);\194\160...;\194\160(an,bn)] is ([a1;\194\160...;\194\160an],\194\160[b1;\194\160...;\194\160bn]). ", "<code class=\"type\">('a * 'b) list -&gt; 'a list * 'b list</code>", "('a * 'b) list -> 'a list * 'b list"],
["ListLabels", "ListLabels.html", "split", "ListLabels.html#VALsplit", "<div class=\"info\">  <p>Transform a list of pairs into a pair of lists: <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.</p> </div>", "  Transform a list of pairs into a pair of lists: split\194\160[(a1,b1);\194\160...;\194\160(an,bn)] is ([a1;\194\160...;\194\160an],\194\160[b1;\194\160...;\194\160bn]). ", "<code class=\"type\">('a * 'b) list -&gt; 'a list * 'b list</code>", "('a * 'b) list -> 'a list * 'b list"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "split", "MoreLabels.Map.S.html#VALsplit", "", "", "<code class=\"type\"><a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> * 'a option * 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "key ->       'a t ->       'a t * 'a option * 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "split", "MoreLabels.Set.S.html#VALsplit", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt;<br>       <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> * bool * <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "elt ->       t -> t * bool * t"],
["Str", "Str.html", "split", "Str.html#VALsplit", "<div class=\"info\">  <p><code class=\"code\">split&nbsp;r&nbsp;s</code> splits <code class=\"code\">s</code> into substrings, taking as delimiters the substrings that match <code class=\"code\">r</code>, and returns the list of substrings.</p> </div>", "  split\194\160r\194\160s splits s into substrings, taking as delimiters the substrings that match r, and returns the list of substrings. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; string list</code>", "regexp -> string -> string list"],
["Misc", "Misc.html", "spellcheck", "Misc.html#VALspellcheck", "<div class=\"info\">  <p><code class=\"code\">spellcheck&nbsp;env&nbsp;name</code> takes a list of names <code class=\"code\">env</code> that exist in the current environment and an erroneous <code class=\"code\">name</code>, and returns a list of suggestions taken from <code class=\"code\">env</code>, that are close enough to <code class=\"code\">name</code> that it may be a typo for one of them.</p> </div>", "  spellcheck\194\160env\194\160name takes a list of names env that exist in the current environment and an erroneous name, and returns a list of suggestions taken from env, that are close enough to name that it may be a typo for one of them. ", "<code class=\"type\">string list -&gt; string -&gt; string list</code>", "string list -> string -> string list"],
["Config", "Config.html", "spacetime", "Config.html#VALspacetime", "", "", "<code class=\"type\">bool</code>", "bool"],
["Consistbl", "Consistbl.html", "source", "Consistbl.html#VALsource", "", "", "<code class=\"type\"><a href=\"Consistbl.html#TYPEt\">t</a> -&gt; string -&gt; string</code>", "t -> string -> string"],
["Graphics", "Graphics.html", "sound", "Graphics.html#VALsound", "<div class=\"info\">  <p><code class=\"code\">sound&nbsp;freq&nbsp;dur</code> plays a sound at frequency <code class=\"code\">freq</code> (in hertz) for a duration <code class=\"code\">dur</code> (in milliseconds).</p> </div>", "  sound\194\160freq\194\160dur plays a sound at frequency freq (in hertz) for a duration dur (in milliseconds). ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["List", "List.html", "sort_uniq", "List.html#VALsort_uniq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p> </div>", "  Same as List.sort, but also remove duplicates. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> int) -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "sort_uniq", "ListLabels.html#VALsort_uniq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p> </div>", "  Same as List.sort, but also remove duplicates. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "cmp:('a -> 'a -> int) -> 'a list -> 'a list"],
["Array", "Array.html", "sort", "Array.html#VALsort", "<div class=\"info\">  <p>Sort an array in increasing order according to a comparison function.</p> </div>", "  Sort an array in increasing order according to a comparison function. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a array -&gt; unit</code>", "('a -> 'a -> int) -> 'a array -> unit"],
["ArrayLabels", "ArrayLabels.html", "sort", "ArrayLabels.html#VALsort", "<div class=\"info\">  <p>Sort an array in increasing order according to a comparison function.</p> </div>", "  Sort an array in increasing order according to a comparison function. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a array -&gt; unit</code>", "cmp:('a -> 'a -> int) -> 'a array -> unit"],
["List", "List.html", "sort", "List.html#VALsort", "<div class=\"info\">  <p>Sort a list in increasing order according to a comparison function.</p> </div>", "  Sort a list in increasing order according to a comparison function. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> int) -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "sort", "ListLabels.html#VALsort", "<div class=\"info\">  <p>Sort a list in increasing order according to a comparison function.</p> </div>", "  Sort a list in increasing order according to a comparison function. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "cmp:('a -> 'a -> int) -> 'a list -> 'a list"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "some_if_all_elements_are_some", "Misc.Stdlib.List.html#VALsome_if_all_elements_are_some", "<div class=\"info\">  <p>If all elements of the given list are <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;_</code> then <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;xs</code> is returned with the <code class=\"code\">xs</code> being the contents of those <code class=\"code\"><span class=\"constructor\">Some</span></code>s, with order preserved.</p> </div>", "  If all elements of the given list are Some\194\160_ then Some\194\160xs is returned with the xs being the contents of those Somes, with order preserved. ", "<code class=\"type\">'a option <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> option</code>", "'a option t -> 'a t option"],
["ThreadUnix", "ThreadUnix.html", "socketpair", "ThreadUnix.html#VALsocketpair", "", "", "<code class=\"type\">?cloexec:bool -&gt;<br>       <a href=\"Unix.html#TYPEsocket_domain\">Unix.socket_domain</a> -&gt;<br>       <a href=\"Unix.html#TYPEsocket_type\">Unix.socket_type</a> -&gt; int -&gt; <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> * <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a></code>", "?cloexec:bool ->       Unix.socket_domain ->       Unix.socket_type -> int -> Unix.file_descr * Unix.file_descr"],
["Unix", "Unix.html", "socketpair", "Unix.html#VALsocketpair", "<div class=\"info\">  <p>Create a pair of unnamed sockets, connected together.</p> </div>", "  Create a pair of unnamed sockets, connected together. ", "<code class=\"type\">?cloexec:bool -&gt;<br>       <a href=\"Unix.html#TYPEsocket_domain\">socket_domain</a> -&gt;<br>       <a href=\"Unix.html#TYPEsocket_type\">socket_type</a> -&gt; int -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> * <a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool ->       socket_domain ->       socket_type -> int -> file_descr * file_descr"],
["UnixLabels", "UnixLabels.html", "socketpair", "UnixLabels.html#VALsocketpair", "<div class=\"info\">  <p>Create a pair of unnamed sockets, connected together.</p> </div>", "  Create a pair of unnamed sockets, connected together. ", "<code class=\"type\">?cloexec:bool -&gt;<br>       domain:<a href=\"UnixLabels.html#TYPEsocket_domain\">socket_domain</a> -&gt;<br>       kind:<a href=\"UnixLabels.html#TYPEsocket_type\">socket_type</a> -&gt;<br>       protocol:int -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> * <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool ->       domain:socket_domain ->       kind:socket_type ->       protocol:int -> file_descr * file_descr"],
["ThreadUnix", "ThreadUnix.html", "socket", "ThreadUnix.html#VALsocket", "", "", "<code class=\"type\">?cloexec:bool -&gt;<br>       <a href=\"Unix.html#TYPEsocket_domain\">Unix.socket_domain</a> -&gt; <a href=\"Unix.html#TYPEsocket_type\">Unix.socket_type</a> -&gt; int -&gt; <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a></code>", "?cloexec:bool ->       Unix.socket_domain -> Unix.socket_type -> int -> Unix.file_descr"],
["Unix", "Unix.html", "socket", "Unix.html#VALsocket", "<div class=\"info\">  <p>Create a new socket in the given domain, and with the given kind.</p> </div>", "  Create a new socket in the given domain, and with the given kind. ", "<code class=\"type\">?cloexec:bool -&gt;<br>       <a href=\"Unix.html#TYPEsocket_domain\">socket_domain</a> -&gt; <a href=\"Unix.html#TYPEsocket_type\">socket_type</a> -&gt; int -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool ->       socket_domain -> socket_type -> int -> file_descr"],
["UnixLabels", "UnixLabels.html", "socket", "UnixLabels.html#VALsocket", "<div class=\"info\">  <p>Create a new socket in the given domain, and with the given kind.</p> </div>", "  Create a new socket in the given domain, and with the given kind. ", "<code class=\"type\">?cloexec:bool -&gt;<br>       domain:<a href=\"UnixLabels.html#TYPEsocket_domain\">socket_domain</a> -&gt;<br>       kind:<a href=\"UnixLabels.html#TYPEsocket_type\">socket_type</a> -&gt; protocol:int -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool ->       domain:socket_domain ->       kind:socket_type -> protocol:int -> file_descr"],
["Misc", "Misc.html", "snd4", "Misc.html#VALsnd4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'b</code>", "'a * 'b * 'c * 'd -> 'b"],
["Misc", "Misc.html", "snd3", "Misc.html#VALsnd3", "", "", "<code class=\"type\">'a * 'b * 'c -&gt; 'b</code>", "'a * 'b * 'c -> 'b"],
["Pervasives", "Pervasives.html", "snd", "Pervasives.html#VALsnd", "<div class=\"info\">  <p>Return the second component of a pair.</p> </div>", "  Return the second component of a pair. ", "<code class=\"type\">'a * 'b -&gt; 'b</code>", "'a * 'b -> 'b"],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_right_2", "Bigarray.Array3.html#VALslice_right_2", "<div class=\"info\">  <p>Extract a two-dimensional slice of the given three-dimensional big array by fixing the last coordinate.</p> </div>", "  Extract a two-dimensional slice of the given three-dimensional big array by fixing the last coordinate. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt;<br>       int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">Bigarray.Array2.t</a></code>", "('a, 'b, Bigarray.fortran_layout) t ->       int -> ('a, 'b, Bigarray.fortran_layout) Bigarray.Array2.t"],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_right_1", "Bigarray.Array3.html#VALslice_right_1", "<div class=\"info\">  <p>Extract a one-dimensional slice of the given three-dimensional big array by fixing the last two coordinates.</p> </div>", "  Extract a one-dimensional slice of the given three-dimensional big array by fixing the last two coordinates. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array1.html#TYPEt\">Bigarray.Array1.t</a></code>", "('a, 'b, Bigarray.fortran_layout) t ->       int -> int -> ('a, 'b, Bigarray.fortran_layout) Bigarray.Array1.t"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "slice_right", "Bigarray.Genarray.html#VALslice_right", "<div class=\"info\">  <p>Extract a sub-array of lower dimension from the given big array by fixing one or several of the last (right-most) coordinates.</p> </div>", "  Extract a sub-array of lower dimension from the given big array by fixing one or several of the last (right-most) coordinates. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt;<br>       int array -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.fortran_layout) t ->       int array -> ('a, 'b, Bigarray.fortran_layout) t"],
["Bigarray.Array2", "Bigarray.Array2.html", "slice_right", "Bigarray.Array2.html#VALslice_right", "<div class=\"info\">  <p>Extract a column (one-dimensional slice) of the given two-dimensional big array.</p> </div>", "  Extract a column (one-dimensional slice) of the given two-dimensional big array. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt;<br>       int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEfortran_layout\">Bigarray.fortran_layout</a>) <a href=\"Bigarray.Array1.html#TYPEt\">Bigarray.Array1.t</a></code>", "('a, 'b, Bigarray.fortran_layout) t ->       int -> ('a, 'b, Bigarray.fortran_layout) Bigarray.Array1.t"],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_left_2", "Bigarray.Array3.html#VALslice_left_2", "<div class=\"info\">  <p>Extract a two-dimensional slice of the given three-dimensional big array by fixing the first coordinate.</p> </div>", "  Extract a two-dimensional slice of the given three-dimensional big array by fixing the first coordinate. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt;<br>       int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">Bigarray.Array2.t</a></code>", "('a, 'b, Bigarray.c_layout) t ->       int -> ('a, 'b, Bigarray.c_layout) Bigarray.Array2.t"],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_left_1", "Bigarray.Array3.html#VALslice_left_1", "<div class=\"info\">  <p>Extract a one-dimensional slice of the given three-dimensional big array by fixing the first two coordinates.</p> </div>", "  Extract a one-dimensional slice of the given three-dimensional big array by fixing the first two coordinates. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array1.html#TYPEt\">Bigarray.Array1.t</a></code>", "('a, 'b, Bigarray.c_layout) t ->       int -> int -> ('a, 'b, Bigarray.c_layout) Bigarray.Array1.t"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "slice_left", "Bigarray.Genarray.html#VALslice_left", "<div class=\"info\">  <p>Extract a sub-array of lower dimension from the given big array by fixing one or several of the first (left-most) coordinates.</p> </div>", "  Extract a sub-array of lower dimension from the given big array by fixing one or several of the first (left-most) coordinates. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt;<br>       int array -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a></code>", "('a, 'b, Bigarray.c_layout) t ->       int array -> ('a, 'b, Bigarray.c_layout) t"],
["Bigarray.Array2", "Bigarray.Array2.html", "slice_left", "Bigarray.Array2.html#VALslice_left", "<div class=\"info\">  <p>Extract a row (one-dimensional slice) of the given two-dimensional big array.</p> </div>", "  Extract a row (one-dimensional slice) of the given two-dimensional big array. ", "<code class=\"type\">('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt;<br>       int -&gt; ('a, 'b, <a href=\"Bigarray.html#TYPEc_layout\">Bigarray.c_layout</a>) <a href=\"Bigarray.Array1.html#TYPEt\">Bigarray.Array1.t</a></code>", "('a, 'b, Bigarray.c_layout) t ->       int -> ('a, 'b, Bigarray.c_layout) Bigarray.Array1.t"],
["Bigarray.Array1", "Bigarray.Array1.html", "slice", "Bigarray.Array1.html#VALslice", "<div class=\"info\">  <p>Extract a scalar (zero-dimensional slice) of the given one-dimensional big array.</p> </div>", "  Extract a scalar (zero-dimensional slice) of the given one-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">Bigarray.Array0.t</a></code>", "('a, 'b, 'c) t -> int -> ('a, 'b, 'c) Bigarray.Array0.t"],
["Unix", "Unix.html", "sleepf", "Unix.html#VALsleepf", "<div class=\"info\">  <p>Stop execution for the given number of seconds.</p> </div>", "  Stop execution for the given number of seconds. ", "<code class=\"type\">float -&gt; unit</code>", "float -> unit"],
["ThreadUnix", "ThreadUnix.html", "sleep", "ThreadUnix.html#VALsleep", "", "", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Unix", "Unix.html", "sleep", "Unix.html#VALsleep", "<div class=\"info\">  <p>Stop execution for the given number of seconds.</p> </div>", "  Stop execution for the given number of seconds. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["UnixLabels", "UnixLabels.html", "sleep", "UnixLabels.html#VALsleep", "<div class=\"info\">  <p>Stop execution for the given number of seconds.</p> </div>", "  Stop execution for the given number of seconds. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Lexer", "Lexer.html", "skip_hash_bang", "Lexer.html#VALskip_hash_bang", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; unit</code>", "Lexing.lexbuf -> unit"],
["Graphics", "Graphics.html", "size_y", "Graphics.html#VALsize_y", "<div class=\"info\">  <p>Return the size of the graphics window.</p> </div>", "  Return the size of the graphics window. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Graphics", "Graphics.html", "size_x", "Graphics.html#VALsize_x", "<div class=\"info\">  <p>See <a href=\"Graphics.html#VALsize_y\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.size_y</code></a>.</p> </div>", "  See Graphics.size_y. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "size_in_bytes", "Bigarray.Genarray.html#VALsize_in_bytes", "<div class=\"info\">  <p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code> multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p> </div>", "  size_in_bytes\194\160a is the number of elements in a multiplied by a's Bigarray.kind_size_in_bytes. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array0", "Bigarray.Array0.html", "size_in_bytes", "Bigarray.Array0.html#VALsize_in_bytes", "<div class=\"info\">  <p><code class=\"code\">size_in_bytes&nbsp;a</code> is <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p> </div>", "  size_in_bytes\194\160a is a's Bigarray.kind_size_in_bytes. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array1", "Bigarray.Array1.html", "size_in_bytes", "Bigarray.Array1.html#VALsize_in_bytes", "<div class=\"info\">  <p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code> multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p> </div>", "  size_in_bytes\194\160a is the number of elements in a multiplied by a's Bigarray.kind_size_in_bytes. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array2", "Bigarray.Array2.html", "size_in_bytes", "Bigarray.Array2.html#VALsize_in_bytes", "<div class=\"info\">  <p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code> multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p> </div>", "  size_in_bytes\194\160a is the number of elements in a multiplied by a's Bigarray.kind_size_in_bytes. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array3", "Bigarray.Array3.html", "size_in_bytes", "Bigarray.Array3.html#VALsize_in_bytes", "<div class=\"info\">  <p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code> multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p> </div>", "  size_in_bytes\194\160a is the number of elements in a multiplied by a's Bigarray.kind_size_in_bytes. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Nativeint", "Nativeint.html", "size", "Nativeint.html#VALsize", "<div class=\"info\">  <p>The size in bits of a native integer.</p> </div>", "  The size in bits of a native integer. ", "<code class=\"type\">int</code>", "int"],
["Obj", "Obj.html", "size", "Obj.html#VALsize", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Targetint", "Targetint.html", "size", "Targetint.html#VALsize", "<div class=\"info\">  <p>The size in bits of a target native integer.</p> </div>", "  The size in bits of a target native integer. ", "<code class=\"type\">int</code>", "int"],
["Float", "Float.html", "sinh", "Float.html#VALsinh", "<div class=\"info\">  <p>Hyperbolic sine.</p> </div>", "  Hyperbolic sine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "sinh", "Pervasives.html#VALsinh", "<div class=\"info\">  <p>Hyperbolic sine.</p> </div>", "  Hyperbolic sine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Set.S", "Set.S.html", "singleton", "Set.S.html#VALsingleton", "<div class=\"info\">  <p><code class=\"code\">singleton&nbsp;x</code> returns the one-element set containing only <code class=\"code\">x</code>.</p> </div>", "  singleton\194\160x returns the one-element set containing only x. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "elt -> t"],
["Map.S", "Map.S.html", "singleton", "Map.S.html#VALsingleton", "<div class=\"info\">  <p><code class=\"code\">singleton&nbsp;x&nbsp;y</code> returns the one-element map that contains a binding <code class=\"code\">y</code> for <code class=\"code\">x</code>.</p> </div>", "  singleton\194\160x\194\160y returns the one-element map that contains a binding y for x. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "key -> 'a -> 'a t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "singleton", "MoreLabels.Map.S.html#VALsingleton", "", "", "<code class=\"type\"><a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "key -> 'a -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "singleton", "MoreLabels.Set.S.html#VALsingleton", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "elt -> t"],
["ThreadUnix", "ThreadUnix.html", "single_write_substring", "ThreadUnix.html#VALsingle_write_substring", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; string -&gt; int -&gt; int -&gt; int</code>", "Unix.file_descr -> string -> int -> int -> int"],
["Unix", "Unix.html", "single_write_substring", "Unix.html#VALsingle_write_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">single_write</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as single_write, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; string -&gt; int -&gt; int -&gt; int</code>", "file_descr -> string -> int -> int -> int"],
["UnixLabels", "UnixLabels.html", "single_write_substring", "UnixLabels.html#VALsingle_write_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">single_write</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as single_write, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; buf:string -&gt; pos:int -&gt; len:int -&gt; int</code>", "file_descr -> buf:string -> pos:int -> len:int -> int"],
["ThreadUnix", "ThreadUnix.html", "single_write", "ThreadUnix.html#VALsingle_write", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; int</code>", "Unix.file_descr -> bytes -> int -> int -> int"],
["Unix", "Unix.html", "single_write", "Unix.html#VALsingle_write", "<div class=\"info\">  <p>Same as <code class=\"code\">write</code>, but attempts to write only once.</p> </div>", "  Same as write, but attempts to write only once. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; int</code>", "file_descr -> bytes -> int -> int -> int"],
["UnixLabels", "UnixLabels.html", "single_write", "UnixLabels.html#VALsingle_write", "<div class=\"info\">  <p>Same as <code class=\"code\">write</code>, but attempts to write only once.</p> </div>", "  Same as write, but attempts to write only once. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; buf:bytes -&gt; pos:int -&gt; len:int -&gt; int</code>", "file_descr -> buf:bytes -> pos:int -> len:int -> int"],
["Float", "Float.html", "sin", "Float.html#VALsin", "<div class=\"info\">  <p>Sine.</p> </div>", "  Sine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "sin", "Pervasives.html#VALsin", "<div class=\"info\">  <p>Sine.</p> </div>", "  Sine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Typemod", "Typemod.html", "simplify_signature", "Typemod.html#VALsimplify_signature", "", "", "<code class=\"type\">Types.signature -&gt; Types.signature</code>", "Types.signature -> Types.signature"],
["Clflags", "Clflags.html", "simplify_rounds", "Clflags.html#VALsimplify_rounds", "", "", "<code class=\"type\">int option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "int option ref"],
["Simplif", "Simplif.html", "simplify_lambda", "Simplif.html#VALsimplify_lambda", "", "", "<code class=\"type\">string -&gt; Lambda.lambda -&gt; Lambda.lambda</code>", "string -> Lambda.lambda -> Lambda.lambda"],
["Sys", "Sys.html", "sigxfsz", "Sys.html#VALsigxfsz", "<div class=\"info\">  <p>File size limit exceeded</p> </div>", "  File size limit exceeded ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigxcpu", "Sys.html#VALsigxcpu", "<div class=\"info\">  <p>Timeout in cpu time</p> </div>", "  Timeout in cpu time ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigvtalrm", "Sys.html#VALsigvtalrm", "<div class=\"info\">  <p>Timeout in virtual time</p> </div>", "  Timeout in virtual time ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigusr2", "Sys.html#VALsigusr2", "<div class=\"info\">  <p>Application-defined signal 2</p> </div>", "  Application-defined signal 2 ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigusr1", "Sys.html#VALsigusr1", "<div class=\"info\">  <p>Application-defined signal 1</p> </div>", "  Application-defined signal 1 ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigurg", "Sys.html#VALsigurg", "<div class=\"info\">  <p>Urgent condition on socket</p> </div>", "  Urgent condition on socket ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigttou", "Sys.html#VALsigttou", "<div class=\"info\">  <p>Terminal write from background process</p> </div>", "  Terminal write from background process ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigttin", "Sys.html#VALsigttin", "<div class=\"info\">  <p>Terminal read from background process</p> </div>", "  Terminal read from background process ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigtstp", "Sys.html#VALsigtstp", "<div class=\"info\">  <p>Interactive stop</p> </div>", "  Interactive stop ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigtrap", "Sys.html#VALsigtrap", "<div class=\"info\">  <p>Trace/breakpoint trap</p> </div>", "  Trace/breakpoint trap ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigterm", "Sys.html#VALsigterm", "<div class=\"info\">  <p>Termination</p> </div>", "  Termination ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigsys", "Sys.html#VALsigsys", "<div class=\"info\">  <p>Bad argument to routine</p> </div>", "  Bad argument to routine ", "<code class=\"type\">int</code>", "int"],
["Unix", "Unix.html", "sigsuspend", "Unix.html#VALsigsuspend", "<div class=\"info\">  <p><code class=\"code\">sigsuspend&nbsp;sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code> and waits for a non-ignored, non-blocked signal to be delivered.</p> </div>", "  sigsuspend\194\160sigs atomically sets the blocked signals to sigs and waits for a non-ignored, non-blocked signal to be delivered. ", "<code class=\"type\">int list -&gt; unit</code>", "int list -> unit"],
["UnixLabels", "UnixLabels.html", "sigsuspend", "UnixLabels.html#VALsigsuspend", "<div class=\"info\">  <p><code class=\"code\">sigsuspend&nbsp;sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code> and waits for a non-ignored, non-blocked signal to be delivered.</p> </div>", "  sigsuspend\194\160sigs atomically sets the blocked signals to sigs and waits for a non-ignored, non-blocked signal to be delivered. ", "<code class=\"type\">int list -&gt; unit</code>", "int list -> unit"],
["Sys", "Sys.html", "sigstop", "Sys.html#VALsigstop", "<div class=\"info\">  <p>Stop</p> </div>", "  Stop ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigsegv", "Sys.html#VALsigsegv", "<div class=\"info\">  <p>Invalid memory reference</p> </div>", "  Invalid memory reference ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigquit", "Sys.html#VALsigquit", "<div class=\"info\">  <p>Interactive termination</p> </div>", "  Interactive termination ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigprof", "Sys.html#VALsigprof", "<div class=\"info\">  <p>Profiling interrupt</p> </div>", "  Profiling interrupt ", "<code class=\"type\">int</code>", "int"],
["Unix", "Unix.html", "sigprocmask", "Unix.html#VALsigprocmask", "<div class=\"info\">  <p><code class=\"code\">sigprocmask&nbsp;cmd&nbsp;sigs</code> changes the set of blocked signals.</p> </div>", "  sigprocmask\194\160cmd\194\160sigs changes the set of blocked signals. ", "<code class=\"type\"><a href=\"Unix.html#TYPEsigprocmask_command\">sigprocmask_command</a> -&gt; int list -&gt; int list</code>", "sigprocmask_command -> int list -> int list"],
["UnixLabels", "UnixLabels.html", "sigprocmask", "UnixLabels.html#VALsigprocmask", "<div class=\"info\">  <p><code class=\"code\">sigprocmask&nbsp;cmd&nbsp;sigs</code> changes the set of blocked signals.</p> </div>", "  sigprocmask\194\160cmd\194\160sigs changes the set of blocked signals. ", "<code class=\"type\">mode:<a href=\"UnixLabels.html#TYPEsigprocmask_command\">sigprocmask_command</a> -&gt; int list -&gt; int list</code>", "mode:sigprocmask_command -> int list -> int list"],
["Sys", "Sys.html", "sigpoll", "Sys.html#VALsigpoll", "<div class=\"info\">  <p>Pollable event</p> </div>", "  Pollable event ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigpipe", "Sys.html#VALsigpipe", "<div class=\"info\">  <p>Broken pipe</p> </div>", "  Broken pipe ", "<code class=\"type\">int</code>", "int"],
["Unix", "Unix.html", "sigpending", "Unix.html#VALsigpending", "<div class=\"info\">  <p>Return the set of blocked signals that are currently pending.</p> </div>", "  Return the set of blocked signals that are currently pending. ", "<code class=\"type\">unit -&gt; int list</code>", "unit -> int list"],
["UnixLabels", "UnixLabels.html", "sigpending", "UnixLabels.html#VALsigpending", "<div class=\"info\">  <p>Return the set of blocked signals that are currently pending.</p> </div>", "  Return the set of blocked signals that are currently pending. ", "<code class=\"type\">unit -&gt; int list</code>", "unit -> int list"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "signature", "Ast_helper.Mty.html#VALsignature", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.signature -> Parsetree.module_type"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "signature", "Ast_helper.Cty.html#VALsignature", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_signature\">Parsetree.class_signature</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_signature -> Parsetree.class_type"],
["Ast_invariants", "Ast_invariants.html", "signature", "Ast_invariants.html#VALsignature", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; unit</code>", "Parsetree.signature -> unit"],
["Pprintast", "Pprintast.html", "signature", "Pprintast.html#VALsignature", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; unit</code>", "Format.formatter -> Parsetree.signature -> unit"],
["Condition", "Condition.html", "signal", "Condition.html#VALsignal", "<div class=\"info\">  <p><code class=\"code\">signal&nbsp;c</code> restarts one of the processes waiting on the condition variable <code class=\"code\">c</code>.</p> </div>", "  signal\194\160c restarts one of the processes waiting on the condition variable c. ", "<code class=\"type\"><a href=\"Condition.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Sys", "Sys.html", "signal", "Sys.html#VALsignal", "<div class=\"info\">  <p>Set the behavior of the system on receipt of a given signal.</p> </div>", "  Set the behavior of the system on receipt of a given signal. ", "<code class=\"type\">int -&gt; <a href=\"Sys.html#TYPEsignal_behavior\">signal_behavior</a> -&gt; <a href=\"Sys.html#TYPEsignal_behavior\">signal_behavior</a></code>", "int -> signal_behavior -> signal_behavior"],
["Sys", "Sys.html", "sigkill", "Sys.html#VALsigkill", "<div class=\"info\">  <p>Termination (cannot be ignored)</p> </div>", "  Termination (cannot be ignored) ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigint", "Sys.html#VALsigint", "<div class=\"info\">  <p>Interactive interrupt (ctrl-C)</p> </div>", "  Interactive interrupt (ctrl-C) ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigill", "Sys.html#VALsigill", "<div class=\"info\">  <p>Invalid hardware instruction</p> </div>", "  Invalid hardware instruction ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sighup", "Sys.html#VALsighup", "<div class=\"info\">  <p>Hangup on controlling terminal</p> </div>", "  Hangup on controlling terminal ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigfpe", "Sys.html#VALsigfpe", "<div class=\"info\">  <p>Arithmetic exception</p> </div>", "  Arithmetic exception ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigcont", "Sys.html#VALsigcont", "<div class=\"info\">  <p>Continue</p> </div>", "  Continue ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigchld", "Sys.html#VALsigchld", "<div class=\"info\">  <p>Child process terminated</p> </div>", "  Child process terminated ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigbus", "Sys.html#VALsigbus", "<div class=\"info\">  <p>Bus error</p> </div>", "  Bus error ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigalrm", "Sys.html#VALsigalrm", "<div class=\"info\">  <p>Timeout</p> </div>", "  Timeout ", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "sigabrt", "Sys.html#VALsigabrt", "<div class=\"info\">  <p>Abnormal termination</p> </div>", "  Abnormal termination ", "<code class=\"type\">int</code>", "int"],
["Unix", "Unix.html", "shutdown_connection", "Unix.html#VALshutdown_connection", "<div class=\"info\">  <p>``Shut down'' a connection established with <a href=\"Unix.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_connection</code></a>; that is, transmit an end-of-file condition to the server reading on the other side of the connection.</p> </div>", "  ``Shut down'' a connection established with Unix.open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; unit</code>", "in_channel -> unit"],
["UnixLabels", "UnixLabels.html", "shutdown_connection", "UnixLabels.html#VALshutdown_connection", "<div class=\"info\">  <p>``Shut down'' a connection established with <a href=\"UnixLabels.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_connection</code></a>; that is, transmit an end-of-file condition to the server reading on the other side of the connection.</p> </div>", "  ``Shut down'' a connection established with UnixLabels.open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; unit</code>", "in_channel -> unit"],
["Unix", "Unix.html", "shutdown", "Unix.html#VALshutdown", "<div class=\"info\">  <p>Shutdown a socket connection.</p> </div>", "  Shutdown a socket connection. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEshutdown_command\">shutdown_command</a> -&gt; unit</code>", "file_descr -> shutdown_command -> unit"],
["UnixLabels", "UnixLabels.html", "shutdown", "UnixLabels.html#VALshutdown", "<div class=\"info\">  <p>Shutdown a socket connection.</p> </div>", "  Shutdown a socket connection. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; mode:<a href=\"UnixLabels.html#TYPEshutdown_command\">shutdown_command</a> -&gt; unit</code>", "file_descr -> mode:shutdown_command -> unit"],
["Location", "Location.html", "show_filename", "Location.html#VALshow_filename", "<div class=\"info\">  <p>In -absname mode, return the absolute path for this filename.</p> </div>", "  In -absname mode, return the absolute path for this filename. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Location", "Location.html", "show_code_at_location", "Location.html#VALshow_code_at_location", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> Lexing.lexbuf -> t -> unit"],
["Int32", "Int32.html", "shift_right_logical", "Int32.html#VALshift_right_logical", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Int32.shift_right_logical\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\">int32 -&gt; int -&gt; int32</code>", "int32 -> int -> int32"],
["Int64", "Int64.html", "shift_right_logical", "Int64.html#VALshift_right_logical", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Int64.shift_right_logical\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\">int64 -&gt; int -&gt; int64</code>", "int64 -> int -> int64"],
["Nativeint", "Nativeint.html", "shift_right_logical", "Nativeint.html#VALshift_right_logical", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Nativeint.shift_right_logical\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\">nativeint -&gt; int -&gt; nativeint</code>", "nativeint -> int -> nativeint"],
["Targetint", "Targetint.html", "shift_right_logical", "Targetint.html#VALshift_right_logical", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Targetint.shift_right_logical\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> int -> t"],
["Int32", "Int32.html", "shift_right", "Int32.html#VALshift_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Int32.shift_right\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\">int32 -&gt; int -&gt; int32</code>", "int32 -> int -> int32"],
["Int64", "Int64.html", "shift_right", "Int64.html#VALshift_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Int64.shift_right\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\">int64 -&gt; int -&gt; int64</code>", "int64 -> int -> int64"],
["Nativeint", "Nativeint.html", "shift_right", "Nativeint.html#VALshift_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Nativeint.shift_right\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\">nativeint -&gt; int -&gt; nativeint</code>", "nativeint -> int -> nativeint"],
["Targetint", "Targetint.html", "shift_right", "Targetint.html#VALshift_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p> </div>", "  Targetint.shift_right\194\160x\194\160y shifts x to the right by y bits. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> int -> t"],
["Int32", "Int32.html", "shift_left", "Int32.html#VALshift_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p> </div>", "  Int32.shift_left\194\160x\194\160y shifts x to the left by y bits. ", "<code class=\"type\">int32 -&gt; int -&gt; int32</code>", "int32 -> int -> int32"],
["Int64", "Int64.html", "shift_left", "Int64.html#VALshift_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p> </div>", "  Int64.shift_left\194\160x\194\160y shifts x to the left by y bits. ", "<code class=\"type\">int64 -&gt; int -&gt; int64</code>", "int64 -> int -> int64"],
["Nativeint", "Nativeint.html", "shift_left", "Nativeint.html#VALshift_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p> </div>", "  Nativeint.shift_left\194\160x\194\160y shifts x to the left by y bits. ", "<code class=\"type\">nativeint -&gt; int -&gt; nativeint</code>", "nativeint -> int -> nativeint"],
["Targetint", "Targetint.html", "shift_left", "Targetint.html#VALshift_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p> </div>", "  Targetint.shift_left\194\160x\194\160y shifts x to the left by y bits. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> int -> t"],
["Clflags", "Clflags.html", "shared", "Clflags.html#VALshared", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Misc.Color", "Misc.Color.html", "setup", "Misc.Color.html#VALsetup", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEsetting\">setting</a> option -&gt; unit</code>", "setting option -> unit"],
["Terminfo", "Terminfo.html", "setup", "Terminfo.html#VALsetup", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Terminfo.html#TYPEstatus\">status</a></code>", "out_channel -> status"],
["Unix", "Unix.html", "setuid", "Unix.html#VALsetuid", "<div class=\"info\">  <p>Set the real user id and effective user id for the process.</p> </div>", "  Set the real user id and effective user id for the process. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["UnixLabels", "UnixLabels.html", "setuid", "UnixLabels.html#VALsetuid", "<div class=\"info\">  <p>Set the real user id and effective user id for the process.</p> </div>", "  Set the real user id and effective user id for the process. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Unix", "Unix.html", "setsockopt_optint", "Unix.html#VALsetsockopt_optint", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is an <code class=\"code\">int&nbsp;option</code>.</p> </div>", "  Same as Unix.setsockopt for a socket option whose value is an int\194\160option. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_optint_option\">socket_optint_option</a> -&gt; int option -&gt; unit</code>", "file_descr -> socket_optint_option -> int option -> unit"],
["UnixLabels", "UnixLabels.html", "setsockopt_optint", "UnixLabels.html#VALsetsockopt_optint", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is an <code class=\"code\">int&nbsp;option</code>.</p> </div>", "  Same as Unix.setsockopt for a socket option whose value is an int\194\160option. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       <a href=\"UnixLabels.html#TYPEsocket_optint_option\">socket_optint_option</a> -&gt; int option -&gt; unit</code>", "file_descr ->       socket_optint_option -> int option -> unit"],
["Unix", "Unix.html", "setsockopt_int", "Unix.html#VALsetsockopt_int", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option.</p> </div>", "  Same as Unix.setsockopt for an integer-valued socket option. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_int_option\">socket_int_option</a> -&gt; int -&gt; unit</code>", "file_descr -> socket_int_option -> int -> unit"],
["UnixLabels", "UnixLabels.html", "setsockopt_int", "UnixLabels.html#VALsetsockopt_int", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option.</p> </div>", "  Same as Unix.setsockopt for an integer-valued socket option. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_int_option\">socket_int_option</a> -&gt; int -&gt; unit</code>", "file_descr -> socket_int_option -> int -> unit"],
["Unix", "Unix.html", "setsockopt_float", "Unix.html#VALsetsockopt_float", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a floating-point number.</p> </div>", "  Same as Unix.setsockopt for a socket option whose value is a floating-point number. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_float_option\">socket_float_option</a> -&gt; float -&gt; unit</code>", "file_descr -> socket_float_option -> float -> unit"],
["UnixLabels", "UnixLabels.html", "setsockopt_float", "UnixLabels.html#VALsetsockopt_float", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a floating-point number.</p> </div>", "  Same as Unix.setsockopt for a socket option whose value is a floating-point number. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_float_option\">socket_float_option</a> -&gt; float -&gt; unit</code>", "file_descr -> socket_float_option -> float -> unit"],
["Unix", "Unix.html", "setsockopt", "Unix.html#VALsetsockopt", "<div class=\"info\">  <p>Set or clear a boolean-valued option in the given socket.</p> </div>", "  Set or clear a boolean-valued option in the given socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_bool_option\">socket_bool_option</a> -&gt; bool -&gt; unit</code>", "file_descr -> socket_bool_option -> bool -> unit"],
["UnixLabels", "UnixLabels.html", "setsockopt", "UnixLabels.html#VALsetsockopt", "<div class=\"info\">  <p>Set or clear a boolean-valued option in the given socket.</p> </div>", "  Set or clear a boolean-valued option in the given socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_bool_option\">socket_bool_option</a> -&gt; bool -&gt; unit</code>", "file_descr -> socket_bool_option -> bool -> unit"],
["Unix", "Unix.html", "setsid", "Unix.html#VALsetsid", "<div class=\"info\">  <p>Put the calling process in a new session and detach it from its controlling terminal.</p> </div>", "  Put the calling process in a new session and detach it from its controlling terminal. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "setsid", "UnixLabels.html#VALsetsid", "<div class=\"info\">  <p>Put the calling process in a new session and detach it from its controlling terminal.</p> </div>", "  Put the calling process in a new session and detach it from its controlling terminal. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Unix", "Unix.html", "setitimer", "Unix.html#VALsetitimer", "<div class=\"info\">  <p><code class=\"code\">setitimer&nbsp;t&nbsp;s</code> sets the interval timer <code class=\"code\">t</code> and returns its previous status.</p> </div>", "  setitimer\194\160t\194\160s sets the interval timer t and returns its previous status. ", "<code class=\"type\"><a href=\"Unix.html#TYPEinterval_timer\">interval_timer</a> -&gt;<br>       <a href=\"Unix.html#TYPEinterval_timer_status\">interval_timer_status</a> -&gt; <a href=\"Unix.html#TYPEinterval_timer_status\">interval_timer_status</a></code>", "interval_timer ->       interval_timer_status -> interval_timer_status"],
["UnixLabels", "UnixLabels.html", "setitimer", "UnixLabels.html#VALsetitimer", "<div class=\"info\">  <p><code class=\"code\">setitimer&nbsp;t&nbsp;s</code> sets the interval timer <code class=\"code\">t</code> and returns its previous status.</p> </div>", "  setitimer\194\160t\194\160s sets the interval timer t and returns its previous status. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinterval_timer\">interval_timer</a> -&gt;<br>       <a href=\"UnixLabels.html#TYPEinterval_timer_status\">interval_timer_status</a> -&gt; <a href=\"UnixLabels.html#TYPEinterval_timer_status\">interval_timer_status</a></code>", "interval_timer ->       interval_timer_status -> interval_timer_status"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "setinstvar", "Ast_helper.Exp.html#VALsetinstvar", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str -> Parsetree.expression -> Parsetree.expression"],
["Unix", "Unix.html", "setgroups", "Unix.html#VALsetgroups", "<div class=\"info\">  <p><code class=\"code\">setgroups&nbsp;groups</code> sets the supplementary group IDs for the calling process.</p> </div>", "  setgroups\194\160groups sets the supplementary group IDs for the calling process. ", "<code class=\"type\">int array -&gt; unit</code>", "int array -> unit"],
["UnixLabels", "UnixLabels.html", "setgroups", "UnixLabels.html#VALsetgroups", "<div class=\"info\">  <p><code class=\"code\">setgroups&nbsp;groups</code> sets the supplementary group IDs for the calling process.</p> </div>", "  setgroups\194\160groups sets the supplementary group IDs for the calling process. ", "<code class=\"type\">int array -&gt; unit</code>", "int array -> unit"],
["Unix", "Unix.html", "setgid", "Unix.html#VALsetgid", "<div class=\"info\">  <p>Set the real group id and effective group id for the process.</p> </div>", "  Set the real group id and effective group id for the process. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["UnixLabels", "UnixLabels.html", "setgid", "UnixLabels.html#VALsetgid", "<div class=\"info\">  <p>Set the real group id and effective group id for the process.</p> </div>", "  Set the real group id and effective group id for the process. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "setfield", "Ast_helper.Exp.html#VALsetfield", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       Ast_helper.lid -> Parsetree.expression -> Parsetree.expression"],
["Graphics", "Graphics.html", "set_window_title", "Graphics.html#VALset_window_title", "<div class=\"info\">  <p>Set the title of the graphics window.</p> </div>", "  Set the title of the graphics window. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "set_user_default", "Arg_helper.Make.html#VALset_user_default", "", "", "<code class=\"type\">S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Value.t -> parsed -> parsed"],
["Printexc", "Printexc.html", "set_uncaught_exception_handler", "Printexc.html#VALset_uncaught_exception_handler", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.set_uncaught_exception_handler&nbsp;fn</code> registers <code class=\"code\">fn</code> as the handler for uncaught exceptions.</p> </div>", "  Printexc.set_uncaught_exception_handler\194\160fn registers fn as the handler for uncaught exceptions. ", "<code class=\"type\">(exn -&gt; <a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a> -&gt; unit) -&gt; unit</code>", "(exn -> raw_backtrace -> unit) -> unit"],
["Parsing", "Parsing.html", "set_trace", "Parsing.html#VALset_trace", "<div class=\"info\">  <p>Control debugging support for <code class=\"code\">ocamlyacc</code>-generated parsers.</p> </div>", "  Control debugging support for ocamlyacc-generated parsers. ", "<code class=\"type\">bool -&gt; bool</code>", "bool -> bool"],
["Graphics", "Graphics.html", "set_text_size", "Graphics.html#VALset_text_size", "<div class=\"info\">  <p>Set the character size used for drawing text.</p> </div>", "  Set the character size used for drawing text. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Filename", "Filename.html", "set_temp_dir_name", "Filename.html#VALset_temp_dir_name", "<div class=\"info\">  <p>Change the temporary directory returned by <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a> and used by <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a> and <a href=\"Filename.html#VALopen_temp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.open_temp_file</code></a>.</p> </div>", "  Change the temporary directory returned by Filename.get_temp_dir_name and used by Filename.temp_file and Filename.open_temp_file. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Format", "Format.html", "set_tags", "Format.html#VALset_tags", "<div class=\"info\">  <p><code class=\"code\">pp_set_tags&nbsp;ppf&nbsp;b</code> turns on or off the treatment of semantic tags (default is off).</p> </div>", "  pp_set_tags\194\160ppf\194\160b turns on or off the treatment of semantic tags (default is off). ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Obj", "Obj.html", "set_tag", "Obj.html#VALset_tag", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int -&gt; unit</code>", "t -> int -> unit"],
["Format", "Format.html", "set_tab", "Format.html#VALset_tab", "<div class=\"info\">  <p>Sets a tabulation marker at current insertion point.</p> </div>", "  Sets a tabulation marker at current insertion point. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Misc.Color", "Misc.Color.html", "set_styles", "Misc.Color.html#VALset_styles", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEstyles\">styles</a> -&gt; unit</code>", "styles -> unit"],
["Random", "Random.html", "set_state", "Random.html#VALset_state", "<div class=\"info\">  <p>Set the state of the generator used by the basic functions.</p> </div>", "  Set the state of the generator used by the basic functions. ", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">State.t</a> -&gt; unit</code>", "State.t -> unit"],
["Sys", "Sys.html", "set_signal", "Sys.html#VALset_signal", "<div class=\"info\">  <p>Same as <a href=\"Sys.html#VALsignal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.signal</code></a> but return value is ignored.</p> </div>", "  Same as Sys.signal but return value is ignored. ", "<code class=\"type\">int -&gt; <a href=\"Sys.html#TYPEsignal_behavior\">signal_behavior</a> -&gt; unit</code>", "int -> signal_behavior -> unit"],
["Format", "Format.html", "set_print_tags", "Format.html#VALset_print_tags", "<div class=\"info\">  <p><code class=\"code\">pp_set_print_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-printing operations.</p> </div>", "  pp_set_print_tags\194\160ppf\194\160b turns on or off the tag-printing operations. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Lexer", "Lexer.html", "set_preprocessor", "Lexer.html#VALset_preprocessor", "", "", "<code class=\"type\">(unit -&gt; unit) -&gt;<br>       ((<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a>) -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">Parser.token</a>) -&gt; unit</code>", "(unit -> unit) ->       ((Lexing.lexbuf -> Parser.token) -> Lexing.lexbuf -> Parser.token) -> unit"],
["Docstrings", "Docstrings.html", "set_pre_extra_docstrings", "Docstrings.html#VALset_pre_extra_docstrings", "<div class=\"info\">  <p>Docstrings immediately following the token which precedes this one</p> </div>", "  Docstrings immediately following the token which precedes this one ", "<code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a> -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Docstrings", "Docstrings.html", "set_pre_docstrings", "Docstrings.html#VALset_pre_docstrings", "<div class=\"info\">  <p>Docstrings immediately preceding a token</p> </div>", "  Docstrings immediately preceding a token ", "<code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a> -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Docstrings", "Docstrings.html", "set_post_extra_docstrings", "Docstrings.html#VALset_post_extra_docstrings", "<div class=\"info\">  <p>Docstrings immediately preceding the token which follows this one</p> </div>", "  Docstrings immediately preceding the token which follows this one ", "<code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a> -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Docstrings", "Docstrings.html", "set_post_docstrings", "Docstrings.html#VALset_post_docstrings", "<div class=\"info\">  <p>Docstrings immediately following a token</p> </div>", "  Docstrings immediately following a token ", "<code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a> -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Unix", "Unix.html", "set_nonblock", "Unix.html#VALset_nonblock", "<div class=\"info\">  <p>Set the ``non-blocking'' flag on the given descriptor.</p> </div>", "  Set the ``non-blocking'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["UnixLabels", "UnixLabels.html", "set_nonblock", "UnixLabels.html#VALset_nonblock", "<div class=\"info\">  <p>Set the ``non-blocking'' flag on the given descriptor.</p> </div>", "  Set the ``non-blocking'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["CamlinternalOO", "CamlinternalOO.html", "set_methods", "CamlinternalOO.html#VALset_methods", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a> array -&gt; unit</code>", "table -> label array -> unit"],
["CamlinternalOO", "CamlinternalOO.html", "set_method", "CamlinternalOO.html#VALset_method", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a> -&gt; <a href=\"CamlinternalOO.html#TYPEmeth\">meth</a> -&gt; unit</code>", "table -> label -> meth -> unit"],
["Format", "Format.html", "set_max_indent", "Format.html#VALset_max_indent", "<div class=\"info\">  <p><code class=\"code\">pp_set_max_indent&nbsp;ppf&nbsp;d</code> sets the maximum indentation limit of lines to <code class=\"code\">d</code> (in characters): once this limit is reached, new pretty-printing boxes are rejected to the left, if they do not fit on the current line.</p> </div>", "  pp_set_max_indent\194\160ppf\194\160d sets the maximum indentation limit of lines to d (in characters): once this limit is reached, new pretty-printing boxes are rejected to the left, if they do not fit on the current line. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Format", "Format.html", "set_max_boxes", "Format.html#VALset_max_boxes", "<div class=\"info\">  <p><code class=\"code\">pp_set_max_boxes&nbsp;ppf&nbsp;max</code> sets the maximum number of pretty-printing boxes simultaneously open.</p> </div>", "  pp_set_max_boxes\194\160ppf\194\160max sets the maximum number of pretty-printing boxes simultaneously open. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Format", "Format.html", "set_mark_tags", "Format.html#VALset_mark_tags", "<div class=\"info\">  <p><code class=\"code\">pp_set_mark_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-marking operations.</p> </div>", "  pp_set_mark_tags\194\160ppf\194\160b turns on or off the tag-marking operations. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Format", "Format.html", "set_margin", "Format.html#VALset_margin", "<div class=\"info\">  <p><code class=\"code\">pp_set_margin&nbsp;ppf&nbsp;d</code> sets the right margin to <code class=\"code\">d</code> (in characters): the pretty-printer splits lines that overflow the right margin according to the break hints given.</p> </div>", "  pp_set_margin\194\160ppf\194\160d sets the right margin to d (in characters): the pretty-printer splits lines that overflow the right margin according to the break hints given. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Graphics", "Graphics.html", "set_line_width", "Graphics.html#VALset_line_width", "<div class=\"info\">  <p>Set the width of points and lines drawn with the functions above.</p> </div>", "  Set the width of points and lines drawn with the functions above. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "set_key2", "Ephemeron.K2.html#VALset_key2", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p> </div>", "  Same as Ephemeron.K1.set_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'k2 -&gt; unit</code>", "('k1, 'k2, 'd) t -> 'k2 -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "set_key1", "Ephemeron.K2.html#VALset_key1", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p> </div>", "  Same as Ephemeron.K1.set_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'k1 -&gt; unit</code>", "('k1, 'k2, 'd) t -> 'k1 -> unit"],
["Ephemeron.K1", "Ephemeron.K1.html", "set_key", "Ephemeron.K1.html#VALset_key", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be a (full) key to <code class=\"code\">el</code></p> </div>", "  Ephemeron.K1.set_key\194\160eph\194\160el sets the key of eph to be a (full) key to el ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; 'k -&gt; unit</code>", "('k, 'd) t -> 'k -> unit"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "set_key", "Ephemeron.Kn.html#VALset_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p> </div>", "  Same as Ephemeron.K1.set_key ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; int -&gt; 'k -&gt; unit</code>", "('k, 'd) t -> int -> 'k -> unit"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "set_key", "Obj.Ephemeron.html#VALset_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p> </div>", "  Same as Ephemeron.K1.set_key ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Obj.Ephemeron.html#TYPEobj_t\">obj_t</a> -&gt; unit</code>", "t -> int -> obj_t -> unit"],
["Format", "Format.html", "set_formatter_tag_functions", "Format.html#VALset_formatter_tag_functions", "<div class=\"info\">  <p><code class=\"code\">pp_set_formatter_tag_functions&nbsp;ppf&nbsp;tag_funs</code> changes the meaning of opening and closing semantic tag operations to use the functions in <code class=\"code\">tag_funs</code> when printing on <code class=\"code\">ppf</code>.</p> </div>", "  pp_set_formatter_tag_functions\194\160ppf\194\160tag_funs changes the meaning of opening and closing semantic tag operations to use the functions in tag_funs when printing on ppf. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter_tag_functions\">formatter_tag_functions</a> -&gt; unit</code>", "formatter_tag_functions -> unit"],
["Format", "Format.html", "set_formatter_output_functions", "Format.html#VALset_formatter_output_functions", "<div class=\"info\">  <p><code class=\"code\">pp_set_formatter_output_functions&nbsp;ppf&nbsp;out&nbsp;flush</code> redirects the standard pretty-printer output functions to the functions <code class=\"code\">out</code> and <code class=\"code\">flush</code>.</p> </div>", "  pp_set_formatter_output_functions\194\160ppf\194\160out\194\160flush redirects the standard pretty-printer output functions to the functions out and flush. ", "<code class=\"type\">(string -&gt; int -&gt; int -&gt; unit) -&gt; (unit -&gt; unit) -&gt; unit</code>", "(string -> int -> int -> unit) -> (unit -> unit) -> unit"],
["Format", "Format.html", "set_formatter_out_functions", "Format.html#VALset_formatter_out_functions", "<div class=\"info\">  <p><code class=\"code\">pp_set_formatter_out_functions&nbsp;ppf&nbsp;out_funs</code> Set all the pretty-printer output functions of <code class=\"code\">ppf</code> to those of argument <code class=\"code\">out_funs</code>,</p> </div>", "  pp_set_formatter_out_functions\194\160ppf\194\160out_funs Set all the pretty-printer output functions of ppf to those of argument out_funs, ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter_out_functions\">formatter_out_functions</a> -&gt; unit</code>", "formatter_out_functions -> unit"],
["Format", "Format.html", "set_formatter_out_channel", "Format.html#VALset_formatter_out_channel", "<div class=\"info\">  <p>Redirect the standard pretty-printer output to the given channel.</p> </div>", "  Redirect the standard pretty-printer output to the given channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "out_channel -> unit"],
["Graphics", "Graphics.html", "set_font", "Graphics.html#VALset_font", "<div class=\"info\">  <p>Set the font used for drawing text.</p> </div>", "  Set the font used for drawing text. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Docstrings", "Docstrings.html", "set_floating_docstrings", "Docstrings.html#VALset_floating_docstrings", "<div class=\"info\">  <p>Docstrings not immediately adjacent to a token</p> </div>", "  Docstrings not immediately adjacent to a token ", "<code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a> -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a> list -&gt; unit</code>", "Lexing.position -> docstring list -> unit"],
["Obj", "Obj.html", "set_field", "Obj.html#VALset_field", "<div class=\"info\">  <p>When using flambda:</p> </div>", "  When using flambda: ", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Obj.html#TYPEt\">t</a> -&gt; unit</code>", "t -> int -> t -> unit"],
["Format", "Format.html", "set_ellipsis_text", "Format.html#VALset_ellipsis_text", "<div class=\"info\">  <p>Set the text of the ellipsis printed when too many pretty-printing boxes are open (a single dot, <code class=\"code\">.</code>, by default).</p> </div>", "  Set the text of the ellipsis printed when too many pretty-printing boxes are open (a single dot, ., by default). ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Clflags", "Clflags.html", "set_dumped_pass", "Clflags.html#VALset_dumped_pass", "", "", "<code class=\"type\">string -&gt; bool -&gt; unit</code>", "string -> bool -> unit"],
["Obj", "Obj.html", "set_double_field", "Obj.html#VALset_double_field", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int -&gt; float -&gt; unit</code>", "t -> int -> float -> unit"],
["Ephemeron.K1", "Ephemeron.K1.html", "set_data", "Ephemeron.K1.html#VALset_data", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data&nbsp;eph&nbsp;el</code> sets the data of <code class=\"code\">eph</code> to be a (full) data to <code class=\"code\">el</code></p> </div>", "  Ephemeron.K1.set_data\194\160eph\194\160el sets the data of eph to be a (full) data to el ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; 'd -&gt; unit</code>", "('k, 'd) t -> 'd -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "set_data", "Ephemeron.K2.html#VALset_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p> </div>", "  Same as Ephemeron.K1.set_data ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'd -&gt; unit</code>", "('k1, 'k2, 'd) t -> 'd -> unit"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "set_data", "Ephemeron.Kn.html#VALset_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p> </div>", "  Same as Ephemeron.K1.set_data ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; 'd -&gt; unit</code>", "('k, 'd) t -> 'd -> unit"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "set_data", "Obj.Ephemeron.html#VALset_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p> </div>", "  Same as Ephemeron.K1.set_data ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; <a href=\"Obj.Ephemeron.html#TYPEobj_t\">obj_t</a> -&gt; unit</code>", "t -> obj_t -> unit"],
["Ast_mapper", "Ast_mapper.html", "set_cookie", "Ast_mapper.html#VALset_cookie", "", "", "<code class=\"type\">string -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; unit</code>", "string -> Parsetree.expression -> unit"],
["Misc.Color", "Misc.Color.html", "set_color_tag_handling", "Misc.Color.html#VALset_color_tag_handling", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; unit</code>", "Format.formatter -> unit"],
["Graphics", "Graphics.html", "set_color", "Graphics.html#VALset_color", "<div class=\"info\">  <p>Set the current drawing color.</p> </div>", "  Set the current drawing color. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a> -&gt; unit</code>", "color -> unit"],
["Unix", "Unix.html", "set_close_on_exec", "Unix.html#VALset_close_on_exec", "<div class=\"info\">  <p>Set the ``close-on-exec'' flag on the given descriptor.</p> </div>", "  Set the ``close-on-exec'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["UnixLabels", "UnixLabels.html", "set_close_on_exec", "UnixLabels.html#VALset_close_on_exec", "<div class=\"info\">  <p>Set the ``close-on-exec'' flag on the given descriptor.</p> </div>", "  Set the ``close-on-exec'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["Pervasives", "Pervasives.html", "set_binary_mode_out", "Pervasives.html#VALset_binary_mode_out", "<div class=\"info\">  <p><code class=\"code\">set_binary_mode_out&nbsp;oc&nbsp;<span class=\"keyword\">true</span></code> sets the channel <code class=\"code\">oc</code> to binary mode: no translations take place during output.</p> </div>", "  set_binary_mode_out\194\160oc\194\160true sets the channel oc to binary mode: no translations take place during output. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; bool -&gt; unit</code>", "out_channel -> bool -> unit"],
["Pervasives", "Pervasives.html", "set_binary_mode_in", "Pervasives.html#VALset_binary_mode_in", "<div class=\"info\">  <p><code class=\"code\">set_binary_mode_in&nbsp;ic&nbsp;<span class=\"keyword\">true</span></code> sets the channel <code class=\"code\">ic</code> to binary mode: no translations take place during input.</p> </div>", "  set_binary_mode_in\194\160ic\194\160true sets the channel ic to binary mode: no translations take place during input. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; bool -&gt; unit</code>", "in_channel -> bool -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "set_base_default", "Arg_helper.Make.html#VALset_base_default", "", "", "<code class=\"type\">S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Value.t -> parsed -> parsed"],
["Format", "Format.html", "set_all_formatter_output_functions", "Format.html#VALset_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">out:(string -&gt; int -&gt; int -&gt; unit) -&gt;<br>       flush:(unit -&gt; unit) -&gt;<br>       newline:(unit -&gt; unit) -&gt; spaces:(int -&gt; unit) -&gt; unit</code>", "out:(string -> int -> int -> unit) ->       flush:(unit -> unit) ->       newline:(unit -> unit) -> spaces:(int -> unit) -> unit"],
["Array", "Array.html", "set", "Array.html#VALset", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.</p> </div>", "  Array.set\194\160a\194\160n\194\160x modifies array a in place, replacing element number n with x. ", "<code class=\"type\">'a array -&gt; int -&gt; 'a -&gt; unit</code>", "'a array -> int -> 'a -> unit"],
["ArrayLabels", "ArrayLabels.html", "set", "ArrayLabels.html#VALset", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.</p> </div>", "  Array.set\194\160a\194\160n\194\160x modifies array a in place, replacing element number n with x. ", "<code class=\"type\">'a array -&gt; int -&gt; 'a -&gt; unit</code>", "'a array -> int -> 'a -> unit"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "set", "Bigarray.Genarray.html#VALset", "<div class=\"info\">  <p>Assign an element of a generic big array.</p> </div>", "  Assign an element of a generic big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; int array -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> int array -> 'a -> unit"],
["Bigarray.Array0", "Bigarray.Array0.html", "set", "Bigarray.Array0.html#VALset", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array0</span>.set&nbsp;a&nbsp;x&nbsp;v</code> stores the value <code class=\"code\">v</code> in <code class=\"code\">a</code>.</p> </div>", "  Array0.set\194\160a\194\160x\194\160v stores the value v in a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> 'a -> unit"],
["Bigarray.Array1", "Bigarray.Array1.html", "set", "Bigarray.Array1.html#VALset", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array1</span>.set&nbsp;a&nbsp;x&nbsp;v</code>, also written <code class=\"code\">a.{x}&nbsp;&lt;-&nbsp;v</code>, stores the value <code class=\"code\">v</code> at index <code class=\"code\">x</code> in <code class=\"code\">a</code>.</p> </div>", "  Array1.set\194\160a\194\160x\194\160v, also written a.{x}\194\160<-\194\160v, stores the value v at index x in a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; int -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> int -> 'a -> unit"],
["Bigarray.Array2", "Bigarray.Array2.html", "set", "Bigarray.Array2.html#VALset", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array2</span>.set&nbsp;a&nbsp;x&nbsp;y&nbsp;v</code>, or alternatively <code class=\"code\">a.{x,y}&nbsp;&lt;-&nbsp;v</code>, stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>) in <code class=\"code\">a</code>.</p> </div>", "  Array2.set\194\160a\194\160x\194\160y\194\160v, or alternatively a.{x,y}\194\160<-\194\160v, stores the value v at coordinates (x, y) in a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> int -> int -> 'a -> unit"],
["Bigarray.Array3", "Bigarray.Array3.html", "set", "Bigarray.Array3.html#VALset", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array3</span>.set&nbsp;a&nbsp;x&nbsp;y&nbsp;v</code>, or alternatively <code class=\"code\">a.{x,y,z}&nbsp;&lt;-&nbsp;v</code>, stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>) in <code class=\"code\">a</code>.</p> </div>", "  Array3.set\194\160a\194\160x\194\160y\194\160v, or alternatively a.{x,y,z}\194\160<-\194\160v, stores the value v at coordinates (x, y, z) in a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; int -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit"],
["Bytes", "Bytes.html", "set", "Bytes.html#VALset", "<div class=\"info\">  <p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.</p> </div>", "  set\194\160s\194\160n\194\160c modifies s in place, replacing the byte at index n with c. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; unit</code>", "bytes -> int -> char -> unit"],
["BytesLabels", "BytesLabels.html", "set", "BytesLabels.html#VALset", "<div class=\"info\">  <p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.</p> </div>", "  set\194\160s\194\160n\194\160c modifies s in place, replacing the byte at index n with c. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; unit</code>", "bytes -> int -> char -> unit"],
["Consistbl", "Consistbl.html", "set", "Consistbl.html#VALset", "", "", "<code class=\"type\"><a href=\"Consistbl.html#TYPEt\">t</a> -&gt; string -&gt; <a href=\"Digest.html#TYPEt\">Digest.t</a> -&gt; string -&gt; unit</code>", "t -> string -> Digest.t -> string -> unit"],
["Float.Array", "Float.Array.html", "set", "Float.Array.html#VALset", "", "", "<code class=\"type\"><a href=\"Float.Array.html#TYPEt\">t</a> -&gt; int -&gt; float -&gt; unit</code>", "t -> int -> float -> unit"],
["Gc", "Gc.html", "set", "Gc.html#VALset", "<div class=\"info\">  <p><code class=\"code\">set&nbsp;r</code> changes the GC parameters according to the <code class=\"code\">control</code> record <code class=\"code\">r</code>.</p> </div>", "  set\194\160r changes the GC parameters according to the control record r. ", "<code class=\"type\"><a href=\"Gc.html#TYPEcontrol\">control</a> -&gt; unit</code>", "control -> unit"],
["Misc.LongString", "Misc.LongString.html", "set", "Misc.LongString.html#VALset", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; char -&gt; unit</code>", "t -> int -> char -> unit"],
["StringLabels", "StringLabels.html", "set", "StringLabels.html#VALset", "<div class=\"info\">  <span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.</p> </span></div>", "  String.set\194\160s\194\160n\194\160c modifies byte sequence s in place, replacing the byte at index n with c. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; unit</code>", "bytes -> int -> char -> unit"],
["String", "String.html", "set", "String.html#VALset", "<div class=\"info\">  <span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.</p> </span></div>", "  String.set\194\160s\194\160n\194\160c modifies byte sequence s in place, replacing the byte at index n with c. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; unit</code>", "bytes -> int -> char -> unit"],
["Weak", "Weak.html", "set", "Weak.html#VALset", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;(<span class=\"constructor\">Some</span>&nbsp;el)</code> sets the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> to be a (full) pointer to <code class=\"code\">el</code>; <code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;<span class=\"constructor\">None</span></code> sets the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> to empty.</p> </div>", "  Weak.set\194\160ar\194\160n\194\160(Some\194\160el) sets the nth cell of ar to be a (full) pointer to el; Weak.set\194\160ar\194\160n\194\160None sets the nth cell of ar to empty. ", "<code class=\"type\">'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int -&gt; 'a option -&gt; unit</code>", "'a t -> int -> 'a option -> unit"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "sequence", "Ast_helper.Exp.html#VALsequence", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.expression -> Parsetree.expression"],
["ThreadUnix", "ThreadUnix.html", "sendto_substring", "ThreadUnix.html#VALsendto_substring", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt;<br>       string -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">Unix.msg_flag</a> list -&gt; <a href=\"Unix.html#TYPEsockaddr\">Unix.sockaddr</a> -&gt; int</code>", "Unix.file_descr ->       string -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int"],
["Unix", "Unix.html", "sendto_substring", "Unix.html#VALsendto_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as sendto, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       string -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">msg_flag</a> list -&gt; <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; int</code>", "file_descr ->       string -> int -> int -> msg_flag list -> sockaddr -> int"],
["UnixLabels", "UnixLabels.html", "sendto_substring", "UnixLabels.html#VALsendto_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as sendto, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       buf:string -&gt;<br>       pos:int -&gt;<br>       len:int -&gt; mode:<a href=\"UnixLabels.html#TYPEmsg_flag\">msg_flag</a> list -&gt; <a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt; int</code>", "file_descr ->       buf:string ->       pos:int ->       len:int -> mode:msg_flag list -> sockaddr -> int"],
["ThreadUnix", "ThreadUnix.html", "sendto", "ThreadUnix.html#VALsendto", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt;<br>       bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">Unix.msg_flag</a> list -&gt; <a href=\"Unix.html#TYPEsockaddr\">Unix.sockaddr</a> -&gt; int</code>", "Unix.file_descr ->       bytes -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int"],
["Unix", "Unix.html", "sendto", "Unix.html#VALsendto", "<div class=\"info\">  <p>Send data over an unconnected socket.</p> </div>", "  Send data over an unconnected socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">msg_flag</a> list -&gt; <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; int</code>", "file_descr ->       bytes -> int -> int -> msg_flag list -> sockaddr -> int"],
["UnixLabels", "UnixLabels.html", "sendto", "UnixLabels.html#VALsendto", "<div class=\"info\">  <p>Send data over an unconnected socket.</p> </div>", "  Send data over an unconnected socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       buf:bytes -&gt;<br>       pos:int -&gt;<br>       len:int -&gt; mode:<a href=\"UnixLabels.html#TYPEmsg_flag\">msg_flag</a> list -&gt; addr:<a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt; int</code>", "file_descr ->       buf:bytes ->       pos:int ->       len:int -> mode:msg_flag list -> addr:sockaddr -> int"],
["CamlinternalOO", "CamlinternalOO.html", "sendself", "CamlinternalOO.html#VALsendself", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a></code>", "obj -> label -> t"],
["CamlinternalOO", "CamlinternalOO.html", "sendcache", "CamlinternalOO.html#VALsendcache", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt;<br>       <a href=\"CamlinternalOO.html#TYPEtag\">tag</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a></code>", "obj ->       tag -> t -> int -> t"],
["ThreadUnix", "ThreadUnix.html", "send_substring", "ThreadUnix.html#VALsend_substring", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; string -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">Unix.msg_flag</a> list -&gt; int</code>", "Unix.file_descr -> string -> int -> int -> Unix.msg_flag list -> int"],
["Unix", "Unix.html", "send_substring", "Unix.html#VALsend_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as send, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; string -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int</code>", "file_descr -> string -> int -> int -> msg_flag list -> int"],
["UnixLabels", "UnixLabels.html", "send_substring", "UnixLabels.html#VALsend_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte sequence.</p> </div>", "  Same as send, but take the data from a string instead of a byte sequence. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       buf:string -&gt; pos:int -&gt; len:int -&gt; mode:<a href=\"UnixLabels.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int</code>", "file_descr ->       buf:string -> pos:int -> len:int -> mode:msg_flag list -> int"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "send", "Ast_helper.Exp.html#VALsend", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Ast_helper.str -> Parsetree.expression"],
["CamlinternalOO", "CamlinternalOO.html", "send", "CamlinternalOO.html#VALsend", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"CamlinternalOO.html#TYPEtag\">tag</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a></code>", "obj -> tag -> t"],
["Event", "Event.html", "send", "Event.html#VALsend", "<div class=\"info\">  <p><code class=\"code\">send&nbsp;ch&nbsp;v</code> returns the event consisting in sending the value <code class=\"code\">v</code> over the channel <code class=\"code\">ch</code>.</p> </div>", "  send\194\160ch\194\160v returns the event consisting in sending the value v over the channel ch. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEchannel\">channel</a> -&gt; 'a -&gt; unit <a href=\"Event.html#TYPEevent\">event</a></code>", "'a channel -> 'a -> unit event"],
["ThreadUnix", "ThreadUnix.html", "send", "ThreadUnix.html#VALsend", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">Unix.msg_flag</a> list -&gt; int</code>", "Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int"],
["Unix", "Unix.html", "send", "Unix.html#VALsend", "<div class=\"info\">  <p>Send data over a connected socket.</p> </div>", "  Send data over a connected socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int</code>", "file_descr -> bytes -> int -> int -> msg_flag list -> int"],
["UnixLabels", "UnixLabels.html", "send", "UnixLabels.html#VALsend", "<div class=\"info\">  <p>Send data over a connected socket.</p> </div>", "  Send data over a connected socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       buf:bytes -&gt; pos:int -&gt; len:int -&gt; mode:<a href=\"UnixLabels.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int</code>", "file_descr ->       buf:bytes -> pos:int -> len:int -> mode:msg_flag list -> int"],
["Random", "Random.html", "self_init", "Random.html#VALself_init", "<div class=\"info\">  <p>Initialize the generator with a random seed chosen in a system-dependent way.</p> </div>", "  Initialize the generator with a random seed chosen in a system-dependent way. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Thread", "Thread.html", "self", "Thread.html#VALself", "<div class=\"info\">  <p>Return the thread currently executing.</p> </div>", "  Return the thread currently executing. ", "<code class=\"type\">unit -&gt; <a href=\"Thread.html#TYPEt\">t</a></code>", "unit -> t"],
["Event", "Event.html", "select", "Event.html#VALselect", "<div class=\"info\">  <p>``Synchronize'' on an alternative of events.</p> </div>", "  ``Synchronize'' on an alternative of events. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEevent\">event</a> list -&gt; 'a</code>", "'a event list -> 'a"],
["Thread", "Thread.html", "select", "Thread.html#VALselect", "<div class=\"info\">  <p>Suspend the execution of the calling thread until input/output becomes possible on the given Unix file descriptors.</p> </div>", "  Suspend the execution of the calling thread until input/output becomes possible on the given Unix file descriptors. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list -&gt;<br>       <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list -&gt;<br>       <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list -&gt;<br>       float -&gt; <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list * <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list * <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list</code>", "Unix.file_descr list ->       Unix.file_descr list ->       Unix.file_descr list ->       float -> Unix.file_descr list * Unix.file_descr list * Unix.file_descr list"],
["ThreadUnix", "ThreadUnix.html", "select", "ThreadUnix.html#VALselect", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list -&gt;<br>       <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list -&gt;<br>       <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list -&gt;<br>       float -&gt; <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list * <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list * <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> list</code>", "Unix.file_descr list ->       Unix.file_descr list ->       Unix.file_descr list ->       float -> Unix.file_descr list * Unix.file_descr list * Unix.file_descr list"],
["Unix", "Unix.html", "select", "Unix.html#VALselect", "<div class=\"info\">  <p>Wait until some input/output operations become possible on some channels.</p> </div>", "  Wait until some input/output operations become possible on some channels. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> list -&gt;<br>       <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> list -&gt;<br>       <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> list -&gt;<br>       float -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> list * <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> list * <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> list</code>", "file_descr list ->       file_descr list ->       file_descr list ->       float -> file_descr list * file_descr list * file_descr list"],
["UnixLabels", "UnixLabels.html", "select", "UnixLabels.html#VALselect", "<div class=\"info\">  <p>Wait until some input/output operations become possible on some channels.</p> </div>", "  Wait until some input/output operations become possible on some channels. ", "<code class=\"type\">read:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> list -&gt;<br>       write:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> list -&gt;<br>       except:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> list -&gt;<br>       timeout:float -&gt;<br>       <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> list * <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> list *<br>       <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> list</code>", "read:file_descr list ->       write:file_descr list ->       except:file_descr list ->       timeout:float ->       file_descr list * file_descr list *       file_descr list"],
["Pervasives", "Pervasives.html", "seek_out", "Pervasives.html#VALseek_out", "<div class=\"info\">  <p><code class=\"code\">seek_out&nbsp;chan&nbsp;pos</code> sets the current writing position to <code class=\"code\">pos</code> for channel <code class=\"code\">chan</code>.</p> </div>", "  seek_out\194\160chan\194\160pos sets the current writing position to pos for channel chan. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int -&gt; unit</code>", "out_channel -> int -> unit"],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "seek_out", "Pervasives.LargeFile.html#VALseek_out", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int64 -&gt; unit</code>", "out_channel -> int64 -> unit"],
["Pervasives", "Pervasives.html", "seek_in", "Pervasives.html#VALseek_in", "<div class=\"info\">  <p><code class=\"code\">seek_in&nbsp;chan&nbsp;pos</code> sets the current reading position to <code class=\"code\">pos</code> for channel <code class=\"code\">chan</code>.</p> </div>", "  seek_in\194\160chan\194\160pos sets the current reading position to pos for channel chan. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int -&gt; unit</code>", "in_channel -> int -> unit"],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "seek_in", "Pervasives.LargeFile.html#VALseek_in", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int64 -&gt; unit</code>", "in_channel -> int64 -> unit"],
["Hashtbl", "Hashtbl.html", "seeded_hash_param", "Hashtbl.html#VALseeded_hash_param", "<div class=\"info\">  <p>A variant of <a href=\"Hashtbl.html#VALhash_param\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param</code></a> that is further parameterized by an integer seed.</p> </div>", "  A variant of Hashtbl.hash_param that is further parameterized by an integer seed. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; 'a -&gt; int</code>", "int -> int -> int -> 'a -> int"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "seeded_hash_param", "MoreLabels.Hashtbl.html#VALseeded_hash_param", "", "", "<code class=\"type\">int -&gt; int -&gt; int -&gt; 'a -&gt; int</code>", "int -> int -> int -> 'a -> int"],
["Hashtbl", "Hashtbl.html", "seeded_hash", "Hashtbl.html#VALseeded_hash", "<div class=\"info\">  <p>A variant of <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a> that is further parameterized by an integer seed.</p> </div>", "  A variant of Hashtbl.hash that is further parameterized by an integer seed. ", "<code class=\"type\">int -&gt; 'a -&gt; int</code>", "int -> 'a -> int"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "seeded_hash", "MoreLabels.Hashtbl.html#VALseeded_hash", "", "", "<code class=\"type\">int -&gt; 'a -&gt; int</code>", "int -> 'a -> int"],
["Misc", "Misc.html", "search_substring", "Misc.html#VALsearch_substring", "", "", "<code class=\"type\">string -&gt; string -&gt; int -&gt; int</code>", "string -> string -> int -> int"],
["Str", "Str.html", "search_forward", "Str.html#VALsearch_forward", "<div class=\"info\">  <p><code class=\"code\">search_forward&nbsp;r&nbsp;s&nbsp;start</code> searches the string <code class=\"code\">s</code> for a substring matching the regular expression <code class=\"code\">r</code>.</p> </div>", "  search_forward\194\160r\194\160s\194\160start searches the string s for a substring matching the regular expression r. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; int -&gt; int</code>", "regexp -> string -> int -> int"],
["Str", "Str.html", "search_backward", "Str.html#VALsearch_backward", "<div class=\"info\">  <p><code class=\"code\">search_backward&nbsp;r&nbsp;s&nbsp;last</code> searches the string <code class=\"code\">s</code> for a substring matching the regular expression <code class=\"code\">r</code>.</p> </div>", "  search_backward\194\160r\194\160s\194\160last searches the string s for a substring matching the regular expression r. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; int -&gt; int</code>", "regexp -> string -> int -> int"],
["Scanf", "Scanf.html", "scanf", "Scanf.html#VALscanf", "<div class=\"info\">  <p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the predefined formatted input channel <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a> that is connected to <a href=\"Pervasives.html#VALstdin\"><code class=\"code\">stdin</code></a>.</p> </div>", "  Same as Scanf.bscanf, but reads from the predefined formatted input channel Scanf.Scanning.stdin that is connected to stdin. ", "<code class=\"type\">('a, 'b, 'c, 'd) <a href=\"Scanf.html#TYPEscanner\">scanner</a></code>", "('a, 'b, 'c, 'd) scanner"],
["Typemod", "Typemod.html", "save_signature", "Typemod.html#VALsave_signature", "", "", "<code class=\"type\">string -&gt;<br>       Typedtree.signature -&gt;<br>       string -&gt; string -&gt; Env.t -&gt; Cmi_format.cmi_infos -&gt; unit</code>", "string ->       Typedtree.signature ->       string -> string -> Env.t -> Cmi_format.cmi_infos -> unit"],
["Spacetime", "Spacetime.html", "save_event_for_automatic_snapshots", "Spacetime.html#VALsave_event_for_automatic_snapshots", "<div class=\"info\">  <p>Like <a href=\"Spacetime.Series.html#VALsave_event\"><code class=\"code\"><span class=\"constructor\">Spacetime</span>.<span class=\"constructor\">Series</span>.save_event</code></a>, but writes to the automatic snapshot file.</p> </div>", "  Like Spacetime.Series.save_event, but writes to the automatic snapshot file. ", "<code class=\"type\">event_name:string -&gt; unit</code>", "event_name:string -> unit"],
["Spacetime.Series", "Spacetime.Series.html", "save_event", "Spacetime.Series.html#VALsave_event", "<div class=\"info\">  <p><code class=\"code\">save_event</code> writes an event, which is an arbitrary string, into the given series file.</p> </div>", "  save_event writes an event, which is an arbitrary string, into the given series file. ", "<code class=\"type\">?time:float -&gt; <a href=\"Spacetime.Series.html#TYPEt\">t</a> -&gt; event_name:string -&gt; unit</code>", "?time:float -> t -> event_name:string -> unit"],
["Spacetime.Series", "Spacetime.Series.html", "save_and_close", "Spacetime.Series.html#VALsave_and_close", "<div class=\"info\">  <p><code class=\"code\">save_and_close&nbsp;series</code> writes information into <code class=\"code\">series</code> required for interpreting the snapshots that <code class=\"code\">series</code> contains and then closes the <code class=\"code\">series</code> file.</p> </div>", "  save_and_close\194\160series writes information into series required for interpreting the snapshots that series contains and then closes the series file. ", "<code class=\"type\">?time:float -&gt; <a href=\"Spacetime.Series.html#TYPEt\">t</a> -&gt; unit</code>", "?time:float -> t -> unit"],
["Config", "Config.html", "safe_string", "Config.html#VALsafe_string", "", "", "<code class=\"type\">bool</code>", "bool"],
["Sys", "Sys.html", "runtime_warnings_enabled", "Sys.html#VALruntime_warnings_enabled", "<div class=\"info\">  <p>Return whether runtime warnings are currently enabled.</p> </div>", "  Return whether runtime warnings are currently enabled. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Clflags", "Clflags.html", "runtime_variant", "Clflags.html#VALruntime_variant", "", "", "<code class=\"type\">string <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string ref"],
["Sys", "Sys.html", "runtime_variant", "Sys.html#VALruntime_variant", "<div class=\"info\">  <p>Return the name of the runtime variant the program is running on.</p> </div>", "  Return the name of the runtime variant the program is running on. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Sys", "Sys.html", "runtime_parameters", "Sys.html#VALruntime_parameters", "<div class=\"info\">  <p>Return the value of the runtime parameters, in the same format as the contents of the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p> </div>", "  Return the value of the runtime parameters, in the same format as the contents of the OCAMLRUNPARAM environment variable. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Ast_mapper", "Ast_mapper.html", "run_main", "Ast_mapper.html#VALrun_main", "<div class=\"info\">  <p>Entry point to call to implement a standalone -ppx rewriter from a mapper, parametrized by the command line arguments.</p> </div>", "  Entry point to call to implement a standalone -ppx rewriter from a mapper, parametrized by the command line arguments. ", "<code class=\"type\">(string list -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a>) -&gt; unit</code>", "(string list -> mapper) -> unit"],
["CamlinternalOO", "CamlinternalOO.html", "run_initializers_opt", "CamlinternalOO.html#VALrun_initializers_opt", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt;<br>       <a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPEobj\">obj</a></code>", "obj ->       obj -> table -> obj"],
["CamlinternalOO", "CamlinternalOO.html", "run_initializers", "CamlinternalOO.html#VALrun_initializers", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; unit</code>", "obj -> table -> unit"],
["Ccomp", "Ccomp.html", "run_command", "Ccomp.html#VALrun_command", "", "", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Clflags", "Clflags.html", "rounds", "Clflags.html#VALrounds", "", "", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Graphics", "Graphics.html", "rmoveto", "Graphics.html#VALrmoveto", "<div class=\"info\">  <p><code class=\"code\">rmoveto&nbsp;dx&nbsp;dy</code> translates the current point by the given vector.</p> </div>", "  rmoveto\194\160dx\194\160dy translates the current point by the given vector. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Unix", "Unix.html", "rmdir", "Unix.html#VALrmdir", "<div class=\"info\">  <p>Remove an empty directory.</p> </div>", "  Remove an empty directory. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["UnixLabels", "UnixLabels.html", "rmdir", "UnixLabels.html#VALrmdir", "<div class=\"info\">  <p>Remove an empty directory.</p> </div>", "  Remove an empty directory. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Graphics", "Graphics.html", "rlineto", "Graphics.html#VALrlineto", "<div class=\"info\">  <p>Draw a line with endpoints the current point and the current point translated of the given vector, and move the current point to this point.</p> </div>", "  Draw a line with endpoints the current point and the current point translated of the given vector, and move the current point to this point. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Bytes", "Bytes.html", "rindex_opt", "Bytes.html#VALrindex_opt", "<div class=\"info\">  <p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  rindex_opt\194\160s\194\160c returns the index of the last occurrence of byte c in s or None if c does not occur in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int option</code>", "bytes -> char -> int option"],
["BytesLabels", "BytesLabels.html", "rindex_opt", "BytesLabels.html#VALrindex_opt", "<div class=\"info\">  <p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  rindex_opt\194\160s\194\160c returns the index of the last occurrence of byte c in s or None if c does not occur in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int option</code>", "bytes -> char -> int option"],
["StringLabels", "StringLabels.html", "rindex_opt", "StringLabels.html#VALrindex_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  String.rindex_opt\194\160s\194\160c returns the index of the last occurrence of character c in string s, or None if c does not occur in s. ", "<code class=\"type\">string -&gt; char -&gt; int option</code>", "string -> char -> int option"],
["String", "String.html", "rindex_opt", "String.html#VALrindex_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  String.rindex_opt\194\160s\194\160c returns the index of the last occurrence of character c in string s, or None if c does not occur in s. ", "<code class=\"type\">string -&gt; char -&gt; int option</code>", "string -> char -> int option"],
["Bytes", "Bytes.html", "rindex_from_opt", "Bytes.html#VALrindex_from_opt", "<div class=\"info\">  <p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  rindex_from_opt\194\160s\194\160i\194\160c returns the index of the last occurrence of byte c in s before position i+1 or None if c does not occur in s before position i+1. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int option</code>", "bytes -> int -> char -> int option"],
["BytesLabels", "BytesLabels.html", "rindex_from_opt", "BytesLabels.html#VALrindex_from_opt", "<div class=\"info\">  <p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  rindex_from_opt\194\160s\194\160i\194\160c returns the index of the last occurrence of byte c in s before position i+1 or None if c does not occur in s before position i+1. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int option</code>", "bytes -> int -> char -> int option"],
["StringLabels", "StringLabels.html", "rindex_from_opt", "StringLabels.html#VALrindex_from_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  String.rindex_from_opt\194\160s\194\160i\194\160c returns the index of the last occurrence of character c in string s before position i+1 or None if c does not occur in s before position i+1. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int option</code>", "string -> int -> char -> int option"],
["String", "String.html", "rindex_from_opt", "String.html#VALrindex_from_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  String.rindex_from_opt\194\160s\194\160i\194\160c returns the index of the last occurrence of character c in string s before position i+1 or None if c does not occur in s before position i+1. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int option</code>", "string -> int -> char -> int option"],
["Bytes", "Bytes.html", "rindex_from", "Bytes.html#VALrindex_from", "<div class=\"info\">  <p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  rindex_from\194\160s\194\160i\194\160c returns the index of the last occurrence of byte c in s before position i+1. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int</code>", "bytes -> int -> char -> int"],
["BytesLabels", "BytesLabels.html", "rindex_from", "BytesLabels.html#VALrindex_from", "<div class=\"info\">  <p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  rindex_from\194\160s\194\160i\194\160c returns the index of the last occurrence of byte c in s before position i+1. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int</code>", "bytes -> int -> char -> int"],
["StringLabels", "StringLabels.html", "rindex_from", "StringLabels.html#VALrindex_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  String.rindex_from\194\160s\194\160i\194\160c returns the index of the last occurrence of character c in string s before position i+1. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int</code>", "string -> int -> char -> int"],
["String", "String.html", "rindex_from", "String.html#VALrindex_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p> </div>", "  String.rindex_from\194\160s\194\160i\194\160c returns the index of the last occurrence of character c in string s before position i+1. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int</code>", "string -> int -> char -> int"],
["Bytes", "Bytes.html", "rindex", "Bytes.html#VALrindex", "<div class=\"info\">  <p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>.</p> </div>", "  rindex\194\160s\194\160c returns the index of the last occurrence of byte c in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int</code>", "bytes -> char -> int"],
["BytesLabels", "BytesLabels.html", "rindex", "BytesLabels.html#VALrindex", "<div class=\"info\">  <p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>.</p> </div>", "  rindex\194\160s\194\160c returns the index of the last occurrence of byte c in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int</code>", "bytes -> char -> int"],
["StringLabels", "StringLabels.html", "rindex", "StringLabels.html#VALrindex", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p> </div>", "  String.rindex\194\160s\194\160c returns the index of the last occurrence of character c in string s. ", "<code class=\"type\">string -&gt; char -&gt; int</code>", "string -> char -> int"],
["String", "String.html", "rindex", "String.html#VALrindex", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p> </div>", "  String.rindex\194\160s\194\160c returns the index of the last occurrence of character c in string s. ", "<code class=\"type\">string -&gt; char -&gt; int</code>", "string -> char -> int"],
["Docstrings", "Docstrings.html", "rhs_text_lazy", "Docstrings.html#VALrhs_text_lazy", "", "", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a> <a href=\"Lazy.html#TYPEt\">Lazy.t</a></code>", "int -> text Lazy.t"],
["Docstrings", "Docstrings.html", "rhs_text", "Docstrings.html#VALrhs_text", "<div class=\"info\">  <p>Fetch the text preceding the symbol at the given position.</p> </div>", "  Fetch the text preceding the symbol at the given position. ", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Parsing", "Parsing.html", "rhs_start_pos", "Parsing.html#VALrhs_start_pos", "<div class=\"info\">  <p>Same as <code class=\"code\">rhs_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p> </div>", "  Same as rhs_start, but return a position instead of an offset. ", "<code class=\"type\">int -&gt; <a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>", "int -> Lexing.position"],
["Parsing", "Parsing.html", "rhs_start", "Parsing.html#VALrhs_start", "<div class=\"info\">  <p>Same as <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a>, but return the offset of the string matching the <code class=\"code\">n</code>th item on the right-hand side of the rule, where <code class=\"code\">n</code> is the integer parameter to <code class=\"code\">rhs_start</code> and <code class=\"code\">rhs_end</code>.</p> </div>", "  Same as Parsing.symbol_start and Parsing.symbol_end, but return the offset of the string matching the nth item on the right-hand side of the rule, where n is the integer parameter to rhs_start and rhs_end. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Docstrings", "Docstrings.html", "rhs_pre_extra_text", "Docstrings.html#VALrhs_pre_extra_text", "<div class=\"info\">  <p>Fetch additional text preceding the symbol at the given position</p> </div>", "  Fetch additional text preceding the symbol at the given position ", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Docstrings", "Docstrings.html", "rhs_post_text", "Docstrings.html#VALrhs_post_text", "<div class=\"info\">  <p>Fetch text following the symbol at the given position</p> </div>", "  Fetch text following the symbol at the given position ", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Docstrings", "Docstrings.html", "rhs_post_extra_text", "Docstrings.html#VALrhs_post_extra_text", "<div class=\"info\">  <p>Fetch additional text following the symbol at the given position</p> </div>", "  Fetch additional text following the symbol at the given position ", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEtext\">text</a></code>", "int -> text"],
["Location", "Location.html", "rhs_loc", "Location.html#VALrhs_loc", "<div class=\"info\">  <p><code class=\"code\">rhs_loc&nbsp;n</code> returns the location of the symbol at position <code class=\"code\">n</code>, starting at 1, in the current parser rule.</p> </div>", "  rhs_loc\194\160n returns the location of the symbol at position n, starting at 1, in the current parser rule. ", "<code class=\"type\">int -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "int -> t"],
["Docstrings", "Docstrings.html", "rhs_info", "Docstrings.html#VALrhs_info", "<div class=\"info\">  <p>Fetch the field info following the symbol at a given position.</p> </div>", "  Fetch the field info following the symbol at a given position. ", "<code class=\"type\">int -&gt; <a href=\"Docstrings.html#TYPEinfo\">info</a></code>", "int -> info"],
["Parsing", "Parsing.html", "rhs_end_pos", "Parsing.html#VALrhs_end_pos", "<div class=\"info\">  <p>Same as <code class=\"code\">rhs_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p> </div>", "  Same as rhs_end, but return a position instead of an offset. ", "<code class=\"type\">int -&gt; <a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>", "int -> Lexing.position"],
["Parsing", "Parsing.html", "rhs_end", "Parsing.html#VALrhs_end", "<div class=\"info\">  <p>See <a href=\"Parsing.html#VALrhs_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.rhs_start</code></a>.</p> </div>", "  See Parsing.rhs_start. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Docstrings", "Docstrings.html", "rhs_docs_lazy", "Docstrings.html#VALrhs_docs_lazy", "", "", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a> <a href=\"Lazy.html#TYPEt\">Lazy.t</a></code>", "int -> int -> docs Lazy.t"],
["Docstrings", "Docstrings.html", "rhs_docs", "Docstrings.html#VALrhs_docs", "<div class=\"info\">  <p>Fetch the item documentation for the symbols between two positions.</p> </div>", "  Fetch the item documentation for the symbols between two positions. ", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Docstrings.html#TYPEdocs\">docs</a></code>", "int -> int -> docs"],
["Graphics", "Graphics.html", "rgb", "Graphics.html#VALrgb", "<div class=\"info\">  <p><code class=\"code\">rgb&nbsp;r&nbsp;g&nbsp;b</code> returns the integer encoding the color with red component <code class=\"code\">r</code>, green component <code class=\"code\">g</code>, and blue component <code class=\"code\">b</code>.</p> </div>", "  rgb\194\160r\194\160g\194\160b returns the integer encoding the color with red component r, green component g, and blue component b. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; <a href=\"Graphics.html#TYPEcolor\">color</a></code>", "int -> int -> int -> color"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "rewrite_opt", "Build_path_prefix_map.html#VALrewrite_opt", "<div class=\"info\">  <p><code class=\"code\">rewrite_opt&nbsp;map&nbsp;path</code> tries to find a source in <code class=\"code\">map</code> that is a prefix of the input <code class=\"code\">path</code>.</p> </div>", "  rewrite_opt\194\160map\194\160path tries to find a source in map that is a prefix of the input path. ", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEmap\">map</a> -&gt;<br>       <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> -&gt; <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> option</code>", "map ->       path -> path option"],
["Location", "Location.html", "rewrite_absolute_path", "Location.html#VALrewrite_absolute_path", "<div class=\"info\">  <p>rewrite absolute path to honor the BUILD_PATH_PREFIX_MAP variable (https://reproducible-builds.org/specs/build-path-prefix-map/) if it is set.</p> </div>", "  rewrite absolute path to honor the BUILD_PATH_PREFIX_MAP variable (https://reproducible-builds.org/specs/build-path-prefix-map/) if it is set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "rewrite", "Build_path_prefix_map.html#VALrewrite", "", "", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEmap\">map</a> -&gt;<br>       <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a> -&gt; <a href=\"Build_path_prefix_map.html#TYPEpath\">path</a></code>", "map ->       path -> path"],
["Unix", "Unix.html", "rewinddir", "Unix.html#VALrewinddir", "<div class=\"info\">  <p>Reposition the descriptor to the beginning of the directory</p> </div>", "  Reposition the descriptor to the beginning of the directory ", "<code class=\"type\"><a href=\"Unix.html#TYPEdir_handle\">dir_handle</a> -&gt; unit</code>", "dir_handle -> unit"],
["UnixLabels", "UnixLabels.html", "rewinddir", "UnixLabels.html#VALrewinddir", "<div class=\"info\">  <p>Reposition the descriptor to the beginning of the directory</p> </div>", "  Reposition the descriptor to the beginning of the directory ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEdir_handle\">dir_handle</a> -&gt; unit</code>", "dir_handle -> unit"],
["Misc", "Misc.html", "rev_split_words", "Misc.html#VALrev_split_words", "", "", "<code class=\"type\">string -&gt; string list</code>", "string -> string list"],
["List", "List.html", "rev_map2", "List.html#VALrev_map2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and more efficient.</p> </div>", "  List.rev_map2\194\160f\194\160l1\194\160l2 gives the same result as List.rev\194\160(List.map2\194\160f\194\160l1\194\160l2), but is tail-recursive and more efficient. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'c) -&gt; 'a list -&gt; 'b list -&gt; 'c list</code>", "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list"],
["ListLabels", "ListLabels.html", "rev_map2", "ListLabels.html#VALrev_map2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and more efficient.</p> </div>", "  List.rev_map2\194\160f\194\160l1\194\160l2 gives the same result as List.rev\194\160(List.map2\194\160f\194\160l1\194\160l2), but is tail-recursive and more efficient. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'c) -&gt; 'a list -&gt; 'b list -&gt; 'c list</code>", "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list"],
["List", "List.html", "rev_map", "List.html#VALrev_map", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and more efficient.</p> </div>", "  List.rev_map\194\160f\194\160l gives the same result as List.rev\194\160(List.map\194\160f\194\160l), but is tail-recursive and more efficient. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "('a -> 'b) -> 'a list -> 'b list"],
["ListLabels", "ListLabels.html", "rev_map", "ListLabels.html#VALrev_map", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and more efficient.</p> </div>", "  List.rev_map\194\160f\194\160l gives the same result as List.rev\194\160(List.map\194\160f\194\160l), but is tail-recursive and more efficient. ", "<code class=\"type\">f:('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "f:('a -> 'b) -> 'a list -> 'b list"],
["CamlinternalFormat", "CamlinternalFormat.html", "rev_char_set", "CamlinternalFormat.html#VALrev_char_set", "", "", "<code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEchar_set\">CamlinternalFormatBasics.char_set</a> -&gt; <a href=\"CamlinternalFormatBasics.html#TYPEchar_set\">CamlinternalFormatBasics.char_set</a></code>", "CamlinternalFormatBasics.char_set -> CamlinternalFormatBasics.char_set"],
["List", "List.html", "rev_append", "List.html#VALrev_append", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it to <code class=\"code\">l2</code>.</p> </div>", "  List.rev_append\194\160l1\194\160l2 reverses l1 and concatenates it to l2. ", "<code class=\"type\">'a list -&gt; 'a list -&gt; 'a list</code>", "'a list -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "rev_append", "ListLabels.html#VALrev_append", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it with <code class=\"code\">l2</code>.</p> </div>", "  List.rev_append\194\160l1\194\160l2 reverses l1 and concatenates it with l2. ", "<code class=\"type\">'a list -&gt; 'a list -&gt; 'a list</code>", "'a list -> 'a list -> 'a list"],
["List", "List.html", "rev", "List.html#VALrev", "<div class=\"info\">  <p>List reversal.</p> </div>", "  List reversal. ", "<code class=\"type\">'a list -&gt; 'a list</code>", "'a list -> 'a list"],
["ListLabels", "ListLabels.html", "rev", "ListLabels.html#VALrev", "<div class=\"info\">  <p>List reversal.</p> </div>", "  List reversal. ", "<code class=\"type\">'a list -&gt; 'a list</code>", "'a list -> 'a list"],
["Seq", "Seq.html", "return", "Seq.html#VALreturn", "<div class=\"info\">  <p>The singleton sequence containing only the given element.</p> </div>", "  The singleton sequence containing only the given element. ", "<code class=\"type\">'a -&gt; 'a <a href=\"Seq.html#TYPEt\">t</a></code>", "'a -> 'a t"],
["Terminfo", "Terminfo.html", "resume", "Terminfo.html#VALresume", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int -&gt; unit</code>", "out_channel -> int -> unit"],
["Warnings", "Warnings.html", "restore", "Warnings.html#VALrestore", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEstate\">state</a> -&gt; unit</code>", "state -> unit"],
["Graphics", "Graphics.html", "resize_window", "Graphics.html#VALresize_window", "<div class=\"info\">  <p>Resize and erase the graphics window.</p> </div>", "  Resize and erase the graphics window. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Bigarray", "Bigarray.html", "reshape_3", "Bigarray.html#VALreshape_3", "<div class=\"info\">  <p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to three-dimensional arrays.</p> </div>", "  Specialized version of Bigarray.reshape for reshaping to three-dimensional arrays. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt;<br>       int -&gt; int -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">Array3.t</a></code>", "('a, 'b, 'c) Genarray.t ->       int -> int -> int -> ('a, 'b, 'c) Array3.t"],
["Bigarray", "Bigarray.html", "reshape_2", "Bigarray.html#VALreshape_2", "<div class=\"info\">  <p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to two-dimensional arrays.</p> </div>", "  Specialized version of Bigarray.reshape for reshaping to two-dimensional arrays. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt;<br>       int -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">Array2.t</a></code>", "('a, 'b, 'c) Genarray.t ->       int -> int -> ('a, 'b, 'c) Array2.t"],
["Bigarray", "Bigarray.html", "reshape_1", "Bigarray.html#VALreshape_1", "<div class=\"info\">  <p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to one-dimensional arrays.</p> </div>", "  Specialized version of Bigarray.reshape for reshaping to one-dimensional arrays. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">Array1.t</a></code>", "('a, 'b, 'c) Genarray.t -> int -> ('a, 'b, 'c) Array1.t"],
["Bigarray", "Bigarray.html", "reshape_0", "Bigarray.html#VALreshape_0", "<div class=\"info\">  <p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to zero-dimensional arrays.</p> </div>", "  Specialized version of Bigarray.reshape for reshaping to zero-dimensional arrays. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">Array0.t</a></code>", "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array0.t"],
["Bigarray", "Bigarray.html", "reshape", "Bigarray.html#VALreshape", "<div class=\"info\">  <p><code class=\"code\">reshape&nbsp;b&nbsp;[|d1;...;dN|]</code> converts the big array <code class=\"code\">b</code> to a <code class=\"code\"><span class=\"constructor\">N</span></code>-dimensional array of dimensions <code class=\"code\">d1</code>...</p> </div>", "  reshape\194\160b\194\160[|d1;...;dN|] converts the big array b to a N-dimensional array of dimensions d1... ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt;<br>       int array -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a></code>", "('a, 'b, 'c) Genarray.t ->       int array -> ('a, 'b, 'c) Genarray.t"],
["Warnings", "Warnings.html", "reset_fatal", "Warnings.html#VALreset_fatal", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "reset_base_overrides", "Arg_helper.Make.html#VALreset_base_overrides", "", "", "<code class=\"type\"><a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "parsed -> parsed"],
["Clflags", "Clflags.html", "reset_arguments", "Clflags.html#VALreset_arguments", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Buffer", "Buffer.html", "reset", "Buffer.html#VALreset", "<div class=\"info\">  <p>Empty the buffer and deallocate the internal byte sequence holding the buffer contents, replacing it with the initial internal byte sequence of length <code class=\"code\">n</code> that was allocated by <a href=\"Buffer.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Buffer</span>.create</code></a> <code class=\"code\">n</code>.</p> </div>", "  Empty the buffer and deallocate the internal byte sequence holding the buffer contents, replacing it with the initial internal byte sequence of length n that was allocated by Buffer.create n. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Hashtbl", "Hashtbl.html", "reset", "Hashtbl.html#VALreset", "<div class=\"info\">  <p>Empty a hash table and shrink the size of the bucket table to its initial size.</p> </div>", "  Empty a hash table and shrink the size of the bucket table to its initial size. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b) t -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "reset", "Hashtbl.S.html#VALreset", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "reset", "Hashtbl.SeededS.html#VALreset", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Location", "Location.html", "reset", "Location.html#VALreset", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "reset", "MoreLabels.Hashtbl.html#VALreset", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b) t -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "reset", "MoreLabels.Hashtbl.S.html#VALreset", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "reset", "MoreLabels.Hashtbl.SeededS.html#VALreset", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Profile", "Profile.html", "reset", "Profile.html#VALreset", "<div class=\"info\">  <p>erase all recorded profile information</p> </div>", "  erase all recorded profile information ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Obj", "Obj.html", "repr", "Obj.html#VALrepr", "", "", "<code class=\"type\">'a -&gt; <a href=\"Obj.html#TYPEt\">t</a></code>", "'a -> t"],
["Targetint", "Targetint.html", "repr", "Targetint.html#VALrepr", "<div class=\"info\">  <p>The concrete representation of a native integer.</p> </div>", "  The concrete representation of a native integer. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPErepr\">repr</a></code>", "t -> repr"],
["Location", "Location.html", "report_exception", "Location.html#VALreport_exception", "<div class=\"info\">  <p>Reraise the exception if it is unknown.</p> </div>", "  Reraise the exception if it is unknown. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; exn -&gt; unit</code>", "Format.formatter -> exn -> unit"],
["Attr_helper", "Attr_helper.html", "report_error", "Attr_helper.html#VALreport_error", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Attr_helper.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Lexer", "Lexer.html", "report_error", "Lexer.html#VALreport_error", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Lexer.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Location", "Location.html", "report_error", "Location.html#VALreport_error", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Pparse", "Pparse.html", "report_error", "Pparse.html#VALreport_error", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Pparse.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Syntaxerr", "Syntaxerr.html", "report_error", "Syntaxerr.html#VALreport_error", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Syntaxerr.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Typemod", "Typemod.html", "report_error", "Typemod.html#VALreport_error", "", "", "<code class=\"type\">Env.t -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Typemod.html#TYPEerror\">error</a> -&gt; unit</code>", "Env.t -> Format.formatter -> error -> unit"],
["Warnings", "Warnings.html", "report", "Warnings.html#VALreport", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEt\">t</a> -&gt; [ `Active of <a href=\"Warnings.html#TYPEreporting_information\">reporting_information</a> | `Inactive ]</code>", "t -> [ `Active of reporting_information | `Inactive ]"],
["Misc", "Misc.html", "replicate_list", "Misc.html#VALreplicate_list", "", "", "<code class=\"type\">'a -&gt; int -&gt; 'a list</code>", "'a -> int -> 'a list"],
["Misc", "Misc.html", "replace_substring", "Misc.html#VALreplace_substring", "", "", "<code class=\"type\">before:string -&gt; after:string -&gt; string -&gt; string</code>", "before:string -> after:string -> string -> string"],
["Hashtbl", "Hashtbl.html", "replace_seq", "Hashtbl.html#VALreplace_seq", "<div class=\"info\">  <p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALreplace\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace</code></a></p> </div>", "  Add the given bindings to the table, using Hashtbl.replace ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; ('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "('a, 'b) t -> ('a * 'b) Seq.t -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "replace_seq", "Hashtbl.S.html#VALreplace_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; (<a href=\"Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> (key * 'a) Seq.t -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "replace_seq", "Hashtbl.SeededS.html#VALreplace_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; (<a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> (key * 'a) Seq.t -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "replace_seq", "MoreLabels.Hashtbl.html#VALreplace_seq", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; ('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "('a, 'b) t -> ('a * 'b) Seq.t -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "replace_seq", "MoreLabels.Hashtbl.S.html#VALreplace_seq", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> (key * 'a) Seq.t -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "replace_seq", "MoreLabels.Hashtbl.SeededS.html#VALreplace_seq", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt;<br>       (<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t ->       (key * 'a) Seq.t -> unit"],
["Str", "Str.html", "replace_matched", "Str.html#VALreplace_matched", "<div class=\"info\">  <p><code class=\"code\">replace_matched&nbsp;repl&nbsp;s</code> returns the replacement text <code class=\"code\">repl</code> in which <code class=\"code\">\\1</code>, <code class=\"code\">\\2</code>, etc.</p> </div>", "  replace_matched\194\160repl\194\160s returns the replacement text repl in which \\1, \\2, etc. ", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["Str", "Str.html", "replace_first", "Str.html#VALreplace_first", "<div class=\"info\">  <p>Same as <a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a>, except that only the first substring matching the regular expression is replaced.</p> </div>", "  Same as Str.global_replace, except that only the first substring matching the regular expression is replaced. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; string -&gt; string</code>", "regexp -> string -> string -> string"],
["Hashtbl", "Hashtbl.html", "replace", "Hashtbl.html#VALreplace", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace&nbsp;tbl&nbsp;x&nbsp;y</code> replaces the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code> by a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>.</p> </div>", "  Hashtbl.replace\194\160tbl\194\160x\194\160y replaces the current binding of x in tbl by a binding of x to y. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b -&gt; unit</code>", "('a, 'b) t -> 'a -> 'b -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "replace", "Hashtbl.S.html#VALreplace", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; unit</code>", "'a t -> key -> 'a -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "replace", "Hashtbl.SeededS.html#VALreplace", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a -&gt; unit</code>", "'a t -> key -> 'a -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "replace", "MoreLabels.Hashtbl.html#VALreplace", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; key:'a -&gt; data:'b -&gt; unit</code>", "('a, 'b) t -> key:'a -> data:'b -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "replace", "MoreLabels.Hashtbl.S.html#VALreplace", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; key:<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; data:'a -&gt; unit</code>", "'a t -> key:key -> data:'a -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "replace", "MoreLabels.Hashtbl.SeededS.html#VALreplace", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt;<br>       key:<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; data:'a -&gt; unit</code>", "'a t ->       key:key -> data:'a -> unit"],
["Uchar", "Uchar.html", "rep", "Uchar.html#VALrep", "<div class=\"info\">  <p><code class=\"code\">rep</code> is U+FFFD, the <a href=\"http://unicode.org/glossary/#replacement_character\">replacement</a> character.</p> </div>", "  rep is U+FFFD, the replacement character. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a></code>", "t"],
["Identifiable.Map", "Identifiable.Map.html", "rename", "Identifiable.Map.html#VALrename", "", "", "<code class=\"type\">key t -&gt; key -&gt; key</code>", "key t -> key -> key"],
["Sys", "Sys.html", "rename", "Sys.html#VALrename", "<div class=\"info\">  <p>Rename a file.</p> </div>", "  Rename a file. ", "<code class=\"type\">string -&gt; string -&gt; unit</code>", "string -> string -> unit"],
["Unix", "Unix.html", "rename", "Unix.html#VALrename", "<div class=\"info\">  <p><code class=\"code\">rename&nbsp;old&nbsp;<span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>, moving it between directories if needed.</p> </div>", "  rename\194\160old\194\160new changes the name of a file from old to new, moving it between directories if needed. ", "<code class=\"type\">string -&gt; string -&gt; unit</code>", "string -> string -> unit"],
["UnixLabels", "UnixLabels.html", "rename", "UnixLabels.html#VALrename", "<div class=\"info\">  <p><code class=\"code\">rename&nbsp;old&nbsp;<span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>.</p> </div>", "  rename\194\160old\194\160new changes the name of a file from old to new. ", "<code class=\"type\">src:string -&gt; dst:string -&gt; unit</code>", "src:string -> dst:string -> unit"],
["Clflags", "Clflags.html", "remove_unused_arguments", "Clflags.html#VALremove_unused_arguments", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Pparse", "Pparse.html", "remove_preprocessed", "Pparse.html#VALremove_preprocessed", "", "", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Misc", "Misc.html", "remove_file", "Misc.html#VALremove_file", "", "", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Filename", "Filename.html", "remove_extension", "Filename.html#VALremove_extension", "<div class=\"info\">  <p>Return the given file name without its extension, as defined in <a href=\"Filename.html#VALextension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.extension</code></a>.</p> </div>", "  Return the given file name without its extension, as defined in Filename.extension. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["List", "List.html", "remove_assq", "List.html#VALremove_assq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.remove_assoc, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; ('a * 'b) list</code>", "'a -> ('a * 'b) list -> ('a * 'b) list"],
["ListLabels", "ListLabels.html", "remove_assq", "ListLabels.html#VALremove_assq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.remove_assoc, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; ('a * 'b) list</code>", "'a -> ('a * 'b) list -> ('a * 'b) list"],
["List", "List.html", "remove_assoc", "List.html#VALremove_assoc", "<div class=\"info\">  <p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.</p> </div>", "  remove_assoc\194\160a\194\160l returns the list of pairs l without the first pair with key a, if any. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; ('a * 'b) list</code>", "'a -> ('a * 'b) list -> ('a * 'b) list"],
["ListLabels", "ListLabels.html", "remove_assoc", "ListLabels.html#VALremove_assoc", "<div class=\"info\">  <p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.</p> </div>", "  remove_assoc\194\160a\194\160l returns the list of pairs l without the first pair with key a, if any. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; ('a * 'b) list</code>", "'a -> ('a * 'b) list -> ('a * 'b) list"],
["Set.S", "Set.S.html", "remove", "Set.S.html#VALremove", "<div class=\"info\">  <p><code class=\"code\">remove&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>, except <code class=\"code\">x</code>.</p> </div>", "  remove\194\160x\194\160s returns a set containing all elements of s, except x. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "elt -> t -> t"],
["Map.S", "Map.S.html", "remove", "Map.S.html#VALremove", "<div class=\"info\">  <p><code class=\"code\">remove&nbsp;x&nbsp;m</code> returns a map containing the same bindings as <code class=\"code\">m</code>, except for <code class=\"code\">x</code> which is unbound in the returned map.</p> </div>", "  remove\194\160x\194\160m returns a map containing the same bindings as m, except for x which is unbound in the returned map. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "key -> 'a t -> 'a t"],
["Hashtbl", "Hashtbl.html", "remove", "Hashtbl.html#VALremove", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove&nbsp;tbl&nbsp;x</code> removes the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>, restoring the previous binding if it exists.</p> </div>", "  Hashtbl.remove\194\160tbl\194\160x removes the current binding of x in tbl, restoring the previous binding if it exists. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b) t -> 'a -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "remove", "Hashtbl.S.html#VALremove", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; unit</code>", "'a t -> key -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "remove", "Hashtbl.SeededS.html#VALremove", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; unit</code>", "'a t -> key -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "remove", "MoreLabels.Hashtbl.html#VALremove", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b) t -> 'a -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "remove", "MoreLabels.Hashtbl.S.html#VALremove", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; unit</code>", "'a t -> key -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "remove", "MoreLabels.Hashtbl.SeededS.html#VALremove", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; unit</code>", "'a t -> key -> unit"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "remove", "MoreLabels.Map.S.html#VALremove", "", "", "<code class=\"type\"><a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "key -> 'a t -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "remove", "MoreLabels.Set.S.html#VALremove", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "elt -> t -> t"],
["Sys", "Sys.html", "remove", "Sys.html#VALremove", "<div class=\"info\">  <p>Remove the given file name from the file system.</p> </div>", "  Remove the given file name from the file system. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Tbl", "Tbl.html", "remove", "Tbl.html#VALremove", "", "", "<code class=\"type\">'k -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a></code>", "'k -> ('k, 'v) t -> ('k, 'v) t"],
["Weak.S", "Weak.S.html", "remove", "Weak.S.html#VALremove", "<div class=\"info\">  <p><code class=\"code\">remove&nbsp;t&nbsp;x</code> removes from <code class=\"code\">t</code> one instance of <code class=\"code\">x</code>.</p> </div>", "  remove\194\160t\194\160x removes from t one instance of x. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; unit</code>", "t -> data -> unit"],
["Graphics", "Graphics.html", "remember_mode", "Graphics.html#VALremember_mode", "<div class=\"info\">  <p>Set remember mode on or off.</p> </div>", "  Set remember mode on or off. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Float", "Float.html", "rem", "Float.html#VALrem", "<div class=\"info\">  <p><code class=\"code\">rem&nbsp;a&nbsp;b</code> returns the remainder of <code class=\"code\">a</code> with respect to <code class=\"code\">b</code>.</p> </div>", "  rem\194\160a\194\160b returns the remainder of a with respect to b. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Int32", "Int32.html", "rem", "Int32.html#VALrem", "<div class=\"info\">  <p>Integer remainder.</p> </div>", "  Integer remainder. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "rem", "Int64.html#VALrem", "<div class=\"info\">  <p>Integer remainder.</p> </div>", "  Integer remainder. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["Nativeint", "Nativeint.html", "rem", "Nativeint.html#VALrem", "<div class=\"info\">  <p>Integer remainder.</p> </div>", "  Integer remainder. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["Targetint", "Targetint.html", "rem", "Targetint.html#VALrem", "<div class=\"info\">  <p>Integer remainder.</p> </div>", "  Integer remainder. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Printexc", "Printexc.html", "register_printer", "Printexc.html#VALregister_printer", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.register_printer&nbsp;fn</code> registers <code class=\"code\">fn</code> as an exception printer.</p> </div>", "  Printexc.register_printer\194\160fn registers fn as an exception printer. ", "<code class=\"type\">(exn -&gt; string option) -&gt; unit</code>", "(exn -> string option) -> unit"],
["Ast_mapper", "Ast_mapper.html", "register_function", "Ast_mapper.html#VALregister_function", "", "", "<code class=\"type\">(string -&gt; (string list -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a>) -&gt; unit) <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "(string -> (string list -> mapper) -> unit) ref"],
["Callback", "Callback.html", "register_exception", "Callback.html#VALregister_exception", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Callback</span>.register_exception&nbsp;n&nbsp;exn</code> registers the exception contained in the exception value <code class=\"code\">exn</code> under the name <code class=\"code\">n</code>.</p> </div>", "  Callback.register_exception\194\160n\194\160exn registers the exception contained in the exception value exn under the name n. ", "<code class=\"type\">string -&gt; exn -&gt; unit</code>", "string -> exn -> unit"],
["Location", "Location.html", "register_error_of_exn", "Location.html#VALregister_error_of_exn", "<div class=\"info\">  <p>Each compiler module which defines a custom type of exception which can surface as a user-visible error should register a \"printer\" for this exception using <code class=\"code\">register_error_of_exn</code>.</p> </div>", "  Each compiler module which defines a custom type of exception which can surface as a user-visible error should register a \"printer\" for this exception using register_error_of_exn. ", "<code class=\"type\">(exn -&gt; <a href=\"Location.html#TYPEerror\">error</a> option) -&gt; unit</code>", "(exn -> error option) -> unit"],
["Ast_mapper", "Ast_mapper.html", "register", "Ast_mapper.html#VALregister", "<div class=\"info\">  <p>Apply the <code class=\"code\">register_function</code>.</p> </div>", "  Apply the register_function. ", "<code class=\"type\">string -&gt; (string list -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a>) -&gt; unit</code>", "string -> (string list -> mapper) -> unit"],
["Callback", "Callback.html", "register", "Callback.html#VALregister", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Callback</span>.register&nbsp;n&nbsp;v</code> registers the value <code class=\"code\">v</code> under the name <code class=\"code\">n</code>.</p> </div>", "  Callback.register\194\160n\194\160v registers the value v under the name n. ", "<code class=\"type\">string -&gt; 'a -&gt; unit</code>", "string -> 'a -> unit"],
["Docstrings", "Docstrings.html", "register", "Docstrings.html#VALregister", "<div class=\"info\">  <p>Register a docstring</p> </div>", "  Register a docstring ", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; unit</code>", "docstring -> unit"],
["Str", "Str.html", "regexp_string_case_fold", "Str.html#VALregexp_string_case_fold", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string_case_fold</code> is similar to <a href=\"Str.html#VALregexp_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string</code></a>, but the regexp matches in a case-insensitive way.</p> </div>", "  Str.regexp_string_case_fold is similar to Str.regexp_string, but the regexp matches in a case-insensitive way. ", "<code class=\"type\">string -&gt; <a href=\"Str.html#TYPEregexp\">regexp</a></code>", "string -> regexp"],
["Str", "Str.html", "regexp_string", "Str.html#VALregexp_string", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string&nbsp;s</code> returns a regular expression that matches exactly <code class=\"code\">s</code> and nothing else.</p> </div>", "  Str.regexp_string\194\160s returns a regular expression that matches exactly s and nothing else. ", "<code class=\"type\">string -&gt; <a href=\"Str.html#TYPEregexp\">regexp</a></code>", "string -> regexp"],
["Str", "Str.html", "regexp_case_fold", "Str.html#VALregexp_case_fold", "<div class=\"info\">  <p>Same as <code class=\"code\">regexp</code>, but the compiled expression will match text in a case-insensitive way: uppercase and lowercase letters will be considered equivalent.</p> </div>", "  Same as regexp, but the compiled expression will match text in a case-insensitive way: uppercase and lowercase letters will be considered equivalent. ", "<code class=\"type\">string -&gt; <a href=\"Str.html#TYPEregexp\">regexp</a></code>", "string -> regexp"],
["Str", "Str.html", "regexp", "Str.html#VALregexp", "<div class=\"info\">  <p>Compile a regular expression.</p> </div>", "  Compile a regular expression. ", "<code class=\"type\">string -&gt; <a href=\"Str.html#TYPEregexp\">regexp</a></code>", "string -> regexp"],
["Pervasives", "Pervasives.html", "ref", "Pervasives.html#VALref", "<div class=\"info\">  <p>Return a fresh reference containing the given value.</p> </div>", "  Return a fresh reference containing the given value. ", "<code class=\"type\">'a -&gt; 'a <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "'a -> 'a ref"],
["Graphics", "Graphics.html", "red", "Graphics.html#VALred", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["ThreadUnix", "ThreadUnix.html", "recvfrom", "ThreadUnix.html#VALrecvfrom", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt;<br>       bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">Unix.msg_flag</a> list -&gt; int * <a href=\"Unix.html#TYPEsockaddr\">Unix.sockaddr</a></code>", "Unix.file_descr ->       bytes -> int -> int -> Unix.msg_flag list -> int * Unix.sockaddr"],
["Unix", "Unix.html", "recvfrom", "Unix.html#VALrecvfrom", "<div class=\"info\">  <p>Receive data from an unconnected socket.</p> </div>", "  Receive data from an unconnected socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int * <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a></code>", "file_descr ->       bytes -> int -> int -> msg_flag list -> int * sockaddr"],
["UnixLabels", "UnixLabels.html", "recvfrom", "UnixLabels.html#VALrecvfrom", "<div class=\"info\">  <p>Receive data from an unconnected socket.</p> </div>", "  Receive data from an unconnected socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       buf:bytes -&gt;<br>       pos:int -&gt;<br>       len:int -&gt; mode:<a href=\"UnixLabels.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int * <a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a></code>", "file_descr ->       buf:bytes ->       pos:int ->       len:int -> mode:msg_flag list -> int * sockaddr"],
["ThreadUnix", "ThreadUnix.html", "recv", "ThreadUnix.html#VALrecv", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">Unix.msg_flag</a> list -&gt; int</code>", "Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int"],
["Unix", "Unix.html", "recv", "Unix.html#VALrecv", "<div class=\"info\">  <p>Receive data from a connected socket.</p> </div>", "  Receive data from a connected socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; <a href=\"Unix.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int</code>", "file_descr -> bytes -> int -> int -> msg_flag list -> int"],
["UnixLabels", "UnixLabels.html", "recv", "UnixLabels.html#VALrecv", "<div class=\"info\">  <p>Receive data from a connected socket.</p> </div>", "  Receive data from a connected socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       buf:bytes -&gt; pos:int -&gt; len:int -&gt; mode:<a href=\"UnixLabels.html#TYPEmsg_flag\">msg_flag</a> list -&gt; int</code>", "file_descr ->       buf:bytes -> pos:int -> len:int -> mode:msg_flag list -> int"],
["Clflags", "Clflags.html", "recursive_types", "Clflags.html#VALrecursive_types", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Profile", "Profile.html", "record_call", "Profile.html#VALrecord_call", "<div class=\"info\">  <p><code class=\"code\">record_call&nbsp;pass&nbsp;f</code> calls <code class=\"code\">f</code> and records its profile information.</p> </div>", "  record_call\194\160pass\194\160f calls f and records its profile information. ", "<code class=\"type\">?accumulate:bool -&gt; string -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "?accumulate:bool -> string -> (unit -> 'a) -> 'a"],
["Printexc", "Printexc.html", "record_backtrace", "Printexc.html#VALrecord_backtrace", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.record_backtrace&nbsp;b</code> turns recording of exception backtraces on (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">true</span></code>) or off (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">false</span></code>).</p> </div>", "  Printexc.record_backtrace\194\160b turns recording of exception backtraces on (if b\194\160=\194\160true) or off (if b\194\160=\194\160false). ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "record", "Ast_helper.Pat.html#VALrecord", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> * <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a>) list -&gt;<br>       <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       (Ast_helper.lid * Parsetree.pattern) list ->       Asttypes.closed_flag -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "record", "Ast_helper.Exp.html#VALrecord", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       (Ast_helper.lid * Parsetree.expression) list ->       Parsetree.expression option -> Parsetree.expression"],
["Profile", "Profile.html", "record", "Profile.html#VALrecord", "<div class=\"info\">  <p><code class=\"code\">record&nbsp;pass&nbsp;f&nbsp;arg</code> records the profile information of <code class=\"code\">f&nbsp;arg</code></p> </div>", "  record\194\160pass\194\160f\194\160arg records the profile information of f\194\160arg ", "<code class=\"type\">?accumulate:bool -&gt; string -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'b</code>", "?accumulate:bool -> string -> ('a -> 'b) -> 'a -> 'b"],
["Event", "Event.html", "receive", "Event.html#VALreceive", "<div class=\"info\">  <p><code class=\"code\">receive&nbsp;ch</code> returns the event consisting in receiving a value from the channel <code class=\"code\">ch</code>.</p> </div>", "  receive\194\160ch returns the event consisting in receiving a value from the channel ch. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEchannel\">channel</a> -&gt; 'a <a href=\"Event.html#TYPEevent\">event</a></code>", "'a channel -> 'a event"],
["CamlinternalFormat", "CamlinternalFormat.html", "recast", "CamlinternalFormat.html#VALrecast", "", "", "<code class=\"type\">('a1, 'b1, 'c1, 'd1, 'e1, 'f1) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a> -&gt;<br>       ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">CamlinternalFormatBasics.fmtty_rel</a> -&gt;<br>       ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a></code>", "('a1, 'b1, 'c1, 'd1, 'e1, 'f1) CamlinternalFormatBasics.fmt ->       ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)       CamlinternalFormatBasics.fmtty_rel ->       ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) CamlinternalFormatBasics.fmt"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "rec_module", "Ast_helper.Sig.html#VALrec_module", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_declaration list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "rec_module", "Ast_helper.Str.html#VALrec_module", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_binding list -> Parsetree.structure_item"],
["Ast_helper.Te", "Ast_helper.Te.html", "rebind", "Ast_helper.Te.html#VALrebind", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?info:Docstrings.info ->       Ast_helper.str -> Ast_helper.lid -> Parsetree.extension_constructor"],
["Pervasives", "Pervasives.html", "really_input_string", "Pervasives.html#VALreally_input_string", "<div class=\"info\">  <p><code class=\"code\">really_input_string&nbsp;ic&nbsp;len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code> and returns them in a new string.</p> </div>", "  really_input_string\194\160ic\194\160len reads len characters from channel ic and returns them in a new string. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int -&gt; string</code>", "in_channel -> int -> string"],
["Pervasives", "Pervasives.html", "really_input", "Pervasives.html#VALreally_input", "<div class=\"info\">  <p><code class=\"code\">really_input&nbsp;ic&nbsp;buf&nbsp;pos&nbsp;len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code>, storing them in byte sequence <code class=\"code\">buf</code>, starting at character number <code class=\"code\">pos</code>.</p> </div>", "  really_input\194\160ic\194\160buf\194\160pos\194\160len reads len characters from channel ic, storing them in byte sequence buf, starting at character number pos. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "in_channel -> bytes -> int -> int -> unit"],
["Clflags", "Clflags.html", "real_paths", "Clflags.html#VALreal_paths", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Unix", "Unix.html", "readlink", "Unix.html#VALreadlink", "<div class=\"info\">  <p>Read the contents of a symbolic link.</p> </div>", "  Read the contents of a symbolic link. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["UnixLabels", "UnixLabels.html", "readlink", "UnixLabels.html#VALreadlink", "<div class=\"info\">  <p>Read the contents of a link.</p> </div>", "  Read the contents of a link. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Sys", "Sys.html", "readdir", "Sys.html#VALreaddir", "<div class=\"info\">  <p>Return the names of all files present in the given directory.</p> </div>", "  Return the names of all files present in the given directory. ", "<code class=\"type\">string -&gt; string array</code>", "string -> string array"],
["Unix", "Unix.html", "readdir", "Unix.html#VALreaddir", "<div class=\"info\">  <p>Return the next entry in a directory.</p> </div>", "  Return the next entry in a directory. ", "<code class=\"type\"><a href=\"Unix.html#TYPEdir_handle\">dir_handle</a> -&gt; string</code>", "dir_handle -> string"],
["UnixLabels", "UnixLabels.html", "readdir", "UnixLabels.html#VALreaddir", "<div class=\"info\">  <p>Return the next entry in a directory.</p> </div>", "  Return the next entry in a directory. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEdir_handle\">dir_handle</a> -&gt; string</code>", "dir_handle -> string"],
["Pervasives", "Pervasives.html", "read_line", "Pervasives.html#VALread_line", "<div class=\"info\">  <p>Flush standard output, then read characters from standard input until a newline character is encountered.</p> </div>", "  Flush standard output, then read characters from standard input until a newline character is encountered. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Graphics", "Graphics.html", "read_key", "Graphics.html#VALread_key", "<div class=\"info\">  <p>Wait for a key to be pressed, and return the corresponding character.</p> </div>", "  Wait for a key to be pressed, and return the corresponding character. ", "<code class=\"type\">unit -&gt; char</code>", "unit -> char"],
["Pervasives", "Pervasives.html", "read_int_opt", "Pervasives.html#VALread_int_opt", "<div class=\"info\">  <p>Same as <code class=\"code\">read_int_opt</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p> </div>", "  Same as read_int_opt, but returns None instead of raising. ", "<code class=\"type\">unit -&gt; int option</code>", "unit -> int option"],
["Pervasives", "Pervasives.html", "read_int", "Pervasives.html#VALread_int", "<div class=\"info\">  <p>Flush standard output, then read one line from standard input and convert it to an integer.</p> </div>", "  Flush standard output, then read one line from standard input and convert it to an integer. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Pervasives", "Pervasives.html", "read_float_opt", "Pervasives.html#VALread_float_opt", "<div class=\"info\">  <p>Flush standard output, then read one line from standard input and convert it to a floating-point number.</p> </div>", "  Flush standard output, then read one line from standard input and convert it to a floating-point number. ", "<code class=\"type\">unit -&gt; float option</code>", "unit -> float option"],
["Pervasives", "Pervasives.html", "read_float", "Pervasives.html#VALread_float", "<div class=\"info\">  <p>Flush standard output, then read one line from standard input and convert it to a floating-point number.</p> </div>", "  Flush standard output, then read one line from standard input and convert it to a floating-point number. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["Pparse", "Pparse.html", "read_ast", "Pparse.html#VALread_ast", "", "", "<code class=\"type\">'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; string -&gt; 'a</code>", "'a ast_kind -> string -> 'a"],
["Arg", "Arg.html", "read_arg0", "Arg.html#VALread_arg0", "<div class=\"info\">  <p>Identical to <a href=\"Arg.html#VALread_arg\"><code class=\"code\"><span class=\"constructor\">Arg</span>.read_arg</code></a> but assumes null character terminated command line arguments.</p> </div>", "  Identical to Arg.read_arg but assumes null character terminated command line arguments. ", "<code class=\"type\">string -&gt; string array</code>", "string -> string array"],
["Arg", "Arg.html", "read_arg", "Arg.html#VALread_arg", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Arg</span>.read_arg&nbsp;file</code> reads newline-terminated command line arguments from file <code class=\"code\">file</code>.</p> </div>", "  Arg.read_arg\194\160file reads newline-terminated command line arguments from file file. ", "<code class=\"type\">string -&gt; string array</code>", "string -> string array"],
["ThreadUnix", "ThreadUnix.html", "read", "ThreadUnix.html#VALread", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; int</code>", "Unix.file_descr -> bytes -> int -> int -> int"],
["Unix", "Unix.html", "read", "Unix.html#VALread", "<div class=\"info\">  <p><code class=\"code\">read&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>, storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>.</p> </div>", "  read\194\160fd\194\160buff\194\160ofs\194\160len reads len bytes from descriptor fd, storing them in byte sequence buff, starting at position ofs in buff. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; bytes -&gt; int -&gt; int -&gt; int</code>", "file_descr -> bytes -> int -> int -> int"],
["UnixLabels", "UnixLabels.html", "read", "UnixLabels.html#VALread", "<div class=\"info\">  <p><code class=\"code\">read&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>, storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>.</p> </div>", "  read\194\160fd\194\160buff\194\160ofs\194\160len reads len bytes from descriptor fd, storing them in byte sequence buff, starting at position ofs in buff. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; buf:bytes -&gt; pos:int -&gt; len:int -&gt; int</code>", "file_descr -> buf:bytes -> pos:int -> len:int -> int"],
["Obj", "Obj.html", "reachable_words", "Obj.html#VALreachable_words", "<div class=\"info\">  <p>Computes the total size (in words, including the headers) of all heap blocks accessible from the argument.</p> </div>", "  Computes the total size (in words, including the headers) of all heap blocks accessible from the argument. ", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Bytes", "Bytes.html", "rcontains_from", "Bytes.html#VALrcontains_from", "<div class=\"info\">  <p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p> </div>", "  rcontains_from\194\160s\194\160stop\194\160c tests if byte c appears in s before position stop+1. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; bool</code>", "bytes -> int -> char -> bool"],
["BytesLabels", "BytesLabels.html", "rcontains_from", "BytesLabels.html#VALrcontains_from", "<div class=\"info\">  <p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p> </div>", "  rcontains_from\194\160s\194\160stop\194\160c tests if byte c appears in s before position stop+1. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; bool</code>", "bytes -> int -> char -> bool"],
["StringLabels", "StringLabels.html", "rcontains_from", "StringLabels.html#VALrcontains_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p> </div>", "  String.rcontains_from\194\160s\194\160stop\194\160c tests if character c appears in s before position stop+1. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; bool</code>", "string -> int -> char -> bool"],
["String", "String.html", "rcontains_from", "String.html#VALrcontains_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p> </div>", "  String.rcontains_from\194\160s\194\160stop\194\160c tests if character c appears in s before position stop+1. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; bool</code>", "string -> int -> char -> bool"],
["Printexc", "Printexc.html", "raw_backtrace_to_string", "Printexc.html#VALraw_backtrace_to_string", "<div class=\"info\">  <p>Return a string from a raw backtrace, in the same format <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace</code> uses.</p> </div>", "  Return a string from a raw backtrace, in the same format Printexc.get_backtrace uses. ", "<code class=\"type\"><a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a> -&gt; string</code>", "raw_backtrace -> string"],
["Printexc", "Printexc.html", "raw_backtrace_length", "Printexc.html#VALraw_backtrace_length", "<div class=\"info\">  <p><code class=\"code\">raw_backtrace_length&nbsp;bckt</code> returns the number of slots in the backtrace <code class=\"code\">bckt</code>.</p> </div>", "  raw_backtrace_length\194\160bckt returns the number of slots in the backtrace bckt. ", "<code class=\"type\"><a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a> -&gt; int</code>", "raw_backtrace -> int"],
["Config", "Config.html", "ranlib", "Config.html#VALranlib", "", "", "<code class=\"type\">string</code>", "string"],
["Hashtbl", "Hashtbl.html", "randomize", "Hashtbl.html#VALrandomize", "<div class=\"info\">  <p>After a call to <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code>, hash tables are created in randomized mode by default: <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a> returns randomized hash tables, unless the <code class=\"code\">~random:<span class=\"keyword\">false</span></code> optional parameter is given.</p> </div>", "  After a call to Hashtbl.randomize(), hash tables are created in randomized mode by default: Hashtbl.create returns randomized hash tables, unless the ~random:false optional parameter is given. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "randomize", "MoreLabels.Hashtbl.html#VALrandomize", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Printexc", "Printexc.html", "raise_with_backtrace", "Printexc.html#VALraise_with_backtrace", "<div class=\"info\">  <p>Reraise the exception using the given raw_backtrace for the origin of the exception</p> </div>", "  Reraise the exception using the given raw_backtrace for the origin of the exception ", "<code class=\"type\">exn -&gt; <a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a> -&gt; 'a</code>", "exn -> raw_backtrace -> 'a"],
["Pervasives", "Pervasives.html", "raise_notrace", "Pervasives.html#VALraise_notrace", "<div class=\"info\">  <p>A faster version <code class=\"code\">raise</code> which does not record the backtrace.</p> </div>", "  A faster version raise which does not record the backtrace. ", "<code class=\"type\">exn -&gt; 'a</code>", "exn -> 'a"],
["Location", "Location.html", "raise_errorf", "Location.html#VALraise_errorf", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ?sub:<a href=\"Location.html#TYPEerror\">error</a> list -&gt;<br>       ?if_highlight:string -&gt;<br>       ('a, <a href=\"Format.html#TYPEformatter\">Format.formatter</a>, unit, 'b) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "?loc:t ->       ?sub:error list ->       ?if_highlight:string ->       ('a, Format.formatter, unit, 'b) format4 -> 'a"],
["Misc", "Misc.html", "raise_direct_hook_exn", "Misc.html#VALraise_direct_hook_exn", "<div class=\"info\">  <p>A hook can use <code class=\"code\">raise_unwrapped_hook_exn</code> to raise an exception that will not be wrapped into a <a href=\"Misc.html#EXCEPTIONHookExnWrapper\"><code class=\"code\"><span class=\"constructor\">Misc</span>.<span class=\"constructor\">HookExnWrapper</span></code></a>.</p> </div>", "  A hook can use raise_unwrapped_hook_exn to raise an exception that will not be wrapped into a Misc.HookExnWrapper. ", "<code class=\"type\">exn -&gt; 'a</code>", "exn -> 'a"],
["Pervasives", "Pervasives.html", "raise", "Pervasives.html#VALraise", "<div class=\"info\">  <p>Raise the given exception value</p> </div>", "  Raise the given exception value ", "<code class=\"type\">exn -&gt; 'a</code>", "exn -> 'a"],
["Ccomp", "Ccomp.html", "quote_optfile", "Ccomp.html#VALquote_optfile", "", "", "<code class=\"type\">string option -&gt; string</code>", "string option -> string"],
["Ccomp", "Ccomp.html", "quote_files", "Ccomp.html#VALquote_files", "", "", "<code class=\"type\">string list -&gt; string</code>", "string list -> string"],
["Filename", "Filename.html", "quote", "Filename.html#VALquote", "<div class=\"info\">  <p>Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters.</p> </div>", "  Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Str", "Str.html", "quote", "Str.html#VALquote", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Str</span>.quote&nbsp;s</code> returns a regexp string that matches exactly <code class=\"code\">s</code> and nothing else.</p> </div>", "  Str.quote\194\160s returns a regexp string that matches exactly s and nothing else. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Gc", "Gc.html", "quick_stat", "Gc.html#VALquick_stat", "<div class=\"info\">  <p>Same as <code class=\"code\">stat</code> except that <code class=\"code\">live_words</code>, <code class=\"code\">live_blocks</code>, <code class=\"code\">free_words</code>, <code class=\"code\">free_blocks</code>, <code class=\"code\">largest_free</code>, and <code class=\"code\">fragments</code> are set to 0.</p> </div>", "  Same as stat except that live_words, live_blocks, free_words, free_blocks, largest_free, and fragments are set to 0. ", "<code class=\"type\">unit -&gt; <a href=\"Gc.html#TYPEstat\">stat</a></code>", "unit -> stat"],
["Unix", "Unix.html", "putenv", "Unix.html#VALputenv", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Unix</span>.putenv&nbsp;name&nbsp;value</code> sets the value associated to a variable in the process environment.</p> </div>", "  Unix.putenv\194\160name\194\160value sets the value associated to a variable in the process environment. ", "<code class=\"type\">string -&gt; string -&gt; unit</code>", "string -> string -> unit"],
["UnixLabels", "UnixLabels.html", "putenv", "UnixLabels.html#VALputenv", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Unix</span>.putenv&nbsp;name&nbsp;value</code> sets the value associated to a variable in the process environment.</p> </div>", "  Unix.putenv\194\160name\194\160value sets the value associated to a variable in the process environment. ", "<code class=\"type\">string -&gt; string -&gt; unit</code>", "string -> string -> unit"],
["Queue", "Queue.html", "push", "Queue.html#VALpush", "<div class=\"info\">  <p><code class=\"code\">push</code> is a synonym for <code class=\"code\">add</code>.</p> </div>", "  push is a synonym for add. ", "<code class=\"type\">'a -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; unit</code>", "'a -> 'a t -> unit"],
["Stack", "Stack.html", "push", "Stack.html#VALpush", "<div class=\"info\">  <p><code class=\"code\">push&nbsp;x&nbsp;s</code> adds the element <code class=\"code\">x</code> at the top of stack <code class=\"code\">s</code>.</p> </div>", "  push\194\160x\194\160s adds the element x at the top of stack s. ", "<code class=\"type\">'a -&gt; 'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; unit</code>", "'a -> 'a t -> unit"],
["CamlinternalOO", "CamlinternalOO.html", "public_method_label", "CamlinternalOO.html#VALpublic_method_label", "", "", "<code class=\"type\">string -&gt; <a href=\"CamlinternalOO.html#TYPEtag\">tag</a></code>", "string -> tag"],
["Misc", "Misc.html", "protect_refs", "Misc.html#VALprotect_refs", "<div class=\"info\">  <p><code class=\"code\">protect_refs&nbsp;l&nbsp;f</code> temporarily sets <code class=\"code\">r</code> to <code class=\"code\">v</code> for each <code class=\"code\"><span class=\"constructor\">R</span>&nbsp;(r,&nbsp;v)</code> in <code class=\"code\">l</code> while executing <code class=\"code\">f</code>.</p> </div>", "  protect_refs\194\160l\194\160f temporarily sets r to v for each R\194\160(r,\194\160v) in l while executing f. ", "<code class=\"type\"><a href=\"Misc.html#TYPEref_and_value\">ref_and_value</a> list -&gt; (unit -&gt; 'a) -&gt; 'a</code>", "ref_and_value list -> (unit -> 'a) -> 'a"],
["Dynlink", "Dynlink.html", "prohibit", "Dynlink.html#VALprohibit", "<div class=\"info\">  <p><code class=\"code\">prohibit&nbsp;units</code> prohibits dynamically-linked units from referencing the units named in list <code class=\"code\">units</code>.</p> </div>", "  prohibit\194\160units prohibits dynamically-linked units from referencing the units named in list units. ", "<code class=\"type\">string list -&gt; unit</code>", "string list -> unit"],
["Config", "Config.html", "profinfo_width", "Config.html#VALprofinfo_width", "", "", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "profinfo", "Config.html#VALprofinfo", "", "", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "profiling", "Config.html#VALprofiling", "", "", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "profile_columns", "Clflags.html#VALprofile_columns", "", "", "<code class=\"type\"><a href=\"Profile.html#TYPEcolumn\">Profile.column</a> list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Profile.column list ref"],
["Format", "Format.html", "printf", "Format.html#VALprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">std_formatter</code>.</p> </div>", "  Same as fprintf above, but output on std_formatter. ", "<code class=\"type\">('a, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "('a, formatter, unit) format -> 'a"],
["Printf", "Printf.html", "printf", "Printf.html#VALprintf", "<div class=\"info\">  <p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stdout</code>.</p> </div>", "  Same as Printf.fprintf, but output on stdout. ", "<code class=\"type\">('a, <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "('a, out_channel, unit) format -> 'a"],
["Location", "Location.html", "printer", "Location.html#VALprinter", "", "", "<code class=\"type\">(<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit) <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "(Format.formatter -> t -> unit) ref"],
["Lexer", "Lexer.html", "print_warnings", "Lexer.html#VALprint_warnings", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Location", "Location.html", "print_warning", "Location.html#VALprint_warning", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; unit</code>", "t -> Format.formatter -> Warnings.t -> unit"],
["Clflags", "Clflags.html", "print_types", "Clflags.html#VALprint_types", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Format", "Format.html", "print_tbreak", "Format.html#VALprint_tbreak", "<div class=\"info\">  <p><code class=\"code\">print_tbreak&nbsp;nspaces&nbsp;offset</code> emits a 'full' tabulation break hint.</p> </div>", "  print_tbreak\194\160nspaces\194\160offset emits a 'full' tabulation break hint. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Format", "Format.html", "print_tab", "Format.html#VALprint_tab", "<div class=\"info\">  <p><code class=\"code\">print_tab&nbsp;()</code> emits a 'next' tabulation break hint: if not already set on a tabulation marker, the insertion point moves to the first tabulation marker on the right, or the pretty-printer splits the line and insertion point moves to the leftmost tabulation marker.</p> </div>", "  print_tab\194\160() emits a 'next' tabulation break hint: if not already set on a tabulation marker, the insertion point moves to the first tabulation marker on the right, or the pretty-printer splits the line and insertion point moves to the leftmost tabulation marker. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Format", "Format.html", "print_string", "Format.html#VALprint_string", "<div class=\"info\">  <p><code class=\"code\">pp_print_string&nbsp;ppf&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.</p> </div>", "  pp_print_string\194\160ppf\194\160s prints s in the current pretty-printing box. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Pervasives", "Pervasives.html", "print_string", "Pervasives.html#VALprint_string", "<div class=\"info\">  <p>Print a string on standard output.</p> </div>", "  Print a string on standard output. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Gc", "Gc.html", "print_stat", "Gc.html#VALprint_stat", "<div class=\"info\">  <p>Print the current values of the memory management counters (in human-readable form) into the channel argument.</p> </div>", "  Print the current values of the memory management counters (in human-readable form) into the channel argument. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "out_channel -> unit"],
["Format", "Format.html", "print_space", "Format.html#VALprint_space", "<div class=\"info\">  <p><code class=\"code\">pp_print_space&nbsp;ppf&nbsp;()</code> emits a 'space' break hint: the pretty-printer may split the line at this point, otherwise it prints one space.</p> </div>", "  pp_print_space\194\160ppf\194\160() emits a 'space' break hint: the pretty-printer may split the line at this point, otherwise it prints one space. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Printexc", "Printexc.html", "print_raw_backtrace", "Printexc.html#VALprint_raw_backtrace", "<div class=\"info\">  <p>Print a raw backtrace in the same format <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> uses.</p> </div>", "  Print a raw backtrace in the same format Printexc.print_backtrace uses. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a> -&gt; unit</code>", "out_channel -> raw_backtrace -> unit"],
["Format", "Format.html", "print_newline", "Format.html#VALprint_newline", "<div class=\"info\">  <p>End of pretty-printing: resets the pretty-printer to initial state.</p> </div>", "  End of pretty-printing: resets the pretty-printer to initial state. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Pervasives", "Pervasives.html", "print_newline", "Pervasives.html#VALprint_newline", "<div class=\"info\">  <p>Print a newline character on standard output, and flush standard output.</p> </div>", "  Print a newline character on standard output, and flush standard output. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Location", "Location.html", "print_loc", "Location.html#VALprint_loc", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> t -> unit"],
["Format", "Format.html", "print_int", "Format.html#VALprint_int", "<div class=\"info\">  <p>Print an integer in the current pretty-printing box.</p> </div>", "  Print an integer in the current pretty-printing box. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Pervasives", "Pervasives.html", "print_int", "Pervasives.html#VALprint_int", "<div class=\"info\">  <p>Print an integer, in decimal, on standard output.</p> </div>", "  Print an integer, in decimal, on standard output. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Format", "Format.html", "print_if_newline", "Format.html#VALprint_if_newline", "<div class=\"info\">  <p>Execute the next formatting command if the preceding line has just been split.</p> </div>", "  Execute the next formatting command if the preceding line has just been split. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Format", "Format.html", "print_flush", "Format.html#VALprint_flush", "<div class=\"info\">  <p>End of pretty-printing: resets the pretty-printer to initial state.</p> </div>", "  End of pretty-printing: resets the pretty-printer to initial state. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Format", "Format.html", "print_float", "Format.html#VALprint_float", "<div class=\"info\">  <p>Print a floating point number in the current pretty-printing box.</p> </div>", "  Print a floating point number in the current pretty-printing box. ", "<code class=\"type\">float -&gt; unit</code>", "float -> unit"],
["Pervasives", "Pervasives.html", "print_float", "Pervasives.html#VALprint_float", "<div class=\"info\">  <p>Print a floating-point number, in decimal, on standard output.</p> </div>", "  Print a floating-point number, in decimal, on standard output. ", "<code class=\"type\">float -&gt; unit</code>", "float -> unit"],
["Location", "Location.html", "print_filename", "Location.html#VALprint_filename", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; string -&gt; unit</code>", "Format.formatter -> string -> unit"],
["Location", "Location.html", "print_error_prefix", "Location.html#VALprint_error_prefix", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; unit</code>", "Format.formatter -> unit"],
["Location", "Location.html", "print_error_cur_file", "Location.html#VALprint_error_cur_file", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; unit -&gt; unit</code>", "Format.formatter -> unit -> unit"],
["Location", "Location.html", "print_error", "Location.html#VALprint_error", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> t -> unit"],
["Pervasives", "Pervasives.html", "print_endline", "Pervasives.html#VALprint_endline", "<div class=\"info\">  <p>Print a string, followed by a newline character, on standard output and flush standard output.</p> </div>", "  Print a string, followed by a newline character, on standard output and flush standard output. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Format", "Format.html", "print_cut", "Format.html#VALprint_cut", "<div class=\"info\">  <p><code class=\"code\">pp_print_cut&nbsp;ppf&nbsp;()</code> emits a 'cut' break hint: the pretty-printer may split the line at this point, otherwise it prints nothing.</p> </div>", "  pp_print_cut\194\160ppf\194\160() emits a 'cut' break hint: the pretty-printer may split the line at this point, otherwise it prints nothing. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Config", "Config.html", "print_config", "Config.html#VALprint_config", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "out_channel -> unit"],
["Location", "Location.html", "print_compact", "Location.html#VALprint_compact", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> t -> unit"],
["Format", "Format.html", "print_char", "Format.html#VALprint_char", "<div class=\"info\">  <p>Print a character in the current pretty-printing box.</p> </div>", "  Print a character in the current pretty-printing box. ", "<code class=\"type\">char -&gt; unit</code>", "char -> unit"],
["Pervasives", "Pervasives.html", "print_char", "Pervasives.html#VALprint_char", "<div class=\"info\">  <p>Print a character on standard output.</p> </div>", "  Print a character on standard output. ", "<code class=\"type\">char -&gt; unit</code>", "char -> unit"],
["Pervasives", "Pervasives.html", "print_bytes", "Pervasives.html#VALprint_bytes", "<div class=\"info\">  <p>Print a byte sequence on standard output.</p> </div>", "  Print a byte sequence on standard output. ", "<code class=\"type\">bytes -&gt; unit</code>", "bytes -> unit"],
["Format", "Format.html", "print_break", "Format.html#VALprint_break", "<div class=\"info\">  <p><code class=\"code\">pp_print_break&nbsp;ppf&nbsp;nspaces&nbsp;offset</code> emits a 'full' break hint: the pretty-printer may split the line at this point, otherwise it prints <code class=\"code\">nspaces</code> spaces.</p> </div>", "  pp_print_break\194\160ppf\194\160nspaces\194\160offset emits a 'full' break hint: the pretty-printer may split the line at this point, otherwise it prints nspaces spaces. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Format", "Format.html", "print_bool", "Format.html#VALprint_bool", "<div class=\"info\">  <p>Print a boolean in the current pretty-printing box.</p> </div>", "  Print a boolean in the current pretty-printing box. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Printexc", "Printexc.html", "print_backtrace", "Printexc.html#VALprint_backtrace", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace&nbsp;oc</code> prints an exception backtrace on the output channel <code class=\"code\">oc</code>.</p> </div>", "  Printexc.print_backtrace\194\160oc prints an exception backtrace on the output channel oc. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "out_channel -> unit"],
["Format", "Format.html", "print_as", "Format.html#VALprint_as", "<div class=\"info\">  <p><code class=\"code\">pp_print_as&nbsp;ppf&nbsp;len&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.</p> </div>", "  pp_print_as\194\160ppf\194\160len\194\160s prints s in the current pretty-printing box. ", "<code class=\"type\">int -&gt; string -&gt; unit</code>", "int -> string -> unit"],
["Clflags", "Clflags.html", "print_arguments", "Clflags.html#VALprint_arguments", "", "", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Identifiable.Thing", "Identifiable.Thing.html", "print", "Identifiable.Thing.html#VALprint", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Identifiable.Thing.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> t -> unit"],
["Identifiable.Set", "Identifiable.Set.html", "print", "Identifiable.Set.html#VALprint", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; t -&gt; unit</code>", "Format.formatter -> t -> unit"],
["Identifiable.Map", "Identifiable.Map.html", "print", "Identifiable.Map.html#VALprint", "", "", "<code class=\"type\">(<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; 'a -&gt; unit) -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; 'a t -&gt; unit</code>", "(Format.formatter -> 'a -> unit) -> Format.formatter -> 'a t -> unit"],
["Location", "Location.html", "print", "Location.html#VALprint", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> t -> unit"],
["Printexc", "Printexc.html", "print", "Printexc.html#VALprint", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print&nbsp;fn&nbsp;x</code> applies <code class=\"code\">fn</code> to <code class=\"code\">x</code> and returns the result.</p> </div>", "  Printexc.print\194\160fn\194\160x applies fn to x and returns the result. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a -&gt; 'b</code>", "('a -> 'b) -> 'a -> 'b"],
["Profile", "Profile.html", "print", "Profile.html#VALprint", "<div class=\"info\">  <p>Prints the selected recorded profiling information to the formatter.</p> </div>", "  Prints the selected recorded profiling information to the formatter. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Profile.html#TYPEcolumn\">column</a> list -&gt; unit</code>", "Format.formatter -> column list -> unit"],
["Tbl", "Tbl.html", "print", "Tbl.html#VALprint", "", "", "<code class=\"type\">(<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; 'k -&gt; unit) -&gt;<br>       (<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; 'v -&gt; unit) -&gt;<br>       <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; unit</code>", "(Format.formatter -> 'k -> unit) ->       (Format.formatter -> 'v -> unit) ->       Format.formatter -> ('k, 'v) t -> unit"],
["Clflags", "Clflags.html", "principal", "Clflags.html#VALprincipal", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Ast_helper.Str", "Ast_helper.Str.html", "primitive", "Ast_helper.Str.html#VALprimitive", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.value_description -> Parsetree.structure_item"],
["Location", "Location.html", "prerr_warning", "Location.html#VALprerr_warning", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; unit</code>", "t -> Warnings.t -> unit"],
["Pervasives", "Pervasives.html", "prerr_string", "Pervasives.html#VALprerr_string", "<div class=\"info\">  <p>Print a string on standard error.</p> </div>", "  Print a string on standard error. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Pervasives", "Pervasives.html", "prerr_newline", "Pervasives.html#VALprerr_newline", "<div class=\"info\">  <p>Print a newline character on standard error, and flush standard error.</p> </div>", "  Print a newline character on standard error, and flush standard error. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Pervasives", "Pervasives.html", "prerr_int", "Pervasives.html#VALprerr_int", "<div class=\"info\">  <p>Print an integer, in decimal, on standard error.</p> </div>", "  Print an integer, in decimal, on standard error. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Pervasives", "Pervasives.html", "prerr_float", "Pervasives.html#VALprerr_float", "<div class=\"info\">  <p>Print a floating-point number, in decimal, on standard error.</p> </div>", "  Print a floating-point number, in decimal, on standard error. ", "<code class=\"type\">float -&gt; unit</code>", "float -> unit"],
["Pervasives", "Pervasives.html", "prerr_endline", "Pervasives.html#VALprerr_endline", "<div class=\"info\">  <p>Print a string, followed by a newline character on standard error and flush standard error.</p> </div>", "  Print a string, followed by a newline character on standard error and flush standard error. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Pervasives", "Pervasives.html", "prerr_char", "Pervasives.html#VALprerr_char", "<div class=\"info\">  <p>Print a character on standard error.</p> </div>", "  Print a character on standard error. ", "<code class=\"type\">char -&gt; unit</code>", "char -> unit"],
["Pervasives", "Pervasives.html", "prerr_bytes", "Pervasives.html#VALprerr_bytes", "<div class=\"info\">  <p>Print a byte sequence on standard error.</p> </div>", "  Print a byte sequence on standard error. ", "<code class=\"type\">bytes -&gt; unit</code>", "bytes -> unit"],
["Clflags", "Clflags.html", "preprocessor", "Clflags.html#VALpreprocessor", "", "", "<code class=\"type\">string option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string option ref"],
["Pparse", "Pparse.html", "preprocess", "Pparse.html#VALpreprocess", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Int32", "Int32.html", "pred", "Int32.html#VALpred", "<div class=\"info\">  <p>Predecessor.</p> </div>", "  Predecessor. ", "<code class=\"type\">int32 -&gt; int32</code>", "int32 -> int32"],
["Int64", "Int64.html", "pred", "Int64.html#VALpred", "<div class=\"info\">  <p>Predecessor.</p> </div>", "  Predecessor. ", "<code class=\"type\">int64 -&gt; int64</code>", "int64 -> int64"],
["Nativeint", "Nativeint.html", "pred", "Nativeint.html#VALpred", "<div class=\"info\">  <p>Predecessor.</p> </div>", "  Predecessor. ", "<code class=\"type\">nativeint -&gt; nativeint</code>", "nativeint -> nativeint"],
["Pervasives", "Pervasives.html", "pred", "Pervasives.html#VALpred", "<div class=\"info\">  <p><code class=\"code\">pred&nbsp;x</code> is <code class=\"code\">x&nbsp;-&nbsp;1</code>.</p> </div>", "  pred\194\160x is x\194\160-\194\1601. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Targetint", "Targetint.html", "pred", "Targetint.html#VALpred", "<div class=\"info\">  <p>Predecessor.</p> </div>", "  Predecessor. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t"],
["Uchar", "Uchar.html", "pred", "Uchar.html#VALpred", "<div class=\"info\">  <p><code class=\"code\">pred&nbsp;u</code> is the scalar value before <code class=\"code\">u</code> in the set of Unicode scalar values.</p> </div>", "  pred\194\160u is the scalar value before u in the set of Unicode scalar values. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; <a href=\"Uchar.html#TYPEt\">t</a></code>", "t -> t"],
["Format", "Format.html", "pp_set_tags", "Format.html#VALpp_set_tags", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; bool -&gt; unit</code>", "formatter -> bool -> unit"],
["Format", "Format.html", "pp_set_tab", "Format.html#VALpp_set_tab", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_set_print_tags", "Format.html#VALpp_set_print_tags", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; bool -&gt; unit</code>", "formatter -> bool -> unit"],
["Format", "Format.html", "pp_set_max_indent", "Format.html#VALpp_set_max_indent", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_set_max_boxes", "Format.html#VALpp_set_max_boxes", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_set_mark_tags", "Format.html#VALpp_set_mark_tags", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; bool -&gt; unit</code>", "formatter -> bool -> unit"],
["Format", "Format.html", "pp_set_margin", "Format.html#VALpp_set_margin", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_set_formatter_tag_functions", "Format.html#VALpp_set_formatter_tag_functions", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; <a href=\"Format.html#TYPEformatter_tag_functions\">formatter_tag_functions</a> -&gt; unit</code>", "formatter -> formatter_tag_functions -> unit"],
["Format", "Format.html", "pp_set_formatter_output_functions", "Format.html#VALpp_set_formatter_output_functions", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; (string -&gt; int -&gt; int -&gt; unit) -&gt; (unit -&gt; unit) -&gt; unit</code>", "formatter -> (string -> int -> int -> unit) -> (unit -> unit) -> unit"],
["Format", "Format.html", "pp_set_formatter_out_functions", "Format.html#VALpp_set_formatter_out_functions", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; <a href=\"Format.html#TYPEformatter_out_functions\">formatter_out_functions</a> -&gt; unit</code>", "formatter -> formatter_out_functions -> unit"],
["Format", "Format.html", "pp_set_formatter_out_channel", "Format.html#VALpp_set_formatter_out_channel", "<div class=\"info\">  <p>Redirecting the standard formatter output</p> </div>", "  Redirecting the standard formatter output ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "formatter -> out_channel -> unit"],
["Format", "Format.html", "pp_set_ellipsis_text", "Format.html#VALpp_set_ellipsis_text", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; string -&gt; unit</code>", "formatter -> string -> unit"],
["Format", "Format.html", "pp_set_all_formatter_output_functions", "Format.html#VALpp_set_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt;<br>       out:(string -&gt; int -&gt; int -&gt; unit) -&gt;<br>       flush:(unit -&gt; unit) -&gt;<br>       newline:(unit -&gt; unit) -&gt; spaces:(int -&gt; unit) -&gt; unit</code>", "formatter ->       out:(string -> int -> int -> unit) ->       flush:(unit -> unit) ->       newline:(unit -> unit) -> spaces:(int -> unit) -> unit"],
["Format", "Format.html", "pp_print_text", "Format.html#VALpp_print_text", "<div class=\"info\">  <p><code class=\"code\">pp_print_text&nbsp;ppf&nbsp;s</code> prints <code class=\"code\">s</code> with spaces and newlines respectively printed using <a href=\"Format.html#VALpp_print_space\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_space</code></a> and <a href=\"Format.html#VALpp_force_newline\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_force_newline</code></a>.</p> </div>", "  pp_print_text\194\160ppf\194\160s prints s with spaces and newlines respectively printed using Format.pp_print_space and Format.pp_force_newline. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; string -&gt; unit</code>", "formatter -> string -> unit"],
["Format", "Format.html", "pp_print_tbreak", "Format.html#VALpp_print_tbreak", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; int -&gt; unit</code>", "formatter -> int -> int -> unit"],
["Format", "Format.html", "pp_print_tab", "Format.html#VALpp_print_tab", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_print_string", "Format.html#VALpp_print_string", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; string -&gt; unit</code>", "formatter -> string -> unit"],
["Format", "Format.html", "pp_print_space", "Format.html#VALpp_print_space", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_print_newline", "Format.html#VALpp_print_newline", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_print_list", "Format.html#VALpp_print_list", "<div class=\"info\">  <p><code class=\"code\">pp_print_list&nbsp;?pp_sep&nbsp;pp_v&nbsp;ppf&nbsp;l</code> prints items of list <code class=\"code\">l</code>, using <code class=\"code\">pp_v</code> to print each item, and calling <code class=\"code\">pp_sep</code> between items (<code class=\"code\">pp_sep</code> defaults to <a href=\"Format.html#VALpp_print_cut\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_cut</code></a>.</p> </div>", "  pp_print_list\194\160?pp_sep\194\160pp_v\194\160ppf\194\160l prints items of list l, using pp_v to print each item, and calling pp_sep between items (pp_sep defaults to Format.pp_print_cut. ", "<code class=\"type\">?pp_sep:(<a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit) -&gt;<br>       (<a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; 'a -&gt; unit) -&gt; <a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; 'a list -&gt; unit</code>", "?pp_sep:(formatter -> unit -> unit) ->       (formatter -> 'a -> unit) -> formatter -> 'a list -> unit"],
["Format", "Format.html", "pp_print_int", "Format.html#VALpp_print_int", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_print_if_newline", "Format.html#VALpp_print_if_newline", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_print_flush", "Format.html#VALpp_print_flush", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_print_float", "Format.html#VALpp_print_float", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; float -&gt; unit</code>", "formatter -> float -> unit"],
["Format", "Format.html", "pp_print_cut", "Format.html#VALpp_print_cut", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_print_char", "Format.html#VALpp_print_char", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; char -&gt; unit</code>", "formatter -> char -> unit"],
["Format", "Format.html", "pp_print_break", "Format.html#VALpp_print_break", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; int -&gt; unit</code>", "formatter -> int -> int -> unit"],
["Format", "Format.html", "pp_print_bool", "Format.html#VALpp_print_bool", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; bool -&gt; unit</code>", "formatter -> bool -> unit"],
["Format", "Format.html", "pp_print_as", "Format.html#VALpp_print_as", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; string -&gt; unit</code>", "formatter -> int -> string -> unit"],
["Format", "Format.html", "pp_over_max_boxes", "Format.html#VALpp_over_max_boxes", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; bool</code>", "formatter -> unit -> bool"],
["Format", "Format.html", "pp_open_vbox", "Format.html#VALpp_open_vbox", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_open_tbox", "Format.html#VALpp_open_tbox", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_open_tag", "Format.html#VALpp_open_tag", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; string -&gt; unit</code>", "formatter -> string -> unit"],
["Format", "Format.html", "pp_open_hvbox", "Format.html#VALpp_open_hvbox", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_open_hovbox", "Format.html#VALpp_open_hovbox", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_open_hbox", "Format.html#VALpp_open_hbox", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_open_box", "Format.html#VALpp_open_box", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; int -&gt; unit</code>", "formatter -> int -> unit"],
["Format", "Format.html", "pp_get_print_tags", "Format.html#VALpp_get_print_tags", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; bool</code>", "formatter -> unit -> bool"],
["Format", "Format.html", "pp_get_max_indent", "Format.html#VALpp_get_max_indent", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; int</code>", "formatter -> unit -> int"],
["Format", "Format.html", "pp_get_max_boxes", "Format.html#VALpp_get_max_boxes", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; int</code>", "formatter -> unit -> int"],
["Format", "Format.html", "pp_get_mark_tags", "Format.html#VALpp_get_mark_tags", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; bool</code>", "formatter -> unit -> bool"],
["Format", "Format.html", "pp_get_margin", "Format.html#VALpp_get_margin", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; int</code>", "formatter -> unit -> int"],
["Format", "Format.html", "pp_get_formatter_tag_functions", "Format.html#VALpp_get_formatter_tag_functions", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; <a href=\"Format.html#TYPEformatter_tag_functions\">formatter_tag_functions</a></code>", "formatter -> unit -> formatter_tag_functions"],
["Format", "Format.html", "pp_get_formatter_output_functions", "Format.html#VALpp_get_formatter_output_functions", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; (string -&gt; int -&gt; int -&gt; unit) * (unit -&gt; unit)</code>", "formatter -> unit -> (string -> int -> int -> unit) * (unit -> unit)"],
["Format", "Format.html", "pp_get_formatter_out_functions", "Format.html#VALpp_get_formatter_out_functions", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; <a href=\"Format.html#TYPEformatter_out_functions\">formatter_out_functions</a></code>", "formatter -> unit -> formatter_out_functions"],
["Format", "Format.html", "pp_get_ellipsis_text", "Format.html#VALpp_get_ellipsis_text", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; string</code>", "formatter -> unit -> string"],
["Format", "Format.html", "pp_get_all_formatter_output_functions", "Format.html#VALpp_get_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt;<br>       unit -&gt;<br>       (string -&gt; int -&gt; int -&gt; unit) * (unit -&gt; unit) * (unit -&gt; unit) *<br>       (int -&gt; unit)</code>", "formatter ->       unit ->       (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *       (int -> unit)"],
["Format", "Format.html", "pp_force_newline", "Format.html#VALpp_force_newline", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Depend", "Depend.html", "pp_deps", "Depend.html#VALpp_deps", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Format", "Format.html", "pp_close_tbox", "Format.html#VALpp_close_tbox", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_close_tag", "Format.html#VALpp_close_tag", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Format", "Format.html", "pp_close_box", "Format.html#VALpp_close_box", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; unit -&gt; unit</code>", "formatter -> unit -> unit"],
["Complex", "Complex.html", "pow", "Complex.html#VALpow", "<div class=\"info\">  <p>Power function.</p> </div>", "  Power function. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Float", "Float.html", "pow", "Float.html#VALpow", "<div class=\"info\">  <p>Exponentiation.</p> </div>", "  Exponentiation. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "pos_out", "Pervasives.html#VALpos_out", "<div class=\"info\">  <p>Return the current writing position for the given channel.</p> </div>", "  Return the current writing position for the given channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int</code>", "out_channel -> int"],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "pos_out", "Pervasives.LargeFile.html#VALpos_out", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int64</code>", "out_channel -> int64"],
["Pervasives", "Pervasives.html", "pos_in", "Pervasives.html#VALpos_in", "<div class=\"info\">  <p>Return the current reading position for the given channel.</p> </div>", "  Return the current reading position for the given channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int</code>", "in_channel -> int"],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "pos_in", "Pervasives.LargeFile.html#VALpos_in", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int64</code>", "in_channel -> int64"],
["Queue", "Queue.html", "pop", "Queue.html#VALpop", "<div class=\"info\">  <p><code class=\"code\">pop</code> is a synonym for <code class=\"code\">take</code>.</p> </div>", "  pop is a synonym for take. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Stack", "Stack.html", "pop", "Stack.html#VALpop", "<div class=\"info\">  <p><code class=\"code\">pop&nbsp;s</code> removes and returns the topmost element in stack <code class=\"code\">s</code>, or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p> </div>", "  pop\194\160s removes and returns the topmost element in stack s, or raises Stack.Empty if the stack is empty. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "poly", "Ast_helper.Typ.html#VALpoly", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str list -> Parsetree.core_type -> Parsetree.core_type"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "poly", "Ast_helper.Exp.html#VALpoly", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.core_type option -> Parsetree.expression"],
["Event", "Event.html", "poll", "Event.html#VALpoll", "<div class=\"info\">  <p>Non-blocking version of <a href=\"Event.html#VALsync\"><code class=\"code\"><span class=\"constructor\">Event</span>.sync</code></a>: offer all the communication possibilities specified in the event to the outside world, and if one can take place immediately, perform it and return <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;r</code> where <code class=\"code\">r</code> is the result value of that communication.</p> </div>", "  Non-blocking version of Event.sync: offer all the communication possibilities specified in the event to the outside world, and if one can take place immediately, perform it and return Some\194\160r where r is the result value of that communication. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEevent\">event</a> -&gt; 'a option</code>", "'a event -> 'a option"],
["Complex", "Complex.html", "polar", "Complex.html#VALpolar", "<div class=\"info\">  <p><code class=\"code\">polar&nbsp;norm&nbsp;arg</code> returns the complex having norm <code class=\"code\">norm</code> and argument <code class=\"code\">arg</code>.</p> </div>", "  polar\194\160norm\194\160arg returns the complex having norm norm and argument arg. ", "<code class=\"type\">float -&gt; float -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "float -> float -> t"],
["Graphics", "Graphics.html", "point_color", "Graphics.html#VALpoint_color", "<div class=\"info\">  <p>Return the color of the given point in the backing store (see \"Double buffering\" below).</p> </div>", "  Return the color of the given point in the backing store (see \"Double buffering\" below). ", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Graphics.html#TYPEcolor\">color</a></code>", "int -> int -> color"],
["Graphics", "Graphics.html", "plots", "Graphics.html#VALplots", "<div class=\"info\">  <p>Plot the given points with the current drawing color.</p> </div>", "  Plot the given points with the current drawing color. ", "<code class=\"type\">(int * int) array -&gt; unit</code>", "(int * int) array -> unit"],
["Graphics", "Graphics.html", "plot", "Graphics.html#VALplot", "<div class=\"info\">  <p>Plot the given point with the current drawing color.</p> </div>", "  Plot the given point with the current drawing color. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["ThreadUnix", "ThreadUnix.html", "pipe", "ThreadUnix.html#VALpipe", "", "", "<code class=\"type\">?cloexec:bool -&gt; unit -&gt; <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> * <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a></code>", "?cloexec:bool -> unit -> Unix.file_descr * Unix.file_descr"],
["Unix", "Unix.html", "pipe", "Unix.html#VALpipe", "<div class=\"info\">  <p>Create a pipe.</p> </div>", "  Create a pipe. ", "<code class=\"type\">?cloexec:bool -&gt; unit -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> * <a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool -> unit -> file_descr * file_descr"],
["UnixLabels", "UnixLabels.html", "pipe", "UnixLabels.html#VALpipe", "<div class=\"info\">  <p>Create a pipe.</p> </div>", "  Create a pipe. ", "<code class=\"type\">?cloexec:bool -&gt; unit -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> * <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool -> unit -> file_descr * file_descr"],
["Clflags", "Clflags.html", "pic_code", "Clflags.html#VALpic_code", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Float", "Float.html", "pi", "Float.html#VALpi", "<div class=\"info\">  <p>The constant pi.</p> </div>", "  The constant pi. ", "<code class=\"type\">float</code>", "float"],
["Queue", "Queue.html", "peek", "Queue.html#VALpeek", "<div class=\"info\">  <p><code class=\"code\">peek&nbsp;q</code> returns the first element in queue <code class=\"code\">q</code>, without removing it from the queue, or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p> </div>", "  peek\194\160q returns the first element in queue q, without removing it from the queue, or raises Queue.Empty if the queue is empty. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Stream", "Stream.html", "peek", "Stream.html#VALpeek", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"constructor\">Some</span></code> of \"the first element\" of the stream, or <code class=\"code\"><span class=\"constructor\">None</span></code> if the stream is empty.</p> </div>", "  Return Some of \"the first element\" of the stream, or None if the stream is empty. ", "<code class=\"type\">'a <a href=\"Stream.html#TYPEt\">t</a> -&gt; 'a option</code>", "'a t -> 'a option"],
["Printast", "Printast.html", "payload", "Printast.html#VALpayload", "", "", "<code class=\"type\">int -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEpayload\">Parsetree.payload</a> -&gt; unit</code>", "int -> Format.formatter -> Parsetree.payload -> unit"],
["Unix", "Unix.html", "pause", "Unix.html#VALpause", "<div class=\"info\">  <p>Wait until a non-ignored, non-blocked signal is delivered.</p> </div>", "  Wait until a non-ignored, non-blocked signal is delivered. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["UnixLabels", "UnixLabels.html", "pause", "UnixLabels.html#VALpause", "<div class=\"info\">  <p>Wait until a non-ignored, non-blocked signal is delivered.</p> </div>", "  Wait until a non-ignored, non-blocked signal is delivered. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Parse", "Parse.html", "pattern", "Parse.html#VALpattern", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "Lexing.lexbuf -> Parsetree.pattern"],
["Pprintast", "Pprintast.html", "pattern", "Pprintast.html#VALpattern", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; unit</code>", "Format.formatter -> Parsetree.pattern -> unit"],
["Typemod", "Typemod.html", "path_of_module", "Typemod.html#VALpath_of_module", "", "", "<code class=\"type\">Typedtree.module_expr -&gt; Path.t option</code>", "Typedtree.module_expr -> Path.t option"],
["Set.S", "Set.S.html", "partition", "Set.S.html#VALpartition", "<div class=\"info\">  <p><code class=\"code\">partition&nbsp;p&nbsp;s</code> returns a pair of sets <code class=\"code\">(s1,&nbsp;s2)</code>, where <code class=\"code\">s1</code> is the set of all the elements of <code class=\"code\">s</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">s2</code> is the set of all the elements of <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p> </div>", "  partition\194\160p\194\160s returns a pair of sets (s1,\194\160s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> * <a href=\"Set.S.html#TYPEt\">t</a></code>", "(elt -> bool) -> t -> t * t"],
["Map.S", "Map.S.html", "partition", "Map.S.html#VALpartition", "<div class=\"info\">  <p><code class=\"code\">partition&nbsp;p&nbsp;m</code> returns a pair of maps <code class=\"code\">(m1,&nbsp;m2)</code>, where <code class=\"code\">m1</code> contains all the bindings of <code class=\"code\">s</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">m2</code> is the map with all the bindings of <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p> </div>", "  partition\194\160p\194\160m returns a pair of maps (m1,\194\160m2), where m1 contains all the bindings of s that satisfy the predicate p, and m2 is the map with all the bindings of s that do not satisfy p. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> * 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "(key -> 'a -> bool) -> 'a t -> 'a t * 'a t"],
["List", "List.html", "partition", "List.html#VALpartition", "<div class=\"info\">  <p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.</p> </div>", "  partition\194\160p\194\160l returns a pair of lists (l1,\194\160l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a list -&gt; 'a list * 'a list</code>", "('a -> bool) -> 'a list -> 'a list * 'a list"],
["ListLabels", "ListLabels.html", "partition", "ListLabels.html#VALpartition", "<div class=\"info\">  <p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.</p> </div>", "  partition\194\160p\194\160l returns a pair of lists (l1,\194\160l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a list -&gt; 'a list * 'a list</code>", "f:('a -> bool) -> 'a list -> 'a list * 'a list"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "partition", "MoreLabels.Map.S.html#VALpartition", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> * 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "f:(key -> 'a -> bool) ->       'a t -> 'a t * 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "partition", "MoreLabels.Set.S.html#VALpartition", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt;<br>       <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> * <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "f:(elt -> bool) ->       t -> t * t"],
["Parser", "Parser.html", "parse_pattern", "Parser.html#VALparse_pattern", "", "", "<code class=\"type\">(<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.pattern"],
["Warnings", "Warnings.html", "parse_options", "Warnings.html#VALparse_options", "", "", "<code class=\"type\">bool -&gt; string -&gt; unit</code>", "bool -> string -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "parse_no_error", "Arg_helper.Make.html#VALparse_no_error", "", "", "<code class=\"type\">string -&gt;<br>       <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparse_result\">parse_result</a></code>", "string ->       parsed ref -> parse_result"],
["Clflags.Int_arg_helper", "Clflags.Int_arg_helper.html", "parse_no_error", "Clflags.Int_arg_helper.html#VALparse_no_error", "", "", "<code class=\"type\">string -&gt;<br>       <a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       <a href=\"Clflags.Int_arg_helper.html#TYPEparse_result\">parse_result</a></code>", "string ->       parsed ref ->       parse_result"],
["Clflags.Float_arg_helper", "Clflags.Float_arg_helper.html", "parse_no_error", "Clflags.Float_arg_helper.html#VALparse_no_error", "", "", "<code class=\"type\">string -&gt;<br>       <a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       <a href=\"Clflags.Float_arg_helper.html#TYPEparse_result\">parse_result</a></code>", "string ->       parsed ref ->       parse_result"],
["Pparse", "Pparse.html", "parse_interface", "Pparse.html#VALparse_interface", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; tool_name:string -&gt; string -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "Format.formatter -> tool_name:string -> string -> Parsetree.signature"],
["Pparse", "Pparse.html", "parse_implementation", "Pparse.html#VALparse_implementation", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; tool_name:string -&gt; string -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "Format.formatter -> tool_name:string -> string -> Parsetree.structure"],
["Parser", "Parser.html", "parse_expression", "Parser.html#VALparse_expression", "", "", "<code class=\"type\">(<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.expression"],
["Arg", "Arg.html", "parse_expand", "Arg.html#VALparse_expand", "<div class=\"info\">  <p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments are allowed and the <a href=\"Arg.html#VALcurrent\"><code class=\"code\"><span class=\"constructor\">Arg</span>.current</code></a> reference is not updated.</p> </div>", "  Same as Arg.parse, except that the Expand arguments are allowed and the Arg.current reference is not updated. ", "<code class=\"type\">(<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list -&gt; <a href=\"Arg.html#TYPEanon_fun\">anon_fun</a> -&gt; <a href=\"Arg.html#TYPEusage_msg\">usage_msg</a> -&gt; unit</code>", "(key * spec * doc) list -> anon_fun -> usage_msg -> unit"],
["Arg", "Arg.html", "parse_dynamic", "Arg.html#VALparse_dynamic", "<div class=\"info\">  <p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\">speclist</code> argument is a reference and may be updated during the parsing.</p> </div>", "  Same as Arg.parse, except that the speclist argument is a reference and may be updated during the parsing. ", "<code class=\"type\">(<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       <a href=\"Arg.html#TYPEanon_fun\">anon_fun</a> -&gt; <a href=\"Arg.html#TYPEusage_msg\">usage_msg</a> -&gt; unit</code>", "(key * spec * doc) list ref ->       anon_fun -> usage_msg -> unit"],
["Parser", "Parser.html", "parse_core_type", "Parser.html#VALparse_core_type", "", "", "<code class=\"type\">(<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.core_type"],
["Clflags", "Clflags.html", "parse_color_setting", "Clflags.html#VALparse_color_setting", "", "", "<code class=\"type\">string -&gt; <a href=\"Misc.Color.html#TYPEsetting\">Misc.Color.setting</a> option</code>", "string -> Misc.Color.setting option"],
["Arg", "Arg.html", "parse_argv_dynamic", "Arg.html#VALparse_argv_dynamic", "<div class=\"info\">  <p>Same as <a href=\"Arg.html#VALparse_argv\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code></a>, except that the <code class=\"code\">speclist</code> argument is a reference and may be updated during the parsing.</p> </div>", "  Same as Arg.parse_argv, except that the speclist argument is a reference and may be updated during the parsing. ", "<code class=\"type\">?current:int <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       string array -&gt;<br>       (<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       <a href=\"Arg.html#TYPEanon_fun\">anon_fun</a> -&gt; string -&gt; unit</code>", "?current:int ref ->       string array ->       (key * spec * doc) list ref ->       anon_fun -> string -> unit"],
["Arg", "Arg.html", "parse_argv", "Arg.html#VALparse_argv", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv&nbsp;~current&nbsp;args&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses the array <code class=\"code\">args</code> as if it were the command line.</p> </div>", "  Arg.parse_argv\194\160~current\194\160args\194\160speclist\194\160anon_fun\194\160usage_msg parses the array args as if it were the command line. ", "<code class=\"type\">?current:int <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       string array -&gt;<br>       (<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list -&gt; <a href=\"Arg.html#TYPEanon_fun\">anon_fun</a> -&gt; <a href=\"Arg.html#TYPEusage_msg\">usage_msg</a> -&gt; unit</code>", "?current:int ref ->       string array ->       (key * spec * doc) list -> anon_fun -> usage_msg -> unit"],
["Clflags", "Clflags.html", "parse_arguments", "Clflags.html#VALparse_arguments", "", "", "<code class=\"type\"><a href=\"Arg.html#TYPEanon_fun\">Arg.anon_fun</a> -&gt; string -&gt; unit</code>", "Arg.anon_fun -> string -> unit"],
["Arg", "Arg.html", "parse_and_expand_argv_dynamic", "Arg.html#VALparse_and_expand_argv_dynamic", "<div class=\"info\">  <p>Same as <a href=\"Arg.html#VALparse_argv_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv_dynamic</code></a>, except that the <code class=\"code\">argv</code> argument is a reference and may be updated during the parsing of <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments.</p> </div>", "  Same as Arg.parse_argv_dynamic, except that the argv argument is a reference and may be updated during the parsing of Expand arguments. ", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       string array <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       (<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt;<br>       <a href=\"Arg.html#TYPEanon_fun\">anon_fun</a> -&gt; string -&gt; unit</code>", "int ref ->       string array ref ->       (key * spec * doc) list ref ->       anon_fun -> string -> unit"],
["Arg", "Arg.html", "parse", "Arg.html#VALparse", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses the command line.</p> </div>", "  Arg.parse\194\160speclist\194\160anon_fun\194\160usage_msg parses the command line. ", "<code class=\"type\">(<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list -&gt; <a href=\"Arg.html#TYPEanon_fun\">anon_fun</a> -&gt; <a href=\"Arg.html#TYPEusage_msg\">usage_msg</a> -&gt; unit</code>", "(key * spec * doc) list -> anon_fun -> usage_msg -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "parse", "Arg_helper.Make.html#VALparse", "", "", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; unit</code>", "string -> string -> parsed ref -> unit"],
["Clflags.Int_arg_helper", "Clflags.Int_arg_helper.html", "parse", "Clflags.Int_arg_helper.html#VALparse", "", "", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; unit</code>", "string -> string -> parsed ref -> unit"],
["Clflags.Float_arg_helper", "Clflags.Float_arg_helper.html", "parse", "Clflags.Float_arg_helper.html#VALparse", "", "", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; unit</code>", "string -> string -> parsed ref -> unit"],
["Longident", "Longident.html", "parse", "Longident.html#VALparse", "", "", "<code class=\"type\">string -&gt; <a href=\"Longident.html#TYPEt\">t</a></code>", "string -> t"],
["Filename", "Filename.html", "parent_dir_name", "Filename.html#VALparent_dir_name", "<div class=\"info\">  <p>The conventional name for the parent of the current directory (e.g.</p> </div>", "  The conventional name for the parent of the current directory (e.g. ", "<code class=\"type\">string</code>", "string"],
["CamlinternalOO", "CamlinternalOO.html", "params", "CamlinternalOO.html#VALparams", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEparams\">params</a></code>", "params"],
["CamlinternalFormat", "CamlinternalFormat.html", "param_format_of_ignored_format", "CamlinternalFormat.html#VALparam_format_of_ignored_format", "", "", "<code class=\"type\">('a, 'b, 'c, 'd, 'y, 'x) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">CamlinternalFormatBasics.ignored</a> -&gt;<br>       ('x, 'b, 'c, 'y, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormat.html#TYPEparam_format_ebb\">param_format_ebb</a></code>", "('a, 'b, 'c, 'd, 'y, 'x) CamlinternalFormatBasics.ignored ->       ('x, 'b, 'c, 'y, 'e, 'f) CamlinternalFormatBasics.fmt ->       ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb"],
["Typemod", "Typemod.html", "package_units", "Typemod.html#VALpackage_units", "", "", "<code class=\"type\">Env.t -&gt; string list -&gt; string -&gt; string -&gt; Typedtree.module_coercion</code>", "Env.t -> string list -> string -> string -> Typedtree.module_coercion"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "package", "Ast_helper.Typ.html#VALpackage", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> * <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a>) list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid ->       (Ast_helper.lid * Parsetree.core_type) list -> Parsetree.core_type"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "pack", "Ast_helper.Exp.html#VALpack", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "override", "Ast_helper.Exp.html#VALoverride", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       (<a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       (Ast_helper.str * Parsetree.expression) list -> Parsetree.expression"],
["Format", "Format.html", "over_max_boxes", "Format.html#VALover_max_boxes", "<div class=\"info\">  <p>Tests if the maximum number of pretty-printing boxes allowed have already been opened.</p> </div>", "  Tests if the maximum number of pretty-printing boxes allowed have already been opened. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Pervasives", "Pervasives.html", "output_value", "Pervasives.html#VALoutput_value", "<div class=\"info\">  <p>Write the representation of a structured value of any type to a channel.</p> </div>", "  Write the representation of a structured value of any type to a channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; 'a -&gt; unit</code>", "out_channel -> 'a -> unit"],
["Misc", "Misc.html", "output_to_file_via_temporary", "Misc.html#VALoutput_to_file_via_temporary", "", "", "<code class=\"type\">?mode:<a href=\"Pervasives.html#TYPEopen_flag\">open_flag</a> list -&gt;<br>       string -&gt; (string -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; 'a) -&gt; 'a</code>", "?mode:open_flag list ->       string -> (string -> out_channel -> 'a) -> 'a"],
["Pervasives", "Pervasives.html", "output_substring", "Pervasives.html#VALoutput_substring", "<div class=\"info\">  <p>Same as <code class=\"code\">output</code> but take a string as argument instead of a byte sequence.</p> </div>", "  Same as output but take a string as argument instead of a byte sequence. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; string -&gt; int -&gt; int -&gt; unit</code>", "out_channel -> string -> int -> int -> unit"],
["Pervasives", "Pervasives.html", "output_string", "Pervasives.html#VALoutput_string", "<div class=\"info\">  <p>Write the string on the given output channel.</p> </div>", "  Write the string on the given output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; string -&gt; unit</code>", "out_channel -> string -> unit"],
["Clflags", "Clflags.html", "output_name", "Clflags.html#VALoutput_name", "", "", "<code class=\"type\">string option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string option ref"],
["Clflags", "Clflags.html", "output_complete_object", "Clflags.html#VALoutput_complete_object", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Pervasives", "Pervasives.html", "output_char", "Pervasives.html#VALoutput_char", "<div class=\"info\">  <p>Write the character on the given output channel.</p> </div>", "  Write the character on the given output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; char -&gt; unit</code>", "out_channel -> char -> unit"],
["Clflags", "Clflags.html", "output_c_object", "Clflags.html#VALoutput_c_object", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Pervasives", "Pervasives.html", "output_bytes", "Pervasives.html#VALoutput_bytes", "<div class=\"info\">  <p>Write the byte sequence on the given output channel.</p> </div>", "  Write the byte sequence on the given output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; bytes -&gt; unit</code>", "out_channel -> bytes -> unit"],
["Pervasives", "Pervasives.html", "output_byte", "Pervasives.html#VALoutput_byte", "<div class=\"info\">  <p>Write one 8-bit integer (as the single character with that code) on the given output channel.</p> </div>", "  Write one 8-bit integer (as the single character with that code) on the given output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int -&gt; unit</code>", "out_channel -> int -> unit"],
["Buffer", "Buffer.html", "output_buffer", "Buffer.html#VALoutput_buffer", "<div class=\"info\">  <p><code class=\"code\">output_buffer&nbsp;oc&nbsp;b</code> writes the current contents of buffer <code class=\"code\">b</code> on the output channel <code class=\"code\">oc</code>.</p> </div>", "  output_buffer\194\160oc\194\160b writes the current contents of buffer b on the output channel oc. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Buffer.html#TYPEt\">t</a> -&gt; unit</code>", "out_channel -> t -> unit"],
["Pervasives", "Pervasives.html", "output_binary_int", "Pervasives.html#VALoutput_binary_int", "<div class=\"info\">  <p>Write one integer in binary format (4 bytes, big-endian) on the given output channel.</p> </div>", "  Write one integer in binary format (4 bytes, big-endian) on the given output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int -&gt; unit</code>", "out_channel -> int -> unit"],
["CamlinternalFormat", "CamlinternalFormat.html", "output_acc", "CamlinternalFormat.html#VALoutput_acc", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt;<br>       (<a href=\"Pervasives.html#TYPEout_channel\">out_channel</a>, unit) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> -&gt; unit</code>", "out_channel ->       (out_channel, unit) acc -> unit"],
["Digest", "Digest.html", "output", "Digest.html#VALoutput", "<div class=\"info\">  <p>Write a digest on the given output channel.</p> </div>", "  Write a digest on the given output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Digest.html#TYPEt\">t</a> -&gt; unit</code>", "out_channel -> t -> unit"],
["Identifiable.Thing", "Identifiable.Thing.html", "output", "Identifiable.Thing.html#VALoutput", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Identifiable.Thing.html#TYPEt\">t</a> -&gt; unit</code>", "out_channel -> t -> unit"],
["Identifiable.Set", "Identifiable.Set.html", "output", "Identifiable.Set.html#VALoutput", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; t -&gt; unit</code>", "out_channel -> t -> unit"],
["Misc.LongString", "Misc.LongString.html", "output", "Misc.LongString.html#VALoutput", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "out_channel -> t -> int -> int -> unit"],
["Pervasives", "Pervasives.html", "output", "Pervasives.html#VALoutput", "<div class=\"info\">  <p><code class=\"code\">output&nbsp;oc&nbsp;buf&nbsp;pos&nbsp;len</code> writes <code class=\"code\">len</code> characters from byte sequence <code class=\"code\">buf</code>, starting at offset <code class=\"code\">pos</code>, to the given output channel <code class=\"code\">oc</code>.</p> </div>", "  output\194\160oc\194\160buf\194\160pos\194\160len writes len characters from byte sequence buf, starting at offset pos, to the given output channel oc. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "out_channel -> bytes -> int -> int -> unit"],
["Obj", "Obj.html", "out_of_heap_tag", "Obj.html#VALout_of_heap_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Unix", "Unix.html", "out_channel_of_descr", "Unix.html#VALout_channel_of_descr", "<div class=\"info\">  <p>Create an output channel writing on the given descriptor.</p> </div>", "  Create an output channel writing on the given descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "file_descr -> out_channel"],
["UnixLabels", "UnixLabels.html", "out_channel_of_descr", "UnixLabels.html#VALout_channel_of_descr", "<div class=\"info\">  <p>Create an output channel writing on the given descriptor.</p> </div>", "  Create an output channel writing on the given descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "file_descr -> out_channel"],
["Pervasives", "Pervasives.html", "out_channel_length", "Pervasives.html#VALout_channel_length", "<div class=\"info\">  <p>Return the size (number of characters) of the regular file on which the given channel is opened.</p> </div>", "  Return the size (number of characters) of the regular file on which the given channel is opened. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int</code>", "out_channel -> int"],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "out_channel_length", "Pervasives.LargeFile.html#VALout_channel_length", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int64</code>", "out_channel -> int64"],
["Sys", "Sys.html", "os_type", "Sys.html#VALos_type", "<div class=\"info\">  <p>Operating system currently executing the OCaml program.</p> </div>", "  Operating system currently executing the OCaml program. ", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "or_", "Ast_helper.Pat.html#VALor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern -> Parsetree.pattern -> Parsetree.pattern"],
["Profile", "Profile.html", "options_doc", "Profile.html#VALoptions_doc", "", "", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "optimize_for_speed", "Clflags.html#VALoptimize_for_speed", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Unix", "Unix.html", "openfile", "Unix.html#VALopenfile", "<div class=\"info\">  <p>Open the named file with the given flags.</p> </div>", "  Open the named file with the given flags. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEopen_flag\">open_flag</a> list -&gt; <a href=\"Unix.html#TYPEfile_perm\">file_perm</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "string -> open_flag list -> file_perm -> file_descr"],
["UnixLabels", "UnixLabels.html", "openfile", "UnixLabels.html#VALopenfile", "<div class=\"info\">  <p>Open the named file with the given flags.</p> </div>", "  Open the named file with the given flags. ", "<code class=\"type\">string -&gt;<br>       mode:<a href=\"UnixLabels.html#TYPEopen_flag\">open_flag</a> list -&gt;<br>       perm:<a href=\"UnixLabels.html#TYPEfile_perm\">file_perm</a> -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "string ->       mode:open_flag list ->       perm:file_perm -> file_descr"],
["Unix", "Unix.html", "opendir", "Unix.html#VALopendir", "<div class=\"info\">  <p>Open a descriptor on a directory</p> </div>", "  Open a descriptor on a directory ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEdir_handle\">dir_handle</a></code>", "string -> dir_handle"],
["UnixLabels", "UnixLabels.html", "opendir", "UnixLabels.html#VALopendir", "<div class=\"info\">  <p>Open a descriptor on a directory</p> </div>", "  Open a descriptor on a directory ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEdir_handle\">dir_handle</a></code>", "string -> dir_handle"],
["Format", "Format.html", "open_vbox", "Format.html#VALopen_vbox", "<div class=\"info\">  <p><code class=\"code\">pp_open_vbox&nbsp;ppf&nbsp;d</code> opens a new 'vertical' pretty-printing box with offset <code class=\"code\">d</code>.</p> </div>", "  pp_open_vbox\194\160ppf\194\160d opens a new 'vertical' pretty-printing box with offset d. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Filename", "Filename.html", "open_temp_file", "Filename.html#VALopen_temp_file", "<div class=\"info\">  <p>Same as <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a>, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file.</p> </div>", "  Same as Filename.temp_file, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file. ", "<code class=\"type\">?mode:<a href=\"Pervasives.html#TYPEopen_flag\">open_flag</a> list -&gt;<br>       ?perms:int -&gt;<br>       ?temp_dir:string -&gt; string -&gt; string -&gt; string * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "?mode:open_flag list ->       ?perms:int ->       ?temp_dir:string -> string -> string -> string * out_channel"],
["Format", "Format.html", "open_tbox", "Format.html#VALopen_tbox", "<div class=\"info\">  <p><code class=\"code\">open_tbox&nbsp;()</code> opens a new tabulation box.</p> </div>", "  open_tbox\194\160() opens a new tabulation box. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Format", "Format.html", "open_tag", "Format.html#VALopen_tag", "<div class=\"info\">  <p><code class=\"code\">pp_open_tag&nbsp;ppf&nbsp;t</code> opens the semantic tag named <code class=\"code\">t</code>.</p> </div>", "  pp_open_tag\194\160ppf\194\160t opens the semantic tag named t. ", "<code class=\"type\"><a href=\"Format.html#TYPEtag\">tag</a> -&gt; unit</code>", "tag -> unit"],
["GraphicsX11", "GraphicsX11.html", "open_subwindow", "GraphicsX11.html#VALopen_subwindow", "<div class=\"info\">  <p>Create a sub-window of the current OCaml graphics window and return its identifier.</p> </div>", "  Create a sub-window of the current OCaml graphics window and return its identifier. ", "<code class=\"type\">x:int -&gt; y:int -&gt; width:int -&gt; height:int -&gt; <a href=\"GraphicsX11.html#TYPEwindow_id\">window_id</a></code>", "x:int -> y:int -> width:int -> height:int -> window_id"],
["ThreadUnix", "ThreadUnix.html", "open_process_out", "ThreadUnix.html#VALopen_process_out", "", "", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> out_channel"],
["Unix", "Unix.html", "open_process_out", "Unix.html#VALopen_process_out", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>, but redirect the standard input of the command to a pipe.</p> </div>", "  Same as Unix.open_process_in, but redirect the standard input of the command to a pipe. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> out_channel"],
["UnixLabels", "UnixLabels.html", "open_process_out", "UnixLabels.html#VALopen_process_out", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>, but redirect the standard input of the command to a pipe.</p> </div>", "  Same as UnixLabels.open_process_in, but redirect the standard input of the command to a pipe. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> out_channel"],
["ThreadUnix", "ThreadUnix.html", "open_process_in", "ThreadUnix.html#VALopen_process_in", "", "", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string -> in_channel"],
["Unix", "Unix.html", "open_process_in", "Unix.html#VALopen_process_in", "<div class=\"info\">  <p>High-level pipe and process management.</p> </div>", "  High-level pipe and process management. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string -> in_channel"],
["UnixLabels", "UnixLabels.html", "open_process_in", "UnixLabels.html#VALopen_process_in", "<div class=\"info\">  <p>High-level pipe and process management.</p> </div>", "  High-level pipe and process management. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string -> in_channel"],
["ThreadUnix", "ThreadUnix.html", "open_process_full", "ThreadUnix.html#VALopen_process_full", "", "", "<code class=\"type\">string -&gt;<br>       string array -&gt;<br>       <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> * <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string ->       string array ->       in_channel * out_channel * in_channel"],
["Unix", "Unix.html", "open_process_full", "Unix.html#VALopen_process_full", "<div class=\"info\">  <p>Similar to <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>, but the second argument specifies the environment passed to the command.</p> </div>", "  Similar to Unix.open_process, but the second argument specifies the environment passed to the command. ", "<code class=\"type\">string -&gt;<br>       string array -&gt;<br>       <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> * <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string ->       string array ->       in_channel * out_channel * in_channel"],
["UnixLabels", "UnixLabels.html", "open_process_full", "UnixLabels.html#VALopen_process_full", "<div class=\"info\">  <p>Similar to <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>, but the second argument specifies the environment passed to the command.</p> </div>", "  Similar to UnixLabels.open_process, but the second argument specifies the environment passed to the command. ", "<code class=\"type\">string -&gt;<br>       env:string array -&gt;<br>       <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> * <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string ->       env:string array ->       in_channel * out_channel * in_channel"],
["ThreadUnix", "ThreadUnix.html", "open_process", "ThreadUnix.html#VALopen_process", "", "", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> in_channel * out_channel"],
["Unix", "Unix.html", "open_process", "Unix.html#VALopen_process", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</p> </div>", "  Same as Unix.open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> in_channel * out_channel"],
["UnixLabels", "UnixLabels.html", "open_process", "UnixLabels.html#VALopen_process", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</p> </div>", "  Same as UnixLabels.open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> in_channel * out_channel"],
["Pervasives", "Pervasives.html", "open_out_gen", "Pervasives.html#VALopen_out_gen", "<div class=\"info\">  <p><code class=\"code\">open_out_gen&nbsp;mode&nbsp;perm&nbsp;filename</code> opens the named file for writing, as described above.</p> </div>", "  open_out_gen\194\160mode\194\160perm\194\160filename opens the named file for writing, as described above. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEopen_flag\">open_flag</a> list -&gt; int -&gt; string -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "open_flag list -> int -> string -> out_channel"],
["Pervasives", "Pervasives.html", "open_out_bin", "Pervasives.html#VALopen_out_bin", "<div class=\"info\">  <p>Same as <a href=\"Pervasives.html#VALopen_out\"><code class=\"code\">open_out</code></a>, but the file is opened in binary mode, so that no translation takes place during writes.</p> </div>", "  Same as open_out, but the file is opened in binary mode, so that no translation takes place during writes. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> out_channel"],
["Pervasives", "Pervasives.html", "open_out", "Pervasives.html#VALopen_out", "<div class=\"info\">  <p>Open the named file for writing, and return a new output channel on that file, positioned at the beginning of the file.</p> </div>", "  Open the named file for writing, and return a new output channel on that file, positioned at the beginning of the file. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "string -> out_channel"],
["Clflags", "Clflags.html", "open_modules", "Clflags.html#VALopen_modules", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Depend", "Depend.html", "open_module", "Depend.html#VALopen_module", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> -&gt; <a href=\"Depend.html#TYPEbound_map\">bound_map</a></code>", "bound_map -> Longident.t -> bound_map"],
["Pervasives", "Pervasives.html", "open_in_gen", "Pervasives.html#VALopen_in_gen", "<div class=\"info\">  <p><code class=\"code\">open_in_gen&nbsp;mode&nbsp;perm&nbsp;filename</code> opens the named file for reading, as described above.</p> </div>", "  open_in_gen\194\160mode\194\160perm\194\160filename opens the named file for reading, as described above. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEopen_flag\">open_flag</a> list -&gt; int -&gt; string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "open_flag list -> int -> string -> in_channel"],
["Pervasives", "Pervasives.html", "open_in_bin", "Pervasives.html#VALopen_in_bin", "<div class=\"info\">  <p>Same as <a href=\"Pervasives.html#VALopen_in\"><code class=\"code\">open_in</code></a>, but the file is opened in binary mode, so that no translation takes place during reads.</p> </div>", "  Same as open_in, but the file is opened in binary mode, so that no translation takes place during reads. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string -> in_channel"],
["Scanf.Scanning", "Scanf.Scanning.html", "open_in_bin", "Scanf.Scanning.html#VALopen_in_bin", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in_bin&nbsp;fname</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel for bufferized reading in binary mode from file <code class=\"code\">fname</code>.</p> </div>", "  Scanning.open_in_bin\194\160fname returns a Scanf.Scanning.in_channel formatted input channel for bufferized reading in binary mode from file fname. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEfile_name\">file_name</a> -&gt; <a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "file_name -> in_channel"],
["Pervasives", "Pervasives.html", "open_in", "Pervasives.html#VALopen_in", "<div class=\"info\">  <p>Open the named file for reading, and return a new input channel on that file, positioned at the beginning of the file.</p> </div>", "  Open the named file for reading, and return a new input channel on that file, positioned at the beginning of the file. ", "<code class=\"type\">string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "string -> in_channel"],
["Scanf.Scanning", "Scanf.Scanning.html", "open_in", "Scanf.Scanning.html#VALopen_in", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in&nbsp;fname</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel for bufferized reading in text mode from file <code class=\"code\">fname</code>.</p> </div>", "  Scanning.open_in\194\160fname returns a Scanf.Scanning.in_channel formatted input channel for bufferized reading in text mode from file fname. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEfile_name\">file_name</a> -&gt; <a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "file_name -> in_channel"],
["Format", "Format.html", "open_hvbox", "Format.html#VALopen_hvbox", "<div class=\"info\">  <p><code class=\"code\">pp_open_hvbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal/vertical' pretty-printing box with offset <code class=\"code\">d</code>.</p> </div>", "  pp_open_hvbox\194\160ppf\194\160d opens a new 'horizontal/vertical' pretty-printing box with offset d. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Format", "Format.html", "open_hovbox", "Format.html#VALopen_hovbox", "<div class=\"info\">  <p><code class=\"code\">pp_open_hovbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal-or-vertical' pretty-printing box with offset <code class=\"code\">d</code>.</p> </div>", "  pp_open_hovbox\194\160ppf\194\160d opens a new 'horizontal-or-vertical' pretty-printing box with offset d. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Format", "Format.html", "open_hbox", "Format.html#VALopen_hbox", "<div class=\"info\">  <p><code class=\"code\">pp_open_hbox&nbsp;ppf&nbsp;()</code> opens a new 'horizontal' pretty-printing box.</p> </div>", "  pp_open_hbox\194\160ppf\194\160() opens a new 'horizontal' pretty-printing box. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Graphics", "Graphics.html", "open_graph", "Graphics.html#VALopen_graph", "<div class=\"info\">  <p>Show the graphics window or switch the screen to graphic mode.</p> </div>", "  Show the graphics window or switch the screen to graphic mode. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["ThreadUnix", "ThreadUnix.html", "open_connection", "ThreadUnix.html#VALopen_connection", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEsockaddr\">Unix.sockaddr</a> -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "Unix.sockaddr -> in_channel * out_channel"],
["Unix", "Unix.html", "open_connection", "Unix.html#VALopen_connection", "<div class=\"info\">  <p>Connect to a server at the given address.</p> </div>", "  Connect to a server at the given address. ", "<code class=\"type\"><a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "sockaddr -> in_channel * out_channel"],
["UnixLabels", "UnixLabels.html", "open_connection", "UnixLabels.html#VALopen_connection", "<div class=\"info\">  <p>Connect to a server at the given address.</p> </div>", "  Connect to a server at the given address. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a></code>", "sockaddr -> in_channel * out_channel"],
["CamlinternalFormat", "CamlinternalFormat.html", "open_box_of_string", "CamlinternalFormat.html#VALopen_box_of_string", "", "", "<code class=\"type\">string -&gt; int * <a href=\"CamlinternalFormatBasics.html#TYPEblock_type\">CamlinternalFormatBasics.block_type</a></code>", "string -> int * CamlinternalFormatBasics.block_type"],
["Format", "Format.html", "open_box", "Format.html#VALopen_box", "<div class=\"info\">  <p><code class=\"code\">pp_open_box&nbsp;ppf&nbsp;d</code> opens a new compacting pretty-printing box with offset <code class=\"code\">d</code> in the formatter <code class=\"code\">ppf</code>.</p> </div>", "  pp_open_box\194\160ppf\194\160d opens a new compacting pretty-printing box with offset d in the formatter ppf. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["Pparse", "Pparse.html", "open_and_check_magic", "Pparse.html#VALopen_and_check_magic", "", "", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * bool</code>", "string -> string -> in_channel * bool"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "open_", "Ast_helper.Pat.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.pattern -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "open_", "Ast_helper.Exp.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.override_flag ->       Ast_helper.lid -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "open_", "Ast_helper.Sig.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.open_description -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "open_", "Ast_helper.Str.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.open_description -> Parsetree.structure_item"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "open_", "Ast_helper.Cty.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.override_flag ->       Ast_helper.lid -> Parsetree.class_type -> Parsetree.class_type"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "open_", "Ast_helper.Cl.html#VALopen_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.override_flag ->       Ast_helper.lid -> Parsetree.class_expr -> Parsetree.class_expr"],
["Sys", "Sys.html", "opaque_identity", "Sys.html#VALopaque_identity", "<div class=\"info\">  <p>For the purposes of optimization, <code class=\"code\">opaque_identity</code> behaves like an unknown (and thus possibly side-effecting) function.</p> </div>", "  For the purposes of optimization, opaque_identity behaves like an unknown (and thus possibly side-effecting) function. ", "<code class=\"type\">'a -&gt; 'a</code>", "'a -> 'a"],
["Clflags", "Clflags.html", "opaque", "Clflags.html#VALopaque", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Complex", "Complex.html", "one", "Complex.html#VALone", "<div class=\"info\">  <p>The complex number <code class=\"code\">1</code>.</p> </div>", "  The complex number 1. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a></code>", "t"],
["Int32", "Int32.html", "one", "Int32.html#VALone", "<div class=\"info\">  <p>The 32-bit integer 1.</p> </div>", "  The 32-bit integer 1. ", "<code class=\"type\">int32</code>", "int32"],
["Int64", "Int64.html", "one", "Int64.html#VALone", "<div class=\"info\">  <p>The 64-bit integer 1.</p> </div>", "  The 64-bit integer 1. ", "<code class=\"type\">int64</code>", "int64"],
["Nativeint", "Nativeint.html", "one", "Nativeint.html#VALone", "<div class=\"info\">  <p>The native integer 1.</p> </div>", "  The native integer 1. ", "<code class=\"type\">nativeint</code>", "nativeint"],
["Numbers.Int8", "Numbers.Int8.html", "one", "Numbers.Int8.html#VALone", "", "", "<code class=\"type\"><a href=\"Numbers.Int8.html#TYPEt\">t</a></code>", "t"],
["Targetint", "Targetint.html", "one", "Targetint.html#VALone", "<div class=\"info\">  <p>The target integer 1.</p> </div>", "  The target integer 1. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "t"],
["Bigarray.Array0", "Bigarray.Array0.html", "of_value", "Bigarray.Array0.html#VALof_value", "<div class=\"info\">  <p>Build a zero-dimensional big array initialized from the given value.</p> </div>", "  Build a zero-dimensional big array initialized from the given value. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; 'a -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> 'a -> ('a, 'b, 'c) t"],
["Float", "Float.html", "of_string_opt", "Float.html#VALof_string_opt", "<div class=\"info\">  <p>Same as <code class=\"code\">of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p> </div>", "  Same as of_string, but returns None instead of raising. ", "<code class=\"type\">string -&gt; float option</code>", "string -> float option"],
["Int32", "Int32.html", "of_string_opt", "Int32.html#VALof_string_opt", "<div class=\"info\">  <p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p> </div>", "  Same as of_string, but return None instead of raising. ", "<code class=\"type\">string -&gt; int32 option</code>", "string -> int32 option"],
["Int64", "Int64.html", "of_string_opt", "Int64.html#VALof_string_opt", "<div class=\"info\">  <p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p> </div>", "  Same as of_string, but return None instead of raising. ", "<code class=\"type\">string -&gt; int64 option</code>", "string -> int64 option"],
["Nativeint", "Nativeint.html", "of_string_opt", "Nativeint.html#VALof_string_opt", "<div class=\"info\">  <p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p> </div>", "  Same as of_string, but return None instead of raising. ", "<code class=\"type\">string -&gt; nativeint option</code>", "string -> nativeint option"],
["Bytes", "Bytes.html", "of_string", "Bytes.html#VALof_string", "<div class=\"info\">  <p>Return a new byte sequence that contains the same bytes as the given string.</p> </div>", "  Return a new byte sequence that contains the same bytes as the given string. ", "<code class=\"type\">string -&gt; bytes</code>", "string -> bytes"],
["BytesLabels", "BytesLabels.html", "of_string", "BytesLabels.html#VALof_string", "<div class=\"info\">  <p>Return a new byte sequence that contains the same bytes as the given string.</p> </div>", "  Return a new byte sequence that contains the same bytes as the given string. ", "<code class=\"type\">string -&gt; bytes</code>", "string -> bytes"],
["Float", "Float.html", "of_string", "Float.html#VALof_string", "<div class=\"info\">  <p>Convert the given string to a float.</p> </div>", "  Convert the given string to a float. ", "<code class=\"type\">string -&gt; float</code>", "string -> float"],
["Int32", "Int32.html", "of_string", "Int32.html#VALof_string", "<div class=\"info\">  <p>Convert the given string to a 32-bit integer.</p> </div>", "  Convert the given string to a 32-bit integer. ", "<code class=\"type\">string -&gt; int32</code>", "string -> int32"],
["Int64", "Int64.html", "of_string", "Int64.html#VALof_string", "<div class=\"info\">  <p>Convert the given string to a 64-bit integer.</p> </div>", "  Convert the given string to a 64-bit integer. ", "<code class=\"type\">string -&gt; int64</code>", "string -> int64"],
["Nativeint", "Nativeint.html", "of_string", "Nativeint.html#VALof_string", "<div class=\"info\">  <p>Convert the given string to a native integer.</p> </div>", "  Convert the given string to a native integer. ", "<code class=\"type\">string -&gt; nativeint</code>", "string -> nativeint"],
["Stream", "Stream.html", "of_string", "Stream.html#VALof_string", "<div class=\"info\">  <p>Return the stream of the characters of the string parameter.</p> </div>", "  Return the stream of the characters of the string parameter. ", "<code class=\"type\">string -&gt; char <a href=\"Stream.html#TYPEt\">t</a></code>", "string -> char t"],
["Targetint", "Targetint.html", "of_string", "Targetint.html#VALof_string", "<div class=\"info\">  <p>Convert the given string to a target integer.</p> </div>", "  Convert the given string to a target integer. ", "<code class=\"type\">string -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "string -> t"],
["Identifiable.Map", "Identifiable.Map.html", "of_set", "Identifiable.Map.html#VALof_set", "", "", "<code class=\"type\">(key -&gt; 'a) -&gt; Set.Make(T).t -&gt; 'a t</code>", "(key -> 'a) -> Set.Make(T).t -> 'a t"],
["Array", "Array.html", "of_seq", "Array.html#VALof_seq", "<div class=\"info\">  <p>Create an array from the generator</p> </div>", "  Create an array from the generator ", "<code class=\"type\">'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a array</code>", "'a Seq.t -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "of_seq", "ArrayLabels.html#VALof_seq", "<div class=\"info\">  <p>Create an array from the generator</p> </div>", "  Create an array from the generator ", "<code class=\"type\">'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a array</code>", "'a Seq.t -> 'a array"],
["Buffer", "Buffer.html", "of_seq", "Buffer.html#VALof_seq", "<div class=\"info\">  <p>Create a buffer from the generator</p> </div>", "  Create a buffer from the generator ", "<code class=\"type\">char <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"Buffer.html#TYPEt\">t</a></code>", "char Seq.t -> t"],
["Bytes", "Bytes.html", "of_seq", "Bytes.html#VALof_seq", "<div class=\"info\">  <p>Create a string from the generator</p> </div>", "  Create a string from the generator ", "<code class=\"type\">char <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"Bytes.html#TYPEt\">t</a></code>", "char Seq.t -> t"],
["BytesLabels", "BytesLabels.html", "of_seq", "BytesLabels.html#VALof_seq", "<div class=\"info\">  <p>Create a string from the generator</p> </div>", "  Create a string from the generator ", "<code class=\"type\">char <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"BytesLabels.html#TYPEt\">t</a></code>", "char Seq.t -> t"],
["Set.S", "Set.S.html", "of_seq", "Set.S.html#VALof_seq", "<div class=\"info\">  <p>Build a set from the given bindings</p> </div>", "  Build a set from the given bindings ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "elt Seq.t -> t"],
["Map.S", "Map.S.html", "of_seq", "Map.S.html#VALof_seq", "<div class=\"info\">  <p>Build a map from the given bindings</p> </div>", "  Build a map from the given bindings ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t -> 'a t"],
["Hashtbl", "Hashtbl.html", "of_seq", "Hashtbl.html#VALof_seq", "<div class=\"info\">  <p>Build a table from the given bindings.</p> </div>", "  Build a table from the given bindings. ", "<code class=\"type\">('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; ('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a></code>", "('a * 'b) Seq.t -> ('a, 'b) t"],
["Hashtbl.S", "Hashtbl.S.html", "of_seq", "Hashtbl.S.html#VALof_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">(<a href=\"Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"Hashtbl.S.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t -> 'a t"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "of_seq", "Hashtbl.SeededS.html#VALof_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">(<a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t -> 'a t"],
["List", "List.html", "of_seq", "List.html#VALof_seq", "<div class=\"info\">  <p>Create a list from the iterator</p> </div>", "  Create a list from the iterator ", "<code class=\"type\">'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a list</code>", "'a Seq.t -> 'a list"],
["ListLabels", "ListLabels.html", "of_seq", "ListLabels.html#VALof_seq", "<div class=\"info\">  <p>Create a list from the iterator</p> </div>", "  Create a list from the iterator ", "<code class=\"type\">'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a list</code>", "'a Seq.t -> 'a list"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "of_seq", "MoreLabels.Hashtbl.html#VALof_seq", "", "", "<code class=\"type\">('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; ('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a></code>", "('a * 'b) Seq.t -> ('a, 'b) t"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "of_seq", "MoreLabels.Hashtbl.S.html#VALof_seq", "", "", "<code class=\"type\">(<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t -> 'a t"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "of_seq", "MoreLabels.Hashtbl.SeededS.html#VALof_seq", "", "", "<code class=\"type\">(<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt;<br>       'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t ->       'a t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "of_seq", "MoreLabels.Map.S.html#VALof_seq", "", "", "<code class=\"type\">(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "of_seq", "MoreLabels.Set.S.html#VALof_seq", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "elt Seq.t -> t"],
["Queue", "Queue.html", "of_seq", "Queue.html#VALof_seq", "<div class=\"info\">  <p>Create an array from the generator</p> </div>", "  Create an array from the generator ", "<code class=\"type\">'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a></code>", "'a Seq.t -> 'a t"],
["Stack", "Stack.html", "of_seq", "Stack.html#VALof_seq", "<div class=\"info\">  <p>Create a stack from the iterator</p> </div>", "  Create a stack from the iterator ", "<code class=\"type\">'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"Stack.html#TYPEt\">t</a></code>", "'a Seq.t -> 'a t"],
["StringLabels", "StringLabels.html", "of_seq", "StringLabels.html#VALof_seq", "<div class=\"info\">  <p>Create a string from the generator</p> </div>", "  Create a string from the generator ", "<code class=\"type\">char <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"StringLabels.html#TYPEt\">t</a></code>", "char Seq.t -> t"],
["String", "String.html", "of_seq", "String.html#VALof_seq", "<div class=\"info\">  <p>Create a string from the generator</p> </div>", "  Create a string from the generator ", "<code class=\"type\">char <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"String.html#TYPEt\">t</a></code>", "char Seq.t -> t"],
["Int64", "Int64.html", "of_nativeint", "Int64.html#VALof_nativeint", "<div class=\"info\">  <p>Convert the given native integer (type <code class=\"code\">nativeint</code>) to a 64-bit integer (type <code class=\"code\">int64</code>).</p> </div>", "  Convert the given native integer (type nativeint) to a 64-bit integer (type int64). ", "<code class=\"type\">nativeint -&gt; int64</code>", "nativeint -> int64"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "of_map", "Identifiable.Tbl.html#VALof_map", "", "", "<code class=\"type\">'a Map.Make(T).t -&gt; 'a t</code>", "'a Map.Make(T).t -> 'a t"],
["Array", "Array.html", "of_list", "Array.html#VALof_list", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements of <code class=\"code\">l</code>.</p> </div>", "  Array.of_list\194\160l returns a fresh array containing the elements of l. ", "<code class=\"type\">'a list -&gt; 'a array</code>", "'a list -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "of_list", "ArrayLabels.html#VALof_list", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements of <code class=\"code\">l</code>.</p> </div>", "  Array.of_list\194\160l returns a fresh array containing the elements of l. ", "<code class=\"type\">'a list -&gt; 'a array</code>", "'a list -> 'a array"],
["Set.S", "Set.S.html", "of_list", "Set.S.html#VALof_list", "<div class=\"info\">  <p><code class=\"code\">of_list&nbsp;l</code> creates a set from a list of elements.</p> </div>", "  of_list\194\160l creates a set from a list of elements. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> list -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "elt list -> t"],
["Identifiable.Set", "Identifiable.Set.html", "of_list", "Identifiable.Set.html#VALof_list", "", "", "<code class=\"type\">elt list -&gt; t</code>", "elt list -> t"],
["Identifiable.Map", "Identifiable.Map.html", "of_list", "Identifiable.Map.html#VALof_list", "", "", "<code class=\"type\">(key * 'a) list -&gt; 'a t</code>", "(key * 'a) list -> 'a t"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "of_list", "Identifiable.Tbl.html#VALof_list", "", "", "<code class=\"type\">(<a href=\"Identifiable.Tbl.T.html#TYPEt\">T.t</a> * 'a) list -&gt; 'a t</code>", "(T.t * 'a) list -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "of_list", "MoreLabels.Set.S.html#VALof_list", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> list -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "elt list -> t"],
["Stream", "Stream.html", "of_list", "Stream.html#VALof_list", "<div class=\"info\">  <p>Return the stream holding the elements of the list in the same order.</p> </div>", "  Return the stream holding the elements of the list in the same order. ", "<code class=\"type\">'a list -&gt; 'a <a href=\"Stream.html#TYPEt\">t</a></code>", "'a list -> 'a t"],
["Numbers.Int8", "Numbers.Int8.html", "of_int_exn", "Numbers.Int8.html#VALof_int_exn", "", "", "<code class=\"type\">int -&gt; <a href=\"Numbers.Int8.html#TYPEt\">t</a></code>", "int -> t"],
["Numbers.Int16", "Numbers.Int16.html", "of_int_exn", "Numbers.Int16.html#VALof_int_exn", "", "", "<code class=\"type\">int -&gt; <a href=\"Numbers.Int16.html#TYPEt\">t</a></code>", "int -> t"],
["Targetint", "Targetint.html", "of_int_exn", "Targetint.html#VALof_int_exn", "<div class=\"info\">  <p>Convert the given integer (type <code class=\"code\">int</code>) to a target integer (type <code class=\"code\">t</code>).</p> </div>", "  Convert the given integer (type int) to a target integer (type t). ", "<code class=\"type\">int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int -> t"],
["Numbers.Int16", "Numbers.Int16.html", "of_int64_exn", "Numbers.Int16.html#VALof_int64_exn", "", "", "<code class=\"type\"><a href=\"Int64.html#TYPEt\">Int64.t</a> -&gt; <a href=\"Numbers.Int16.html#TYPEt\">t</a></code>", "Int64.t -> t"],
["Targetint", "Targetint.html", "of_int64", "Targetint.html#VALof_int64", "<div class=\"info\">  <p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a target integer.</p> </div>", "  Convert the given 64-bit integer (type int64) to a target integer. ", "<code class=\"type\">int64 -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int64 -> t"],
["Int64", "Int64.html", "of_int32", "Int64.html#VALof_int32", "<div class=\"info\">  <p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to a 64-bit integer (type <code class=\"code\">int64</code>).</p> </div>", "  Convert the given 32-bit integer (type int32) to a 64-bit integer (type int64). ", "<code class=\"type\">int32 -&gt; int64</code>", "int32 -> int64"],
["Nativeint", "Nativeint.html", "of_int32", "Nativeint.html#VALof_int32", "<div class=\"info\">  <p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to a native integer.</p> </div>", "  Convert the given 32-bit integer (type int32) to a native integer. ", "<code class=\"type\">int32 -&gt; nativeint</code>", "int32 -> nativeint"],
["Targetint", "Targetint.html", "of_int32", "Targetint.html#VALof_int32", "<div class=\"info\">  <p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to a target integer.</p> </div>", "  Convert the given 32-bit integer (type int32) to a target integer. ", "<code class=\"type\">int32 -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int32 -> t"],
["Float", "Float.html", "of_int", "Float.html#VALof_int", "<div class=\"info\">  <p>Convert an integer to floating-point.</p> </div>", "  Convert an integer to floating-point. ", "<code class=\"type\">int -&gt; float</code>", "int -> float"],
["Int32", "Int32.html", "of_int", "Int32.html#VALof_int", "<div class=\"info\">  <p>Convert the given integer (type <code class=\"code\">int</code>) to a 32-bit integer (type <code class=\"code\">int32</code>).</p> </div>", "  Convert the given integer (type int) to a 32-bit integer (type int32). ", "<code class=\"type\">int -&gt; int32</code>", "int -> int32"],
["Int64", "Int64.html", "of_int", "Int64.html#VALof_int", "<div class=\"info\">  <p>Convert the given integer (type <code class=\"code\">int</code>) to a 64-bit integer (type <code class=\"code\">int64</code>).</p> </div>", "  Convert the given integer (type int) to a 64-bit integer (type int64). ", "<code class=\"type\">int -&gt; int64</code>", "int -> int64"],
["Nativeint", "Nativeint.html", "of_int", "Nativeint.html#VALof_int", "<div class=\"info\">  <p>Convert the given integer (type <code class=\"code\">int</code>) to a native integer (type <code class=\"code\">nativeint</code>).</p> </div>", "  Convert the given integer (type int) to a native integer (type nativeint). ", "<code class=\"type\">int -&gt; nativeint</code>", "int -> nativeint"],
["Targetint", "Targetint.html", "of_int", "Targetint.html#VALof_int", "<div class=\"info\">  <p>Convert the given integer (type <code class=\"code\">int</code>) to a target integer (type <code class=\"code\">t</code>), module the target word size.</p> </div>", "  Convert the given integer (type int) to a target integer (type t), module the target word size. ", "<code class=\"type\">int -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "int -> t"],
["Uchar", "Uchar.html", "of_int", "Uchar.html#VALof_int", "<div class=\"info\">  <p><code class=\"code\">of_int&nbsp;i</code> is <code class=\"code\">i</code> as a Unicode character.</p> </div>", "  of_int\194\160i is i as a Unicode character. ", "<code class=\"type\">int -&gt; <a href=\"Uchar.html#TYPEt\">t</a></code>", "int -> t"],
["Int32", "Int32.html", "of_float", "Int32.html#VALof_float", "<div class=\"info\">  <p>Convert the given floating-point number to a 32-bit integer, discarding the fractional part (truncate towards 0).</p> </div>", "  Convert the given floating-point number to a 32-bit integer, discarding the fractional part (truncate towards 0). ", "<code class=\"type\">float -&gt; int32</code>", "float -> int32"],
["Int64", "Int64.html", "of_float", "Int64.html#VALof_float", "<div class=\"info\">  <p>Convert the given floating-point number to a 64-bit integer, discarding the fractional part (truncate towards 0).</p> </div>", "  Convert the given floating-point number to a 64-bit integer, discarding the fractional part (truncate towards 0). ", "<code class=\"type\">float -&gt; int64</code>", "float -> int64"],
["Nativeint", "Nativeint.html", "of_float", "Nativeint.html#VALof_float", "<div class=\"info\">  <p>Convert the given floating-point number to a native integer, discarding the fractional part (truncate towards 0).</p> </div>", "  Convert the given floating-point number to a native integer, discarding the fractional part (truncate towards 0). ", "<code class=\"type\">float -&gt; nativeint</code>", "float -> nativeint"],
["Targetint", "Targetint.html", "of_float", "Targetint.html#VALof_float", "<div class=\"info\">  <p>Convert the given floating-point number to a target integer, discarding the fractional part (truncate towards 0).</p> </div>", "  Convert the given floating-point number to a target integer, discarding the fractional part (truncate towards 0). ", "<code class=\"type\">float -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "float -> t"],
["Uchar", "Uchar.html", "of_char", "Uchar.html#VALof_char", "<div class=\"info\">  <p><code class=\"code\">of_char&nbsp;c</code> is <code class=\"code\">c</code> as a Unicode character.</p> </div>", "  of_char\194\160c is c as a Unicode character. ", "<code class=\"type\">char -&gt; <a href=\"Uchar.html#TYPEt\">t</a></code>", "char -> t"],
["Stream", "Stream.html", "of_channel", "Stream.html#VALof_channel", "<div class=\"info\">  <p>Return the stream of the characters read from the input channel.</p> </div>", "  Return the stream of the characters read from the input channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; char <a href=\"Stream.html#TYPEt\">t</a></code>", "in_channel -> char t"],
["Stream", "Stream.html", "of_bytes", "Stream.html#VALof_bytes", "<div class=\"info\">  <p>Return the stream of the characters of the bytes parameter.</p> </div>", "  Return the stream of the characters of the bytes parameter. ", "<code class=\"type\">bytes -&gt; char <a href=\"Stream.html#TYPEt\">t</a></code>", "bytes -> char t"],
["Bigarray.Array1", "Bigarray.Array1.html", "of_array", "Bigarray.Array1.html#VALof_array", "<div class=\"info\">  <p>Build a one-dimensional big array initialized from the given array.</p> </div>", "  Build a one-dimensional big array initialized from the given array. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; 'a array -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> 'a array -> ('a, 'b, 'c) t"],
["Bigarray.Array2", "Bigarray.Array2.html", "of_array", "Bigarray.Array2.html#VALof_array", "<div class=\"info\">  <p>Build a two-dimensional big array initialized from the given array of arrays.</p> </div>", "  Build a two-dimensional big array initialized from the given array of arrays. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; 'a array array -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> 'a array array -> ('a, 'b, 'c) t"],
["Bigarray.Array3", "Bigarray.Array3.html", "of_array", "Bigarray.Array3.html#VALof_array", "<div class=\"info\">  <p>Build a three-dimensional big array initialized from the given array of arrays of arrays.</p> </div>", "  Build a three-dimensional big array initialized from the given array of arrays of arrays. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; 'a array array array -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> 'a array array array -> ('a, 'b, 'c) t"],
["Config", "Config.html", "ocamlopt_cppflags", "Config.html#VALocamlopt_cppflags", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ocamlopt_cflags", "Config.html#VALocamlopt_cflags", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ocamlc_cppflags", "Config.html#VALocamlc_cppflags", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ocamlc_cflags", "Config.html#VALocamlc_cflags", "", "", "<code class=\"type\">string</code>", "string"],
["Sys", "Sys.html", "ocaml_version", "Sys.html#VALocaml_version", "<div class=\"info\">  <p><code class=\"code\">ocaml_version</code> is the version of OCaml.</p> </div>", "  ocaml_version is the version of OCaml. ", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "objfiles", "Clflags.html#VALobjfiles", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Obj", "Obj.html", "object_tag", "Obj.html#VALobject_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "object_", "Ast_helper.Typ.html#VALobject_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEobject_field\">Parsetree.object_field</a> list -&gt; <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.object_field list -> Asttypes.closed_flag -> Parsetree.core_type"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "object_", "Ast_helper.Exp.html#VALobject_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_structure -> Parsetree.expression"],
["Obj", "Obj.html", "obj", "Obj.html#VALobj", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; 'a</code>", "t -> 'a"],
["Clflags", "Clflags.html", "o3_arguments", "Clflags.html#VALo3_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["Clflags", "Clflags.html", "o2_arguments", "Clflags.html#VALo2_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["Clflags", "Clflags.html", "o1_arguments", "Clflags.html#VALo1_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["Terminfo", "Terminfo.html", "num_lines", "Terminfo.html#VALnum_lines", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int</code>", "out_channel -> int"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "num_dims", "Bigarray.Genarray.html#VALnum_dims", "<div class=\"info\">  <p>Return the number of dimensions of the given big array.</p> </div>", "  Return the number of dimensions of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["List", "List.html", "nth_opt", "List.html#VALnth_opt", "<div class=\"info\">  <p>Return the <code class=\"code\">n</code>-th element of the given list.</p> </div>", "  Return the n-th element of the given list. ", "<code class=\"type\">'a list -&gt; int -&gt; 'a option</code>", "'a list -> int -> 'a option"],
["ListLabels", "ListLabels.html", "nth_opt", "ListLabels.html#VALnth_opt", "<div class=\"info\">  <p>Return the <code class=\"code\">n</code>-th element of the given list.</p> </div>", "  Return the n-th element of the given list. ", "<code class=\"type\">'a list -&gt; int -&gt; 'a option</code>", "'a list -> int -> 'a option"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "nth_dim", "Bigarray.Genarray.html#VALnth_dim", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Genarray</span>.nth_dim&nbsp;a&nbsp;n</code> returns the <code class=\"code\">n</code>-th dimension of the big array <code class=\"code\">a</code>.</p> </div>", "  Genarray.nth_dim\194\160a\194\160n returns the n-th dimension of the big array a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; int -&gt; int</code>", "('a, 'b, 'c) t -> int -> int"],
["Buffer", "Buffer.html", "nth", "Buffer.html#VALnth", "<div class=\"info\">  <p>Get the n-th character of the buffer.</p> </div>", "  Get the n-th character of the buffer. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; int -&gt; char</code>", "t -> int -> char"],
["List", "List.html", "nth", "List.html#VALnth", "<div class=\"info\">  <p>Return the <code class=\"code\">n</code>-th element of the given list.</p> </div>", "  Return the n-th element of the given list. ", "<code class=\"type\">'a list -&gt; int -&gt; 'a</code>", "'a list -> int -> 'a"],
["ListLabels", "ListLabels.html", "nth", "ListLabels.html#VALnth", "<div class=\"info\">  <p>Return the <code class=\"code\">n</code>-th element of the given list.</p> </div>", "  Return the n-th element of the given list. ", "<code class=\"type\">'a list -&gt; int -&gt; 'a</code>", "'a list -> int -> 'a"],
["Stream", "Stream.html", "npeek", "Stream.html#VALnpeek", "<div class=\"info\">  <p><code class=\"code\">npeek&nbsp;n</code> returns the list of the <code class=\"code\">n</code> first elements of the stream, or all its remaining elements if less than <code class=\"code\">n</code> elements are available.</p> </div>", "  npeek\194\160n returns the list of the n first elements of the stream, or all its remaining elements if less than n elements are available. ", "<code class=\"type\">int -&gt; 'a <a href=\"Stream.html#TYPEt\">t</a> -&gt; 'a list</code>", "int -> 'a t -> 'a list"],
["Clflags", "Clflags.html", "noversion", "Clflags.html#VALnoversion", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Pervasives", "Pervasives.html", "not", "Pervasives.html#VALnot", "<div class=\"info\">  <p>The boolean negation.</p> </div>", "  The boolean negation. ", "<code class=\"type\">bool -&gt; bool</code>", "bool -> bool"],
["Misc", "Misc.html", "normalise_eol", "Misc.html#VALnormalise_eol", "<div class=\"info\">  <p><code class=\"code\">normalise_eol&nbsp;s</code> returns a fresh copy of <code class=\"code\">s</code> with any '\\r' characters removed.</p> </div>", "  normalise_eol\194\160s returns a fresh copy of s with any '\\r' characters removed. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Complex", "Complex.html", "norm2", "Complex.html#VALnorm2", "<div class=\"info\">  <p>Norm squared: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x^2&nbsp;+&nbsp;y^2</code>.</p> </div>", "  Norm squared: given x\194\160+\194\160i.y, returns x^2\194\160+\194\160y^2. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; float</code>", "t -> float"],
["Complex", "Complex.html", "norm", "Complex.html#VALnorm", "<div class=\"info\">  <p>Norm: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">sqrt(x^2&nbsp;+&nbsp;y^2)</code>.</p> </div>", "  Norm: given x\194\160+\194\160i.y, returns sqrt(x^2\194\160+\194\160y^2). ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; float</code>", "t -> float"],
["Clflags", "Clflags.html", "nopromptcont", "Clflags.html#VALnopromptcont", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "noprompt", "Clflags.html#VALnoprompt", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "nopervasives", "Clflags.html#VALnopervasives", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Location", "Location.html", "none", "Location.html#VALnone", "<div class=\"info\">  <p>An arbitrary value of type <code class=\"code\">t</code>; describes an empty ghost range.</p> </div>", "  An arbitrary value of type t; describes an empty ghost range. ", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a></code>", "t"],
["Clflags", "Clflags.html", "noinit", "Clflags.html#VALnoinit", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "noassert", "Clflags.html#VALnoassert", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "no_std_include", "Clflags.html#VALno_std_include", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Obj", "Obj.html", "no_scan_tag", "Obj.html#VALno_scan_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Misc", "Misc.html", "no_overflow_sub", "Misc.html#VALno_overflow_sub", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Misc", "Misc.html", "no_overflow_mul", "Misc.html#VALno_overflow_mul", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Misc", "Misc.html", "no_overflow_lsl", "Misc.html#VALno_overflow_lsl", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Misc", "Misc.html", "no_overflow_add", "Misc.html#VALno_overflow_add", "", "", "<code class=\"type\">int -&gt; int -&gt; bool</code>", "int -> int -> bool"],
["Clflags", "Clflags.html", "no_check_prims", "Clflags.html#VALno_check_prims", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "no_auto_link", "Clflags.html#VALno_auto_link", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Unix", "Unix.html", "nice", "Unix.html#VALnice", "<div class=\"info\">  <p>Change the process priority.</p> </div>", "  Change the process priority. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["UnixLabels", "UnixLabels.html", "nice", "UnixLabels.html#VALnice", "<div class=\"info\">  <p>Change the process priority.</p> </div>", "  Change the process priority. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Stream", "Stream.html", "next", "Stream.html#VALnext", "<div class=\"info\">  <p>Return the first element of the stream and remove it from the stream.</p> </div>", "  Return the first element of the stream and remove it from the stream. ", "<code class=\"type\">'a <a href=\"Stream.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "newtype", "Ast_helper.Exp.html#VALnewtype", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str -> Parsetree.expression -> Parsetree.expression"],
["CamlinternalOO", "CamlinternalOO.html", "new_variable", "CamlinternalOO.html#VALnew_variable", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; string -&gt; int</code>", "table -> string -> int"],
["CamlinternalOO", "CamlinternalOO.html", "new_methods_variables", "CamlinternalOO.html#VALnew_methods_variables", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt;<br>       string array -&gt; string array -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a> array</code>", "table ->       string array -> string array -> label array"],
["CamlinternalOO", "CamlinternalOO.html", "new_method", "CamlinternalOO.html#VALnew_method", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a></code>", "table -> label"],
["Lexing", "Lexing.html", "new_line", "Lexing.html#VALnew_line", "<div class=\"info\">  <p>Update the <code class=\"code\">lex_curr_p</code> field of the lexbuf to reflect the start of a new line.</p> </div>", "  Update the lex_curr_p field of the lexbuf to reflect the start of a new line. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; unit</code>", "lexbuf -> unit"],
["Event", "Event.html", "new_channel", "Event.html#VALnew_channel", "<div class=\"info\">  <p>Return a new channel.</p> </div>", "  Return a new channel. ", "<code class=\"type\">unit -&gt; 'a <a href=\"Event.html#TYPEchannel\">channel</a></code>", "unit -> 'a channel"],
["Obj", "Obj.html", "new_block", "Obj.html#VALnew_block", "", "", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Obj.html#TYPEt\">t</a></code>", "int -> int -> t"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "new_", "Ast_helper.Exp.html#VALnew_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.expression"],
["Float", "Float.html", "neg_infinity", "Float.html#VALneg_infinity", "<div class=\"info\">  <p>Negative infinity.</p> </div>", "  Negative infinity. ", "<code class=\"type\">float</code>", "float"],
["Pervasives", "Pervasives.html", "neg_infinity", "Pervasives.html#VALneg_infinity", "<div class=\"info\">  <p>Negative infinity.</p> </div>", "  Negative infinity. ", "<code class=\"type\">float</code>", "float"],
["Complex", "Complex.html", "neg", "Complex.html#VALneg", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t"],
["Float", "Float.html", "neg", "Float.html#VALneg", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Int32", "Int32.html", "neg", "Int32.html#VALneg", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\">int32 -&gt; int32</code>", "int32 -> int32"],
["Int64", "Int64.html", "neg", "Int64.html#VALneg", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\">int64 -&gt; int64</code>", "int64 -> int64"],
["Nativeint", "Nativeint.html", "neg", "Nativeint.html#VALneg", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\">nativeint -&gt; nativeint</code>", "nativeint -> nativeint"],
["Targetint", "Targetint.html", "neg", "Targetint.html#VALneg", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t"],
["Ast_helper.Const", "Ast_helper.Const.html", "nativeint", "Ast_helper.Const.html#VALnativeint", "", "", "<code class=\"type\">?suffix:char -&gt; nativeint -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> nativeint -> Parsetree.constant"],
["Bigarray", "Bigarray.html", "nativeint", "Bigarray.html#VALnativeint", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(nativeint, <a href=\"Bigarray.html#TYPEnativeint_elt\">nativeint_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(nativeint, nativeint_elt) kind"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "nativeint", "Misc.Int_literal_converter.html#VALnativeint", "", "", "<code class=\"type\">string -&gt; nativeint</code>", "string -> nativeint"],
["Random", "Random.html", "nativeint", "Random.html#VALnativeint", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Random</span>.nativeint&nbsp;bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive).</p> </div>", "  Random.nativeint\194\160bound returns a random integer between 0 (inclusive) and bound (exclusive). ", "<code class=\"type\"><a href=\"Nativeint.html#TYPEt\">Nativeint.t</a> -&gt; <a href=\"Nativeint.html#TYPEt\">Nativeint.t</a></code>", "Nativeint.t -> Nativeint.t"],
["Random.State", "Random.State.html", "nativeint", "Random.State.html#VALnativeint", "", "", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; <a href=\"Nativeint.html#TYPEt\">Nativeint.t</a> -&gt; <a href=\"Nativeint.html#TYPEt\">Nativeint.t</a></code>", "t -> Nativeint.t -> Nativeint.t"],
["Config", "Config.html", "native_pack_linker", "Config.html#VALnative_pack_linker", "", "", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "native_code", "Clflags.html#VALnative_code", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Config", "Config.html", "native_c_libraries", "Config.html#VALnative_c_libraries", "", "", "<code class=\"type\">string</code>", "string"],
["CamlinternalOO", "CamlinternalOO.html", "narrow", "CamlinternalOO.html#VALnarrow", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; string array -&gt; string array -&gt; string array -&gt; unit</code>", "table -> string array -> string array -> string array -> unit"],
["Float", "Float.html", "nan", "Float.html#VALnan", "<div class=\"info\">  <p>A special floating-point value denoting the result of an undefined operation such as <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.</p> </div>", "  A special floating-point value denoting the result of an undefined operation such as 0.0\194\160/.\194\1600.0. ", "<code class=\"type\">float</code>", "float"],
["Pervasives", "Pervasives.html", "nan", "Pervasives.html#VALnan", "<div class=\"info\">  <p>A special floating-point value denoting the result of an undefined operation such as <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.</p> </div>", "  A special floating-point value denoting the result of an undefined operation such as 0.0\194\160/.\194\1600.0. ", "<code class=\"type\">float</code>", "float"],
["Scanf.Scanning", "Scanf.Scanning.html", "name_of_input", "Scanf.Scanning.html#VALname_of_input", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.name_of_input&nbsp;ic</code> returns the name of the character source for the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p> </div>", "  Scanning.name_of_input\194\160ic returns the name of the character source for the given Scanf.Scanning.in_channel formatted input channel. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a> -&gt; string</code>", "in_channel -> string"],
["Complex", "Complex.html", "mul", "Complex.html#VALmul", "<div class=\"info\">  <p>Multiplication</p> </div>", "  Multiplication ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Float", "Float.html", "mul", "Float.html#VALmul", "<div class=\"info\">  <p>Floating-point multiplication.</p> </div>", "  Floating-point multiplication. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Int32", "Int32.html", "mul", "Int32.html#VALmul", "<div class=\"info\">  <p>Multiplication.</p> </div>", "  Multiplication. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "mul", "Int64.html#VALmul", "<div class=\"info\">  <p>Multiplication.</p> </div>", "  Multiplication. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["Nativeint", "Nativeint.html", "mul", "Nativeint.html#VALmul", "<div class=\"info\">  <p>Multiplication.</p> </div>", "  Multiplication. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["Targetint", "Targetint.html", "mul", "Targetint.html#VALmul", "<div class=\"info\">  <p>Multiplication.</p> </div>", "  Multiplication. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Graphics", "Graphics.html", "moveto", "Graphics.html#VALmoveto", "<div class=\"info\">  <p>Position the current point.</p> </div>", "  Position the current point. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Graphics", "Graphics.html", "mouse_pos", "Graphics.html#VALmouse_pos", "<div class=\"info\">  <p>Return the position of the mouse cursor, relative to the graphics window.</p> </div>", "  Return the position of the mouse cursor, relative to the graphics window. ", "<code class=\"type\">unit -&gt; int * int</code>", "unit -> int * int"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "module_", "Ast_helper.Sig.html#VALmodule_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_declaration -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "module_", "Ast_helper.Str.html#VALmodule_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.module_binding -> Parsetree.structure_item"],
["Typemod", "Typemod.html", "modtype_of_package", "Typemod.html#VALmodtype_of_package", "", "", "<code class=\"type\">Env.t -&gt;<br>       <a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       Path.t -&gt; <a href=\"Longident.html#TYPEt\">Longident.t</a> list -&gt; Types.type_expr list -&gt; Types.module_type</code>", "Env.t ->       Location.t ->       Path.t -> Longident.t list -> Types.type_expr list -> Types.module_type"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "modtype", "Ast_helper.Sig.html#VALmodtype", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_type_declaration -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "modtype", "Ast_helper.Str.html#VALmodtype", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.module_type_declaration -> Parsetree.structure_item"],
["Float", "Float.html", "modf", "Float.html#VALmodf", "<div class=\"info\">  <p><code class=\"code\">modf&nbsp;f</code> returns the pair of the fractional and integral part of <code class=\"code\">f</code>.</p> </div>", "  modf\194\160f returns the pair of the fractional and integral part of f. ", "<code class=\"type\">float -&gt; float * float</code>", "float -> float * float"],
["Pervasives", "Pervasives.html", "modf", "Pervasives.html#VALmodf", "<div class=\"info\">  <p><code class=\"code\">modf&nbsp;f</code> returns the pair of the fractional and integral part of <code class=\"code\">f</code>.</p> </div>", "  modf\194\160f returns the pair of the fractional and integral part of f. ", "<code class=\"type\">float -&gt; float * float</code>", "float -> float * float"],
["Config", "Config.html", "model", "Config.html#VALmodel", "", "", "<code class=\"type\">string</code>", "string"],
["Pervasives", "Pervasives.html", "mod_float", "Pervasives.html#VALmod_float", "<div class=\"info\">  <p><code class=\"code\">mod_float&nbsp;a&nbsp;b</code> returns the remainder of <code class=\"code\">a</code> with respect to <code class=\"code\">b</code>.</p> </div>", "  mod_float\194\160a\194\160b returns the remainder of a with respect to b. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Unix", "Unix.html", "mktime", "Unix.html#VALmktime", "<div class=\"info\">  <p>Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>.</p> </div>", "  Convert a date and time, specified by the tm argument, into a time in seconds, as returned by Unix.time. ", "<code class=\"type\"><a href=\"Unix.html#TYPEtm\">tm</a> -&gt; float * <a href=\"Unix.html#TYPEtm\">tm</a></code>", "tm -> float * tm"],
["UnixLabels", "UnixLabels.html", "mktime", "UnixLabels.html#VALmktime", "<div class=\"info\">  <p>Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>.</p> </div>", "  Convert a date and time, specified by the tm argument, into a time in seconds, as returned by UnixLabels.time. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEtm\">tm</a> -&gt; float * <a href=\"UnixLabels.html#TYPEtm\">tm</a></code>", "tm -> float * tm"],
["Location", "Location.html", "mknoloc", "Location.html#VALmknoloc", "", "", "<code class=\"type\">'a -&gt; 'a <a href=\"Location.html#TYPEloc\">loc</a></code>", "'a -> 'a loc"],
["Config", "Config.html", "mkmaindll", "Config.html#VALmkmaindll", "", "", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "mkloc", "Location.html#VALmkloc", "", "", "<code class=\"type\">'a -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; 'a <a href=\"Location.html#TYPEloc\">loc</a></code>", "'a -> t -> 'a loc"],
["Unix", "Unix.html", "mkfifo", "Unix.html#VALmkfifo", "<div class=\"info\">  <p>Create a named pipe with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>).</p> </div>", "  Create a named pipe with the given permissions (see Unix.umask). ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "string -> file_perm -> unit"],
["UnixLabels", "UnixLabels.html", "mkfifo", "UnixLabels.html#VALmkfifo", "<div class=\"info\">  <p>Create a named pipe with the given permissions.</p> </div>", "  Create a named pipe with the given permissions. ", "<code class=\"type\">string -&gt; perm:<a href=\"UnixLabels.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "string -> perm:file_perm -> unit"],
["Config", "Config.html", "mkexe", "Config.html#VALmkexe", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "mkdll", "Config.html#VALmkdll", "", "", "<code class=\"type\">string</code>", "string"],
["Unix", "Unix.html", "mkdir", "Unix.html#VALmkdir", "<div class=\"info\">  <p>Create a directory with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>).</p> </div>", "  Create a directory with the given permissions (see Unix.umask). ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "string -> file_perm -> unit"],
["UnixLabels", "UnixLabels.html", "mkdir", "UnixLabels.html#VALmkdir", "<div class=\"info\">  <p>Create a directory with the given permissions.</p> </div>", "  Create a directory with the given permissions. ", "<code class=\"type\">string -&gt; perm:<a href=\"UnixLabels.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "string -> perm:file_perm -> unit"],
["Warnings", "Warnings.html", "mk_lazy", "Warnings.html#VALmk_lazy", "<div class=\"info\">  <p>Like <code class=\"code\"><span class=\"constructor\">Lazy</span>.of_fun</code>, but the function is applied with the warning settings at the time <code class=\"code\">mk_lazy</code> is called.</p> </div>", "  Like Lazy.of_fun, but the function is applied with the warning settings at the time mk_lazy is called. ", "<code class=\"type\">(unit -&gt; 'a) -&gt; 'a <a href=\"Lazy.html#TYPEt\">Lazy.t</a></code>", "(unit -> 'a) -> 'a Lazy.t"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "mk", "Ast_helper.Typ.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type_desc\">Parsetree.core_type_desc</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.core_type_desc -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "mk", "Ast_helper.Pat.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern_desc\">Parsetree.pattern_desc</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern_desc -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "mk", "Ast_helper.Exp.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression_desc\">Parsetree.expression_desc</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression_desc -> Parsetree.expression"],
["Ast_helper.Val", "Ast_helper.Val.html", "mk", "Ast_helper.Val.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?prim:string list -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?prim:string list ->       Ast_helper.str -> Parsetree.core_type -> Parsetree.value_description"],
["Ast_helper.Type", "Ast_helper.Type.html", "mk", "Ast_helper.Type.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       ?params:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * <a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a>) list -&gt;<br>       ?cstrs:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * <a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a>) list -&gt;<br>       ?kind:<a href=\"Parsetree.html#TYPEtype_kind\">Parsetree.type_kind</a> -&gt;<br>       ?priv:<a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt;<br>       ?manifest:<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       ?params:(Parsetree.core_type * Asttypes.variance) list ->       ?cstrs:(Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list ->       ?kind:Parsetree.type_kind ->       ?priv:Asttypes.private_flag ->       ?manifest:Parsetree.core_type -> Ast_helper.str -> Parsetree.type_declaration"],
["Ast_helper.Te", "Ast_helper.Te.html", "mk", "Ast_helper.Te.html#VALmk", "", "", "<code class=\"type\">?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?params:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * <a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a>) list -&gt;<br>       ?priv:<a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> list -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a></code>", "?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?params:(Parsetree.core_type * Asttypes.variance) list ->       ?priv:Asttypes.private_flag ->       Ast_helper.lid ->       Parsetree.extension_constructor list -> Parsetree.type_extension"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "mk", "Ast_helper.Mty.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_desc\">Parsetree.module_type_desc</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_type_desc -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "mk", "Ast_helper.Mod.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr_desc\">Parsetree.module_expr_desc</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_expr_desc -> Parsetree.module_expr"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "mk", "Ast_helper.Sig.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEsignature_item_desc\">Parsetree.signature_item_desc</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.signature_item_desc -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "mk", "Ast_helper.Str.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEstructure_item_desc\">Parsetree.structure_item_desc</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.structure_item_desc -> Parsetree.structure_item"],
["Ast_helper.Md", "Ast_helper.Md.html", "mk", "Ast_helper.Md.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       Ast_helper.str -> Parsetree.module_type -> Parsetree.module_declaration"],
["Ast_helper.Mtd", "Ast_helper.Mtd.html", "mk", "Ast_helper.Mtd.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       ?typ:<a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       ?typ:Parsetree.module_type ->       Ast_helper.str -> Parsetree.module_type_declaration"],
["Ast_helper.Mb", "Ast_helper.Mb.html", "mk", "Ast_helper.Mb.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       Ast_helper.str -> Parsetree.module_expr -> Parsetree.module_binding"],
["Ast_helper.Opn", "Ast_helper.Opn.html", "mk", "Ast_helper.Opn.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?override:<a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?override:Asttypes.override_flag ->       Ast_helper.lid -> Parsetree.open_description"],
["Ast_helper.Incl", "Ast_helper.Incl.html", "mk", "Ast_helper.Incl.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt; 'a -&gt; 'a <a href=\"Parsetree.html#TYPEinclude_infos\">Parsetree.include_infos</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs -> 'a -> 'a Parsetree.include_infos"],
["Ast_helper.Vb", "Ast_helper.Vb.html", "mk", "Ast_helper.Vb.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       Parsetree.pattern -> Parsetree.expression -> Parsetree.value_binding"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "mk", "Ast_helper.Cty.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_desc\">Parsetree.class_type_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_type_desc -> Parsetree.class_type"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "mk", "Ast_helper.Ctf.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_field_desc\">Parsetree.class_type_field_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       Parsetree.class_type_field_desc -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "mk", "Ast_helper.Cl.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr_desc\">Parsetree.class_expr_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_expr_desc -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "mk", "Ast_helper.Cf.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_desc\">Parsetree.class_field_desc</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs -> Parsetree.class_field_desc -> Parsetree.class_field"],
["Ast_helper.Ci", "Ast_helper.Ci.html", "mk", "Ast_helper.Ci.html#VALmk", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?text:<a href=\"Docstrings.html#TYPEtext\">Docstrings.text</a> -&gt;<br>       ?virt:<a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> -&gt;<br>       ?params:(<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> * <a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a>) list -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; 'a -&gt; 'a <a href=\"Parsetree.html#TYPEclass_infos\">Parsetree.class_infos</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?text:Docstrings.text ->       ?virt:Asttypes.virtual_flag ->       ?params:(Parsetree.core_type * Asttypes.variance) list ->       Ast_helper.str -> 'a -> 'a Parsetree.class_infos"],
["Ast_helper.Csig", "Ast_helper.Csig.html", "mk", "Ast_helper.Csig.html#VALmk", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_signature\">Parsetree.class_signature</a></code>", "Parsetree.core_type ->       Parsetree.class_type_field list -> Parsetree.class_signature"],
["Ast_helper.Cstr", "Ast_helper.Cstr.html", "mk", "Ast_helper.Cstr.html#VALmk", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a></code>", "Parsetree.pattern -> Parsetree.class_field list -> Parsetree.class_structure"],
["Int32", "Int32.html", "minus_one", "Int32.html#VALminus_one", "<div class=\"info\">  <p>The 32-bit integer -1.</p> </div>", "  The 32-bit integer -1. ", "<code class=\"type\">int32</code>", "int32"],
["Int64", "Int64.html", "minus_one", "Int64.html#VALminus_one", "<div class=\"info\">  <p>The 64-bit integer -1.</p> </div>", "  The 64-bit integer -1. ", "<code class=\"type\">int64</code>", "int64"],
["Nativeint", "Nativeint.html", "minus_one", "Nativeint.html#VALminus_one", "<div class=\"info\">  <p>The native integer -1.</p> </div>", "  The native integer -1. ", "<code class=\"type\">nativeint</code>", "nativeint"],
["Targetint", "Targetint.html", "minus_one", "Targetint.html#VALminus_one", "<div class=\"info\">  <p>The target integer -1.</p> </div>", "  The target integer -1. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "t"],
["Gc", "Gc.html", "minor_words", "Gc.html#VALminor_words", "<div class=\"info\">  <p>Number of words allocated in the minor heap since the program was started.</p> </div>", "  Number of words allocated in the minor heap since the program was started. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["Gc", "Gc.html", "minor", "Gc.html#VALminor", "<div class=\"info\">  <p>Trigger a minor collection.</p> </div>", "  Trigger a minor collection. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Int32", "Int32.html", "min_int", "Int32.html#VALmin_int", "<div class=\"info\">  <p>The smallest representable 32-bit integer, -2<sup class=\"superscript\">31</sup>.</p> </div>", "  The smallest representable 32-bit integer, -231. ", "<code class=\"type\">int32</code>", "int32"],
["Int64", "Int64.html", "min_int", "Int64.html#VALmin_int", "<div class=\"info\">  <p>The smallest representable 64-bit integer, -2<sup class=\"superscript\">63</sup>.</p> </div>", "  The smallest representable 64-bit integer, -263. ", "<code class=\"type\">int64</code>", "int64"],
["Nativeint", "Nativeint.html", "min_int", "Nativeint.html#VALmin_int", "<div class=\"info\">  <p>The smallest representable native integer, either -2<sup class=\"superscript\">31</sup> on a 32-bit platform, or -2<sup class=\"superscript\">63</sup> on a 64-bit platform.</p> </div>", "  The smallest representable native integer, either -231 on a 32-bit platform, or -263 on a 64-bit platform. ", "<code class=\"type\">nativeint</code>", "nativeint"],
["Pervasives", "Pervasives.html", "min_int", "Pervasives.html#VALmin_int", "<div class=\"info\">  <p>The smallest representable integer.</p> </div>", "  The smallest representable integer. ", "<code class=\"type\">int</code>", "int"],
["Targetint", "Targetint.html", "min_int", "Targetint.html#VALmin_int", "<div class=\"info\">  <p>The smallest representable target integer, either -2<sup class=\"superscript\">31</sup> on a 32-bit platform, or -2<sup class=\"superscript\">63</sup> on a 64-bit platform.</p> </div>", "  The smallest representable target integer, either -231 on a 32-bit platform, or -263 on a 64-bit platform. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "t"],
["Float", "Float.html", "min_float", "Float.html#VALmin_float", "<div class=\"info\">  <p>The smallest positive, non-zero, non-denormalized value of type <code class=\"code\">float</code>.</p> </div>", "  The smallest positive, non-zero, non-denormalized value of type float. ", "<code class=\"type\">float</code>", "float"],
["Pervasives", "Pervasives.html", "min_float", "Pervasives.html#VALmin_float", "<div class=\"info\">  <p>The smallest positive, non-zero, non-denormalized value of type <code class=\"code\">float</code>.</p> </div>", "  The smallest positive, non-zero, non-denormalized value of type float. ", "<code class=\"type\">float</code>", "float"],
["Set.S", "Set.S.html", "min_elt_opt", "Set.S.html#VALmin_elt_opt", "<div class=\"info\">  <p>Return the smallest element of the given set (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code> if the set is empty.</p> </div>", "  Return the smallest element of the given set (with respect to the Ord.compare ordering), or None if the set is empty. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> option</code>", "t -> elt option"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "min_elt_opt", "MoreLabels.Set.S.html#VALmin_elt_opt", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> option</code>", "t -> elt option"],
["Set.S", "Set.S.html", "min_elt", "Set.S.html#VALmin_elt", "<div class=\"info\">  <p>Return the smallest element of the given set (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty.</p> </div>", "  Return the smallest element of the given set (with respect to the Ord.compare ordering), or raise Not_found if the set is empty. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a></code>", "t -> elt"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "min_elt", "MoreLabels.Set.S.html#VALmin_elt", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a></code>", "t -> elt"],
["Map.S", "Map.S.html", "min_binding_opt", "Map.S.html#VALmin_binding_opt", "<div class=\"info\">  <p>Return the smallest binding of the given map (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code> if the map is empty.</p> </div>", "  Return the smallest binding of the given map (with respect to the Ord.compare ordering), or None if the map is empty. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "'a t -> (key * 'a) option"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "min_binding_opt", "MoreLabels.Map.S.html#VALmin_binding_opt", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "'a t -> (key * 'a) option"],
["Map.S", "Map.S.html", "min_binding", "Map.S.html#VALmin_binding", "<div class=\"info\">  <p>Return the smallest binding of the given map (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty.</p> </div>", "  Return the smallest binding of the given map (with respect to the Ord.compare ordering), or raise Not_found if the map is empty. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; <a href=\"Map.S.html#TYPEkey\">key</a> * 'a</code>", "'a t -> key * 'a"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "min_binding", "MoreLabels.Map.S.html#VALmin_binding", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a</code>", "'a t -> key * 'a"],
["Pervasives", "Pervasives.html", "min", "Pervasives.html#VALmin", "<div class=\"info\">  <p>Return the smaller of the two arguments.</p> </div>", "  Return the smaller of the two arguments. ", "<code class=\"type\">'a -&gt; 'a -&gt; 'a</code>", "'a -> 'a -> 'a"],
["Uchar", "Uchar.html", "min", "Uchar.html#VALmin", "<div class=\"info\">  <p><code class=\"code\">min</code> is U+0000.</p> </div>", "  min is U+0000. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a></code>", "t"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "method_", "Ast_helper.Ctf.html#VALmethod_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.private_flag ->       Asttypes.virtual_flag -> Parsetree.core_type -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "method_", "Ast_helper.Cf.html#VALmethod_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Asttypes.private_flag -> Parsetree.class_field_kind -> Parsetree.class_field"],
["Map.S", "Map.S.html", "merge", "Map.S.html#VALmerge", "<div class=\"info\">  <p><code class=\"code\">merge&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is a subset of keys of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>.</p> </div>", "  merge\194\160f\194\160m1\194\160m2 computes a map whose keys is a subset of keys of m1 and of m2. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a option -&gt; 'b option -&gt; 'c option) -&gt;<br>       'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'b <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'c <a href=\"Map.S.html#TYPEt\">t</a></code>", "(key -> 'a option -> 'b option -> 'c option) ->       'a t -> 'b t -> 'c t"],
["List", "List.html", "merge", "List.html#VALmerge", "<div class=\"info\">  <p>Merge two lists: Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.</p> </div>", "  Merge two lists: Assuming that l1 and l2 are sorted according to the comparison function cmp, merge\194\160cmp\194\160l1\194\160l2 will return a sorted list containing all the elements of l1 and l2. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> int) -> 'a list -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "merge", "ListLabels.html#VALmerge", "<div class=\"info\">  <p>Merge two lists: Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.</p> </div>", "  Merge two lists: Assuming that l1 and l2 are sorted according to the comparison function cmp, merge\194\160cmp\194\160l1\194\160l2 will return a sorted list containing all the elements of l1 and l2. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list -&gt; 'a list</code>", "cmp:('a -> 'a -> int) -> 'a list -> 'a list -> 'a list"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "merge", "MoreLabels.Map.S.html#VALmerge", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a option -&gt; 'b option -&gt; 'c option) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'b <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'c <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "f:(key -> 'a option -> 'b option -> 'c option) ->       'a t -> 'b t -> 'c t"],
["Sort", "Sort.html", "merge", "Sort.html#VALmerge", "<div class=\"info\">  <p>Merge two lists according to the given predicate.</p> </div>", "  Merge two lists according to the given predicate. ", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt; 'a list -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list"],
["Weak.S", "Weak.S.html", "merge", "Weak.S.html#VALmerge", "<div class=\"info\">  <p><code class=\"code\">merge&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code> if any, or else adds <code class=\"code\">x</code> to <code class=\"code\">t</code> and return <code class=\"code\">x</code>.</p> </div>", "  merge\194\160t\194\160x returns an instance of x found in t if any, or else adds x to t and return x. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a></code>", "t -> data -> data"],
["Array", "Array.html", "memq", "Array.html#VALmemq", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural equality to compare array elements.</p> </div>", "  Same as Array.mem, but uses physical equality instead of structural equality to compare array elements. ", "<code class=\"type\">'a -&gt; 'a array -&gt; bool</code>", "'a -> 'a array -> bool"],
["ArrayLabels", "ArrayLabels.html", "memq", "ArrayLabels.html#VALmemq", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural equality to compare list elements.</p> </div>", "  Same as Array.mem, but uses physical equality instead of structural equality to compare list elements. ", "<code class=\"type\">'a -&gt; set:'a array -&gt; bool</code>", "'a -> set:'a array -> bool"],
["List", "List.html", "memq", "List.html#VALmemq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural equality to compare list elements.</p> </div>", "  Same as List.mem, but uses physical equality instead of structural equality to compare list elements. ", "<code class=\"type\">'a -&gt; 'a list -&gt; bool</code>", "'a -> 'a list -> bool"],
["ListLabels", "ListLabels.html", "memq", "ListLabels.html#VALmemq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural equality to compare list elements.</p> </div>", "  Same as List.mem, but uses physical equality instead of structural equality to compare list elements. ", "<code class=\"type\">'a -&gt; set:'a list -&gt; bool</code>", "'a -> set:'a list -> bool"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "memoize", "Identifiable.Tbl.html#VALmemoize", "", "", "<code class=\"type\">'a t -&gt; (key -&gt; 'a) -&gt; key -&gt; 'a</code>", "'a t -> (key -> 'a) -> key -> 'a"],
["List", "List.html", "mem_assq", "List.html#VALmem_assq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.mem_assoc, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; bool</code>", "'a -> ('a * 'b) list -> bool"],
["ListLabels", "ListLabels.html", "mem_assq", "ListLabels.html#VALmem_assq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.mem_assoc, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; map:('a * 'b) list -&gt; bool</code>", "'a -> map:('a * 'b) list -> bool"],
["List", "List.html", "mem_assoc", "List.html#VALmem_assoc", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists, and false if no bindings exist for the given key.</p> </div>", "  Same as List.assoc, but simply return true if a binding exists, and false if no bindings exist for the given key. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; bool</code>", "'a -> ('a * 'b) list -> bool"],
["ListLabels", "ListLabels.html", "mem_assoc", "ListLabels.html#VALmem_assoc", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists, and false if no bindings exist for the given key.</p> </div>", "  Same as List.assoc, but simply return true if a binding exists, and false if no bindings exist for the given key. ", "<code class=\"type\">'a -&gt; map:('a * 'b) list -&gt; bool</code>", "'a -> map:('a * 'b) list -> bool"],
["Array", "Array.html", "mem", "Array.html#VALmem", "<div class=\"info\">  <p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal to an element of <code class=\"code\">l</code>.</p> </div>", "  mem\194\160a\194\160l is true if and only if a is equal to an element of l. ", "<code class=\"type\">'a -&gt; 'a array -&gt; bool</code>", "'a -> 'a array -> bool"],
["ArrayLabels", "ArrayLabels.html", "mem", "ArrayLabels.html#VALmem", "<div class=\"info\">  <p><code class=\"code\">mem&nbsp;x&nbsp;a</code> is true if and only if <code class=\"code\">x</code> is equal to an element of <code class=\"code\">a</code>.</p> </div>", "  mem\194\160x\194\160a is true if and only if x is equal to an element of a. ", "<code class=\"type\">'a -&gt; set:'a array -&gt; bool</code>", "'a -> set:'a array -> bool"],
["Set.S", "Set.S.html", "mem", "Set.S.html#VALmem", "<div class=\"info\">  <p><code class=\"code\">mem&nbsp;x&nbsp;s</code> tests whether <code class=\"code\">x</code> belongs to the set <code class=\"code\">s</code>.</p> </div>", "  mem\194\160x\194\160s tests whether x belongs to the set s. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "elt -> t -> bool"],
["Map.S", "Map.S.html", "mem", "Map.S.html#VALmem", "<div class=\"info\">  <p><code class=\"code\">mem&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">m</code> contains a binding for <code class=\"code\">x</code>, and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p> </div>", "  mem\194\160x\194\160m returns true if m contains a binding for x, and false otherwise. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "key -> 'a t -> bool"],
["Hashtbl", "Hashtbl.html", "mem", "Hashtbl.html#VALmem", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.mem&nbsp;tbl&nbsp;x</code> checks if <code class=\"code\">x</code> is bound in <code class=\"code\">tbl</code>.</p> </div>", "  Hashtbl.mem\194\160tbl\194\160x checks if x is bound in tbl. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; bool</code>", "('a, 'b) t -> 'a -> bool"],
["Hashtbl.S", "Hashtbl.S.html", "mem", "Hashtbl.S.html#VALmem", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; bool</code>", "'a t -> key -> bool"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "mem", "Hashtbl.SeededS.html#VALmem", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; bool</code>", "'a t -> key -> bool"],
["List", "List.html", "mem", "List.html#VALmem", "<div class=\"info\">  <p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal to an element of <code class=\"code\">l</code>.</p> </div>", "  mem\194\160a\194\160l is true if and only if a is equal to an element of l. ", "<code class=\"type\">'a -&gt; 'a list -&gt; bool</code>", "'a -> 'a list -> bool"],
["ListLabels", "ListLabels.html", "mem", "ListLabels.html#VALmem", "<div class=\"info\">  <p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal to an element of <code class=\"code\">l</code>.</p> </div>", "  mem\194\160a\194\160l is true if and only if a is equal to an element of l. ", "<code class=\"type\">'a -&gt; set:'a list -&gt; bool</code>", "'a -> set:'a list -> bool"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "mem", "MoreLabels.Hashtbl.html#VALmem", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; bool</code>", "('a, 'b) t -> 'a -> bool"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "mem", "MoreLabels.Hashtbl.S.html#VALmem", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; bool</code>", "'a t -> key -> bool"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "mem", "MoreLabels.Hashtbl.SeededS.html#VALmem", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; bool</code>", "'a t -> key -> bool"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "mem", "MoreLabels.Map.S.html#VALmem", "", "", "<code class=\"type\"><a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "key -> 'a t -> bool"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "mem", "MoreLabels.Set.S.html#VALmem", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "elt -> t -> bool"],
["Tbl", "Tbl.html", "mem", "Tbl.html#VALmem", "", "", "<code class=\"type\">'k -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; bool</code>", "'k -> ('k, 'v) t -> bool"],
["Weak.S", "Weak.S.html", "mem", "Weak.S.html#VALmem", "<div class=\"info\">  <p><code class=\"code\">mem&nbsp;t&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if there is at least one instance of <code class=\"code\">x</code> in <code class=\"code\">t</code>, false otherwise.</p> </div>", "  mem\194\160t\194\160x returns true if there is at least one instance of x in t, false otherwise. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; bool</code>", "t -> data -> bool"],
["Misc", "Misc.html", "may_map", "Misc.html#VALmay_map", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a option -&gt; 'b option</code>", "('a -> 'b) -> 'a option -> 'b option"],
["Misc", "Misc.html", "may", "Misc.html#VALmay", "", "", "<code class=\"type\">('a -&gt; unit) -&gt; 'a option -&gt; unit</code>", "('a -> unit) -> 'a option -> unit"],
["Config", "Config.html", "max_young_wosize", "Config.html#VALmax_young_wosize", "", "", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "max_tag", "Config.html#VALmax_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "max_string_length", "Sys.html#VALmax_string_length", "<div class=\"info\">  <p>Maximum length of strings and byte sequences.</p> </div>", "  Maximum length of strings and byte sequences. ", "<code class=\"type\">int</code>", "int"],
["Int32", "Int32.html", "max_int", "Int32.html#VALmax_int", "<div class=\"info\">  <p>The greatest representable 32-bit integer, 2<sup class=\"superscript\">31</sup> - 1.</p> </div>", "  The greatest representable 32-bit integer, 231 - 1. ", "<code class=\"type\">int32</code>", "int32"],
["Int64", "Int64.html", "max_int", "Int64.html#VALmax_int", "<div class=\"info\">  <p>The greatest representable 64-bit integer, 2<sup class=\"superscript\">63</sup> - 1.</p> </div>", "  The greatest representable 64-bit integer, 263 - 1. ", "<code class=\"type\">int64</code>", "int64"],
["Nativeint", "Nativeint.html", "max_int", "Nativeint.html#VALmax_int", "<div class=\"info\">  <p>The greatest representable native integer, either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform, or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform.</p> </div>", "  The greatest representable native integer, either 231 - 1 on a 32-bit platform, or 263 - 1 on a 64-bit platform. ", "<code class=\"type\">nativeint</code>", "nativeint"],
["Pervasives", "Pervasives.html", "max_int", "Pervasives.html#VALmax_int", "<div class=\"info\">  <p>The greatest representable integer.</p> </div>", "  The greatest representable integer. ", "<code class=\"type\">int</code>", "int"],
["Targetint", "Targetint.html", "max_int", "Targetint.html#VALmax_int", "<div class=\"info\">  <p>The greatest representable target integer, either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform, or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform.</p> </div>", "  The greatest representable target integer, either 231 - 1 on a 32-bit platform, or 263 - 1 on a 64-bit platform. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a></code>", "t"],
["Float", "Float.html", "max_float", "Float.html#VALmax_float", "<div class=\"info\">  <p>The largest positive finite value of type <code class=\"code\">float</code>.</p> </div>", "  The largest positive finite value of type float. ", "<code class=\"type\">float</code>", "float"],
["Pervasives", "Pervasives.html", "max_float", "Pervasives.html#VALmax_float", "<div class=\"info\">  <p>The largest positive finite value of type <code class=\"code\">float</code>.</p> </div>", "  The largest positive finite value of type float. ", "<code class=\"type\">float</code>", "float"],
["Set.S", "Set.S.html", "max_elt_opt", "Set.S.html#VALmax_elt_opt", "<div class=\"info\">  <p>Same as <a href=\"Set.S.html#VALmin_elt_opt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt_opt</code></a>, but returns the largest element of the given set.</p> </div>", "  Same as Set.S.min_elt_opt, but returns the largest element of the given set. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> option</code>", "t -> elt option"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "max_elt_opt", "MoreLabels.Set.S.html#VALmax_elt_opt", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> option</code>", "t -> elt option"],
["Set.S", "Set.S.html", "max_elt", "Set.S.html#VALmax_elt", "<div class=\"info\">  <p>Same as <a href=\"Set.S.html#VALmin_elt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt</code></a>, but returns the largest element of the given set.</p> </div>", "  Same as Set.S.min_elt, but returns the largest element of the given set. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a></code>", "t -> elt"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "max_elt", "MoreLabels.Set.S.html#VALmax_elt", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a></code>", "t -> elt"],
["Map.S", "Map.S.html", "max_binding_opt", "Map.S.html#VALmax_binding_opt", "<div class=\"info\">  <p>Same as <a href=\"Map.S.html#VALmin_binding_opt\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding_opt</code></a>, but returns the largest binding of the given map.</p> </div>", "  Same as Map.S.min_binding_opt, but returns the largest binding of the given map. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "'a t -> (key * 'a) option"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "max_binding_opt", "MoreLabels.Map.S.html#VALmax_binding_opt", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "'a t -> (key * 'a) option"],
["Map.S", "Map.S.html", "max_binding", "Map.S.html#VALmax_binding", "<div class=\"info\">  <p>Same as <a href=\"Map.S.html#VALmin_binding\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding</code></a>, but returns the largest binding of the given map.</p> </div>", "  Same as Map.S.min_binding, but returns the largest binding of the given map. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; <a href=\"Map.S.html#TYPEkey\">key</a> * 'a</code>", "'a t -> key * 'a"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "max_binding", "MoreLabels.Map.S.html#VALmax_binding", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a</code>", "'a t -> key * 'a"],
["Sys", "Sys.html", "max_array_length", "Sys.html#VALmax_array_length", "<div class=\"info\">  <p>Maximum length of a normal array.</p> </div>", "  Maximum length of a normal array. ", "<code class=\"type\">int</code>", "int"],
["Pervasives", "Pervasives.html", "max", "Pervasives.html#VALmax", "<div class=\"info\">  <p>Return the greater of the two arguments.</p> </div>", "  Return the greater of the two arguments. ", "<code class=\"type\">'a -&gt; 'a -&gt; 'a</code>", "'a -> 'a -> 'a"],
["Uchar", "Uchar.html", "max", "Uchar.html#VALmax", "<div class=\"info\">  <p><code class=\"code\">max</code> is U+10FFFF.</p> </div>", "  max is U+10FFFF. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a></code>", "t"],
["Str", "Str.html", "matched_string", "Str.html#VALmatched_string", "<div class=\"info\">  <p><code class=\"code\">matched_string&nbsp;s</code> returns the substring of <code class=\"code\">s</code> that was matched by the last call to one of the following matching or searching functions: <a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a>, <a href=\"Str.html#VALsearch_forward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_forward</code></a>, <a href=\"Str.html#VALsearch_backward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_backward</code></a>, <a href=\"Str.html#VALstring_partial_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_partial_match</code></a>, <a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a>, <a href=\"Str.html#VALsubstitute_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.substitute_first</code></a> provided that none of the following functions was called inbetween: <a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a>, <a href=\"Str.html#VALreplace_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.replace_first</code></a>, <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a>, <a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a>, <a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a>, <a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a>, <a href=\"Str.html#VALfull_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.full_split</code></a>, <a href=\"Str.html#VALbounded_full_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_full_split</code></a> Note: in the case of <code class=\"code\">global_substitute</code> and <code class=\"code\">substitute_first</code>, a call to <code class=\"code\">matched_string</code> is only valid within the <code class=\"code\">subst</code> argument, not after <code class=\"code\">global_substitute</code> or <code class=\"code\">substitute_first</code> returns.</p> </div>", "  matched_string\194\160s returns the substring of s that was matched by the last call to one of the following matching or searching functions: Str.string_match, Str.search_forward, Str.search_backward, Str.string_partial_match, Str.global_substitute, Str.substitute_first provided that none of the following functions was called inbetween: Str.global_replace, Str.replace_first, Str.split, Str.bounded_split, Str.split_delim, Str.bounded_split_delim, Str.full_split, Str.bounded_full_split Note: in the case of global_substitute and substitute_first, a call to matched_string is only valid within the subst argument, not after global_substitute or substitute_first returns. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Str", "Str.html", "matched_group", "Str.html#VALmatched_group", "<div class=\"info\">  <p><code class=\"code\">matched_group&nbsp;n&nbsp;s</code> returns the substring of <code class=\"code\">s</code> that was matched by the <code class=\"code\">n</code>th group <code class=\"code\">\\(...\\)</code> of the regular expression that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p> </div>", "  matched_group\194\160n\194\160s returns the substring of s that was matched by the nth group \\(...\\) of the regular expression that was matched by the last call to a matching or searching function (see Str.matched_string for details). ", "<code class=\"type\">int -&gt; string -&gt; string</code>", "int -> string -> string"],
["Str", "Str.html", "match_end", "Str.html#VALmatch_end", "<div class=\"info\">  <p><code class=\"code\">match_end()</code> returns the position of the character following the last character of the substring that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p> </div>", "  match_end() returns the position of the character following the last character of the substring that was matched by the last call to a matching or searching function (see Str.matched_string for details). ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Str", "Str.html", "match_beginning", "Str.html#VALmatch_beginning", "<div class=\"info\">  <p><code class=\"code\">match_beginning()</code> returns the position of the first character of the substring that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p> </div>", "  match_beginning() returns the position of the first character of the substring that was matched by the last call to a matching or searching function (see Str.matched_string for details). ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "match_", "Ast_helper.Exp.html#VALmatch_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.case list -> Parsetree.expression"],
["Obj", "Obj.html", "marshal", "Obj.html#VALmarshal", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; bytes</code>", "t -> bytes"],
["Docstrings", "Docstrings.html", "mark_symbol_docs", "Docstrings.html#VALmark_symbol_docs", "<div class=\"info\">  <p>Mark the item documentation for the current symbol (for ambiguity warnings).</p> </div>", "  Mark the item documentation for the current symbol (for ambiguity warnings). ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Docstrings", "Docstrings.html", "mark_rhs_docs", "Docstrings.html#VALmark_rhs_docs", "<div class=\"info\">  <p>Mark as associated the item documentation for the symbols between two positions (for ambiguity warnings)</p> </div>", "  Mark as associated the item documentation for the symbols between two positions (for ambiguity warnings) ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Array", "Array.html", "mapi", "Array.html#VALmapi", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the function is applied to the index of the element as first argument, and the element itself as second argument.</p> </div>", "  Same as Array.map, but the function is applied to the index of the element as first argument, and the element itself as second argument. ", "<code class=\"type\">(int -&gt; 'a -&gt; 'b) -&gt; 'a array -&gt; 'b array</code>", "(int -> 'a -> 'b) -> 'a array -> 'b array"],
["ArrayLabels", "ArrayLabels.html", "mapi", "ArrayLabels.html#VALmapi", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the function is applied to the index of the element as first argument, and the element itself as second argument.</p> </div>", "  Same as Array.map, but the function is applied to the index of the element as first argument, and the element itself as second argument. ", "<code class=\"type\">f:(int -&gt; 'a -&gt; 'b) -&gt; 'a array -&gt; 'b array</code>", "f:(int -> 'a -> 'b) -> 'a array -> 'b array"],
["Bytes", "Bytes.html", "mapi", "Bytes.html#VALmapi", "<div class=\"info\">  <p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.</p> </div>", "  mapi\194\160f\194\160s calls f with each character of s and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. ", "<code class=\"type\">(int -&gt; char -&gt; char) -&gt; bytes -&gt; bytes</code>", "(int -> char -> char) -> bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "mapi", "BytesLabels.html#VALmapi", "<div class=\"info\">  <p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.</p> </div>", "  mapi\194\160f\194\160s calls f with each character of s and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. ", "<code class=\"type\">f:(int -&gt; char -&gt; char) -&gt; bytes -&gt; bytes</code>", "f:(int -> char -> char) -> bytes -> bytes"],
["Map.S", "Map.S.html", "mapi", "Map.S.html#VALmapi", "<div class=\"info\">  <p>Same as <a href=\"Map.S.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.map</code></a>, but the function receives as arguments both the key and the associated value for each binding of the map.</p> </div>", "  Same as Map.S.map, but the function receives as arguments both the key and the associated value for each binding of the map. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'b) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'b <a href=\"Map.S.html#TYPEt\">t</a></code>", "(key -> 'a -> 'b) -> 'a t -> 'b t"],
["List", "List.html", "mapi", "List.html#VALmapi", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</p> </div>", "  Same as List.map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. ", "<code class=\"type\">(int -&gt; 'a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "(int -> 'a -> 'b) -> 'a list -> 'b list"],
["ListLabels", "ListLabels.html", "mapi", "ListLabels.html#VALmapi", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</p> </div>", "  Same as List.map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. ", "<code class=\"type\">f:(int -&gt; 'a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "f:(int -> 'a -> 'b) -> 'a list -> 'b list"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "mapi", "MoreLabels.Map.S.html#VALmapi", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'b) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'b <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "f:(key -> 'a -> 'b) ->       'a t -> 'b t"],
["StringLabels", "StringLabels.html", "mapi", "StringLabels.html#VALmapi", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the results in a new string that is returned.</p> </div>", "  String.mapi\194\160f\194\160s calls f with each character of s and its index (in increasing index order) and stores the results in a new string that is returned. ", "<code class=\"type\">f:(int -&gt; char -&gt; char) -&gt; string -&gt; string</code>", "f:(int -> char -> char) -> string -> string"],
["String", "String.html", "mapi", "String.html#VALmapi", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the results in a new string that is returned.</p> </div>", "  String.mapi\194\160f\194\160s calls f with each character of s and its index (in increasing index order) and stores the results in a new string that is returned. ", "<code class=\"type\">(int -&gt; char -&gt; char) -&gt; string -&gt; string</code>", "(int -> char -> char) -> string -> string"],
["Ast_mapper", "Ast_mapper.html", "map_opt", "Ast_mapper.html#VALmap_opt", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a option -&gt; 'b option</code>", "('a -> 'b) -> 'a option -> 'b option"],
["Misc", "Misc.html", "map_left_right", "Misc.html#VALmap_left_right", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "('a -> 'b) -> 'a list -> 'b list"],
["Identifiable.Map", "Identifiable.Map.html", "map_keys", "Identifiable.Map.html#VALmap_keys", "", "", "<code class=\"type\">(key -&gt; key) -&gt; 'a t -&gt; 'a t</code>", "(key -> key) -> 'a t -> 'a t"],
["Unix", "Unix.html", "map_file", "Unix.html#VALmap_file", "<div class=\"info\">  <p>Memory mapping of a file as a big array.</p> </div>", "  Memory mapping of a file as a big array. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       ?pos:int64 -&gt;<br>       ('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; bool -&gt; int array -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Bigarray.Genarray.t</a></code>", "file_descr ->       ?pos:int64 ->       ('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> bool -> int array -> ('a, 'b, 'c) Bigarray.Genarray.t"],
["UnixLabels", "UnixLabels.html", "map_file", "UnixLabels.html#VALmap_file", "<div class=\"info\">  <p>Memory mapping of a file as a big array.</p> </div>", "  Memory mapping of a file as a big array. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       ?pos:int64 -&gt;<br>       kind:('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       layout:'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt;<br>       shared:bool -&gt; dims:int array -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Bigarray.Genarray.t</a></code>", "file_descr ->       ?pos:int64 ->       kind:('a, 'b) Bigarray.kind ->       layout:'c Bigarray.layout ->       shared:bool -> dims:int array -> ('a, 'b, 'c) Bigarray.Genarray.t"],
["Misc", "Misc.html", "map_end", "Misc.html#VALmap_end", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a list -&gt; 'b list -&gt; 'b list</code>", "('a -> 'b) -> 'a list -> 'b list -> 'b list"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "map2_prefix", "Misc.Stdlib.List.html#VALmap2_prefix", "<div class=\"info\">  <p><code class=\"code\"><span class=\"keyword\">let</span>&nbsp;r1,&nbsp;r2&nbsp;=&nbsp;map2_prefix&nbsp;f&nbsp;l1&nbsp;l2</code> If <code class=\"code\">l1</code> is of length n and <code class=\"code\">l2&nbsp;=&nbsp;h2&nbsp;@&nbsp;t2</code> with h2 of length n, r1 is <code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;l1&nbsp;h1</code> and r2 is t2.</p> </div>", "  let\194\160r1,\194\160r2\194\160=\194\160map2_prefix\194\160f\194\160l1\194\160l2 If l1 is of length n and l2\194\160=\194\160h2\194\160@\194\160t2 with h2 of length n, r1 is List.map2\194\160f\194\160l1\194\160h1 and r2 is t2. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'c) -&gt;<br>       'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt;<br>       'b <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'c <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> * 'b <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a></code>", "('a -> 'b -> 'c) ->       'a t ->       'b t -> 'c t * 'b t"],
["Array", "Array.html", "map2", "Array.html#VALmap2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code> and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>: <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.</p> </div>", "  Array.map2\194\160f\194\160a\194\160b applies function f to all the elements of a and b, and builds an array with the results returned by f: [|\194\160f\194\160a.(0)\194\160b.(0);\194\160...;\194\160f\194\160a.(Array.length\194\160a\194\160-\194\1601)\194\160b.(Array.length\194\160b\194\160-\194\1601)|]. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'c) -&gt; 'a array -&gt; 'b array -&gt; 'c array</code>", "('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array"],
["ArrayLabels", "ArrayLabels.html", "map2", "ArrayLabels.html#VALmap2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code> and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>: <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.</p> </div>", "  Array.map2\194\160f\194\160a\194\160b applies function f to all the elements of a and b, and builds an array with the results returned by f: [|\194\160f\194\160a.(0)\194\160b.(0);\194\160...;\194\160f\194\160a.(Array.length\194\160a\194\160-\194\1601)\194\160b.(Array.length\194\160b\194\160-\194\1601)|]. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'c) -&gt; 'a array -&gt; 'b array -&gt; 'c array</code>", "f:('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array"],
["List", "List.html", "map2", "List.html#VALmap2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.</p> </div>", "  List.map2\194\160f\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn] is [f\194\160a1\194\160b1;\194\160...;\194\160f\194\160an\194\160bn]. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'c) -&gt; 'a list -&gt; 'b list -&gt; 'c list</code>", "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list"],
["ListLabels", "ListLabels.html", "map2", "ListLabels.html#VALmap2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.</p> </div>", "  List.map2\194\160f\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn] is [f\194\160a1\194\160b1;\194\160...;\194\160f\194\160an\194\160bn]. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'c) -&gt; 'a list -&gt; 'b list -&gt; 'c list</code>", "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list"],
["Array", "Array.html", "map", "Array.html#VALmap", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>, and builds an array with the results returned by <code class=\"code\">f</code>: <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p> </div>", "  Array.map\194\160f\194\160a applies function f to all the elements of a, and builds an array with the results returned by f: [|\194\160f\194\160a.(0);\194\160f\194\160a.(1);\194\160...;\194\160f\194\160a.(Array.length\194\160a\194\160-\194\1601)\194\160|]. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a array -&gt; 'b array</code>", "('a -> 'b) -> 'a array -> 'b array"],
["ArrayLabels", "ArrayLabels.html", "map", "ArrayLabels.html#VALmap", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>, and builds an array with the results returned by <code class=\"code\">f</code>: <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p> </div>", "  Array.map\194\160f\194\160a applies function f to all the elements of a, and builds an array with the results returned by f: [|\194\160f\194\160a.(0);\194\160f\194\160a.(1);\194\160...;\194\160f\194\160a.(Array.length\194\160a\194\160-\194\1601)\194\160|]. ", "<code class=\"type\">f:('a -&gt; 'b) -&gt; 'a array -&gt; 'b array</code>", "f:('a -> 'b) -> 'a array -> 'b array"],
["Bytes", "Bytes.html", "map", "Bytes.html#VALmap", "<div class=\"info\">  <p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.</p> </div>", "  map\194\160f\194\160s applies function f in turn to all the bytes of s (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. ", "<code class=\"type\">(char -&gt; char) -&gt; bytes -&gt; bytes</code>", "(char -> char) -> bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "map", "BytesLabels.html#VALmap", "<div class=\"info\">  <p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> and stores the resulting bytes in a new sequence that is returned as the result.</p> </div>", "  map\194\160f\194\160s applies function f in turn to all the bytes of s and stores the resulting bytes in a new sequence that is returned as the result. ", "<code class=\"type\">f:(char -&gt; char) -&gt; bytes -&gt; bytes</code>", "f:(char -> char) -> bytes -> bytes"],
["Set.S", "Set.S.html", "map", "Set.S.html#VALmap", "<div class=\"info\">  <p><code class=\"code\">map&nbsp;f&nbsp;s</code> is the set whose elements are <code class=\"code\">f&nbsp;a0</code>,<code class=\"code\">f&nbsp;a1</code>...</p> </div>", "  map\194\160f\194\160s is the set whose elements are f\194\160a0,f\194\160a1... ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a>) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "(elt -> elt) -> t -> t"],
["Map.S", "Map.S.html", "map", "Map.S.html#VALmap", "<div class=\"info\">  <p><code class=\"code\">map&nbsp;f&nbsp;m</code> returns a map with same domain as <code class=\"code\">m</code>, where the associated value <code class=\"code\">a</code> of all bindings of <code class=\"code\">m</code> has been replaced by the result of the application of <code class=\"code\">f</code> to <code class=\"code\">a</code>.</p> </div>", "  map\194\160f\194\160m returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'b <a href=\"Map.S.html#TYPEt\">t</a></code>", "('a -> 'b) -> 'a t -> 'b t"],
["Identifiable.Set", "Identifiable.Set.html", "map", "Identifiable.Set.html#VALmap", "", "", "<code class=\"type\">(elt -&gt; elt) -&gt; t -&gt; t</code>", "(elt -> elt) -> t -> t"],
["Identifiable.Tbl", "Identifiable.Tbl.html", "map", "Identifiable.Tbl.html#VALmap", "", "", "<code class=\"type\">'a t -&gt; ('a -&gt; 'b) -&gt; 'b t</code>", "'a t -> ('a -> 'b) -> 'b t"],
["List", "List.html", "map", "List.html#VALmap", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>, and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code> with the results returned by <code class=\"code\">f</code>.</p> </div>", "  List.map\194\160f\194\160[a1;\194\160...;\194\160an] applies function f to a1,\194\160...,\194\160an, and builds the list [f\194\160a1;\194\160...;\194\160f\194\160an] with the results returned by f. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "('a -> 'b) -> 'a list -> 'b list"],
["ListLabels", "ListLabels.html", "map", "ListLabels.html#VALmap", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>, and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code> with the results returned by <code class=\"code\">f</code>.</p> </div>", "  List.map\194\160f\194\160[a1;\194\160...;\194\160an] applies function f to a1,\194\160...,\194\160an, and builds the list [f\194\160a1;\194\160...;\194\160f\194\160an] with the results returned by f. ", "<code class=\"type\">f:('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code>", "f:('a -> 'b) -> 'a list -> 'b list"],
["Misc.Stdlib.Option", "Misc.Stdlib.Option.html", "map", "Misc.Stdlib.Option.html#VALmap", "", "", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a> -&gt; 'b <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a></code>", "('a -> 'b) -> 'a t -> 'b t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "map", "MoreLabels.Map.S.html#VALmap", "", "", "<code class=\"type\">f:('a -&gt; 'b) -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'b <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "f:('a -> 'b) -> 'a t -> 'b t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "map", "MoreLabels.Set.S.html#VALmap", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a>) -&gt;<br>       <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "f:(elt -> elt) ->       t -> t"],
["Seq", "Seq.html", "map", "Seq.html#VALmap", "<div class=\"info\">  <p><code class=\"code\">map&nbsp;f&nbsp;seq</code> returns a new sequence whose elements are the elements of <code class=\"code\">seq</code>, transformed by <code class=\"code\">f</code>.</p> </div>", "  map\194\160f\194\160seq returns a new sequence whose elements are the elements of seq, transformed by f. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a <a href=\"Seq.html#TYPEt\">t</a> -&gt; 'b <a href=\"Seq.html#TYPEt\">t</a></code>", "('a -> 'b) -> 'a t -> 'b t"],
["StringLabels", "StringLabels.html", "map", "StringLabels.html#VALmap", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code> and stores the results in a new string that is returned.</p> </div>", "  String.map\194\160f\194\160s applies function f in turn to all the characters of s and stores the results in a new string that is returned. ", "<code class=\"type\">f:(char -&gt; char) -&gt; string -&gt; string</code>", "f:(char -> char) -> string -> string"],
["String", "String.html", "map", "String.html#VALmap", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code> (in increasing index order) and stores the results in a new string that is returned.</p> </div>", "  String.map\194\160f\194\160s applies function f in turn to all the characters of s (in increasing index order) and stores the results in a new string that is returned. ", "<code class=\"type\">(char -&gt; char) -&gt; string -&gt; string</code>", "(char -> char) -> string -> string"],
["Tbl", "Tbl.html", "map", "Tbl.html#VALmap", "", "", "<code class=\"type\">('k -&gt; 'v1 -&gt; 'v2) -&gt; ('k, 'v1) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; ('k, 'v2) <a href=\"Tbl.html#TYPEt\">t</a></code>", "('k -> 'v1 -> 'v2) -> ('k, 'v1) t -> ('k, 'v2) t"],
["Format", "Format.html", "make_symbolic_output_buffer", "Format.html#VALmake_symbolic_output_buffer", "<div class=\"info\">  <p><code class=\"code\">make_symbolic_output_buffer&nbsp;()</code> returns a fresh buffer for symbolic output.</p> </div>", "  make_symbolic_output_buffer\194\160() returns a fresh buffer for symbolic output. ", "<code class=\"type\">unit -&gt; <a href=\"Format.html#TYPEsymbolic_output_buffer\">symbolic_output_buffer</a></code>", "unit -> symbolic_output_buffer"],
["Random.State", "Random.State.html", "make_self_init", "Random.State.html#VALmake_self_init", "<div class=\"info\">  <p>Create a new state and initialize it with a system-dependent low-entropy seed.</p> </div>", "  Create a new state and initialize it with a system-dependent low-entropy seed. ", "<code class=\"type\">unit -&gt; <a href=\"Random.State.html#TYPEt\">t</a></code>", "unit -> t"],
["Clflags", "Clflags.html", "make_runtime", "Clflags.html#VALmake_runtime", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["CamlinternalFormat", "CamlinternalFormat.html", "make_printf", "CamlinternalFormat.html#VALmake_printf", "", "", "<code class=\"type\">('b -&gt; ('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> -&gt; 'd) -&gt;<br>       'b -&gt;<br>       ('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> -&gt;<br>       ('a, 'b, 'c, 'c, 'c, 'd) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a> -&gt; 'a</code>", "('b -> ('b, 'c) acc -> 'd) ->       'b ->       ('b, 'c) acc ->       ('a, 'b, 'c, 'c, 'c, 'd) CamlinternalFormatBasics.fmt -> 'a"],
["Clflags", "Clflags.html", "make_package", "Clflags.html#VALmake_package", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Depend", "Depend.html", "make_node", "Depend.html#VALmake_node", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a></code>", "bound_map -> map_tree"],
["Array", "Array.html", "make_matrix", "Array.html#VALmake_matrix", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array (an array of arrays) with first dimension <code class=\"code\">dimx</code> and second dimension <code class=\"code\">dimy</code>.</p> </div>", "  Array.make_matrix\194\160dimx\194\160dimy\194\160e returns a two-dimensional array (an array of arrays) with first dimension dimx and second dimension dimy. ", "<code class=\"type\">int -&gt; int -&gt; 'a -&gt; 'a array array</code>", "int -> int -> 'a -> 'a array array"],
["ArrayLabels", "ArrayLabels.html", "make_matrix", "ArrayLabels.html#VALmake_matrix", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array (an array of arrays) with first dimension <code class=\"code\">dimx</code> and second dimension <code class=\"code\">dimy</code>.</p> </div>", "  Array.make_matrix\194\160dimx\194\160dimy\194\160e returns a two-dimensional array (an array of arrays) with first dimension dimx and second dimension dimy. ", "<code class=\"type\">dimx:int -&gt; dimy:int -&gt; 'a -&gt; 'a array array</code>", "dimx:int -> dimy:int -> 'a -> 'a array array"],
["Genlex", "Genlex.html", "make_lexer", "Genlex.html#VALmake_lexer", "<div class=\"info\">  <p>Construct the lexer function.</p> </div>", "  Construct the lexer function. ", "<code class=\"type\">string list -&gt; char <a href=\"Stream.html#TYPEt\">Stream.t</a> -&gt; <a href=\"Genlex.html#TYPEtoken\">token</a> <a href=\"Stream.html#TYPEt\">Stream.t</a></code>", "string list -> char Stream.t -> token Stream.t"],
["Depend", "Depend.html", "make_leaf", "Depend.html#VALmake_leaf", "", "", "<code class=\"type\">string -&gt; <a href=\"Depend.html#TYPEmap_tree\">map_tree</a></code>", "string -> map_tree"],
["CamlinternalFormat", "CamlinternalFormat.html", "make_iprintf", "CamlinternalFormat.html#VALmake_iprintf", "", "", "<code class=\"type\">('b -&gt; 'f) -&gt;<br>       'b -&gt; ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a> -&gt; 'a</code>", "('b -> 'f) ->       'b -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt -> 'a"],
["Graphics", "Graphics.html", "make_image", "Graphics.html#VALmake_image", "<div class=\"info\">  <p>Convert the given color matrix to an image.</p> </div>", "  Convert the given color matrix to an image. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a> array array -&gt; <a href=\"Graphics.html#TYPEimage\">image</a></code>", "color array array -> image"],
["Format", "Format.html", "make_formatter", "Format.html#VALmake_formatter", "<div class=\"info\">  <p><code class=\"code\">make_formatter&nbsp;out&nbsp;flush</code> returns a new formatter that outputs with function <code class=\"code\">out</code>, and flushes with function <code class=\"code\">flush</code>.</p> </div>", "  make_formatter\194\160out\194\160flush returns a new formatter that outputs with function out, and flushes with function flush. ", "<code class=\"type\">(string -&gt; int -&gt; int -&gt; unit) -&gt; (unit -&gt; unit) -&gt; <a href=\"Format.html#TYPEformatter\">formatter</a></code>", "(string -> int -> int -> unit) -> (unit -> unit) -> formatter"],
["Array", "Array.html", "make_float", "Array.html#VALmake_float", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">int -&gt; float array</code>", "int -> float array"],
["ArrayLabels", "ArrayLabels.html", "make_float", "ArrayLabels.html#VALmake_float", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">int -&gt; float array</code>", "int -> float array"],
["CamlinternalOO", "CamlinternalOO.html", "make_class_store", "CamlinternalOO.html#VALmake_class_store", "", "", "<code class=\"type\">string array -&gt;<br>       (<a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a>) -&gt;<br>       <a href=\"CamlinternalOO.html#TYPEinit_table\">init_table</a> -&gt; unit</code>", "string array ->       (table -> t) ->       init_table -> unit"],
["CamlinternalOO", "CamlinternalOO.html", "make_class", "CamlinternalOO.html#VALmake_class", "", "", "<code class=\"type\">string array -&gt;<br>       (<a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a>) -&gt;<br>       <a href=\"CamlinternalOO.html#TYPEt\">t</a> * (<a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a>) *<br>       (<a href=\"Obj.html#TYPEt\">Obj.t</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a>) * <a href=\"Obj.html#TYPEt\">Obj.t</a></code>", "string array ->       (table -> Obj.t -> t) ->       t * (table -> Obj.t -> t) *       (Obj.t -> t) * Obj.t"],
["Clflags", "Clflags.html", "make_archive", "Clflags.html#VALmake_archive", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Array", "Array.html", "make", "Array.html#VALmake", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>, initialized with <code class=\"code\">x</code>.</p> </div>", "  Array.make\194\160n\194\160x returns a fresh array of length n, initialized with x. ", "<code class=\"type\">int -&gt; 'a -&gt; 'a array</code>", "int -> 'a -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "make", "ArrayLabels.html#VALmake", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>, initialized with <code class=\"code\">x</code>.</p> </div>", "  Array.make\194\160n\194\160x returns a fresh array of length n, initialized with x. ", "<code class=\"type\">int -&gt; 'a -&gt; 'a array</code>", "int -> 'a -> 'a array"],
["Bytes", "Bytes.html", "make", "Bytes.html#VALmake", "<div class=\"info\">  <p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with the byte <code class=\"code\">c</code>.</p> </div>", "  make\194\160n\194\160c returns a new byte sequence of length n, filled with the byte c. ", "<code class=\"type\">int -&gt; char -&gt; bytes</code>", "int -> char -> bytes"],
["BytesLabels", "BytesLabels.html", "make", "BytesLabels.html#VALmake", "<div class=\"info\">  <p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with the byte <code class=\"code\">c</code>.</p> </div>", "  make\194\160n\194\160c returns a new byte sequence of length n, filled with the byte c. ", "<code class=\"type\">int -&gt; char -&gt; bytes</code>", "int -> char -> bytes"],
["Random.State", "Random.State.html", "make", "Random.State.html#VALmake", "<div class=\"info\">  <p>Create a new state and initialize it with the given seed.</p> </div>", "  Create a new state and initialize it with the given seed. ", "<code class=\"type\">int array -&gt; <a href=\"Random.State.html#TYPEt\">t</a></code>", "int array -> t"],
["StringLabels", "StringLabels.html", "make", "StringLabels.html#VALmake", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>, filled with the character <code class=\"code\">c</code>.</p> </div>", "  String.make\194\160n\194\160c returns a fresh string of length n, filled with the character c. ", "<code class=\"type\">int -&gt; char -&gt; string</code>", "int -> char -> string"],
["String", "String.html", "make", "String.html#VALmake", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>, filled with the character <code class=\"code\">c</code>.</p> </div>", "  String.make\194\160n\194\160c returns a fresh string of length n, filled with the character c. ", "<code class=\"type\">int -&gt; char -&gt; string</code>", "int -> char -> string"],
["Gc", "Gc.html", "major_slice", "Gc.html#VALmajor_slice", "<div class=\"info\">  <p><code class=\"code\">major_slice&nbsp;n</code> Do a minor collection and a slice of major collection.</p> </div>", "  major_slice\194\160n Do a minor collection and a slice of major collection. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Gc", "Gc.html", "major", "Gc.html#VALmajor", "<div class=\"info\">  <p>Do a minor collection and finish the current major collection cycle.</p> </div>", "  Do a minor collection and finish the current major collection cycle. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Obj", "Obj.html", "magic", "Obj.html#VALmagic", "", "", "<code class=\"type\">'a -&gt; 'b</code>", "'a -> 'b"],
["Graphics", "Graphics.html", "magenta", "Graphics.html#VALmagenta", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Unix", "Unix.html", "lstat", "Unix.html#VALlstat", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.stat</code></a>, but in case the file is a symbolic link, return the information for the link itself.</p> </div>", "  Same as Unix.stat, but in case the file is a symbolic link, return the information for the link itself. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEstats\">stats</a></code>", "string -> stats"],
["Unix.LargeFile", "Unix.LargeFile.html", "lstat", "Unix.LargeFile.html#VALlstat", "", "", "<code class=\"type\">string -&gt; <a href=\"Unix.LargeFile.html#TYPEstats\">stats</a></code>", "string -> stats"],
["UnixLabels", "UnixLabels.html", "lstat", "UnixLabels.html#VALlstat", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.stat</code></a>, but in case the file is a symbolic link, return the information for the link itself.</p> </div>", "  Same as UnixLabels.stat, but in case the file is a symbolic link, return the information for the link itself. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEstats\">stats</a></code>", "string -> stats"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "lstat", "UnixLabels.LargeFile.html#VALlstat", "", "", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.LargeFile.html#TYPEstats\">stats</a></code>", "string -> stats"],
["Unix", "Unix.html", "lseek", "Unix.html#VALlseek", "<div class=\"info\">  <p>Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).</p> </div>", "  Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file). ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; int -&gt; <a href=\"Unix.html#TYPEseek_command\">seek_command</a> -&gt; int</code>", "file_descr -> int -> seek_command -> int"],
["Unix.LargeFile", "Unix.LargeFile.html", "lseek", "Unix.LargeFile.html#VALlseek", "<div class=\"info\">  <p>See <a href=\"Unix.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lseek</code></a>.</p> </div>", "  See Unix.lseek. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; int64 -&gt; <a href=\"Unix.html#TYPEseek_command\">Unix.seek_command</a> -&gt; int64</code>", "Unix.file_descr -> int64 -> Unix.seek_command -> int64"],
["UnixLabels", "UnixLabels.html", "lseek", "UnixLabels.html#VALlseek", "<div class=\"info\">  <p>Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).</p> </div>", "  Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file). ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; int -&gt; mode:<a href=\"UnixLabels.html#TYPEseek_command\">seek_command</a> -&gt; int</code>", "file_descr -> int -> mode:seek_command -> int"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "lseek", "UnixLabels.LargeFile.html#VALlseek", "", "", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">UnixLabels.file_descr</a> -&gt; int64 -&gt; mode:<a href=\"UnixLabels.html#TYPEseek_command\">UnixLabels.seek_command</a> -&gt; int64</code>", "UnixLabels.file_descr -> int64 -> mode:UnixLabels.seek_command -> int64"],
["Bytes", "Bytes.html", "lowercase_ascii", "Bytes.html#VALlowercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "lowercase_ascii", "BytesLabels.html#VALlowercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["Char", "Char.html", "lowercase_ascii", "Char.html#VALlowercase_ascii", "<div class=\"info\">  <p>Convert the given character to its equivalent lowercase character, using the US-ASCII character set.</p> </div>", "  Convert the given character to its equivalent lowercase character, using the US-ASCII character set. ", "<code class=\"type\">char -&gt; char</code>", "char -> char"],
["StringLabels", "StringLabels.html", "lowercase_ascii", "StringLabels.html#VALlowercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "lowercase_ascii", "String.html#VALlowercase_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Bytes", "Bytes.html", "lowercase", "Bytes.html#VALlowercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "lowercase", "BytesLabels.html#VALlowercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["Char", "Char.html", "lowercase", "Char.html#VALlowercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Convert the given character to its equivalent lowercase character, using the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Convert the given character to its equivalent lowercase character, using the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">char -&gt; char</code>", "char -> char"],
["StringLabels", "StringLabels.html", "lowercase", "StringLabels.html#VALlowercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "lowercase", "String.html#VALlowercase", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.</p> </span></div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Graphics", "Graphics.html", "loop_at_exit", "Graphics.html#VALloop_at_exit", "<div class=\"info\">  <p>Loop before exiting the program, the list given as argument is the list of handlers and the events on which these handlers are called.</p> </div>", "  Loop before exiting the program, the list given as argument is the list of handlers and the events on which these handlers are called. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEevent\">event</a> list -&gt; (<a href=\"Graphics.html#TYPEstatus\">status</a> -&gt; unit) -&gt; unit</code>", "event list -> (status -> unit) -> unit"],
["CamlinternalOO", "CamlinternalOO.html", "lookup_tables", "CamlinternalOO.html#VALlookup_tables", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtables\">tables</a> -&gt;<br>       <a href=\"CamlinternalOO.html#TYPEclosure\">closure</a> array -&gt; <a href=\"CamlinternalOO.html#TYPEtables\">tables</a></code>", "tables ->       closure array -> tables"],
["Int32", "Int32.html", "logxor", "Int32.html#VALlogxor", "<div class=\"info\">  <p>Bitwise logical exclusive or.</p> </div>", "  Bitwise logical exclusive or. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "logxor", "Int64.html#VALlogxor", "<div class=\"info\">  <p>Bitwise logical exclusive or.</p> </div>", "  Bitwise logical exclusive or. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["Nativeint", "Nativeint.html", "logxor", "Nativeint.html#VALlogxor", "<div class=\"info\">  <p>Bitwise logical exclusive or.</p> </div>", "  Bitwise logical exclusive or. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["Targetint", "Targetint.html", "logxor", "Targetint.html#VALlogxor", "<div class=\"info\">  <p>Bitwise logical exclusive or.</p> </div>", "  Bitwise logical exclusive or. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Int32", "Int32.html", "logor", "Int32.html#VALlogor", "<div class=\"info\">  <p>Bitwise logical or.</p> </div>", "  Bitwise logical or. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "logor", "Int64.html#VALlogor", "<div class=\"info\">  <p>Bitwise logical or.</p> </div>", "  Bitwise logical or. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["Nativeint", "Nativeint.html", "logor", "Nativeint.html#VALlogor", "<div class=\"info\">  <p>Bitwise logical or.</p> </div>", "  Bitwise logical or. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["Targetint", "Targetint.html", "logor", "Targetint.html#VALlogor", "<div class=\"info\">  <p>Bitwise logical or.</p> </div>", "  Bitwise logical or. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Int32", "Int32.html", "lognot", "Int32.html#VALlognot", "<div class=\"info\">  <p>Bitwise logical negation.</p> </div>", "  Bitwise logical negation. ", "<code class=\"type\">int32 -&gt; int32</code>", "int32 -> int32"],
["Int64", "Int64.html", "lognot", "Int64.html#VALlognot", "<div class=\"info\">  <p>Bitwise logical negation.</p> </div>", "  Bitwise logical negation. ", "<code class=\"type\">int64 -&gt; int64</code>", "int64 -> int64"],
["Nativeint", "Nativeint.html", "lognot", "Nativeint.html#VALlognot", "<div class=\"info\">  <p>Bitwise logical negation.</p> </div>", "  Bitwise logical negation. ", "<code class=\"type\">nativeint -&gt; nativeint</code>", "nativeint -> nativeint"],
["Targetint", "Targetint.html", "lognot", "Targetint.html#VALlognot", "<div class=\"info\">  <p>Bitwise logical negation.</p> </div>", "  Bitwise logical negation. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t"],
["Int32", "Int32.html", "logand", "Int32.html#VALlogand", "<div class=\"info\">  <p>Bitwise logical and.</p> </div>", "  Bitwise logical and. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "logand", "Int64.html#VALlogand", "<div class=\"info\">  <p>Bitwise logical and.</p> </div>", "  Bitwise logical and. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["Nativeint", "Nativeint.html", "logand", "Nativeint.html#VALlogand", "<div class=\"info\">  <p>Bitwise logical and.</p> </div>", "  Bitwise logical and. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["Targetint", "Targetint.html", "logand", "Targetint.html#VALlogand", "<div class=\"info\">  <p>Bitwise logical and.</p> </div>", "  Bitwise logical and. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Misc", "Misc.html", "log2", "Misc.html#VALlog2", "", "", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Float", "Float.html", "log1p", "Float.html#VALlog1p", "<div class=\"info\">  <p><code class=\"code\">log1p&nbsp;x</code> computes <code class=\"code\">log(1.0&nbsp;+.&nbsp;x)</code> (natural logarithm), giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p> </div>", "  log1p\194\160x computes log(1.0\194\160+.\194\160x) (natural logarithm), giving numerically-accurate results even if x is close to 0.0. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "log1p", "Pervasives.html#VALlog1p", "<div class=\"info\">  <p><code class=\"code\">log1p&nbsp;x</code> computes <code class=\"code\">log(1.0&nbsp;+.&nbsp;x)</code> (natural logarithm), giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p> </div>", "  log1p\194\160x computes log(1.0\194\160+.\194\160x) (natural logarithm), giving numerically-accurate results even if x is close to 0.0. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Float", "Float.html", "log10", "Float.html#VALlog10", "<div class=\"info\">  <p>Base 10 logarithm.</p> </div>", "  Base 10 logarithm. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "log10", "Pervasives.html#VALlog10", "<div class=\"info\">  <p>Base 10 logarithm.</p> </div>", "  Base 10 logarithm. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Complex", "Complex.html", "log", "Complex.html#VALlog", "<div class=\"info\">  <p>Natural logarithm (in base <code class=\"code\">e</code>).</p> </div>", "  Natural logarithm (in base e). ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t"],
["Float", "Float.html", "log", "Float.html#VALlog", "<div class=\"info\">  <p>Natural logarithm.</p> </div>", "  Natural logarithm. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "log", "Pervasives.html#VALlog", "<div class=\"info\">  <p>Natural logarithm.</p> </div>", "  Natural logarithm. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Unix", "Unix.html", "lockf", "Unix.html#VALlockf", "<div class=\"info\">  <p><code class=\"code\">lockf&nbsp;fd&nbsp;cmd&nbsp;size</code> puts a lock on a region of the file opened as <code class=\"code\">fd</code>.</p> </div>", "  lockf\194\160fd\194\160cmd\194\160size puts a lock on a region of the file opened as fd. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPElock_command\">lock_command</a> -&gt; int -&gt; unit</code>", "file_descr -> lock_command -> int -> unit"],
["UnixLabels", "UnixLabels.html", "lockf", "UnixLabels.html#VALlockf", "<div class=\"info\">  <p><code class=\"code\">lockf&nbsp;fd&nbsp;cmd&nbsp;size</code> puts a lock on a region of the file opened as <code class=\"code\">fd</code>.</p> </div>", "  lockf\194\160fd\194\160cmd\194\160size puts a lock on a region of the file opened as fd. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; mode:<a href=\"UnixLabels.html#TYPElock_command\">lock_command</a> -&gt; len:int -&gt; unit</code>", "file_descr -> mode:lock_command -> len:int -> unit"],
["Mutex", "Mutex.html", "lock", "Mutex.html#VALlock", "<div class=\"info\">  <p>Lock the given mutex.</p> </div>", "  Lock the given mutex. ", "<code class=\"type\"><a href=\"Mutex.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Syntaxerr", "Syntaxerr.html", "location_of_error", "Syntaxerr.html#VALlocation_of_error", "", "", "<code class=\"type\"><a href=\"Syntaxerr.html#TYPEerror\">error</a> -&gt; <a href=\"Location.html#TYPEt\">Location.t</a></code>", "error -> Location.t"],
["Printexc.Slot", "Printexc.Slot.html", "location", "Printexc.Slot.html#VALlocation", "<div class=\"info\">  <p><code class=\"code\">location&nbsp;slot</code> returns the location information of the slot, if available, and <code class=\"code\"><span class=\"constructor\">None</span></code> otherwise.</p> </div>", "  location\194\160slot returns the location information of the slot, if available, and None otherwise. ", "<code class=\"type\"><a href=\"Printexc.Slot.html#TYPEt\">t</a> -&gt; <a href=\"Printexc.html#TYPElocation\">Printexc.location</a> option</code>", "t -> Printexc.location option"],
["Unix", "Unix.html", "localtime", "Unix.html#VALlocaltime", "<div class=\"info\">  <p>Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and a time.</p> </div>", "  Convert a time in seconds, as returned by Unix.time, into a date and a time. ", "<code class=\"type\">float -&gt; <a href=\"Unix.html#TYPEtm\">tm</a></code>", "float -> tm"],
["UnixLabels", "UnixLabels.html", "localtime", "UnixLabels.html#VALlocaltime", "<div class=\"info\">  <p>Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date and a time.</p> </div>", "  Convert a time in seconds, as returned by UnixLabels.time, into a date and a time. ", "<code class=\"type\">float -&gt; <a href=\"UnixLabels.html#TYPEtm\">tm</a></code>", "float -> tm"],
["Dynlink", "Dynlink.html", "loadfile_private", "Dynlink.html#VALloadfile_private", "<div class=\"info\">  <p>Same as <code class=\"code\">loadfile</code>, except that the compilation units just loaded are hidden (cannot be referenced) from other modules dynamically loaded afterwards.</p> </div>", "  Same as loadfile, except that the compilation units just loaded are hidden (cannot be referenced) from other modules dynamically loaded afterwards. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Dynlink", "Dynlink.html", "loadfile", "Dynlink.html#VALloadfile", "<div class=\"info\">  <p>In bytecode: load the given bytecode object file (<code class=\"code\">.cmo</code> file) or bytecode library file (<code class=\"code\">.cma</code> file), and link it with the running program.</p> </div>", "  In bytecode: load the given bytecode object file (.cmo file) or bytecode library file (.cma file), and link it with the running program. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Config", "Config.html", "load_path", "Config.html#VALload_path", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Pervasives", "Pervasives.html", "lnot", "Pervasives.html#VALlnot", "<div class=\"info\">  <p>Bitwise logical negation.</p> </div>", "  Bitwise logical negation. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Unix", "Unix.html", "listen", "Unix.html#VALlisten", "<div class=\"info\">  <p>Set up a socket for receiving connection requests.</p> </div>", "  Set up a socket for receiving connection requests. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; int -&gt; unit</code>", "file_descr -> int -> unit"],
["UnixLabels", "UnixLabels.html", "listen", "UnixLabels.html#VALlisten", "<div class=\"info\">  <p>Set up a socket for receiving connection requests.</p> </div>", "  Set up a socket for receiving connection requests. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; max:int -&gt; unit</code>", "file_descr -> max:int -> unit"],
["Misc", "Misc.html", "list_remove", "Misc.html#VALlist_remove", "", "", "<code class=\"type\">'a -&gt; 'a list -&gt; 'a list</code>", "'a -> 'a list -> 'a list"],
["Sort", "Sort.html", "list", "Sort.html#VALlist", "<div class=\"info\">  <p>Sort a list in increasing order according to an ordering predicate.</p> </div>", "  Sort a list in increasing order according to an ordering predicate. ", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> bool) -> 'a list -> 'a list"],
["Clflags", "Clflags.html", "link_everything", "Clflags.html#VALlink_everything", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Unix", "Unix.html", "link", "Unix.html#VALlink", "<div class=\"info\">  <p><code class=\"code\">link&nbsp;source&nbsp;dest</code> creates a hard link named <code class=\"code\">dest</code> to the file named <code class=\"code\">source</code>.</p> </div>", "  link\194\160source\194\160dest creates a hard link named dest to the file named source. ", "<code class=\"type\">string -&gt; string -&gt; unit</code>", "string -> string -> unit"],
["UnixLabels", "UnixLabels.html", "link", "UnixLabels.html#VALlink", "<div class=\"info\">  <p><code class=\"code\">link&nbsp;source&nbsp;dest</code> creates a hard link named <code class=\"code\">dest</code> to the file named <code class=\"code\">source</code>.</p> </div>", "  link\194\160source\194\160dest creates a hard link named dest to the file named source. ", "<code class=\"type\">src:string -&gt; dst:string -&gt; unit</code>", "src:string -> dst:string -> unit"],
["Graphics", "Graphics.html", "lineto", "Graphics.html#VALlineto", "<div class=\"info\">  <p>Draw a line with endpoints the current point and the given point, and move the current point to the given point.</p> </div>", "  Draw a line with endpoints the current point and the given point, and move the current point to the given point. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["Config", "Config.html", "libunwind_link_flags", "Config.html#VALlibunwind_link_flags", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "libunwind_available", "Config.html#VALlibunwind_available", "", "", "<code class=\"type\">bool</code>", "bool"],
["Lexing", "Lexing.html", "lexeme_start_p", "Lexing.html#VALlexeme_start_p", "<div class=\"info\">  <p>Like <code class=\"code\">lexeme_start</code>, but return a complete <code class=\"code\">position</code> instead of an offset.</p> </div>", "  Like lexeme_start, but return a complete position instead of an offset. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; <a href=\"Lexing.html#TYPEposition\">position</a></code>", "lexbuf -> position"],
["Lexing", "Lexing.html", "lexeme_start", "Lexing.html#VALlexeme_start", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_start&nbsp;lexbuf</code> returns the offset in the input stream of the first character of the matched string.</p> </div>", "  Lexing.lexeme_start\194\160lexbuf returns the offset in the input stream of the first character of the matched string. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; int</code>", "lexbuf -> int"],
["Lexing", "Lexing.html", "lexeme_end_p", "Lexing.html#VALlexeme_end_p", "<div class=\"info\">  <p>Like <code class=\"code\">lexeme_end</code>, but return a complete <code class=\"code\">position</code> instead of an offset.</p> </div>", "  Like lexeme_end, but return a complete position instead of an offset. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; <a href=\"Lexing.html#TYPEposition\">position</a></code>", "lexbuf -> position"],
["Lexing", "Lexing.html", "lexeme_end", "Lexing.html#VALlexeme_end", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_end&nbsp;lexbuf</code> returns the offset in the input stream of the character following the last character of the matched string.</p> </div>", "  Lexing.lexeme_end\194\160lexbuf returns the offset in the input stream of the character following the last character of the matched string. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; int</code>", "lexbuf -> int"],
["Lexing", "Lexing.html", "lexeme_char", "Lexing.html#VALlexeme_char", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_char&nbsp;lexbuf&nbsp;i</code> returns character number <code class=\"code\">i</code> in the matched string.</p> </div>", "  Lexing.lexeme_char\194\160lexbuf\194\160i returns character number i in the matched string. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; int -&gt; char</code>", "lexbuf -> int -> char"],
["Lexing", "Lexing.html", "lexeme", "Lexing.html#VALlexeme", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme&nbsp;lexbuf</code> returns the string matched by the regular expression.</p> </div>", "  Lexing.lexeme\194\160lexbuf returns the string matched by the regular expression. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; string</code>", "lexbuf -> string"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "letmodule", "Ast_helper.Exp.html#VALletmodule", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Parsetree.module_expr -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "letexception", "Ast_helper.Exp.html#VALletexception", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.extension_constructor ->       Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "let_", "Ast_helper.Exp.html#VALlet_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.rec_flag ->       Parsetree.value_binding list -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "let_", "Ast_helper.Cl.html#VALlet_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.rec_flag ->       Parsetree.value_binding list -> Parsetree.class_expr -> Parsetree.class_expr"],
["Array", "Array.html", "length", "Array.html#VALlength", "<div class=\"info\">  <p>Return the length (number of elements) of the given array.</p> </div>", "  Return the length (number of elements) of the given array. ", "<code class=\"type\">'a array -&gt; int</code>", "'a array -> int"],
["ArrayLabels", "ArrayLabels.html", "length", "ArrayLabels.html#VALlength", "<div class=\"info\">  <p>Return the length (number of elements) of the given array.</p> </div>", "  Return the length (number of elements) of the given array. ", "<code class=\"type\">'a array -&gt; int</code>", "'a array -> int"],
["Buffer", "Buffer.html", "length", "Buffer.html#VALlength", "<div class=\"info\">  <p>Return the number of characters currently contained in the buffer.</p> </div>", "  Return the number of characters currently contained in the buffer. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Bytes", "Bytes.html", "length", "Bytes.html#VALlength", "<div class=\"info\">  <p>Return the length (number of bytes) of the argument.</p> </div>", "  Return the length (number of bytes) of the argument. ", "<code class=\"type\">bytes -&gt; int</code>", "bytes -> int"],
["BytesLabels", "BytesLabels.html", "length", "BytesLabels.html#VALlength", "<div class=\"info\">  <p>Return the length (number of bytes) of the argument.</p> </div>", "  Return the length (number of bytes) of the argument. ", "<code class=\"type\">bytes -&gt; int</code>", "bytes -> int"],
["Float.Array", "Float.Array.html", "length", "Float.Array.html#VALlength", "", "", "<code class=\"type\"><a href=\"Float.Array.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Hashtbl", "Hashtbl.html", "length", "Hashtbl.html#VALlength", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length&nbsp;tbl</code> returns the number of bindings in <code class=\"code\">tbl</code>.</p> </div>", "  Hashtbl.length\194\160tbl returns the number of bindings in tbl. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b) t -> int"],
["Hashtbl.S", "Hashtbl.S.html", "length", "Hashtbl.S.html#VALlength", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "length", "Hashtbl.SeededS.html#VALlength", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["List", "List.html", "length", "List.html#VALlength", "<div class=\"info\">  <p>Return the length (number of elements) of the given list.</p> </div>", "  Return the length (number of elements) of the given list. ", "<code class=\"type\">'a list -&gt; int</code>", "'a list -> int"],
["ListLabels", "ListLabels.html", "length", "ListLabels.html#VALlength", "<div class=\"info\">  <p>Return the length (number of elements) of the given list.</p> </div>", "  Return the length (number of elements) of the given list. ", "<code class=\"type\">'a list -&gt; int</code>", "'a list -> int"],
["Misc.LongString", "Misc.LongString.html", "length", "Misc.LongString.html#VALlength", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "length", "MoreLabels.Hashtbl.html#VALlength", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b) t -> int"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "length", "MoreLabels.Hashtbl.S.html#VALlength", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "length", "MoreLabels.Hashtbl.SeededS.html#VALlength", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "length", "Obj.Ephemeron.html#VALlength", "<div class=\"info\">  <p>return the number of keys</p> </div>", "  return the number of keys ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Queue", "Queue.html", "length", "Queue.html#VALlength", "<div class=\"info\">  <p>Return the number of elements in a queue.</p> </div>", "  Return the number of elements in a queue. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["Stack", "Stack.html", "length", "Stack.html#VALlength", "<div class=\"info\">  <p>Return the number of elements in a stack.</p> </div>", "  Return the number of elements in a stack. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["StringLabels", "StringLabels.html", "length", "StringLabels.html#VALlength", "<div class=\"info\">  <p>Return the length (number of characters) of the given string.</p> </div>", "  Return the length (number of characters) of the given string. ", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["String", "String.html", "length", "String.html#VALlength", "<div class=\"info\">  <p>Return the length (number of characters) of the given string.</p> </div>", "  Return the length (number of characters) of the given string. ", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["Weak", "Weak.html", "length", "Weak.html#VALlength", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.length&nbsp;ar</code> returns the length (number of elements) of <code class=\"code\">ar</code>.</p> </div>", "  Weak.length\194\160ar returns the length (number of elements) of ar. ", "<code class=\"type\">'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["Float", "Float.html", "ldexp", "Float.html#VALldexp", "<div class=\"info\">  <p><code class=\"code\">ldexp&nbsp;x&nbsp;n</code> returns <code class=\"code\">x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code>.</p> </div>", "  ldexp\194\160x\194\160n returns x\194\160*.\194\1602\194\160**\194\160n. ", "<code class=\"type\">float -&gt; int -&gt; float</code>", "float -> int -> float"],
["Pervasives", "Pervasives.html", "ldexp", "Pervasives.html#VALldexp", "<div class=\"info\">  <p><code class=\"code\">ldexp&nbsp;x&nbsp;n</code> returns <code class=\"code\">x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code>.</p> </div>", "  ldexp\194\160x\194\160n returns x\194\160*.\194\1602\194\160**\194\160n. ", "<code class=\"type\">float -&gt; int -&gt; float</code>", "float -> int -> float"],
["Config", "Config.html", "lazy_tag", "Config.html#VALlazy_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Obj", "Obj.html", "lazy_tag", "Obj.html#VALlazy_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Lazy", "Lazy.html", "lazy_is_val", "Lazy.html#VALlazy_is_val", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">'a <a href=\"Lazy.html#TYPEt\">t</a> -&gt; bool</code>", "'a t -> bool"],
["Lazy", "Lazy.html", "lazy_from_val", "Lazy.html#VALlazy_from_val", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">'a -&gt; 'a <a href=\"Lazy.html#TYPEt\">t</a></code>", "'a -> 'a t"],
["Lazy", "Lazy.html", "lazy_from_fun", "Lazy.html#VALlazy_from_fun", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">(unit -&gt; 'a) -&gt; 'a <a href=\"Lazy.html#TYPEt\">t</a></code>", "(unit -> 'a) -> 'a t"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "lazy_", "Ast_helper.Pat.html#VALlazy_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "lazy_", "Ast_helper.Exp.html#VALlazy_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "layout", "Bigarray.Genarray.html#VALlayout", "<div class=\"info\">  <p>Return the layout of the given big array.</p> </div>", "  Return the layout of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; 'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a></code>", "('a, 'b, 'c) t -> 'c Bigarray.layout"],
["Bigarray.Array0", "Bigarray.Array0.html", "layout", "Bigarray.Array0.html#VALlayout", "<div class=\"info\">  <p>Return the layout of the given big array.</p> </div>", "  Return the layout of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; 'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a></code>", "('a, 'b, 'c) t -> 'c Bigarray.layout"],
["Bigarray.Array1", "Bigarray.Array1.html", "layout", "Bigarray.Array1.html#VALlayout", "<div class=\"info\">  <p>Return the layout of the given big array.</p> </div>", "  Return the layout of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; 'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a></code>", "('a, 'b, 'c) t -> 'c Bigarray.layout"],
["Bigarray.Array2", "Bigarray.Array2.html", "layout", "Bigarray.Array2.html#VALlayout", "<div class=\"info\">  <p>Return the layout of the given big array.</p> </div>", "  Return the layout of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; 'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a></code>", "('a, 'b, 'c) t -> 'c Bigarray.layout"],
["Bigarray.Array3", "Bigarray.Array3.html", "layout", "Bigarray.Array3.html#VALlayout", "<div class=\"info\">  <p>Return the layout of the given big array.</p> </div>", "  Return the layout of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; 'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a></code>", "('a, 'b, 'c) t -> 'c Bigarray.layout"],
["Obj", "Obj.html", "last_non_constant_constructor_tag", "Obj.html#VALlast_non_constant_constructor_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Str", "Str.html", "last_chars", "Str.html#VALlast_chars", "<div class=\"info\">  <p><code class=\"code\">last_chars&nbsp;s&nbsp;n</code> returns the last <code class=\"code\">n</code> characters of <code class=\"code\">s</code>.</p> </div>", "  last_chars\194\160s\194\160n returns the last n characters of s. ", "<code class=\"type\">string -&gt; int -&gt; string</code>", "string -> int -> string"],
["Longident", "Longident.html", "last", "Longident.html#VALlast", "", "", "<code class=\"type\"><a href=\"Longident.html#TYPEt\">t</a> -&gt; string</code>", "t -> string"],
["Scanf", "Scanf.html", "ksscanf", "Scanf.html#VALksscanf", "<div class=\"info\">  <p>Same as <a href=\"Scanf.html#VALkscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.kscanf</code></a> but reads from the given string.</p> </div>", "  Same as Scanf.kscanf but reads from the given string. ", "<code class=\"type\">string -&gt;<br>       (<a href=\"Scanf.Scanning.html#TYPEin_channel\">Scanning.in_channel</a> -&gt; exn -&gt; 'd) -&gt; ('a, 'b, 'c, 'd) <a href=\"Scanf.html#TYPEscanner\">scanner</a></code>", "string ->       (Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner"],
["Format", "Format.html", "ksprintf", "Format.html#VALksprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">sprintf</code> above, but instead of returning the string, passes it to the first argument.</p> </div>", "  Same as sprintf above, but instead of returning the string, passes it to the first argument. ", "<code class=\"type\">(string -&gt; 'a) -&gt; ('b, unit, string, 'a) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'b</code>", "(string -> 'a) -> ('b, unit, string, 'a) format4 -> 'b"],
["Printf", "Printf.html", "ksprintf", "Printf.html#VALksprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">sprintf</code> above, but instead of returning the string, passes it to the first argument.</p> </div>", "  Same as sprintf above, but instead of returning the string, passes it to the first argument. ", "<code class=\"type\">(string -&gt; 'd) -&gt; ('a, unit, string, 'd) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "(string -> 'd) -> ('a, unit, string, 'd) format4 -> 'a"],
["Scanf", "Scanf.html", "kscanf", "Scanf.html#VALkscanf", "<div class=\"info\">  <p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but takes an additional function argument <code class=\"code\">ef</code> that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function <code class=\"code\">ef</code> with the formatted input channel and the exception that aborted the scanning process as arguments.</p> </div>", "  Same as Scanf.bscanf, but takes an additional function argument ef that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function ef with the formatted input channel and the exception that aborted the scanning process as arguments. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">Scanning.in_channel</a> -&gt;<br>       (<a href=\"Scanf.Scanning.html#TYPEin_channel\">Scanning.in_channel</a> -&gt; exn -&gt; 'd) -&gt; ('a, 'b, 'c, 'd) <a href=\"Scanf.html#TYPEscanner\">scanner</a></code>", "Scanning.in_channel ->       (Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner"],
["Format", "Format.html", "kprintf", "Format.html#VALkprintf", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">(string -&gt; 'a) -&gt; ('b, unit, string, 'a) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'b</code>", "(string -> 'a) -> ('b, unit, string, 'a) format4 -> 'b"],
["Printf", "Printf.html", "kprintf", "Printf.html#VALkprintf", "<div class=\"info\">  <p>A deprecated synonym for <code class=\"code\">ksprintf</code>.</p> </div>", "  A deprecated synonym for ksprintf. ", "<code class=\"type\">(string -&gt; 'b) -&gt; ('a, unit, string, 'b) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "(string -> 'b) -> ('a, unit, string, 'b) format4 -> 'a"],
["Bigarray", "Bigarray.html", "kind_size_in_bytes", "Bigarray.html#VALkind_size_in_bytes", "<div class=\"info\">  <p><code class=\"code\">kind_size_in_bytes&nbsp;k</code> is the number of bytes used to store an element of type <code class=\"code\">k</code>.</p> </div>", "  kind_size_in_bytes\194\160k is the number of bytes used to store an element of type k. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">kind</a> -&gt; int</code>", "('a, 'b) kind -> int"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "kind", "Bigarray.Genarray.html#VALkind", "<div class=\"info\">  <p>Return the kind of the given big array.</p> </div>", "  Return the kind of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; ('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a></code>", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind"],
["Bigarray.Array0", "Bigarray.Array0.html", "kind", "Bigarray.Array0.html#VALkind", "<div class=\"info\">  <p>Return the kind of the given big array.</p> </div>", "  Return the kind of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; ('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a></code>", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind"],
["Bigarray.Array1", "Bigarray.Array1.html", "kind", "Bigarray.Array1.html#VALkind", "<div class=\"info\">  <p>Return the kind of the given big array.</p> </div>", "  Return the kind of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; ('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a></code>", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind"],
["Bigarray.Array2", "Bigarray.Array2.html", "kind", "Bigarray.Array2.html#VALkind", "<div class=\"info\">  <p>Return the kind of the given big array.</p> </div>", "  Return the kind of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; ('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a></code>", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind"],
["Bigarray.Array3", "Bigarray.Array3.html", "kind", "Bigarray.Array3.html#VALkind", "<div class=\"info\">  <p>Return the kind of the given big array.</p> </div>", "  Return the kind of the given big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; ('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a></code>", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind"],
["Thread", "Thread.html", "kill", "Thread.html#VALkill", "<div class=\"info\">  <p>Terminate prematurely the thread whose handle is given.</p> </div>", "  Terminate prematurely the thread whose handle is given. ", "<code class=\"type\"><a href=\"Thread.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Unix", "Unix.html", "kill", "Unix.html#VALkill", "<div class=\"info\">  <p><code class=\"code\">kill&nbsp;pid&nbsp;<span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process with id <code class=\"code\">pid</code>.</p> </div>", "  kill\194\160pid\194\160sig sends signal number sig to the process with id pid. ", "<code class=\"type\">int -&gt; int -&gt; unit</code>", "int -> int -> unit"],
["UnixLabels", "UnixLabels.html", "kill", "UnixLabels.html#VALkill", "<div class=\"info\">  <p><code class=\"code\">kill&nbsp;pid&nbsp;<span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process with id <code class=\"code\">pid</code>.</p> </div>", "  kill\194\160pid\194\160sig sends signal number sig to the process with id pid. ", "<code class=\"type\">pid:int -&gt; signal:int -&gt; unit</code>", "pid:int -> signal:int -> unit"],
["Scanf", "Scanf.html", "kfscanf", "Scanf.html#VALkfscanf", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt;<br>       (<a href=\"Scanf.Scanning.html#TYPEin_channel\">Scanning.in_channel</a> -&gt; exn -&gt; 'd) -&gt; ('a, 'b, 'c, 'd) <a href=\"Scanf.html#TYPEscanner\">scanner</a></code>", "in_channel ->       (Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner"],
["Format", "Format.html", "kfprintf", "Format.html#VALkfprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">fprintf</code> above, but instead of returning immediately, passes the formatter to its first argument at the end of printing.</p> </div>", "  Same as fprintf above, but instead of returning immediately, passes the formatter to its first argument at the end of printing. ", "<code class=\"type\">(<a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; 'a) -&gt;<br>       <a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; ('b, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit, 'a) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'b</code>", "(formatter -> 'a) ->       formatter -> ('b, formatter, unit, 'a) format4 -> 'b"],
["Printf", "Printf.html", "kfprintf", "Printf.html#VALkfprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">fprintf</code>, but instead of returning immediately, passes the out channel to its first argument at the end of printing.</p> </div>", "  Same as fprintf, but instead of returning immediately, passes the out channel to its first argument at the end of printing. ", "<code class=\"type\">(<a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; 'd) -&gt;<br>       <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt;<br>       ('a, <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a>, unit, 'd) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "(out_channel -> 'd) ->       out_channel ->       ('a, out_channel, unit, 'd) format4 -> 'a"],
["Identifiable.Map", "Identifiable.Map.html", "keys", "Identifiable.Map.html#VALkeys", "", "", "<code class=\"type\">'a t -&gt; Set.Make(T).t</code>", "'a t -> Set.Make(T).t"],
["Graphics", "Graphics.html", "key_pressed", "Graphics.html#VALkey_pressed", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if a keypress is available; that is, if <code class=\"code\">read_key</code> would not block.</p> </div>", "  Return true if a keypress is available; that is, if read_key would not block. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Clflags", "Clflags.html", "keep_startup_file", "Clflags.html#VALkeep_startup_file", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "keep_locs", "Clflags.html#VALkeep_locs", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "keep_docs", "Clflags.html#VALkeep_docs", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "keep_asm_file", "Clflags.html#VALkeep_asm_file", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Printf", "Printf.html", "kbprintf", "Printf.html#VALkbprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">bprintf</code>, but instead of returning immediately, passes the buffer to its first argument at the end of printing.</p> </div>", "  Same as bprintf, but instead of returning immediately, passes the buffer to its first argument at the end of printing. ", "<code class=\"type\">(<a href=\"Buffer.html#TYPEt\">Buffer.t</a> -&gt; 'd) -&gt;<br>       <a href=\"Buffer.html#TYPEt\">Buffer.t</a> -&gt; ('a, <a href=\"Buffer.html#TYPEt\">Buffer.t</a>, unit, 'd) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "(Buffer.t -> 'd) ->       Buffer.t -> ('a, Buffer.t, unit, 'd) format4 -> 'a"],
["Format", "Format.html", "kasprintf", "Format.html#VALkasprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">asprintf</code> above, but instead of returning the string, passes it to the first argument.</p> </div>", "  Same as asprintf above, but instead of returning the string, passes it to the first argument. ", "<code class=\"type\">(string -&gt; 'a) -&gt; ('b, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit, 'a) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'b</code>", "(string -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b"],
["Stream", "Stream.html", "junk", "Stream.html#VALjunk", "<div class=\"info\">  <p>Remove the first element of the stream, possibly unfreezing it before.</p> </div>", "  Remove the first element of the stream, possibly unfreezing it before. ", "<code class=\"type\">'a <a href=\"Stream.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Thread", "Thread.html", "join", "Thread.html#VALjoin", "<div class=\"info\">  <p><code class=\"code\">join&nbsp;th</code> suspends the execution of the calling thread until the thread <code class=\"code\">th</code> has terminated.</p> </div>", "  join\194\160th suspends the execution of the calling thread until the thread th has terminated. ", "<code class=\"type\"><a href=\"Thread.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Array", "Array.html", "iteri", "Array.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the function is applied with the index of the element as first argument, and the element itself as second argument.</p> </div>", "  Same as Array.iter, but the function is applied with the index of the element as first argument, and the element itself as second argument. ", "<code class=\"type\">(int -&gt; 'a -&gt; unit) -&gt; 'a array -&gt; unit</code>", "(int -> 'a -> unit) -> 'a array -> unit"],
["ArrayLabels", "ArrayLabels.html", "iteri", "ArrayLabels.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the function is applied to the index of the element as first argument, and the element itself as second argument.</p> </div>", "  Same as Array.iter, but the function is applied to the index of the element as first argument, and the element itself as second argument. ", "<code class=\"type\">f:(int -&gt; 'a -&gt; unit) -&gt; 'a array -&gt; unit</code>", "f:(int -> 'a -> unit) -> 'a array -> unit"],
["Bytes", "Bytes.html", "iteri", "Bytes.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of the byte as first argument and the byte itself as second argument.</p> </div>", "  Same as Bytes.iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument. ", "<code class=\"type\">(int -&gt; char -&gt; unit) -&gt; bytes -&gt; unit</code>", "(int -> char -> unit) -> bytes -> unit"],
["BytesLabels", "BytesLabels.html", "iteri", "BytesLabels.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of the byte as first argument and the byte itself as second argument.</p> </div>", "  Same as Bytes.iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument. ", "<code class=\"type\">f:(int -&gt; char -&gt; unit) -&gt; bytes -&gt; unit</code>", "f:(int -> char -> unit) -> bytes -> unit"],
["List", "List.html", "iteri", "List.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</p> </div>", "  Same as List.iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. ", "<code class=\"type\">(int -&gt; 'a -&gt; unit) -&gt; 'a list -&gt; unit</code>", "(int -> 'a -> unit) -> 'a list -> unit"],
["ListLabels", "ListLabels.html", "iteri", "ListLabels.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</p> </div>", "  Same as List.iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. ", "<code class=\"type\">f:(int -&gt; 'a -&gt; unit) -&gt; 'a list -&gt; unit</code>", "f:(int -> 'a -> unit) -> 'a list -> unit"],
["StringLabels", "StringLabels.html", "iteri", "StringLabels.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.</p> </div>", "  Same as String.iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument. ", "<code class=\"type\">f:(int -&gt; char -&gt; unit) -&gt; string -&gt; unit</code>", "f:(int -> char -> unit) -> string -> unit"],
["String", "String.html", "iteri", "String.html#VALiteri", "<div class=\"info\">  <p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.</p> </div>", "  Same as String.iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument. ", "<code class=\"type\">(int -&gt; char -&gt; unit) -&gt; string -&gt; unit</code>", "(int -> char -> unit) -> string -> unit"],
["Array", "Array.html", "iter2", "Array.html#VALiter2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code> and <code class=\"code\">b</code>.</p> </div>", "  Array.iter2\194\160f\194\160a\194\160b applies function f to all the elements of a and b. ", "<code class=\"type\">('a -&gt; 'b -&gt; unit) -&gt; 'a array -&gt; 'b array -&gt; unit</code>", "('a -> 'b -> unit) -> 'a array -> 'b array -> unit"],
["ArrayLabels", "ArrayLabels.html", "iter2", "ArrayLabels.html#VALiter2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code> and <code class=\"code\">b</code>.</p> </div>", "  Array.iter2\194\160f\194\160a\194\160b applies function f to all the elements of a and b. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; unit) -&gt; 'a array -&gt; 'b array -&gt; unit</code>", "f:('a -> 'b -> unit) -> 'a array -> 'b array -> unit"],
["List", "List.html", "iter2", "List.html#VALiter2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.</p> </div>", "  List.iter2\194\160f\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn] calls in turn f\194\160a1\194\160b1;\194\160...;\194\160f\194\160an\194\160bn. ", "<code class=\"type\">('a -&gt; 'b -&gt; unit) -&gt; 'a list -&gt; 'b list -&gt; unit</code>", "('a -> 'b -> unit) -> 'a list -> 'b list -> unit"],
["ListLabels", "ListLabels.html", "iter2", "ListLabels.html#VALiter2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.</p> </div>", "  List.iter2\194\160f\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn] calls in turn f\194\160a1\194\160b1;\194\160...;\194\160f\194\160an\194\160bn. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; unit) -&gt; 'a list -&gt; 'b list -&gt; unit</code>", "f:('a -> 'b -> unit) -> 'a list -> 'b list -> unit"],
["Array", "Array.html", "iter", "Array.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all the elements of <code class=\"code\">a</code>.</p> </div>", "  Array.iter\194\160f\194\160a applies function f in turn to all the elements of a. ", "<code class=\"type\">('a -&gt; unit) -&gt; 'a array -&gt; unit</code>", "('a -> unit) -> 'a array -> unit"],
["ArrayLabels", "ArrayLabels.html", "iter", "ArrayLabels.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all the elements of <code class=\"code\">a</code>.</p> </div>", "  Array.iter\194\160f\194\160a applies function f in turn to all the elements of a. ", "<code class=\"type\">f:('a -&gt; unit) -&gt; 'a array -&gt; unit</code>", "f:('a -> unit) -> 'a array -> unit"],
["Bytes", "Bytes.html", "iter", "Bytes.html#VALiter", "<div class=\"info\">  <p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.</p> </div>", "  iter\194\160f\194\160s applies function f in turn to all the bytes of s. ", "<code class=\"type\">(char -&gt; unit) -&gt; bytes -&gt; unit</code>", "(char -> unit) -> bytes -> unit"],
["BytesLabels", "BytesLabels.html", "iter", "BytesLabels.html#VALiter", "<div class=\"info\">  <p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.</p> </div>", "  iter\194\160f\194\160s applies function f in turn to all the bytes of s. ", "<code class=\"type\">f:(char -&gt; unit) -&gt; bytes -&gt; unit</code>", "f:(char -> unit) -> bytes -> unit"],
["Set.S", "Set.S.html", "iter", "Set.S.html#VALiter", "<div class=\"info\">  <p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>.</p> </div>", "  iter\194\160f\194\160s applies f in turn to all elements of s. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; unit) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; unit</code>", "(elt -> unit) -> t -> unit"],
["Map.S", "Map.S.html", "iter", "Map.S.html#VALiter", "<div class=\"info\">  <p><code class=\"code\">iter&nbsp;f&nbsp;m</code> applies <code class=\"code\">f</code> to all bindings in map <code class=\"code\">m</code>.</p> </div>", "  iter\194\160f\194\160m applies f to all bindings in map m. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; unit) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; unit</code>", "(key -> 'a -> unit) -> 'a t -> unit"],
["Hashtbl", "Hashtbl.html", "iter", "Hashtbl.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in table <code class=\"code\">tbl</code>.</p> </div>", "  Hashtbl.iter\194\160f\194\160tbl applies f to all bindings in table tbl. ", "<code class=\"type\">('a -&gt; 'b -&gt; unit) -&gt; ('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "('a -> 'b -> unit) -> ('a, 'b) t -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "iter", "Hashtbl.S.html#VALiter", "", "", "<code class=\"type\">(<a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; unit) -&gt; 'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "(key -> 'a -> unit) -> 'a t -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "iter", "Hashtbl.SeededS.html#VALiter", "", "", "<code class=\"type\">(<a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a -&gt; unit) -&gt; 'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "(key -> 'a -> unit) -> 'a t -> unit"],
["List", "List.html", "iter", "List.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>.</p> </div>", "  List.iter\194\160f\194\160[a1;\194\160...;\194\160an] applies function f in turn to a1;\194\160...;\194\160an. ", "<code class=\"type\">('a -&gt; unit) -&gt; 'a list -&gt; unit</code>", "('a -> unit) -> 'a list -> unit"],
["ListLabels", "ListLabels.html", "iter", "ListLabels.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>.</p> </div>", "  List.iter\194\160f\194\160[a1;\194\160...;\194\160an] applies function f in turn to a1;\194\160...;\194\160an. ", "<code class=\"type\">f:('a -&gt; unit) -&gt; 'a list -&gt; unit</code>", "f:('a -> unit) -> 'a list -> unit"],
["Misc.Stdlib.Option", "Misc.Stdlib.Option.html", "iter", "Misc.Stdlib.Option.html#VALiter", "", "", "<code class=\"type\">('a -&gt; unit) -&gt; 'a <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a> -&gt; unit</code>", "('a -> unit) -> 'a t -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "iter", "MoreLabels.Hashtbl.html#VALiter", "", "", "<code class=\"type\">f:(key:'a -&gt; data:'b -&gt; unit) -&gt; ('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "f:(key:'a -> data:'b -> unit) -> ('a, 'b) t -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "iter", "MoreLabels.Hashtbl.S.html#VALiter", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; data:'a -&gt; unit) -&gt;<br>       'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "f:(key:key -> data:'a -> unit) ->       'a t -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "iter", "MoreLabels.Hashtbl.SeededS.html#VALiter", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; data:'a -&gt; unit) -&gt;<br>       'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "f:(key:key -> data:'a -> unit) ->       'a t -> unit"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "iter", "MoreLabels.Map.S.html#VALiter", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; data:'a -&gt; unit) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; unit</code>", "f:(key:key -> data:'a -> unit) ->       'a t -> unit"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "iter", "MoreLabels.Set.S.html#VALiter", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; unit) -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; unit</code>", "f:(elt -> unit) -> t -> unit"],
["Queue", "Queue.html", "iter", "Queue.html#VALiter", "<div class=\"info\">  <p><code class=\"code\">iter&nbsp;f&nbsp;q</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">q</code>, from the least recently entered to the most recently entered.</p> </div>", "  iter\194\160f\194\160q applies f in turn to all elements of q, from the least recently entered to the most recently entered. ", "<code class=\"type\">('a -&gt; unit) -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; unit</code>", "('a -> unit) -> 'a t -> unit"],
["Seq", "Seq.html", "iter", "Seq.html#VALiter", "<div class=\"info\">  <p>Iterate on the sequence, calling the (imperative) function on every element.</p> </div>", "  Iterate on the sequence, calling the (imperative) function on every element. ", "<code class=\"type\">('a -&gt; unit) -&gt; 'a <a href=\"Seq.html#TYPEt\">t</a> -&gt; unit</code>", "('a -> unit) -> 'a t -> unit"],
["Stack", "Stack.html", "iter", "Stack.html#VALiter", "<div class=\"info\">  <p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>, from the element at the top of the stack to the element at the bottom of the stack.</p> </div>", "  iter\194\160f\194\160s applies f in turn to all elements of s, from the element at the top of the stack to the element at the bottom of the stack. ", "<code class=\"type\">('a -&gt; unit) -&gt; 'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; unit</code>", "('a -> unit) -> 'a t -> unit"],
["StringLabels", "StringLabels.html", "iter", "StringLabels.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code>.</p> </div>", "  String.iter\194\160f\194\160s applies function f in turn to all the characters of s. ", "<code class=\"type\">f:(char -&gt; unit) -&gt; string -&gt; unit</code>", "f:(char -> unit) -> string -> unit"],
["Stream", "Stream.html", "iter", "Stream.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Stream</span>.iter&nbsp;f&nbsp;s</code> scans the whole stream s, applying function <code class=\"code\">f</code> in turn to each stream element encountered.</p> </div>", "  Stream.iter\194\160f\194\160s scans the whole stream s, applying function f in turn to each stream element encountered. ", "<code class=\"type\">('a -&gt; unit) -&gt; 'a <a href=\"Stream.html#TYPEt\">t</a> -&gt; unit</code>", "('a -> unit) -> 'a t -> unit"],
["String", "String.html", "iter", "String.html#VALiter", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code>.</p> </div>", "  String.iter\194\160f\194\160s applies function f in turn to all the characters of s. ", "<code class=\"type\">(char -&gt; unit) -&gt; string -&gt; unit</code>", "(char -> unit) -> string -> unit"],
["Tbl", "Tbl.html", "iter", "Tbl.html#VALiter", "", "", "<code class=\"type\">('k -&gt; 'v -&gt; unit) -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; unit</code>", "('k -> 'v -> unit) -> ('k, 'v) t -> unit"],
["Weak.S", "Weak.S.html", "iter", "Weak.S.html#VALiter", "<div class=\"info\">  <p><code class=\"code\">iter&nbsp;f&nbsp;t</code> calls <code class=\"code\">f</code> on each element of <code class=\"code\">t</code>, in some unspecified order.</p> </div>", "  iter\194\160f\194\160t calls f on each element of t, in some unspecified order. ", "<code class=\"type\">(<a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; unit) -&gt; <a href=\"Weak.S.html#TYPEt\">t</a> -&gt; unit</code>", "(data -> unit) -> t -> unit"],
["Unix", "Unix.html", "isatty", "Unix.html#VALisatty", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p> </div>", "  Return true if the given file descriptor refers to a terminal or console window, false otherwise. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; bool</code>", "file_descr -> bool"],
["UnixLabels", "UnixLabels.html", "isatty", "UnixLabels.html#VALisatty", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p> </div>", "  Return true if the given file descriptor refers to a terminal or console window, false otherwise. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; bool</code>", "file_descr -> bool"],
["Uchar", "Uchar.html", "is_valid", "Uchar.html#VALis_valid", "<div class=\"info\">  <p><code class=\"code\">is_valid&nbsp;n</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">n</code> is a Unicode scalar value (i.e.</p> </div>", "  is_valid\194\160n is true iff n is a Unicode scalar value (i.e. ", "<code class=\"type\">int -&gt; bool</code>", "int -> bool"],
["Lazy", "Lazy.html", "is_val", "Lazy.html#VALis_val", "<div class=\"info\">  <p><code class=\"code\">is_val&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">x</code> has already been forced and did not raise an exception.</p> </div>", "  is_val\194\160x returns true if x has already been forced and did not raise an exception. ", "<code class=\"type\">'a <a href=\"Lazy.html#TYPEt\">t</a> -&gt; bool</code>", "'a t -> bool"],
["Simplif", "Simplif.html", "is_tail_native_heuristic", "Simplif.html#VALis_tail_native_heuristic", "", "", "<code class=\"type\">(int -&gt; bool) <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "(int -> bool) ref"],
["Filename", "Filename.html", "is_relative", "Filename.html#VALis_relative", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative to the current directory, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is absolute (i.e.</p> </div>", "  Return true if the file name is relative to the current directory, false if it is absolute (i.e. ", "<code class=\"type\">string -&gt; bool</code>", "string -> bool"],
["Hashtbl", "Hashtbl.html", "is_randomized", "Hashtbl.html#VALis_randomized", "<div class=\"info\">  <p>return if the tables are currently created in randomized mode by default</p> </div>", "  return if the tables are currently created in randomized mode by default ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "is_randomized", "MoreLabels.Hashtbl.html#VALis_randomized", "", "", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Printexc.Slot", "Printexc.Slot.html", "is_raise", "Printexc.Slot.html#VALis_raise", "<div class=\"info\">  <p><code class=\"code\">is_raise&nbsp;slot</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> when <code class=\"code\">slot</code> refers to a raising point in the code, and <code class=\"code\"><span class=\"keyword\">false</span></code> when it comes from a simple function call.</p> </div>", "  is_raise\194\160slot is true when slot refers to a raising point in the code, and false when it comes from a simple function call. ", "<code class=\"type\"><a href=\"Printexc.Slot.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Dynlink", "Dynlink.html", "is_native", "Dynlink.html#VALis_native", "<div class=\"info\">  <p><code class=\"code\"><span class=\"keyword\">true</span></code> if the program is native, <code class=\"code\"><span class=\"keyword\">false</span></code> if the program is bytecode.</p> </div>", "  true if the program is native, false if the program is bytecode. ", "<code class=\"type\">bool</code>", "bool"],
["Obj", "Obj.html", "is_int", "Obj.html#VALis_int", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Printexc.Slot", "Printexc.Slot.html", "is_inline", "Printexc.Slot.html#VALis_inline", "<div class=\"info\">  <p><code class=\"code\">is_inline&nbsp;slot</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> when <code class=\"code\">slot</code> refers to a call that got inlined by the compiler, and <code class=\"code\"><span class=\"keyword\">false</span></code> when it comes from any other context.</p> </div>", "  is_inline\194\160slot is true when slot refers to a call that got inlined by the compiler, and false when it comes from any other context. ", "<code class=\"type\"><a href=\"Printexc.Slot.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["CamlinternalFormat", "CamlinternalFormat.html", "is_in_char_set", "CamlinternalFormat.html#VALis_in_char_set", "", "", "<code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEchar_set\">CamlinternalFormatBasics.char_set</a> -&gt; char -&gt; bool</code>", "CamlinternalFormatBasics.char_set -> char -> bool"],
["Filename", "Filename.html", "is_implicit", "Filename.html#VALis_implicit", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative and does not start with an explicit reference to the current directory (<code class=\"code\">./</code> or <code class=\"code\">../</code> in Unix), <code class=\"code\"><span class=\"keyword\">false</span></code> if it starts with an explicit reference to the root directory or the current directory.</p> </div>", "  Return true if the file name is relative and does not start with an explicit reference to the current directory (./ or ../ in Unix), false if it starts with an explicit reference to the root directory or the current directory. ", "<code class=\"type\">string -&gt; bool</code>", "string -> bool"],
["Warnings", "Warnings.html", "is_error", "Warnings.html#VALis_error", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Set.S", "Set.S.html", "is_empty", "Set.S.html#VALis_empty", "<div class=\"info\">  <p>Test whether a set is empty or not.</p> </div>", "  Test whether a set is empty or not. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Map.S", "Map.S.html", "is_empty", "Map.S.html#VALis_empty", "<div class=\"info\">  <p>Test whether a map is empty or not.</p> </div>", "  Test whether a map is empty or not. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "'a t -> bool"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "is_empty", "MoreLabels.Map.S.html#VALis_empty", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "'a t -> bool"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "is_empty", "MoreLabels.Set.S.html#VALis_empty", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Queue", "Queue.html", "is_empty", "Queue.html#VALis_empty", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given queue is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p> </div>", "  Return true if the given queue is empty, false otherwise. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; bool</code>", "'a t -> bool"],
["Stack", "Stack.html", "is_empty", "Stack.html#VALis_empty", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given stack is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p> </div>", "  Return true if the given stack is empty, false otherwise. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; bool</code>", "'a t -> bool"],
["Sys", "Sys.html", "is_directory", "Sys.html#VALis_directory", "<div class=\"info\">  <p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the given name refers to a directory, <code class=\"code\"><span class=\"keyword\">false</span></code> if it refers to another kind of file.</p> </div>", "  Returns true if the given name refers to a directory, false if it refers to another kind of file. ", "<code class=\"type\">string -&gt; bool</code>", "string -> bool"],
["Uchar", "Uchar.html", "is_char", "Uchar.html#VALis_char", "<div class=\"info\">  <p><code class=\"code\">is_char&nbsp;u</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">u</code> is a latin1 OCaml character.</p> </div>", "  is_char\194\160u is true iff u is a latin1 OCaml character. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Obj", "Obj.html", "is_block", "Obj.html#VALis_block", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Warnings", "Warnings.html", "is_active", "Warnings.html#VALis_active", "", "", "<code class=\"type\"><a href=\"Warnings.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Pervasives", "Pervasives.html", "invalid_arg", "Pervasives.html#VALinvalid_arg", "<div class=\"info\">  <p>Raise exception <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> with the given string.</p> </div>", "  Raise exception Invalid_argument with the given string. ", "<code class=\"type\">string -&gt; 'a</code>", "string -> 'a"],
["Complex", "Complex.html", "inv", "Complex.html#VALinv", "<div class=\"info\">  <p>Multiplicative inverse (<code class=\"code\">1/z</code>).</p> </div>", "  Multiplicative inverse (1/z). ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "interval", "Ast_helper.Pat.html#VALinterval", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.constant -> Parsetree.constant -> Parsetree.pattern"],
["Config", "Config.html", "interface_suffix", "Config.html#VALinterface_suffix", "", "", "<code class=\"type\">string <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string ref"],
["Parse", "Parse.html", "interface", "Parse.html#VALinterface", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "Lexing.lexbuf -> Parsetree.signature"],
["Parser", "Parser.html", "interface", "Parser.html#VALinterface", "", "", "<code class=\"type\">(<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.signature"],
["Printast", "Printast.html", "interface", "Printast.html#VALinterface", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a> list -&gt; unit</code>", "Format.formatter -> Parsetree.signature_item list -> unit"],
["Sys", "Sys.html", "interactive", "Sys.html#VALinteractive", "<div class=\"info\">  <p>This reference is initially set to <code class=\"code\"><span class=\"keyword\">false</span></code> in standalone programs and to <code class=\"code\"><span class=\"keyword\">true</span></code> if the code is being executed under the interactive toplevel system <code class=\"code\">ocaml</code>.</p> </div>", "  This reference is initially set to false in standalone programs and to true if the code is being executed under the interactive toplevel system ocaml. ", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Set.S", "Set.S.html", "inter", "Set.S.html#VALinter", "<div class=\"info\">  <p>Set intersection.</p> </div>", "  Set intersection. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "t -> t -> t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "inter", "MoreLabels.Set.S.html#VALinter", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Ast_helper.Const", "Ast_helper.Const.html", "integer", "Ast_helper.Const.html#VALinteger", "", "", "<code class=\"type\">?suffix:char -&gt; string -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> string -> Parsetree.constant"],
["Obj", "Obj.html", "int_tag", "Obj.html#VALint_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Sys", "Sys.html", "int_size", "Sys.html#VALint_size", "<div class=\"info\">  <p>Size of <code class=\"code\">int</code>, in bits.</p> </div>", "  Size of int, in bits. ", "<code class=\"type\">int</code>", "int"],
["Pervasives", "Pervasives.html", "int_of_string_opt", "Pervasives.html#VALint_of_string_opt", "<div class=\"info\">  <p>Same as <code class=\"code\">int_of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p> </div>", "  Same as int_of_string, but returns None instead of raising. ", "<code class=\"type\">string -&gt; int option</code>", "string -> int option"],
["Pervasives", "Pervasives.html", "int_of_string", "Pervasives.html#VALint_of_string", "<div class=\"info\">  <p>Convert the given string to an integer.</p> </div>", "  Convert the given string to an integer. ", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["Pervasives", "Pervasives.html", "int_of_float", "Pervasives.html#VALint_of_float", "<div class=\"info\">  <p>Truncate the given floating-point number to an integer.</p> </div>", "  Truncate the given floating-point number to an integer. ", "<code class=\"type\">float -&gt; int</code>", "float -> int"],
["Pervasives", "Pervasives.html", "int_of_char", "Pervasives.html#VALint_of_char", "<div class=\"info\">  <p>Return the ASCII code of the argument.</p> </div>", "  Return the ASCII code of the argument. ", "<code class=\"type\">char -&gt; int</code>", "char -> int"],
["Bigarray", "Bigarray.html", "int8_unsigned", "Bigarray.html#VALint8_unsigned", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint8_unsigned_elt\">int8_unsigned_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(int, int8_unsigned_elt) kind"],
["Bigarray", "Bigarray.html", "int8_signed", "Bigarray.html#VALint8_signed", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint8_signed_elt\">int8_signed_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(int, int8_signed_elt) kind"],
["Ast_helper.Const", "Ast_helper.Const.html", "int64", "Ast_helper.Const.html#VALint64", "", "", "<code class=\"type\">?suffix:char -&gt; int64 -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> int64 -> Parsetree.constant"],
["Bigarray", "Bigarray.html", "int64", "Bigarray.html#VALint64", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(int64, <a href=\"Bigarray.html#TYPEint64_elt\">int64_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(int64, int64_elt) kind"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "int64", "Misc.Int_literal_converter.html#VALint64", "", "", "<code class=\"type\">string -&gt; int64</code>", "string -> int64"],
["Random", "Random.html", "int64", "Random.html#VALint64", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Random</span>.int64&nbsp;bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive).</p> </div>", "  Random.int64\194\160bound returns a random integer between 0 (inclusive) and bound (exclusive). ", "<code class=\"type\"><a href=\"Int64.html#TYPEt\">Int64.t</a> -&gt; <a href=\"Int64.html#TYPEt\">Int64.t</a></code>", "Int64.t -> Int64.t"],
["Random.State", "Random.State.html", "int64", "Random.State.html#VALint64", "", "", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; <a href=\"Int64.html#TYPEt\">Int64.t</a> -&gt; <a href=\"Int64.html#TYPEt\">Int64.t</a></code>", "t -> Int64.t -> Int64.t"],
["Ast_helper.Const", "Ast_helper.Const.html", "int32", "Ast_helper.Const.html#VALint32", "", "", "<code class=\"type\">?suffix:char -&gt; int32 -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> int32 -> Parsetree.constant"],
["Bigarray", "Bigarray.html", "int32", "Bigarray.html#VALint32", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(int32, <a href=\"Bigarray.html#TYPEint32_elt\">int32_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(int32, int32_elt) kind"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "int32", "Misc.Int_literal_converter.html#VALint32", "", "", "<code class=\"type\">string -&gt; int32</code>", "string -> int32"],
["Random", "Random.html", "int32", "Random.html#VALint32", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Random</span>.int32&nbsp;bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive).</p> </div>", "  Random.int32\194\160bound returns a random integer between 0 (inclusive) and bound (exclusive). ", "<code class=\"type\"><a href=\"Int32.html#TYPEt\">Int32.t</a> -&gt; <a href=\"Int32.html#TYPEt\">Int32.t</a></code>", "Int32.t -> Int32.t"],
["Random.State", "Random.State.html", "int32", "Random.State.html#VALint32", "", "", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; <a href=\"Int32.html#TYPEt\">Int32.t</a> -&gt; <a href=\"Int32.html#TYPEt\">Int32.t</a></code>", "t -> Int32.t -> Int32.t"],
["Bigarray", "Bigarray.html", "int16_unsigned", "Bigarray.html#VALint16_unsigned", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint16_unsigned_elt\">int16_unsigned_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(int, int16_unsigned_elt) kind"],
["Bigarray", "Bigarray.html", "int16_signed", "Bigarray.html#VALint16_signed", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint16_signed_elt\">int16_signed_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(int, int16_signed_elt) kind"],
["Ast_helper.Const", "Ast_helper.Const.html", "int", "Ast_helper.Const.html#VALint", "", "", "<code class=\"type\">?suffix:char -&gt; int -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> int -> Parsetree.constant"],
["Bigarray", "Bigarray.html", "int", "Bigarray.html#VALint", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint_elt\">int_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(int, int_elt) kind"],
["Misc.Int_literal_converter", "Misc.Int_literal_converter.html", "int", "Misc.Int_literal_converter.html#VALint", "", "", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["Random", "Random.html", "int", "Random.html#VALint", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Random</span>.int&nbsp;bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive).</p> </div>", "  Random.int\194\160bound returns a random integer between 0 (inclusive) and bound (exclusive). ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Random.State", "Random.State.html", "int", "Random.State.html#VALint", "", "", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; int -&gt; int</code>", "t -> int -> int"],
["Pervasives", "Pervasives.html", "input_value", "Pervasives.html#VALinput_value", "<div class=\"info\">  <p>Read the representation of a structured value, as produced by <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a>, and return the corresponding value.</p> </div>", "  Read the representation of a structured value, as produced by output_value, and return the corresponding value. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; 'a</code>", "in_channel -> 'a"],
["Location", "Location.html", "input_name", "Location.html#VALinput_name", "", "", "<code class=\"type\">string <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string ref"],
["Pervasives", "Pervasives.html", "input_line", "Pervasives.html#VALinput_line", "<div class=\"info\">  <p>Read characters from the given input channel, until a newline character is encountered.</p> </div>", "  Read characters from the given input channel, until a newline character is encountered. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; string</code>", "in_channel -> string"],
["Location", "Location.html", "input_lexbuf", "Location.html#VALinput_lexbuf", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Lexing.lexbuf option ref"],
["Pervasives", "Pervasives.html", "input_char", "Pervasives.html#VALinput_char", "<div class=\"info\">  <p>Read one character from the given input channel.</p> </div>", "  Read one character from the given input channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; char</code>", "in_channel -> char"],
["Misc.LongString", "Misc.LongString.html", "input_bytes", "Misc.LongString.html#VALinput_bytes", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a></code>", "in_channel -> int -> t"],
["Pervasives", "Pervasives.html", "input_byte", "Pervasives.html#VALinput_byte", "<div class=\"info\">  <p>Same as <a href=\"Pervasives.html#VALinput_char\"><code class=\"code\">input_char</code></a>, but return the 8-bit integer representing the character.</p> </div>", "  Same as input_char, but return the 8-bit integer representing the character. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int</code>", "in_channel -> int"],
["Pervasives", "Pervasives.html", "input_binary_int", "Pervasives.html#VALinput_binary_int", "<div class=\"info\">  <p>Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel.</p> </div>", "  Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int</code>", "in_channel -> int"],
["Digest", "Digest.html", "input", "Digest.html#VALinput", "<div class=\"info\">  <p>Read a digest from the given input channel.</p> </div>", "  Read a digest from the given input channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "in_channel -> t"],
["Pervasives", "Pervasives.html", "input", "Pervasives.html#VALinput", "<div class=\"info\">  <p><code class=\"code\">input&nbsp;ic&nbsp;buf&nbsp;pos&nbsp;len</code> reads up to <code class=\"code\">len</code> characters from the given channel <code class=\"code\">ic</code>, storing them in byte sequence <code class=\"code\">buf</code>, starting at character number <code class=\"code\">pos</code>.</p> </div>", "  input\194\160ic\194\160buf\194\160pos\194\160len reads up to len characters from the given channel ic, storing them in byte sequence buf, starting at character number pos. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; bytes -&gt; int -&gt; int -&gt; int</code>", "in_channel -> bytes -> int -> int -> int"],
["Clflags", "Clflags.html", "inlining_report", "Clflags.html#VALinlining_report", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "inline_toplevel_threshold", "Clflags.html#VALinline_toplevel_threshold", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_threshold", "Clflags.html#VALinline_threshold", "", "", "<code class=\"type\"><a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">Float_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Float_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_prim_cost", "Clflags.html#VALinline_prim_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_max_unroll", "Clflags.html#VALinline_max_unroll", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_max_depth", "Clflags.html#VALinline_max_depth", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_lifting_benefit", "Clflags.html#VALinline_lifting_benefit", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_indirect_cost", "Clflags.html#VALinline_indirect_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_call_cost", "Clflags.html#VALinline_call_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_branch_factor", "Clflags.html#VALinline_branch_factor", "", "", "<code class=\"type\"><a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">Float_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Float_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_branch_cost", "Clflags.html#VALinline_branch_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Clflags", "Clflags.html", "inline_alloc_cost", "Clflags.html#VALinline_alloc_cost", "", "", "<code class=\"type\"><a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">Int_arg_helper.parsed</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Int_arg_helper.parsed ref"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "initializer_", "Ast_helper.Cf.html#VALinitializer_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.class_field"],
["Typemod", "Typemod.html", "initial_env", "Typemod.html#VALinitial_env", "", "", "<code class=\"type\">loc:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       safe_string:bool -&gt;<br>       initially_opened_module:string option -&gt;<br>       open_implicit_modules:string list -&gt; Env.t</code>", "loc:Location.t ->       safe_string:bool ->       initially_opened_module:string option ->       open_implicit_modules:string list -> Env.t"],
["Unix", "Unix.html", "initgroups", "Unix.html#VALinitgroups", "<div class=\"info\">  <p><code class=\"code\">initgroups&nbsp;user&nbsp;group</code> initializes the group access list by reading the group database /etc/group and using all groups of which <code class=\"code\">user</code> is a member.</p> </div>", "  initgroups\194\160user\194\160group initializes the group access list by reading the group database /etc/group and using all groups of which user is a member. ", "<code class=\"type\">string -&gt; int -&gt; unit</code>", "string -> int -> unit"],
["UnixLabels", "UnixLabels.html", "initgroups", "UnixLabels.html#VALinitgroups", "<div class=\"info\">  <p><code class=\"code\">initgroups&nbsp;user&nbsp;group</code> initializes the group access list by reading the group database /etc/group and using all groups of which <code class=\"code\">user</code> is a member.</p> </div>", "  initgroups\194\160user\194\160group initializes the group access list by reading the group database /etc/group and using all groups of which user is a member. ", "<code class=\"type\">string -&gt; int -&gt; unit</code>", "string -> int -> unit"],
["CamlinternalMod", "CamlinternalMod.html", "init_mod", "CamlinternalMod.html#VALinit_mod", "", "", "<code class=\"type\">string * int * int -&gt; <a href=\"CamlinternalMod.html#TYPEshape\">shape</a> -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a></code>", "string * int * int -> shape -> Obj.t"],
["Clflags", "Clflags.html", "init_file", "Clflags.html#VALinit_file", "", "", "<code class=\"type\">string option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string option ref"],
["CamlinternalOO", "CamlinternalOO.html", "init_class", "CamlinternalOO.html#VALinit_class", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; unit</code>", "table -> unit"],
["Array", "Array.html", "init", "Array.html#VALinit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>, with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p> </div>", "  Array.init\194\160n\194\160f returns a fresh array of length n, with element number i initialized to the result of f\194\160i. ", "<code class=\"type\">int -&gt; (int -&gt; 'a) -&gt; 'a array</code>", "int -> (int -> 'a) -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "init", "ArrayLabels.html#VALinit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>, with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p> </div>", "  Array.init\194\160n\194\160f returns a fresh array of length n, with element number i initialized to the result of f\194\160i. ", "<code class=\"type\">int -&gt; f:(int -&gt; 'a) -&gt; 'a array</code>", "int -> f:(int -> 'a) -> 'a array"],
["Bytes", "Bytes.html", "init", "Bytes.html#VALinit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Bytes</span>.init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (in increasing index order).</p> </div>", "  Bytes.init\194\160n\194\160f returns a fresh byte sequence of length n, with character i initialized to the result of f\194\160i (in increasing index order). ", "<code class=\"type\">int -&gt; (int -&gt; char) -&gt; bytes</code>", "int -> (int -> char) -> bytes"],
["BytesLabels", "BytesLabels.html", "init", "BytesLabels.html#VALinit", "<div class=\"info\">  <p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p> </div>", "  init\194\160n\194\160f returns a fresh byte sequence of length n, with character i initialized to the result of f\194\160i. ", "<code class=\"type\">int -&gt; f:(int -&gt; char) -&gt; bytes</code>", "int -> f:(int -> char) -> bytes"],
["Docstrings", "Docstrings.html", "init", "Docstrings.html#VALinit", "<div class=\"info\">  <p>(Re)Initialise all docstring state</p> </div>", "  (Re)Initialise all docstring state ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Dynlink", "Dynlink.html", "init", "Dynlink.html#VALinit", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Lexer", "Lexer.html", "init", "Lexer.html#VALinit", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["List", "List.html", "init", "List.html#VALinit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p> </div>", "  List.init\194\160len\194\160f is f\194\1600;\194\160f\194\1601;\194\160...;\194\160f\194\160(len-1), evaluated left to right. ", "<code class=\"type\">int -&gt; (int -&gt; 'a) -&gt; 'a list</code>", "int -> (int -> 'a) -> 'a list"],
["ListLabels", "ListLabels.html", "init", "ListLabels.html#VALinit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p> </div>", "  List.init\194\160len\194\160f is f\194\1600;\194\160f\194\1601;\194\160...;\194\160f\194\160(len-1), evaluated left to right. ", "<code class=\"type\">len:int -&gt; f:(int -&gt; 'a) -&gt; 'a list</code>", "len:int -> f:(int -> 'a) -> 'a list"],
["Location", "Location.html", "init", "Location.html#VALinit", "<div class=\"info\">  <p>Set the file name and line number of the <code class=\"code\">lexbuf</code> to be the start of the named file.</p> </div>", "  Set the file name and line number of the lexbuf to be the start of the named file. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; string -&gt; unit</code>", "Lexing.lexbuf -> string -> unit"],
["Random", "Random.html", "init", "Random.html#VALinit", "<div class=\"info\">  <p>Initialize the generator, using the argument as a seed.</p> </div>", "  Initialize the generator, using the argument as a seed. ", "<code class=\"type\">int -&gt; unit</code>", "int -> unit"],
["StringLabels", "StringLabels.html", "init", "StringLabels.html#VALinit", "<div class=\"info\">  <p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p> </div>", "  init\194\160n\194\160f returns a string of length n, with character i initialized to the result of f\194\160i. ", "<code class=\"type\">int -&gt; f:(int -&gt; char) -&gt; string</code>", "int -> f:(int -> char) -> string"],
["String", "String.html", "init", "String.html#VALinit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (called in increasing index order).</p> </div>", "  String.init\194\160n\194\160f returns a string of length n, with character i initialized to the result of f\194\160i (called in increasing index order). ", "<code class=\"type\">int -&gt; (int -&gt; char) -&gt; string</code>", "int -> (int -> char) -> string"],
["CamlinternalOO", "CamlinternalOO.html", "inherits", "CamlinternalOO.html#VALinherits", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt;<br>       string array -&gt;<br>       string array -&gt;<br>       string array -&gt;<br>       <a href=\"CamlinternalOO.html#TYPEt\">t</a> * (<a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a>) *<br>       <a href=\"CamlinternalOO.html#TYPEt\">t</a> * <a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; bool -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a> array</code>", "table ->       string array ->       string array ->       string array ->       t * (table -> obj -> Obj.t) *       t * obj -> bool -> Obj.t array"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "inherit_", "Ast_helper.Ctf.html#VALinherit_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.class_type -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "inherit_", "Ast_helper.Cf.html#VALinherit_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> option -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.override_flag ->       Parsetree.class_expr -> Ast_helper.str option -> Parsetree.class_field"],
["Docstrings", "Docstrings.html", "info_attr", "Docstrings.html#VALinfo_attr", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "docstring -> Parsetree.attribute"],
["Obj", "Obj.html", "infix_tag", "Obj.html#VALinfix_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Float", "Float.html", "infinity", "Float.html#VALinfinity", "<div class=\"info\">  <p>Positive infinity.</p> </div>", "  Positive infinity. ", "<code class=\"type\">float</code>", "float"],
["Pervasives", "Pervasives.html", "infinity", "Pervasives.html#VALinfinity", "<div class=\"info\">  <p>Positive infinity.</p> </div>", "  Positive infinity. ", "<code class=\"type\">float</code>", "float"],
["Unix", "Unix.html", "inet_addr_of_string", "Unix.html#VALinet_addr_of_string", "<div class=\"info\">  <p>Conversion from the printable representation of an Internet address to its internal representation.</p> </div>", "  Conversion from the printable representation of an Internet address to its internal representation. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEinet_addr\">inet_addr</a></code>", "string -> inet_addr"],
["UnixLabels", "UnixLabels.html", "inet_addr_of_string", "UnixLabels.html#VALinet_addr_of_string", "<div class=\"info\">  <p>Conversion from the printable representation of an Internet address to its internal representation.</p> </div>", "  Conversion from the printable representation of an Internet address to its internal representation. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a></code>", "string -> inet_addr"],
["Unix", "Unix.html", "inet_addr_loopback", "Unix.html#VALinet_addr_loopback", "<div class=\"info\">  <p>A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>).</p> </div>", "  A special IPv4 address representing the host machine (127.0.0.1). ", "<code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["UnixLabels", "UnixLabels.html", "inet_addr_loopback", "UnixLabels.html#VALinet_addr_loopback", "<div class=\"info\">  <p>A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>).</p> </div>", "  A special IPv4 address representing the host machine (127.0.0.1). ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["Unix", "Unix.html", "inet_addr_any", "Unix.html#VALinet_addr_any", "<div class=\"info\">  <p>A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses.</p> </div>", "  A special IPv4 address, for use only with bind, representing all the Internet addresses that the host machine possesses. ", "<code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["UnixLabels", "UnixLabels.html", "inet_addr_any", "UnixLabels.html#VALinet_addr_any", "<div class=\"info\">  <p>A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses.</p> </div>", "  A special IPv4 address, for use only with bind, representing all the Internet addresses that the host machine possesses. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["Unix", "Unix.html", "inet6_addr_loopback", "Unix.html#VALinet6_addr_loopback", "<div class=\"info\">  <p>A special IPv6 address representing the host machine (<code class=\"code\">::1</code>).</p> </div>", "  A special IPv6 address representing the host machine (::1). ", "<code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["UnixLabels", "UnixLabels.html", "inet6_addr_loopback", "UnixLabels.html#VALinet6_addr_loopback", "<div class=\"info\">  <p>A special IPv6 address representing the host machine (<code class=\"code\">::1</code>).</p> </div>", "  A special IPv6 address representing the host machine (::1). ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["Unix", "Unix.html", "inet6_addr_any", "Unix.html#VALinet6_addr_any", "<div class=\"info\">  <p>A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses.</p> </div>", "  A special IPv6 address, for use only with bind, representing all the Internet addresses that the host machine possesses. ", "<code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["UnixLabels", "UnixLabels.html", "inet6_addr_any", "UnixLabels.html#VALinet6_addr_any", "<div class=\"info\">  <p>A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses.</p> </div>", "  A special IPv6 address, for use only with bind, representing all the Internet addresses that the host machine possesses. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a></code>", "inet_addr"],
["Bytes", "Bytes.html", "index_opt", "Bytes.html#VALindex_opt", "<div class=\"info\">  <p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  index_opt\194\160s\194\160c returns the index of the first occurrence of byte c in s or None if c does not occur in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int option</code>", "bytes -> char -> int option"],
["BytesLabels", "BytesLabels.html", "index_opt", "BytesLabels.html#VALindex_opt", "<div class=\"info\">  <p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  index_opt\194\160s\194\160c returns the index of the first occurrence of byte c in s or None if c does not occur in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int option</code>", "bytes -> char -> int option"],
["StringLabels", "StringLabels.html", "index_opt", "StringLabels.html#VALindex_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  String.index_opt\194\160s\194\160c returns the index of the first occurrence of character c in string s, or None if c does not occur in s. ", "<code class=\"type\">string -&gt; char -&gt; int option</code>", "string -> char -> int option"],
["String", "String.html", "index_opt", "String.html#VALindex_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p> </div>", "  String.index_opt\194\160s\194\160c returns the index of the first occurrence of character c in string s, or None if c does not occur in s. ", "<code class=\"type\">string -&gt; char -&gt; int option</code>", "string -> char -> int option"],
["Bytes", "Bytes.html", "index_from_opt", "Bytes.html#VALindex_from_opt", "<div class=\"info\">  <p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  index_from\194\160_opts\194\160i\194\160c returns the index of the first occurrence of byte c in s after position i or None if c does not occur in s after position i. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int option</code>", "bytes -> int -> char -> int option"],
["BytesLabels", "BytesLabels.html", "index_from_opt", "BytesLabels.html#VALindex_from_opt", "<div class=\"info\">  <p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  index_from\194\160_opts\194\160i\194\160c returns the index of the first occurrence of byte c in s after position i or None if c does not occur in s after position i. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int option</code>", "bytes -> int -> char -> int option"],
["StringLabels", "StringLabels.html", "index_from_opt", "StringLabels.html#VALindex_from_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  String.index_from_opt\194\160s\194\160i\194\160c returns the index of the first occurrence of character c in string s after position i or None if c does not occur in s after position i. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int option</code>", "string -> int -> char -> int option"],
["String", "String.html", "index_from_opt", "String.html#VALindex_from_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  String.index_from_opt\194\160s\194\160i\194\160c returns the index of the first occurrence of character c in string s after position i or None if c does not occur in s after position i. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int option</code>", "string -> int -> char -> int option"],
["Bytes", "Bytes.html", "index_from", "Bytes.html#VALindex_from", "<div class=\"info\">  <p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  index_from\194\160s\194\160i\194\160c returns the index of the first occurrence of byte c in s after position i. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int</code>", "bytes -> int -> char -> int"],
["BytesLabels", "BytesLabels.html", "index_from", "BytesLabels.html#VALindex_from", "<div class=\"info\">  <p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  index_from\194\160s\194\160i\194\160c returns the index of the first occurrence of byte c in s after position i. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; int</code>", "bytes -> int -> char -> int"],
["StringLabels", "StringLabels.html", "index_from", "StringLabels.html#VALindex_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  String.index_from\194\160s\194\160i\194\160c returns the index of the first occurrence of character c in string s after position i. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int</code>", "string -> int -> char -> int"],
["String", "String.html", "index_from", "String.html#VALindex_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p> </div>", "  String.index_from\194\160s\194\160i\194\160c returns the index of the first occurrence of character c in string s after position i. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; int</code>", "string -> int -> char -> int"],
["Bytes", "Bytes.html", "index", "Bytes.html#VALindex", "<div class=\"info\">  <p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>.</p> </div>", "  index\194\160s\194\160c returns the index of the first occurrence of byte c in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int</code>", "bytes -> char -> int"],
["BytesLabels", "BytesLabels.html", "index", "BytesLabels.html#VALindex", "<div class=\"info\">  <p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>.</p> </div>", "  index\194\160s\194\160c returns the index of the first occurrence of byte c in s. ", "<code class=\"type\">bytes -&gt; char -&gt; int</code>", "bytes -> char -> int"],
["StringLabels", "StringLabels.html", "index", "StringLabels.html#VALindex", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p> </div>", "  String.index\194\160s\194\160c returns the index of the first occurrence of character c in string s. ", "<code class=\"type\">string -&gt; char -&gt; int</code>", "string -> char -> int"],
["String", "String.html", "index", "String.html#VALindex", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p> </div>", "  String.index\194\160s\194\160c returns the index of the first occurrence of character c in string s. ", "<code class=\"type\">string -&gt; char -&gt; int</code>", "string -> char -> int"],
["Pervasives", "Pervasives.html", "incr", "Pervasives.html#VALincr", "<div class=\"info\">  <p>Increment the integer contained in the given reference.</p> </div>", "  Increment the integer contained in the given reference. ", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; unit</code>", "int ref -> unit"],
["Clflags", "Clflags.html", "include_dirs", "Clflags.html#VALinclude_dirs", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "include_", "Ast_helper.Sig.html#VALinclude_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEinclude_description\">Parsetree.include_description</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.include_description -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "include_", "Ast_helper.Str.html#VALinclude_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEinclude_declaration\">Parsetree.include_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.include_declaration -> Parsetree.structure_item"],
["Lexer", "Lexer.html", "in_string", "Lexer.html#VALin_string", "", "", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Location", "Location.html", "in_file", "Location.html#VALin_file", "<div class=\"info\">  <p>Return an empty ghost range located in a given file.</p> </div>", "  Return an empty ghost range located in a given file. ", "<code class=\"type\">string -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "string -> t"],
["Lexer", "Lexer.html", "in_comment", "Lexer.html#VALin_comment", "", "", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Unix", "Unix.html", "in_channel_of_descr", "Unix.html#VALin_channel_of_descr", "<div class=\"info\">  <p>Create an input channel reading from the given descriptor.</p> </div>", "  Create an input channel reading from the given descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "file_descr -> in_channel"],
["UnixLabels", "UnixLabels.html", "in_channel_of_descr", "UnixLabels.html#VALin_channel_of_descr", "<div class=\"info\">  <p>Create an input channel reading from the given descriptor.</p> </div>", "  Create an input channel reading from the given descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a></code>", "file_descr -> in_channel"],
["Pervasives", "Pervasives.html", "in_channel_length", "Pervasives.html#VALin_channel_length", "<div class=\"info\">  <p>Return the size (number of characters) of the regular file on which the given channel is opened.</p> </div>", "  Return the size (number of characters) of the regular file on which the given channel is opened. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int</code>", "in_channel -> int"],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "in_channel_length", "Pervasives.LargeFile.html#VALin_channel_length", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int64</code>", "in_channel -> int64"],
["Parse", "Parse.html", "implementation", "Parse.html#VALimplementation", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "Lexing.lexbuf -> Parsetree.structure"],
["Parser", "Parser.html", "implementation", "Parser.html#VALimplementation", "", "", "<code class=\"type\">(<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parser.html#TYPEtoken\">token</a>) -&gt; <a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "(Lexing.lexbuf -> token) -> Lexing.lexbuf -> Parsetree.structure"],
["Printast", "Printast.html", "implementation", "Printast.html#VALimplementation", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a> list -&gt; unit</code>", "Format.formatter -> Parsetree.structure_item list -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "immediate", "Builtin_attributes.html#VALimmediate", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Syntaxerr", "Syntaxerr.html", "ill_formed_ast", "Syntaxerr.html#VALill_formed_ast", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; string -&gt; 'a</code>", "Location.t -> string -> 'a"],
["Format", "Format.html", "ikfprintf", "Format.html#VALikfprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">kfprintf</code> above, but does not print anything.</p> </div>", "  Same as kfprintf above, but does not print anything. ", "<code class=\"type\">(<a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; 'a) -&gt;<br>       <a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; ('b, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit, 'a) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'b</code>", "(formatter -> 'a) ->       formatter -> ('b, formatter, unit, 'a) format4 -> 'b"],
["Printf", "Printf.html", "ikfprintf", "Printf.html#VALikfprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">kfprintf</code> above, but does not print anything.</p> </div>", "  Same as kfprintf above, but does not print anything. ", "<code class=\"type\">('b -&gt; 'd) -&gt; 'b -&gt; ('a, 'b, 'c, 'd) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "('b -> 'd) -> 'b -> ('a, 'b, 'c, 'd) format4 -> 'a"],
["Pervasives", "Pervasives.html", "ignore", "Pervasives.html#VALignore", "<div class=\"info\">  <p>Discard the value of its argument and return <code class=\"code\">()</code>.</p> </div>", "  Discard the value of its argument and return (). ", "<code class=\"type\">'a -&gt; unit</code>", "'a -> unit"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "ifthenelse", "Ast_helper.Exp.html#VALifthenelse", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       Parsetree.expression -> Parsetree.expression option -> Parsetree.expression"],
["Format", "Format.html", "ifprintf", "Format.html#VALifprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">fprintf</code> above, but does not print anything.</p> </div>", "  Same as fprintf above, but does not print anything. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; ('a, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "formatter -> ('a, formatter, unit) format -> 'a"],
["Printf", "Printf.html", "ifprintf", "Printf.html#VALifprintf", "<div class=\"info\">  <p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but does not print anything.</p> </div>", "  Same as Printf.fprintf, but does not print anything. ", "<code class=\"type\">'b -&gt; ('a, 'b, 'c, unit) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "'b -> ('a, 'b, 'c, unit) format4 -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "ident", "Ast_helper.Exp.html#VALident", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.expression"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "ident", "Ast_helper.Mty.html#VALident", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "ident", "Ast_helper.Mod.html#VALident", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_expr"],
["Oo", "Oo.html", "id", "Oo.html#VALid", "<div class=\"info\">  <p>Return an integer identifying this object, unique for the current execution of the program.</p> </div>", "  Return an integer identifying this object, unique for the current execution of the program. ", "<code class=\"type\">&lt; .. &gt; -&gt; int</code>", "< .. > -> int"],
["Thread", "Thread.html", "id", "Thread.html#VALid", "<div class=\"info\">  <p>Return the identifier of the given thread.</p> </div>", "  Return the identifier of the given thread. ", "<code class=\"type\"><a href=\"Thread.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Complex", "Complex.html", "i", "Complex.html#VALi", "<div class=\"info\">  <p>The complex number <code class=\"code\">i</code>.</p> </div>", "  The complex number i. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a></code>", "t"],
["Float", "Float.html", "hypot", "Float.html#VALhypot", "<div class=\"info\">  <p><code class=\"code\">hypot&nbsp;x&nbsp;y</code> returns <code class=\"code\">sqrt(x&nbsp;*.&nbsp;x&nbsp;+&nbsp;y&nbsp;*.&nbsp;y)</code>, that is, the length of the hypotenuse of a right-angled triangle with sides of length <code class=\"code\">x</code> and <code class=\"code\">y</code>, or, equivalently, the distance of the point <code class=\"code\">(x,y)</code> to origin.</p> </div>", "  hypot\194\160x\194\160y returns sqrt(x\194\160*.\194\160x\194\160+\194\160y\194\160*.\194\160y), that is, the length of the hypotenuse of a right-angled triangle with sides of length x and y, or, equivalently, the distance of the point (x,y) to origin. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "hypot", "Pervasives.html#VALhypot", "<div class=\"info\">  <p><code class=\"code\">hypot&nbsp;x&nbsp;y</code> returns <code class=\"code\">sqrt(x&nbsp;*.&nbsp;x&nbsp;+&nbsp;y&nbsp;*.&nbsp;y)</code>, that is, the length of the hypotenuse of a right-angled triangle with sides of length <code class=\"code\">x</code> and <code class=\"code\">y</code>, or, equivalently, the distance of the point <code class=\"code\">(x,y)</code> to origin.</p> </div>", "  hypot\194\160x\194\160y returns sqrt(x\194\160*.\194\160x\194\160+\194\160y\194\160*.\194\160y), that is, the length of the hypotenuse of a right-angled triangle with sides of length x and y, or, equivalently, the distance of the point (x,y) to origin. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Gc", "Gc.html", "huge_fallback_count", "Gc.html#VALhuge_fallback_count", "<div class=\"info\">  <p>Return the number of times we tried to map huge pages and had to fall back to small pages.</p> </div>", "  Return the number of times we tried to map huge pages and had to fall back to small pages. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Config", "Config.html", "host", "Config.html#VALhost", "", "", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "highlight_locations", "Location.html#VALhighlight_locations", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> list -&gt; bool</code>", "Format.formatter -> t list -> bool"],
["Warnings", "Warnings.html", "help_warnings", "Warnings.html#VALhelp_warnings", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Marshal", "Marshal.html", "header_size", "Marshal.html#VALheader_size", "<div class=\"info\">  <p>The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header.</p> </div>", "  The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header. ", "<code class=\"type\">int</code>", "int"],
["List", "List.html", "hd", "List.html#VALhd", "<div class=\"info\">  <p>Return the first element of the given list.</p> </div>", "  Return the first element of the given list. ", "<code class=\"type\">'a list -&gt; 'a</code>", "'a list -> 'a"],
["ListLabels", "ListLabels.html", "hd", "ListLabels.html#VALhd", "<div class=\"info\">  <p>Return the first element of the given list.</p> </div>", "  Return the first element of the given list. ", "<code class=\"type\">'a list -&gt; 'a</code>", "'a list -> 'a"],
["Hashtbl", "Hashtbl.html", "hash_param", "Hashtbl.html#VALhash_param", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param&nbsp;meaningful&nbsp;total&nbsp;x</code> computes a hash value for <code class=\"code\">x</code>, with the same properties as for <code class=\"code\">hash</code>.</p> </div>", "  Hashtbl.hash_param\194\160meaningful\194\160total\194\160x computes a hash value for x, with the same properties as for hash. ", "<code class=\"type\">int -&gt; int -&gt; 'a -&gt; int</code>", "int -> int -> 'a -> int"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "hash_param", "MoreLabels.Hashtbl.html#VALhash_param", "", "", "<code class=\"type\">int -&gt; int -&gt; 'a -&gt; int</code>", "int -> int -> 'a -> int"],
["Float", "Float.html", "hash", "Float.html#VALhash", "<div class=\"info\">  <p>The hash function for floating-point numbers.</p> </div>", "  The hash function for floating-point numbers. ", "<code class=\"type\"><a href=\"Float.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Hashtbl", "Hashtbl.html", "hash", "Hashtbl.html#VALhash", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash&nbsp;x</code> associates a nonnegative integer to any value of any type.</p> </div>", "  Hashtbl.hash\194\160x associates a nonnegative integer to any value of any type. ", "<code class=\"type\">'a -&gt; int</code>", "'a -> int"],
["Hashtbl.HashedType", "Hashtbl.HashedType.html", "hash", "Hashtbl.HashedType.html#VALhash", "<div class=\"info\">  <p>A hashing function on keys.</p> </div>", "  A hashing function on keys. ", "<code class=\"type\"><a href=\"Hashtbl.HashedType.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Hashtbl.SeededHashedType", "Hashtbl.SeededHashedType.html", "hash", "Hashtbl.SeededHashedType.html#VALhash", "<div class=\"info\">  <p>A seeded hashing function on keys.</p> </div>", "  A seeded hashing function on keys. ", "<code class=\"type\">int -&gt; <a href=\"Hashtbl.SeededHashedType.html#TYPEt\">t</a> -&gt; int</code>", "int -> t -> int"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "hash", "MoreLabels.Hashtbl.html#VALhash", "", "", "<code class=\"type\">'a -&gt; int</code>", "'a -> int"],
["Uchar", "Uchar.html", "hash", "Uchar.html#VALhash", "<div class=\"info\">  <p><code class=\"code\">hash&nbsp;u</code> associates a non-negative integer to <code class=\"code\">u</code>.</p> </div>", "  hash\194\160u associates a non-negative integer to u. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Builtin_attributes", "Builtin_attributes.html", "has_unboxed", "Builtin_attributes.html#VALhas_unboxed", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Unix", "Unix.html", "has_symlink", "Unix.html#VALhas_symlink", "<div class=\"info\">  <p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the user is able to create symbolic links.</p> </div>", "  Returns true if the user is able to create symbolic links. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["UnixLabels", "UnixLabels.html", "has_symlink", "UnixLabels.html#VALhas_symlink", "<div class=\"info\">  <p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the user is able to create symbolic links.</p> </div>", "  Returns true if the user is able to create symbolic links. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Attr_helper", "Attr_helper.html", "has_no_payload_attribute", "Attr_helper.html#VALhas_no_payload_attribute", "", "", "<code class=\"type\">string list -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "string list -> Parsetree.attributes -> bool"],
["Builtin_attributes", "Builtin_attributes.html", "has_boxed", "Builtin_attributes.html#VALhas_boxed", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Unix", "Unix.html", "handle_unix_error", "Unix.html#VALhandle_unix_error", "<div class=\"info\">  <p><code class=\"code\">handle_unix_error&nbsp;f&nbsp;x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result.</p> </div>", "  handle_unix_error\194\160f\194\160x applies f to x and returns the result. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a -&gt; 'b</code>", "('a -> 'b) -> 'a -> 'b"],
["UnixLabels", "UnixLabels.html", "handle_unix_error", "UnixLabels.html#VALhandle_unix_error", "<div class=\"info\">  <p><code class=\"code\">handle_unix_error&nbsp;f&nbsp;x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result.</p> </div>", "  handle_unix_error\194\160f\194\160x applies f to x and returns the result. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a -&gt; 'b</code>", "('a -> 'b) -> 'a -> 'b"],
["Lexer", "Lexer.html", "handle_docstrings", "Lexer.html#VALhandle_docstrings", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Event", "Event.html", "guard", "Event.html#VALguard", "<div class=\"info\">  <p><code class=\"code\">guard&nbsp;fn</code> returns the event that, when synchronized, computes <code class=\"code\">fn()</code> and behaves as the resulting event.</p> </div>", "  guard\194\160fn returns the event that, when synchronized, computes fn() and behaves as the resulting event. ", "<code class=\"type\">(unit -&gt; 'a <a href=\"Event.html#TYPEevent\">event</a>) -&gt; 'a <a href=\"Event.html#TYPEevent\">event</a></code>", "(unit -> 'a event) -> 'a event"],
["Str", "Str.html", "group_end", "Str.html#VALgroup_end", "<div class=\"info\">  <p><code class=\"code\">group_end&nbsp;n</code> returns the position of the character following the last character of substring that was matched by the <code class=\"code\">n</code>th group of the regular expression that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p> </div>", "  group_end\194\160n returns the position of the character following the last character of substring that was matched by the nth group of the regular expression that was matched by the last call to a matching or searching function (see Str.matched_string for details). ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Str", "Str.html", "group_beginning", "Str.html#VALgroup_beginning", "<div class=\"info\">  <p><code class=\"code\">group_beginning&nbsp;n</code> returns the position of the first character of the substring that was matched by the <code class=\"code\">n</code>th group of the regular expression that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p> </div>", "  group_beginning\194\160n returns the position of the first character of the substring that was matched by the nth group of the regular expression that was matched by the last call to a matching or searching function (see Str.matched_string for details). ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Graphics", "Graphics.html", "green", "Graphics.html#VALgreen", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Clflags", "Clflags.html", "gprofile", "Clflags.html#VALgprofile", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Unix", "Unix.html", "gmtime", "Unix.html#VALgmtime", "<div class=\"info\">  <p>Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and a time.</p> </div>", "  Convert a time in seconds, as returned by Unix.time, into a date and a time. ", "<code class=\"type\">float -&gt; <a href=\"Unix.html#TYPEtm\">tm</a></code>", "float -> tm"],
["UnixLabels", "UnixLabels.html", "gmtime", "UnixLabels.html#VALgmtime", "<div class=\"info\">  <p>Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date and a time.</p> </div>", "  Convert a time in seconds, as returned by UnixLabels.time, into a date and a time. ", "<code class=\"type\">float -&gt; <a href=\"UnixLabels.html#TYPEtm\">tm</a></code>", "float -> tm"],
["Str", "Str.html", "global_substitute", "Str.html#VALglobal_substitute", "<div class=\"info\">  <p><code class=\"code\">global_substitute&nbsp;regexp&nbsp;subst&nbsp;s</code> returns a string identical to <code class=\"code\">s</code>, except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code> have been replaced by the result of function <code class=\"code\">subst</code>.</p> </div>", "  global_substitute\194\160regexp\194\160subst\194\160s returns a string identical to s, except that all substrings of s that match regexp have been replaced by the result of function subst. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; (string -&gt; string) -&gt; string -&gt; string</code>", "regexp -> (string -> string) -> string -> string"],
["Str", "Str.html", "global_replace", "Str.html#VALglobal_replace", "<div class=\"info\">  <p><code class=\"code\">global_replace&nbsp;regexp&nbsp;templ&nbsp;s</code> returns a string identical to <code class=\"code\">s</code>, except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code> have been replaced by <code class=\"code\">templ</code>.</p> </div>", "  global_replace\194\160regexp\194\160templ\194\160s returns a string identical to s, except that all substrings of s that match regexp have been replaced by templ. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; string -&gt; string</code>", "regexp -> string -> string -> string"],
["Unix", "Unix.html", "getuid", "Unix.html#VALgetuid", "<div class=\"info\">  <p>Return the user id of the user executing the process.</p> </div>", "  Return the user id of the user executing the process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "getuid", "UnixLabels.html#VALgetuid", "<div class=\"info\">  <p>Return the user id of the user executing the process.</p> </div>", "  Return the user id of the user executing the process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Unix", "Unix.html", "gettimeofday", "Unix.html#VALgettimeofday", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, but with resolution better than 1 second.</p> </div>", "  Same as Unix.time, but with resolution better than 1 second. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["UnixLabels", "UnixLabels.html", "gettimeofday", "UnixLabels.html#VALgettimeofday", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, but with resolution better than 1 second.</p> </div>", "  Same as UnixLabels.time, but with resolution better than 1 second. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["Unix", "Unix.html", "getsockopt_optint", "Unix.html#VALgetsockopt_optint", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is an <code class=\"code\">int&nbsp;option</code>.</p> </div>", "  Same as Unix.getsockopt for a socket option whose value is an int\194\160option. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_optint_option\">socket_optint_option</a> -&gt; int option</code>", "file_descr -> socket_optint_option -> int option"],
["UnixLabels", "UnixLabels.html", "getsockopt_optint", "UnixLabels.html#VALgetsockopt_optint", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is an <code class=\"code\">int&nbsp;option</code>.</p> </div>", "  Same as Unix.getsockopt for a socket option whose value is an int\194\160option. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_optint_option\">socket_optint_option</a> -&gt; int option</code>", "file_descr -> socket_optint_option -> int option"],
["Unix", "Unix.html", "getsockopt_int", "Unix.html#VALgetsockopt_int", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option.</p> </div>", "  Same as Unix.getsockopt for an integer-valued socket option. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_int_option\">socket_int_option</a> -&gt; int</code>", "file_descr -> socket_int_option -> int"],
["UnixLabels", "UnixLabels.html", "getsockopt_int", "UnixLabels.html#VALgetsockopt_int", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option.</p> </div>", "  Same as Unix.getsockopt for an integer-valued socket option. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_int_option\">socket_int_option</a> -&gt; int</code>", "file_descr -> socket_int_option -> int"],
["Unix", "Unix.html", "getsockopt_float", "Unix.html#VALgetsockopt_float", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a floating-point number.</p> </div>", "  Same as Unix.getsockopt for a socket option whose value is a floating-point number. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_float_option\">socket_float_option</a> -&gt; float</code>", "file_descr -> socket_float_option -> float"],
["UnixLabels", "UnixLabels.html", "getsockopt_float", "UnixLabels.html#VALgetsockopt_float", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a floating-point number.</p> </div>", "  Same as Unix.getsockopt for a socket option whose value is a floating-point number. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_float_option\">socket_float_option</a> -&gt; float</code>", "file_descr -> socket_float_option -> float"],
["Unix", "Unix.html", "getsockopt_error", "Unix.html#VALgetsockopt_error", "<div class=\"info\">  <p>Return the error condition associated with the given socket, and clear it.</p> </div>", "  Return the error condition associated with the given socket, and clear it. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEerror\">error</a> option</code>", "file_descr -> error option"],
["UnixLabels", "UnixLabels.html", "getsockopt_error", "UnixLabels.html#VALgetsockopt_error", "<div class=\"info\">  <p>Return the error condition associated with the given socket, and clear it.</p> </div>", "  Return the error condition associated with the given socket, and clear it. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEerror\">error</a> option</code>", "file_descr -> error option"],
["Unix", "Unix.html", "getsockopt", "Unix.html#VALgetsockopt", "<div class=\"info\">  <p>Return the current status of a boolean-valued option in the given socket.</p> </div>", "  Return the current status of a boolean-valued option in the given socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsocket_bool_option\">socket_bool_option</a> -&gt; bool</code>", "file_descr -> socket_bool_option -> bool"],
["UnixLabels", "UnixLabels.html", "getsockopt", "UnixLabels.html#VALgetsockopt", "<div class=\"info\">  <p>Return the current status of a boolean-valued option in the given socket.</p> </div>", "  Return the current status of a boolean-valued option in the given socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_bool_option\">socket_bool_option</a> -&gt; bool</code>", "file_descr -> socket_bool_option -> bool"],
["Unix", "Unix.html", "getsockname", "Unix.html#VALgetsockname", "<div class=\"info\">  <p>Return the address of the given socket.</p> </div>", "  Return the address of the given socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a></code>", "file_descr -> sockaddr"],
["UnixLabels", "UnixLabels.html", "getsockname", "UnixLabels.html#VALgetsockname", "<div class=\"info\">  <p>Return the address of the given socket.</p> </div>", "  Return the address of the given socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a></code>", "file_descr -> sockaddr"],
["Unix", "Unix.html", "getservbyport", "Unix.html#VALgetservbyport", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">services</code> with the given service number.</p> </div>", "  Find an entry in services with the given service number. ", "<code class=\"type\">int -&gt; string -&gt; <a href=\"Unix.html#TYPEservice_entry\">service_entry</a></code>", "int -> string -> service_entry"],
["UnixLabels", "UnixLabels.html", "getservbyport", "UnixLabels.html#VALgetservbyport", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">services</code> with the given service number, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p> </div>", "  Find an entry in services with the given service number, or raise Not_found. ", "<code class=\"type\">int -&gt; protocol:string -&gt; <a href=\"UnixLabels.html#TYPEservice_entry\">service_entry</a></code>", "int -> protocol:string -> service_entry"],
["Unix", "Unix.html", "getservbyname", "Unix.html#VALgetservbyname", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">services</code> with the given name.</p> </div>", "  Find an entry in services with the given name. ", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Unix.html#TYPEservice_entry\">service_entry</a></code>", "string -> string -> service_entry"],
["UnixLabels", "UnixLabels.html", "getservbyname", "UnixLabels.html#VALgetservbyname", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">services</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p> </div>", "  Find an entry in services with the given name, or raise Not_found. ", "<code class=\"type\">string -&gt; protocol:string -&gt; <a href=\"UnixLabels.html#TYPEservice_entry\">service_entry</a></code>", "string -> protocol:string -> service_entry"],
["Unix", "Unix.html", "getpwuid", "Unix.html#VALgetpwuid", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">passwd</code> with the given user id.</p> </div>", "  Find an entry in passwd with the given user id. ", "<code class=\"type\">int -&gt; <a href=\"Unix.html#TYPEpasswd_entry\">passwd_entry</a></code>", "int -> passwd_entry"],
["UnixLabels", "UnixLabels.html", "getpwuid", "UnixLabels.html#VALgetpwuid", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">passwd</code> with the given user id, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p> </div>", "  Find an entry in passwd with the given user id, or raise Not_found if the matching entry is not found. ", "<code class=\"type\">int -&gt; <a href=\"UnixLabels.html#TYPEpasswd_entry\">passwd_entry</a></code>", "int -> passwd_entry"],
["Unix", "Unix.html", "getpwnam", "Unix.html#VALgetpwnam", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">passwd</code> with the given name.</p> </div>", "  Find an entry in passwd with the given name. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEpasswd_entry\">passwd_entry</a></code>", "string -> passwd_entry"],
["UnixLabels", "UnixLabels.html", "getpwnam", "UnixLabels.html#VALgetpwnam", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">passwd</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p> </div>", "  Find an entry in passwd with the given name, or raise Not_found if the matching entry is not found. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEpasswd_entry\">passwd_entry</a></code>", "string -> passwd_entry"],
["Unix", "Unix.html", "getprotobynumber", "Unix.html#VALgetprotobynumber", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">protocols</code> with the given protocol number.</p> </div>", "  Find an entry in protocols with the given protocol number. ", "<code class=\"type\">int -&gt; <a href=\"Unix.html#TYPEprotocol_entry\">protocol_entry</a></code>", "int -> protocol_entry"],
["UnixLabels", "UnixLabels.html", "getprotobynumber", "UnixLabels.html#VALgetprotobynumber", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">protocols</code> with the given protocol number, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p> </div>", "  Find an entry in protocols with the given protocol number, or raise Not_found. ", "<code class=\"type\">int -&gt; <a href=\"UnixLabels.html#TYPEprotocol_entry\">protocol_entry</a></code>", "int -> protocol_entry"],
["Unix", "Unix.html", "getprotobyname", "Unix.html#VALgetprotobyname", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">protocols</code> with the given name.</p> </div>", "  Find an entry in protocols with the given name. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEprotocol_entry\">protocol_entry</a></code>", "string -> protocol_entry"],
["UnixLabels", "UnixLabels.html", "getprotobyname", "UnixLabels.html#VALgetprotobyname", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">protocols</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p> </div>", "  Find an entry in protocols with the given name, or raise Not_found. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEprotocol_entry\">protocol_entry</a></code>", "string -> protocol_entry"],
["Unix", "Unix.html", "getppid", "Unix.html#VALgetppid", "<div class=\"info\">  <p>Return the pid of the parent process.</p> </div>", "  Return the pid of the parent process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "getppid", "UnixLabels.html#VALgetppid", "<div class=\"info\">  <p>Return the pid of the parent process.</p> </div>", "  Return the pid of the parent process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Unix", "Unix.html", "getpid", "Unix.html#VALgetpid", "<div class=\"info\">  <p>Return the pid of the process.</p> </div>", "  Return the pid of the process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "getpid", "UnixLabels.html#VALgetpid", "<div class=\"info\">  <p>Return the pid of the process.</p> </div>", "  Return the pid of the process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Unix", "Unix.html", "getpeername", "Unix.html#VALgetpeername", "<div class=\"info\">  <p>Return the address of the host connected to the given socket.</p> </div>", "  Return the address of the host connected to the given socket. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a></code>", "file_descr -> sockaddr"],
["UnixLabels", "UnixLabels.html", "getpeername", "UnixLabels.html#VALgetpeername", "<div class=\"info\">  <p>Return the address of the host connected to the given socket.</p> </div>", "  Return the address of the host connected to the given socket. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a></code>", "file_descr -> sockaddr"],
["Unix", "Unix.html", "getnameinfo", "Unix.html#VALgetnameinfo", "<div class=\"info\">  <p><code class=\"code\">getnameinfo&nbsp;addr&nbsp;opts</code> returns the host name and service name corresponding to the socket address <code class=\"code\">addr</code>.</p> </div>", "  getnameinfo\194\160addr\194\160opts returns the host name and service name corresponding to the socket address addr. ", "<code class=\"type\"><a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; <a href=\"Unix.html#TYPEgetnameinfo_option\">getnameinfo_option</a> list -&gt; <a href=\"Unix.html#TYPEname_info\">name_info</a></code>", "sockaddr -> getnameinfo_option list -> name_info"],
["UnixLabels", "UnixLabels.html", "getnameinfo", "UnixLabels.html#VALgetnameinfo", "<div class=\"info\">  <p><code class=\"code\">getnameinfo&nbsp;addr&nbsp;opts</code> returns the host name and service name corresponding to the socket address <code class=\"code\">addr</code>.</p> </div>", "  getnameinfo\194\160addr\194\160opts returns the host name and service name corresponding to the socket address addr. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt;<br>       <a href=\"UnixLabels.html#TYPEgetnameinfo_option\">getnameinfo_option</a> list -&gt; <a href=\"UnixLabels.html#TYPEname_info\">name_info</a></code>", "sockaddr ->       getnameinfo_option list -> name_info"],
["Unix", "Unix.html", "getlogin", "Unix.html#VALgetlogin", "<div class=\"info\">  <p>Return the login name of the user executing the process.</p> </div>", "  Return the login name of the user executing the process. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["UnixLabels", "UnixLabels.html", "getlogin", "UnixLabels.html#VALgetlogin", "<div class=\"info\">  <p>Return the login name of the user executing the process.</p> </div>", "  Return the login name of the user executing the process. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Unix", "Unix.html", "getitimer", "Unix.html#VALgetitimer", "<div class=\"info\">  <p>Return the current status of the given interval timer.</p> </div>", "  Return the current status of the given interval timer. ", "<code class=\"type\"><a href=\"Unix.html#TYPEinterval_timer\">interval_timer</a> -&gt; <a href=\"Unix.html#TYPEinterval_timer_status\">interval_timer_status</a></code>", "interval_timer -> interval_timer_status"],
["UnixLabels", "UnixLabels.html", "getitimer", "UnixLabels.html#VALgetitimer", "<div class=\"info\">  <p>Return the current status of the given interval timer.</p> </div>", "  Return the current status of the given interval timer. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinterval_timer\">interval_timer</a> -&gt; <a href=\"UnixLabels.html#TYPEinterval_timer_status\">interval_timer_status</a></code>", "interval_timer -> interval_timer_status"],
["Unix", "Unix.html", "gethostname", "Unix.html#VALgethostname", "<div class=\"info\">  <p>Return the name of the local host.</p> </div>", "  Return the name of the local host. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["UnixLabels", "UnixLabels.html", "gethostname", "UnixLabels.html#VALgethostname", "<div class=\"info\">  <p>Return the name of the local host.</p> </div>", "  Return the name of the local host. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Unix", "Unix.html", "gethostbyname", "Unix.html#VALgethostbyname", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">hosts</code> with the given name.</p> </div>", "  Find an entry in hosts with the given name. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEhost_entry\">host_entry</a></code>", "string -> host_entry"],
["UnixLabels", "UnixLabels.html", "gethostbyname", "UnixLabels.html#VALgethostbyname", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">hosts</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p> </div>", "  Find an entry in hosts with the given name, or raise Not_found. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEhost_entry\">host_entry</a></code>", "string -> host_entry"],
["Unix", "Unix.html", "gethostbyaddr", "Unix.html#VALgethostbyaddr", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">hosts</code> with the given address.</p> </div>", "  Find an entry in hosts with the given address. ", "<code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a> -&gt; <a href=\"Unix.html#TYPEhost_entry\">host_entry</a></code>", "inet_addr -> host_entry"],
["UnixLabels", "UnixLabels.html", "gethostbyaddr", "UnixLabels.html#VALgethostbyaddr", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">hosts</code> with the given address, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p> </div>", "  Find an entry in hosts with the given address, or raise Not_found. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a> -&gt; <a href=\"UnixLabels.html#TYPEhost_entry\">host_entry</a></code>", "inet_addr -> host_entry"],
["Unix", "Unix.html", "getgroups", "Unix.html#VALgetgroups", "<div class=\"info\">  <p>Return the list of groups to which the user executing the process belongs.</p> </div>", "  Return the list of groups to which the user executing the process belongs. ", "<code class=\"type\">unit -&gt; int array</code>", "unit -> int array"],
["UnixLabels", "UnixLabels.html", "getgroups", "UnixLabels.html#VALgetgroups", "<div class=\"info\">  <p>Return the list of groups to which the user executing the process belongs.</p> </div>", "  Return the list of groups to which the user executing the process belongs. ", "<code class=\"type\">unit -&gt; int array</code>", "unit -> int array"],
["Unix", "Unix.html", "getgrnam", "Unix.html#VALgetgrnam", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">group</code> with the given name.</p> </div>", "  Find an entry in group with the given name. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEgroup_entry\">group_entry</a></code>", "string -> group_entry"],
["UnixLabels", "UnixLabels.html", "getgrnam", "UnixLabels.html#VALgetgrnam", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">group</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p> </div>", "  Find an entry in group with the given name, or raise Not_found if the matching entry is not found. ", "<code class=\"type\">string -&gt; <a href=\"UnixLabels.html#TYPEgroup_entry\">group_entry</a></code>", "string -> group_entry"],
["Unix", "Unix.html", "getgrgid", "Unix.html#VALgetgrgid", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">group</code> with the given group id.</p> </div>", "  Find an entry in group with the given group id. ", "<code class=\"type\">int -&gt; <a href=\"Unix.html#TYPEgroup_entry\">group_entry</a></code>", "int -> group_entry"],
["UnixLabels", "UnixLabels.html", "getgrgid", "UnixLabels.html#VALgetgrgid", "<div class=\"info\">  <p>Find an entry in <code class=\"code\">group</code> with the given group id, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p> </div>", "  Find an entry in group with the given group id, or raise Not_found if the matching entry is not found. ", "<code class=\"type\">int -&gt; <a href=\"UnixLabels.html#TYPEgroup_entry\">group_entry</a></code>", "int -> group_entry"],
["Unix", "Unix.html", "getgid", "Unix.html#VALgetgid", "<div class=\"info\">  <p>Return the group id of the user executing the process.</p> </div>", "  Return the group id of the user executing the process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "getgid", "UnixLabels.html#VALgetgid", "<div class=\"info\">  <p>Return the group id of the user executing the process.</p> </div>", "  Return the group id of the user executing the process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Unix", "Unix.html", "geteuid", "Unix.html#VALgeteuid", "<div class=\"info\">  <p>Return the effective user id under which the process runs.</p> </div>", "  Return the effective user id under which the process runs. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "geteuid", "UnixLabels.html#VALgeteuid", "<div class=\"info\">  <p>Return the effective user id under which the process runs.</p> </div>", "  Return the effective user id under which the process runs. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Sys", "Sys.html", "getenv_opt", "Sys.html#VALgetenv_opt", "<div class=\"info\">  <p>Return the value associated to a variable in the process environment or <code class=\"code\"><span class=\"constructor\">None</span></code> if the variable is unbound.</p> </div>", "  Return the value associated to a variable in the process environment or None if the variable is unbound. ", "<code class=\"type\">string -&gt; string option</code>", "string -> string option"],
["Sys", "Sys.html", "getenv", "Sys.html#VALgetenv", "<div class=\"info\">  <p>Return the value associated to a variable in the process environment.</p> </div>", "  Return the value associated to a variable in the process environment. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Unix", "Unix.html", "getenv", "Unix.html#VALgetenv", "<div class=\"info\">  <p>Return the value associated to a variable in the process environment, unless the process has special privileges.</p> </div>", "  Return the value associated to a variable in the process environment, unless the process has special privileges. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["UnixLabels", "UnixLabels.html", "getenv", "UnixLabels.html#VALgetenv", "<div class=\"info\">  <p>Return the value associated to a variable in the process environment.</p> </div>", "  Return the value associated to a variable in the process environment. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Unix", "Unix.html", "getegid", "Unix.html#VALgetegid", "<div class=\"info\">  <p>Return the effective group id under which the process runs.</p> </div>", "  Return the effective group id under which the process runs. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "getegid", "UnixLabels.html#VALgetegid", "<div class=\"info\">  <p>Return the effective group id under which the process runs.</p> </div>", "  Return the effective group id under which the process runs. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Sys", "Sys.html", "getcwd", "Sys.html#VALgetcwd", "<div class=\"info\">  <p>Return the current working directory of the process.</p> </div>", "  Return the current working directory of the process. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Unix", "Unix.html", "getcwd", "Unix.html#VALgetcwd", "<div class=\"info\">  <p>Return the name of the current working directory.</p> </div>", "  Return the name of the current working directory. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["UnixLabels", "UnixLabels.html", "getcwd", "UnixLabels.html#VALgetcwd", "<div class=\"info\">  <p>Return the name of the current working directory.</p> </div>", "  Return the name of the current working directory. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Unix", "Unix.html", "getaddrinfo", "Unix.html#VALgetaddrinfo", "<div class=\"info\">  <p><code class=\"code\">getaddrinfo&nbsp;host&nbsp;service&nbsp;opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a> records describing socket parameters and addresses suitable for communicating with the given host and service.</p> </div>", "  getaddrinfo\194\160host\194\160service\194\160opts returns a list of Unix.addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. ", "<code class=\"type\">string -&gt; string -&gt; <a href=\"Unix.html#TYPEgetaddrinfo_option\">getaddrinfo_option</a> list -&gt; <a href=\"Unix.html#TYPEaddr_info\">addr_info</a> list</code>", "string -> string -> getaddrinfo_option list -> addr_info list"],
["UnixLabels", "UnixLabels.html", "getaddrinfo", "UnixLabels.html#VALgetaddrinfo", "<div class=\"info\">  <p><code class=\"code\">getaddrinfo&nbsp;host&nbsp;service&nbsp;opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a> records describing socket parameters and addresses suitable for communicating with the given host and service.</p> </div>", "  getaddrinfo\194\160host\194\160service\194\160opts returns a list of Unix.addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. ", "<code class=\"type\">string -&gt;<br>       string -&gt; <a href=\"UnixLabels.html#TYPEgetaddrinfo_option\">getaddrinfo_option</a> list -&gt; <a href=\"UnixLabels.html#TYPEaddr_info\">addr_info</a> list</code>", "string ->       string -> getaddrinfo_option list -> addr_info list"],
["CamlinternalOO", "CamlinternalOO.html", "get_variables", "CamlinternalOO.html#VALget_variables", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; string array -&gt; int array</code>", "table -> string array -> int array"],
["CamlinternalOO", "CamlinternalOO.html", "get_variable", "CamlinternalOO.html#VALget_variable", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; string -&gt; int</code>", "table -> string -> int"],
["Filename", "Filename.html", "get_temp_dir_name", "Filename.html#VALget_temp_dir_name", "<div class=\"info\">  <p>The name of the temporary directory: Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\" if the variable is not set.</p> </div>", "  The name of the temporary directory: Under Unix, the value of the TMPDIR environment variable, or \"/tmp\" if the variable is not set. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Format", "Format.html", "get_symbolic_output_buffer", "Format.html#VALget_symbolic_output_buffer", "<div class=\"info\">  <p><code class=\"code\">get_symbolic_output_buffer&nbsp;sob</code> returns the contents of buffer <code class=\"code\">sob</code>.</p> </div>", "  get_symbolic_output_buffer\194\160sob returns the contents of buffer sob. ", "<code class=\"type\"><a href=\"Format.html#TYPEsymbolic_output_buffer\">symbolic_output_buffer</a> -&gt; <a href=\"Format.html#TYPEsymbolic_output_item\">symbolic_output_item</a> list</code>", "symbolic_output_buffer -> symbolic_output_item list"],
["Misc.Color", "Misc.Color.html", "get_styles", "Misc.Color.html#VALget_styles", "", "", "<code class=\"type\">unit -&gt; <a href=\"Misc.Color.html#TYPEstyles\">styles</a></code>", "unit -> styles"],
["Random", "Random.html", "get_state", "Random.html#VALget_state", "<div class=\"info\">  <p>Return the current state of the generator used by the basic functions.</p> </div>", "  Return the current state of the generator used by the basic functions. ", "<code class=\"type\">unit -&gt; <a href=\"Random.State.html#TYPEt\">State.t</a></code>", "unit -> State.t"],
["Misc", "Misc.html", "get_ref", "Misc.html#VALget_ref", "", "", "<code class=\"type\">'a list <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; 'a list</code>", "'a list ref -> 'a list"],
["Printexc", "Printexc.html", "get_raw_backtrace_slot", "Printexc.html#VALget_raw_backtrace_slot", "<div class=\"info\">  <p><code class=\"code\">get_raw_backtrace_slot&nbsp;bckt&nbsp;pos</code> returns the slot in position <code class=\"code\">pos</code> in the backtrace <code class=\"code\">bckt</code>.</p> </div>", "  get_raw_backtrace_slot\194\160bckt\194\160pos returns the slot in position pos in the backtrace bckt. ", "<code class=\"type\"><a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a> -&gt; int -&gt; <a href=\"Printexc.html#TYPEraw_backtrace_slot\">raw_backtrace_slot</a></code>", "raw_backtrace -> int -> raw_backtrace_slot"],
["Printexc", "Printexc.html", "get_raw_backtrace_next_slot", "Printexc.html#VALget_raw_backtrace_next_slot", "<div class=\"info\">  <p><code class=\"code\">get_raw_backtrace_next_slot&nbsp;slot</code> returns the next slot inlined, if any.</p> </div>", "  get_raw_backtrace_next_slot\194\160slot returns the next slot inlined, if any. ", "<code class=\"type\"><a href=\"Printexc.html#TYPEraw_backtrace_slot\">raw_backtrace_slot</a> -&gt; <a href=\"Printexc.html#TYPEraw_backtrace_slot\">raw_backtrace_slot</a> option</code>", "raw_backtrace_slot -> raw_backtrace_slot option"],
["Printexc", "Printexc.html", "get_raw_backtrace", "Printexc.html#VALget_raw_backtrace", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_raw_backtrace&nbsp;()</code> returns the same exception backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would print, but in a raw format.</p> </div>", "  Printexc.get_raw_backtrace\194\160() returns the same exception backtrace that Printexc.print_backtrace would print, but in a raw format. ", "<code class=\"type\">unit -&gt; <a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a></code>", "unit -> raw_backtrace"],
["CamlinternalOO", "CamlinternalOO.html", "get_public_method", "CamlinternalOO.html#VALget_public_method", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"CamlinternalOO.html#TYPEtag\">tag</a> -&gt; <a href=\"CamlinternalOO.html#TYPEclosure\">closure</a></code>", "obj -> tag -> closure"],
["Format", "Format.html", "get_print_tags", "Format.html#VALget_print_tags", "<div class=\"info\">  <p>Return the current status of tag-printing operations.</p> </div>", "  Return the current status of tag-printing operations. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Location", "Location.html", "get_pos_info", "Location.html#VALget_pos_info", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a> -&gt; string * int * int</code>", "Lexing.position -> string * int * int"],
["Attr_helper", "Attr_helper.html", "get_no_payload_attribute", "Attr_helper.html#VALget_no_payload_attribute", "<div class=\"info\">  <p>The <code class=\"code\">string&nbsp;list</code> argument of the following functions is a list of alternative names for the attribute we are looking for.</p> </div>", "  The string\194\160list argument of the following functions is a list of alternative names for the attribute we are looking for. ", "<code class=\"type\">string list -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> option</code>", "string list -> Parsetree.attributes -> string Asttypes.loc option"],
["Gc", "Gc.html", "get_minor_free", "Gc.html#VALget_minor_free", "<div class=\"info\">  <p>Return the current size of the free space inside the minor heap.</p> </div>", "  Return the current size of the free space inside the minor heap. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["CamlinternalOO", "CamlinternalOO.html", "get_method_labels", "CamlinternalOO.html#VALget_method_labels", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; string array -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a> array</code>", "table -> string array -> label array"],
["CamlinternalOO", "CamlinternalOO.html", "get_method_label", "CamlinternalOO.html#VALget_method_label", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; string -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a></code>", "table -> string -> label"],
["CamlinternalOO", "CamlinternalOO.html", "get_method", "CamlinternalOO.html#VALget_method", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPElabel\">label</a> -&gt; <a href=\"CamlinternalOO.html#TYPEmeth\">meth</a></code>", "table -> label -> meth"],
["Format", "Format.html", "get_max_indent", "Format.html#VALget_max_indent", "<div class=\"info\">  <p>Return the maximum indentation limit (in characters).</p> </div>", "  Return the maximum indentation limit (in characters). ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Format", "Format.html", "get_max_boxes", "Format.html#VALget_max_boxes", "<div class=\"info\">  <p>Returns the maximum number of pretty-printing boxes allowed before ellipsis.</p> </div>", "  Returns the maximum number of pretty-printing boxes allowed before ellipsis. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Format", "Format.html", "get_mark_tags", "Format.html#VALget_mark_tags", "<div class=\"info\">  <p>Return the current status of tag-marking operations.</p> </div>", "  Return the current status of tag-marking operations. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Format", "Format.html", "get_margin", "Format.html#VALget_margin", "<div class=\"info\">  <p>Returns the position of the right margin.</p> </div>", "  Returns the position of the right margin. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_key_copy", "Ephemeron.K1.html#VALget_key_copy", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the key of <code class=\"code\">eph</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the key) if it is full.</p> </div>", "  Ephemeron.K1.get_key_copy\194\160eph returns None if the key of eph is empty, Some\194\160x (where x is a (shallow) copy of the key) if it is full. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; 'k option</code>", "('k, 'd) t -> 'k option"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_key_copy", "Ephemeron.Kn.html#VALget_key_copy", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p> </div>", "  Same as Ephemeron.K1.get_key_copy ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; int -&gt; 'k option</code>", "('k, 'd) t -> int -> 'k option"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_key_copy", "Obj.Ephemeron.html#VALget_key_copy", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p> </div>", "  Same as Ephemeron.K1.get_key_copy ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Obj.Ephemeron.html#TYPEobj_t\">obj_t</a> option</code>", "t -> int -> obj_t option"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key2_copy", "Ephemeron.K2.html#VALget_key2_copy", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p> </div>", "  Same as Ephemeron.K1.get_key_copy ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'k2 option</code>", "('k1, 'k2, 'd) t -> 'k2 option"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key2", "Ephemeron.K2.html#VALget_key2", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p> </div>", "  Same as Ephemeron.K1.get_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'k2 option</code>", "('k1, 'k2, 'd) t -> 'k2 option"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key1_copy", "Ephemeron.K2.html#VALget_key1_copy", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p> </div>", "  Same as Ephemeron.K1.get_key_copy ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'k1 option</code>", "('k1, 'k2, 'd) t -> 'k1 option"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key1", "Ephemeron.K2.html#VALget_key1", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p> </div>", "  Same as Ephemeron.K1.get_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'k1 option</code>", "('k1, 'k2, 'd) t -> 'k1 option"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_key", "Ephemeron.K1.html#VALget_key", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the key of <code class=\"code\">eph</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the key) if it is full.</p> </div>", "  Ephemeron.K1.get_key\194\160eph returns None if the key of eph is empty, Some\194\160x (where x is the key) if it is full. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; 'k option</code>", "('k, 'd) t -> 'k option"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_key", "Ephemeron.Kn.html#VALget_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p> </div>", "  Same as Ephemeron.K1.get_key ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; int -&gt; 'k option</code>", "('k, 'd) t -> int -> 'k option"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_key", "Obj.Ephemeron.html#VALget_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p> </div>", "  Same as Ephemeron.K1.get_key ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Obj.Ephemeron.html#TYPEobj_t\">obj_t</a> option</code>", "t -> int -> obj_t option"],
["Graphics", "Graphics.html", "get_image", "Graphics.html#VALget_image", "<div class=\"info\">  <p>Capture the contents of a rectangle on the screen as an image.</p> </div>", "  Capture the contents of a rectangle on the screen as an image. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; int -&gt; <a href=\"Graphics.html#TYPEimage\">image</a></code>", "int -> int -> int -> int -> image"],
["Format", "Format.html", "get_formatter_tag_functions", "Format.html#VALget_formatter_tag_functions", "<div class=\"info\">  <p>Return the current semantic tag operation functions of the standard pretty-printer.</p> </div>", "  Return the current semantic tag operation functions of the standard pretty-printer. ", "<code class=\"type\">unit -&gt; <a href=\"Format.html#TYPEformatter_tag_functions\">formatter_tag_functions</a></code>", "unit -> formatter_tag_functions"],
["Format", "Format.html", "get_formatter_output_functions", "Format.html#VALget_formatter_output_functions", "<div class=\"info\">  <p>Return the current output functions of the standard pretty-printer.</p> </div>", "  Return the current output functions of the standard pretty-printer. ", "<code class=\"type\">unit -&gt; (string -&gt; int -&gt; int -&gt; unit) * (unit -&gt; unit)</code>", "unit -> (string -> int -> int -> unit) * (unit -> unit)"],
["Format", "Format.html", "get_formatter_out_functions", "Format.html#VALget_formatter_out_functions", "<div class=\"info\">  <p>Return the current output functions of the pretty-printer, including line splitting and indentation functions.</p> </div>", "  Return the current output functions of the pretty-printer, including line splitting and indentation functions. ", "<code class=\"type\">unit -&gt; <a href=\"Format.html#TYPEformatter_out_functions\">formatter_out_functions</a></code>", "unit -> formatter_out_functions"],
["Format", "Format.html", "get_ellipsis_text", "Format.html#VALget_ellipsis_text", "<div class=\"info\">  <p>Return the text of the ellipsis.</p> </div>", "  Return the text of the ellipsis. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_data_copy", "Ephemeron.K1.html#VALget_data_copy", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the data of <code class=\"code\">eph</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the data) if it is full.</p> </div>", "  Ephemeron.K1.get_data_copy\194\160eph returns None if the data of eph is empty, Some\194\160x (where x is a (shallow) copy of the data) if it is full. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; 'd option</code>", "('k, 'd) t -> 'd option"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_data_copy", "Ephemeron.K2.html#VALget_data_copy", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p> </div>", "  Same as Ephemeron.K1.get_data_copy ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'd option</code>", "('k1, 'k2, 'd) t -> 'd option"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_data_copy", "Ephemeron.Kn.html#VALget_data_copy", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p> </div>", "  Same as Ephemeron.K1.get_data_copy ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; 'd option</code>", "('k, 'd) t -> 'd option"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_data_copy", "Obj.Ephemeron.html#VALget_data_copy", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p> </div>", "  Same as Ephemeron.K1.get_data_copy ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; <a href=\"Obj.Ephemeron.html#TYPEobj_t\">obj_t</a> option</code>", "t -> obj_t option"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_data", "Ephemeron.K1.html#VALget_data", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the data of <code class=\"code\">eph</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the data) if it is full.</p> </div>", "  Ephemeron.K1.get_data\194\160eph returns None if the data of eph is empty, Some\194\160x (where x is the data) if it is full. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; 'd option</code>", "('k, 'd) t -> 'd option"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_data", "Ephemeron.K2.html#VALget_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p> </div>", "  Same as Ephemeron.K1.get_data ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; 'd option</code>", "('k1, 'k2, 'd) t -> 'd option"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_data", "Ephemeron.Kn.html#VALget_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p> </div>", "  Same as Ephemeron.K1.get_data ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; 'd option</code>", "('k, 'd) t -> 'd option"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_data", "Obj.Ephemeron.html#VALget_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p> </div>", "  Same as Ephemeron.K1.get_data ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; <a href=\"Obj.Ephemeron.html#TYPEobj_t\">obj_t</a> option</code>", "t -> obj_t option"],
["Gc", "Gc.html", "get_credit", "Gc.html#VALget_credit", "<div class=\"info\">  <p><code class=\"code\">get_credit&nbsp;()</code> returns the current size of the \"work done in advance\" counter of the GC smoothing system.</p> </div>", "  get_credit\194\160() returns the current size of the \"work done in advance\" counter of the GC smoothing system. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Weak", "Weak.html", "get_copy", "Weak.html#VALget_copy", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.get_copy&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the value) if it is full.</p> </div>", "  Weak.get_copy\194\160ar\194\160n returns None if the nth cell of ar is empty, Some\194\160x (where x is a (shallow) copy of the value) if it is full. ", "<code class=\"type\">'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int -&gt; 'a option</code>", "'a t -> int -> 'a option"],
["Ast_mapper", "Ast_mapper.html", "get_cookie", "Ast_mapper.html#VALget_cookie", "", "", "<code class=\"type\">string -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option</code>", "string -> Parsetree.expression option"],
["Printexc", "Printexc.html", "get_callstack", "Printexc.html#VALget_callstack", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_callstack&nbsp;n</code> returns a description of the top of the call stack on the current program point (for the current thread), with at most <code class=\"code\">n</code> entries.</p> </div>", "  Printexc.get_callstack\194\160n returns a description of the top of the call stack on the current program point (for the current thread), with at most n entries. ", "<code class=\"type\">int -&gt; <a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a></code>", "int -> raw_backtrace"],
["Gc", "Gc.html", "get_bucket", "Gc.html#VALget_bucket", "<div class=\"info\">  <p><code class=\"code\">get_bucket&nbsp;n</code> returns the current size of the <code class=\"code\">n</code>-th future bucket of the GC smoothing system.</p> </div>", "  get_bucket\194\160n returns the current size of the n-th future bucket of the GC smoothing system. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Printexc", "Printexc.html", "get_backtrace", "Printexc.html#VALget_backtrace", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace&nbsp;()</code> returns a string containing the same exception backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would print.</p> </div>", "  Printexc.get_backtrace\194\160() returns a string containing the same exception backtrace that Printexc.print_backtrace would print. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Format", "Format.html", "get_all_formatter_output_functions", "Format.html#VALget_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">unit -&gt;<br>       (string -&gt; int -&gt; int -&gt; unit) * (unit -&gt; unit) * (unit -&gt; unit) *<br>       (int -&gt; unit)</code>", "unit ->       (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *       (int -> unit)"],
["Arg_helper.Make", "Arg_helper.Make.html", "get", "Arg_helper.Make.html#VALget", "", "", "<code class=\"type\">key:S.Key.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; S.Value.t</code>", "key:S.Key.t -> parsed -> S.Value.t"],
["Array", "Array.html", "get", "Array.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.</p> </div>", "  Array.get\194\160a\194\160n returns the element number n of array a. ", "<code class=\"type\">'a array -&gt; int -&gt; 'a</code>", "'a array -> int -> 'a"],
["ArrayLabels", "ArrayLabels.html", "get", "ArrayLabels.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.</p> </div>", "  Array.get\194\160a\194\160n returns the element number n of array a. ", "<code class=\"type\">'a array -&gt; int -&gt; 'a</code>", "'a array -> int -> 'a"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "get", "Bigarray.Genarray.html#VALget", "<div class=\"info\">  <p>Read an element of a generic big array.</p> </div>", "  Read an element of a generic big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; int array -&gt; 'a</code>", "('a, 'b, 'c) t -> int array -> 'a"],
["Bigarray.Array0", "Bigarray.Array0.html", "get", "Bigarray.Array0.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array0</span>.get&nbsp;a</code> returns the only element in <code class=\"code\">a</code>.</p> </div>", "  Array0.get\194\160a returns the only element in a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; 'a</code>", "('a, 'b, 'c) t -> 'a"],
["Bigarray.Array1", "Bigarray.Array1.html", "get", "Bigarray.Array1.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array1</span>.get&nbsp;a&nbsp;x</code>, or alternatively <code class=\"code\">a.{x}</code>, returns the element of <code class=\"code\">a</code> at index <code class=\"code\">x</code>.</p> </div>", "  Array1.get\194\160a\194\160x, or alternatively a.{x}, returns the element of a at index x. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; int -&gt; 'a</code>", "('a, 'b, 'c) t -> int -> 'a"],
["Bigarray.Array2", "Bigarray.Array2.html", "get", "Bigarray.Array2.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array2</span>.get&nbsp;a&nbsp;x&nbsp;y</code>, also written <code class=\"code\">a.{x,y}</code>, returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>).</p> </div>", "  Array2.get\194\160a\194\160x\194\160y, also written a.{x,y}, returns the element of a at coordinates (x, y). ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; 'a</code>", "('a, 'b, 'c) t -> int -> int -> 'a"],
["Bigarray.Array3", "Bigarray.Array3.html", "get", "Bigarray.Array3.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array3</span>.get&nbsp;a&nbsp;x&nbsp;y&nbsp;z</code>, also written <code class=\"code\">a.{x,y,z}</code>, returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>).</p> </div>", "  Array3.get\194\160a\194\160x\194\160y\194\160z, also written a.{x,y,z}, returns the element of a at coordinates (x, y, z). ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; int -&gt; 'a</code>", "('a, 'b, 'c) t -> int -> int -> int -> 'a"],
["Bytes", "Bytes.html", "get", "Bytes.html#VALget", "<div class=\"info\">  <p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p> </div>", "  get\194\160s\194\160n returns the byte at index n in argument s. ", "<code class=\"type\">bytes -&gt; int -&gt; char</code>", "bytes -> int -> char"],
["BytesLabels", "BytesLabels.html", "get", "BytesLabels.html#VALget", "<div class=\"info\">  <p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p> </div>", "  get\194\160s\194\160n returns the byte at index n in argument s. ", "<code class=\"type\">bytes -&gt; int -&gt; char</code>", "bytes -> int -> char"],
["Clflags.Int_arg_helper", "Clflags.Int_arg_helper.html", "get", "Clflags.Int_arg_helper.html#VALget", "", "", "<code class=\"type\">key:int -&gt; <a href=\"Clflags.Int_arg_helper.html#TYPEparsed\">parsed</a> -&gt; int</code>", "key:int -> parsed -> int"],
["Clflags.Float_arg_helper", "Clflags.Float_arg_helper.html", "get", "Clflags.Float_arg_helper.html#VALget", "", "", "<code class=\"type\">key:int -&gt; <a href=\"Clflags.Float_arg_helper.html#TYPEparsed\">parsed</a> -&gt; float</code>", "key:int -> parsed -> float"],
["Float.Array", "Float.Array.html", "get", "Float.Array.html#VALget", "", "", "<code class=\"type\"><a href=\"Float.Array.html#TYPEt\">t</a> -&gt; int -&gt; float</code>", "t -> int -> float"],
["Gc", "Gc.html", "get", "Gc.html#VALget", "<div class=\"info\">  <p>Return the current values of the GC parameters in a <code class=\"code\">control</code> record.</p> </div>", "  Return the current values of the GC parameters in a control record. ", "<code class=\"type\">unit -&gt; <a href=\"Gc.html#TYPEcontrol\">control</a></code>", "unit -> control"],
["Misc.LongString", "Misc.LongString.html", "get", "Misc.LongString.html#VALget", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; char</code>", "t -> int -> char"],
["StringLabels", "StringLabels.html", "get", "StringLabels.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.</p> </div>", "  String.get\194\160s\194\160n returns the character at index n in string s. ", "<code class=\"type\">string -&gt; int -&gt; char</code>", "string -> int -> char"],
["String", "String.html", "get", "String.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.</p> </div>", "  String.get\194\160s\194\160n returns the character at index n in string s. ", "<code class=\"type\">string -&gt; int -&gt; char</code>", "string -> int -> char"],
["Weak", "Weak.html", "get", "Weak.html#VALget", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.get&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the value) if it is full.</p> </div>", "  Weak.get\194\160ar\194\160n returns None if the nth cell of ar is empty, Some\194\160x (where x is the value) if it is full. ", "<code class=\"type\">'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int -&gt; 'a option</code>", "'a t -> int -> 'a option"],
["Profile", "Profile.html", "generate", "Profile.html#VALgenerate", "", "", "<code class=\"type\">string</code>", "string"],
["Bigarray", "Bigarray.html", "genarray_of_array3", "Bigarray.html#VALgenarray_of_array3", "<div class=\"info\">  <p>Return the generic big array corresponding to the given three-dimensional big array.</p> </div>", "  Return the generic big array corresponding to the given three-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">Array3.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a></code>", "('a, 'b, 'c) Array3.t -> ('a, 'b, 'c) Genarray.t"],
["Bigarray", "Bigarray.html", "genarray_of_array2", "Bigarray.html#VALgenarray_of_array2", "<div class=\"info\">  <p>Return the generic big array corresponding to the given two-dimensional big array.</p> </div>", "  Return the generic big array corresponding to the given two-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">Array2.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a></code>", "('a, 'b, 'c) Array2.t -> ('a, 'b, 'c) Genarray.t"],
["Bigarray", "Bigarray.html", "genarray_of_array1", "Bigarray.html#VALgenarray_of_array1", "<div class=\"info\">  <p>Return the generic big array corresponding to the given one-dimensional big array.</p> </div>", "  Return the generic big array corresponding to the given one-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">Array1.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a></code>", "('a, 'b, 'c) Array1.t -> ('a, 'b, 'c) Genarray.t"],
["Bigarray", "Bigarray.html", "genarray_of_array0", "Bigarray.html#VALgenarray_of_array0", "<div class=\"info\">  <p>Return the generic big array corresponding to the given zero-dimensional big array.</p> </div>", "  Return the generic big array corresponding to the given zero-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">Array0.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a></code>", "('a, 'b, 'c) Array0.t -> ('a, 'b, 'c) Genarray.t"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "functor_", "Ast_helper.Mty.html#VALfunctor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> option -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Parsetree.module_type option ->       Parsetree.module_type -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "functor_", "Ast_helper.Mod.html#VALfunctor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> option -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.str ->       Parsetree.module_type option ->       Parsetree.module_expr -> Parsetree.module_expr"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "function_", "Ast_helper.Exp.html#VALfunction_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.case list -> Parsetree.expression"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "fun_", "Ast_helper.Exp.html#VALfun_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.expression option ->       Parsetree.pattern -> Parsetree.expression -> Parsetree.expression"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "fun_", "Ast_helper.Cl.html#VALfun_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.expression option ->       Parsetree.pattern -> Parsetree.class_expr -> Parsetree.class_expr"],
["Str", "Str.html", "full_split", "Str.html#VALfull_split", "<div class=\"info\">  <p>Same as <a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a>, but returns the delimiters as well as the substrings contained between delimiters.</p> </div>", "  Same as Str.split_delim, but returns the delimiters as well as the substrings contained between delimiters. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; <a href=\"Str.html#TYPEsplit_result\">split_result</a> list</code>", "regexp -> string -> split_result list"],
["Gc", "Gc.html", "full_major", "Gc.html#VALfull_major", "<div class=\"info\">  <p>Do a minor collection, finish the current major collection cycle, and perform a complete new cycle.</p> </div>", "  Do a minor collection, finish the current major collection cycle, and perform a complete new cycle. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Random", "Random.html", "full_init", "Random.html#VALfull_init", "<div class=\"info\">  <p>Same as <a href=\"Random.html#VALinit\"><code class=\"code\"><span class=\"constructor\">Random</span>.init</code></a> but takes more data as seed.</p> </div>", "  Same as Random.init but takes more data as seed. ", "<code class=\"type\">int array -&gt; unit</code>", "int array -> unit"],
["Unix", "Unix.html", "ftruncate", "Unix.html#VALftruncate", "<div class=\"info\">  <p>Truncates the file corresponding to the given descriptor to the given size.</p> </div>", "  Truncates the file corresponding to the given descriptor to the given size. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; int -&gt; unit</code>", "file_descr -> int -> unit"],
["Unix.LargeFile", "Unix.LargeFile.html", "ftruncate", "Unix.LargeFile.html#VALftruncate", "<div class=\"info\">  <p>See <a href=\"Unix.html#VALftruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.ftruncate</code></a>.</p> </div>", "  See Unix.ftruncate. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; int64 -&gt; unit</code>", "Unix.file_descr -> int64 -> unit"],
["UnixLabels", "UnixLabels.html", "ftruncate", "UnixLabels.html#VALftruncate", "<div class=\"info\">  <p>Truncates the file corresponding to the given descriptor to the given size.</p> </div>", "  Truncates the file corresponding to the given descriptor to the given size. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; len:int -&gt; unit</code>", "file_descr -> len:int -> unit"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "ftruncate", "UnixLabels.LargeFile.html#VALftruncate", "", "", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">UnixLabels.file_descr</a> -&gt; len:int64 -&gt; unit</code>", "UnixLabels.file_descr -> len:int64 -> unit"],
["Unix", "Unix.html", "fstat", "Unix.html#VALfstat", "<div class=\"info\">  <p>Return the information for the file associated with the given descriptor.</p> </div>", "  Return the information for the file associated with the given descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEstats\">stats</a></code>", "file_descr -> stats"],
["Unix.LargeFile", "Unix.LargeFile.html", "fstat", "Unix.LargeFile.html#VALfstat", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; <a href=\"Unix.LargeFile.html#TYPEstats\">stats</a></code>", "Unix.file_descr -> stats"],
["UnixLabels", "UnixLabels.html", "fstat", "UnixLabels.html#VALfstat", "<div class=\"info\">  <p>Return the information for the file associated with the given descriptor.</p> </div>", "  Return the information for the file associated with the given descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEstats\">stats</a></code>", "file_descr -> stats"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "fstat", "UnixLabels.LargeFile.html#VALfstat", "", "", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">UnixLabels.file_descr</a> -&gt; <a href=\"UnixLabels.LargeFile.html#TYPEstats\">stats</a></code>", "UnixLabels.file_descr -> stats"],
["Misc", "Misc.html", "fst4", "Misc.html#VALfst4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'a</code>", "'a * 'b * 'c * 'd -> 'a"],
["Misc", "Misc.html", "fst3", "Misc.html#VALfst3", "", "", "<code class=\"type\">'a * 'b * 'c -&gt; 'a</code>", "'a * 'b * 'c -> 'a"],
["Pervasives", "Pervasives.html", "fst", "Pervasives.html#VALfst", "<div class=\"info\">  <p>Return the first component of a pair.</p> </div>", "  Return the first component of a pair. ", "<code class=\"type\">'a * 'b -&gt; 'a</code>", "'a * 'b -> 'a"],
["Scanf", "Scanf.html", "fscanf", "Scanf.html#VALfscanf", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; ('a, 'b, 'c, 'd) <a href=\"Scanf.html#TYPEscanner\">scanner</a></code>", "in_channel -> ('a, 'b, 'c, 'd) scanner"],
["Lazy", "Lazy.html", "from_val", "Lazy.html#VALfrom_val", "<div class=\"info\">  <p><code class=\"code\">from_val&nbsp;v</code> returns an already-forced suspension of <code class=\"code\">v</code>.</p> </div>", "  from_val\194\160v returns an already-forced suspension of v. ", "<code class=\"type\">'a -&gt; 'a <a href=\"Lazy.html#TYPEt\">t</a></code>", "'a -> 'a t"],
["Lexing", "Lexing.html", "from_string", "Lexing.html#VALfrom_string", "<div class=\"info\">  <p>Create a lexer buffer which reads from the given string.</p> </div>", "  Create a lexer buffer which reads from the given string. ", "<code class=\"type\">string -&gt; <a href=\"Lexing.html#TYPElexbuf\">lexbuf</a></code>", "string -> lexbuf"],
["Marshal", "Marshal.html", "from_string", "Marshal.html#VALfrom_string", "<div class=\"info\">  <p>Same as <code class=\"code\">from_bytes</code> but take a string as argument instead of a byte sequence.</p> </div>", "  Same as from_bytes but take a string as argument instead of a byte sequence. ", "<code class=\"type\">string -&gt; int -&gt; 'a</code>", "string -> int -> 'a"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_string", "Scanf.Scanning.html#VALfrom_string", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_string&nbsp;s</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel which reads from the given string.</p> </div>", "  Scanning.from_string\194\160s returns a Scanf.Scanning.in_channel formatted input channel which reads from the given string. ", "<code class=\"type\">string -&gt; <a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "string -> in_channel"],
["Digest", "Digest.html", "from_hex", "Digest.html#VALfrom_hex", "<div class=\"info\">  <p>Convert a hexadecimal representation back into the corresponding digest.</p> </div>", "  Convert a hexadecimal representation back into the corresponding digest. ", "<code class=\"type\">string -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "string -> t"],
["Lexing", "Lexing.html", "from_function", "Lexing.html#VALfrom_function", "<div class=\"info\">  <p>Create a lexer buffer with the given function as its reading method.</p> </div>", "  Create a lexer buffer with the given function as its reading method. ", "<code class=\"type\">(bytes -&gt; int -&gt; int) -&gt; <a href=\"Lexing.html#TYPElexbuf\">lexbuf</a></code>", "(bytes -> int -> int) -> lexbuf"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_function", "Scanf.Scanning.html#VALfrom_function", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_function&nbsp;f</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel with the given function as its reading method.</p> </div>", "  Scanning.from_function\194\160f returns a Scanf.Scanning.in_channel formatted input channel with the given function as its reading method. ", "<code class=\"type\">(unit -&gt; char) -&gt; <a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "(unit -> char) -> in_channel"],
["Lazy", "Lazy.html", "from_fun", "Lazy.html#VALfrom_fun", "<div class=\"info\">  <p><code class=\"code\">from_fun&nbsp;f</code> is the same as <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(f&nbsp;())</code> but slightly more efficient.</p> </div>", "  from_fun\194\160f is the same as lazy\194\160(f\194\160()) but slightly more efficient. ", "<code class=\"type\">(unit -&gt; 'a) -&gt; 'a <a href=\"Lazy.html#TYPEt\">t</a></code>", "(unit -> 'a) -> 'a t"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_file_bin", "Scanf.Scanning.html#VALfrom_file_bin", "<div class=\"info\">  <p>An alias for <a href=\"Scanf.Scanning.html#VALopen_in_bin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.open_in_bin</code></a> above.</p> </div>", "  An alias for Scanf.Scanning.open_in_bin above. ", "<code class=\"type\">string -&gt; <a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "string -> in_channel"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_file", "Scanf.Scanning.html#VALfrom_file", "<div class=\"info\">  <p>An alias for <a href=\"Scanf.Scanning.html#VALopen_in\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.open_in</code></a> above.</p> </div>", "  An alias for Scanf.Scanning.open_in above. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEfile_name\">file_name</a> -&gt; <a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "file_name -> in_channel"],
["Lexing", "Lexing.html", "from_channel", "Lexing.html#VALfrom_channel", "<div class=\"info\">  <p>Create a lexer buffer on the given input channel.</p> </div>", "  Create a lexer buffer on the given input channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Lexing.html#TYPElexbuf\">lexbuf</a></code>", "in_channel -> lexbuf"],
["Marshal", "Marshal.html", "from_channel", "Marshal.html#VALfrom_channel", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel&nbsp;chan</code> reads from channel <code class=\"code\">chan</code> the byte representation of a structured value, as produced by one of the <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_*</code> functions, and reconstructs and returns the corresponding value.</p> </div>", "  Marshal.from_channel\194\160chan reads from channel chan the byte representation of a structured value, as produced by one of the Marshal.to_* functions, and reconstructs and returns the corresponding value. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; 'a</code>", "in_channel -> 'a"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_channel", "Scanf.Scanning.html#VALfrom_channel", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_channel&nbsp;ic</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel which reads from the regular <a href=\"Pervasives.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> input channel <code class=\"code\">ic</code> argument.</p> </div>", "  Scanning.from_channel\194\160ic returns a Scanf.Scanning.in_channel formatted input channel which reads from the regular in_channel input channel ic argument. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a></code>", "in_channel -> in_channel"],
["Marshal", "Marshal.html", "from_bytes", "Marshal.html#VALfrom_bytes", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes&nbsp;buff&nbsp;ofs</code> unmarshals a structured value like <a href=\"Marshal.html#VALfrom_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code></a> does, except that the byte representation is not read from a channel, but taken from the byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>.</p> </div>", "  Marshal.from_bytes\194\160buff\194\160ofs unmarshals a structured value like Marshal.from_channel does, except that the byte representation is not read from a channel, but taken from the byte sequence buff, starting at position ofs. ", "<code class=\"type\">bytes -&gt; int -&gt; 'a</code>", "bytes -> int -> 'a"],
["Stream", "Stream.html", "from", "Stream.html#VALfrom", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Stream</span>.from&nbsp;f</code> returns a stream built from the function <code class=\"code\">f</code>.</p> </div>", "  Stream.from\194\160f returns a stream built from the function f. ", "<code class=\"type\">(int -&gt; 'a option) -&gt; 'a <a href=\"Stream.html#TYPEt\">t</a></code>", "(int -> 'a option) -> 'a t"],
["Float", "Float.html", "frexp", "Float.html#VALfrexp", "<div class=\"info\">  <p><code class=\"code\">frexp&nbsp;f</code> returns the pair of the significant and the exponent of <code class=\"code\">f</code>.</p> </div>", "  frexp\194\160f returns the pair of the significant and the exponent of f. ", "<code class=\"type\">float -&gt; float * int</code>", "float -> float * int"],
["Pervasives", "Pervasives.html", "frexp", "Pervasives.html#VALfrexp", "<div class=\"info\">  <p><code class=\"code\">frexp&nbsp;f</code> returns the pair of the significant and the exponent of <code class=\"code\">f</code>.</p> </div>", "  frexp\194\160f returns the pair of the significant and the exponent of f. ", "<code class=\"type\">float -&gt; float * int</code>", "float -> float * int"],
["CamlinternalFormat", "CamlinternalFormat.html", "freeze_char_set", "CamlinternalFormat.html#VALfreeze_char_set", "", "", "<code class=\"type\"><a href=\"CamlinternalFormat.html#TYPEmutable_char_set\">mutable_char_set</a> -&gt; <a href=\"CamlinternalFormatBasics.html#TYPEchar_set\">CamlinternalFormatBasics.char_set</a></code>", "mutable_char_set -> CamlinternalFormatBasics.char_set"],
["Depend", "Depend.html", "free_structure_names", "Depend.html#VALfree_structure_names", "", "", "<code class=\"type\">StringSet.t <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "StringSet.t ref"],
["Format", "Format.html", "fprintf", "Format.html#VALfprintf", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a> -&gt; ('a, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "formatter -> ('a, formatter, unit) format -> 'a"],
["Printf", "Printf.html", "fprintf", "Printf.html#VALfprintf", "<div class=\"info\">  <p><code class=\"code\">fprintf&nbsp;outchan&nbsp;format&nbsp;arg1&nbsp;...&nbsp;argN</code> formats the arguments <code class=\"code\">arg1</code> to <code class=\"code\">argN</code> according to the format string <code class=\"code\">format</code>, and outputs the resulting string on the channel <code class=\"code\">outchan</code>.</p> </div>", "  fprintf\194\160outchan\194\160format\194\160arg1\194\160...\194\160argN formats the arguments arg1 to argN according to the format string format, and outputs the resulting string on the channel outchan. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt;<br>       ('a, <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "out_channel ->       ('a, out_channel, unit) format -> 'a"],
["Obj", "Obj.html", "forward_tag", "Obj.html#VALforward_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Bigarray", "Bigarray.html", "fortran_layout", "Bigarray.html#VALfortran_layout", "", "", "<code class=\"type\"><a href=\"Bigarray.html#TYPEfortran_layout\">fortran_layout</a> <a href=\"Bigarray.html#TYPElayout\">layout</a></code>", "fortran_layout layout"],
["Format", "Format.html", "formatter_of_symbolic_output_buffer", "Format.html#VALformatter_of_symbolic_output_buffer", "<div class=\"info\">  <p><code class=\"code\">formatter_of_symbolic_output_buffer&nbsp;sob</code> returns a symbolic formatter that outputs to <code class=\"code\">symbolic_output_buffer</code> <code class=\"code\">sob</code>.</p> </div>", "  formatter_of_symbolic_output_buffer\194\160sob returns a symbolic formatter that outputs to symbolic_output_buffer sob. ", "<code class=\"type\"><a href=\"Format.html#TYPEsymbolic_output_buffer\">symbolic_output_buffer</a> -&gt; <a href=\"Format.html#TYPEformatter\">formatter</a></code>", "symbolic_output_buffer -> formatter"],
["Format", "Format.html", "formatter_of_out_functions", "Format.html#VALformatter_of_out_functions", "<div class=\"info\">  <p><code class=\"code\">formatter_of_out_functions&nbsp;out_funs</code> returns a new formatter that writes with the set of output functions <code class=\"code\">out_funs</code>.</p> </div>", "  formatter_of_out_functions\194\160out_funs returns a new formatter that writes with the set of output functions out_funs. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter_out_functions\">formatter_out_functions</a> -&gt; <a href=\"Format.html#TYPEformatter\">formatter</a></code>", "formatter_out_functions -> formatter"],
["Format", "Format.html", "formatter_of_out_channel", "Format.html#VALformatter_of_out_channel", "<div class=\"info\">  <p><code class=\"code\">formatter_of_out_channel&nbsp;oc</code> returns a new formatter writing to the corresponding output channel <code class=\"code\">oc</code>.</p> </div>", "  formatter_of_out_channel\194\160oc returns a new formatter writing to the corresponding output channel oc. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Format.html#TYPEformatter\">formatter</a></code>", "out_channel -> formatter"],
["Format", "Format.html", "formatter_of_buffer", "Format.html#VALformatter_of_buffer", "<div class=\"info\">  <p><code class=\"code\">formatter_of_buffer&nbsp;b</code> returns a new formatter writing to buffer <code class=\"code\">b</code>.</p> </div>", "  formatter_of_buffer\194\160b returns a new formatter writing to buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">Buffer.t</a> -&gt; <a href=\"Format.html#TYPEformatter\">formatter</a></code>", "Buffer.t -> formatter"],
["Location", "Location.html", "formatter_for_warnings", "Location.html#VALformatter_for_warnings", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Format.formatter ref"],
["CamlinternalFormat", "CamlinternalFormat.html", "format_of_string_format", "CamlinternalFormat.html#VALformat_of_string_format", "", "", "<code class=\"type\">string -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">CamlinternalFormatBasics.format6</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">CamlinternalFormatBasics.format6</a></code>", "string ->       ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6 ->       ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6"],
["CamlinternalFormat", "CamlinternalFormat.html", "format_of_string_fmtty", "CamlinternalFormat.html#VALformat_of_string_fmtty", "", "", "<code class=\"type\">string -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">CamlinternalFormatBasics.fmtty</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">CamlinternalFormatBasics.format6</a></code>", "string ->       ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmtty ->       ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6"],
["Pervasives", "Pervasives.html", "format_of_string", "Pervasives.html#VALformat_of_string", "<div class=\"info\">  <p><code class=\"code\">format_of_string&nbsp;s</code> returns a format string read from the string literal <code class=\"code\">s</code>.</p> </div>", "  format_of_string\194\160s returns a format string read from the string literal s. ", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a></code>", "('a, 'b, 'c, 'd, 'e, 'f) format6 ->       ('a, 'b, 'c, 'd, 'e, 'f) format6"],
["Scanf", "Scanf.html", "format_from_string", "Scanf.html#VALformat_from_string", "<div class=\"info\">  <p><code class=\"code\">format_from_string&nbsp;s&nbsp;fmt</code> converts a string argument to a format string, according to the given format string <code class=\"code\">fmt</code>.</p> </div>", "  format_from_string\194\160s\194\160fmt converts a string argument to a format string, according to the given format string fmt. ", "<code class=\"type\">string -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a></code>", "string ->       ('a, 'b, 'c, 'd, 'e, 'f) format6 ->       ('a, 'b, 'c, 'd, 'e, 'f) format6"],
["Printexc.Slot", "Printexc.Slot.html", "format", "Printexc.Slot.html#VALformat", "<div class=\"info\">  <p><code class=\"code\">format&nbsp;pos&nbsp;slot</code> returns the string representation of <code class=\"code\">slot</code> as <code class=\"code\">raw_backtrace_to_string</code> would format it, assuming it is the <code class=\"code\">pos</code>-th element of the backtrace: the <code class=\"code\">0</code>-th element is pretty-printed differently than the others.</p> </div>", "  format\194\160pos\194\160slot returns the string representation of slot as raw_backtrace_to_string would format it, assuming it is the pos-th element of the backtrace: the 0-th element is pretty-printed differently than the others. ", "<code class=\"type\">int -&gt; <a href=\"Printexc.Slot.html#TYPEt\">t</a> -&gt; string option</code>", "int -> t -> string option"],
["Unix", "Unix.html", "fork", "Unix.html#VALfork", "<div class=\"info\">  <p>Fork a new process.</p> </div>", "  Fork a new process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["UnixLabels", "UnixLabels.html", "fork", "UnixLabels.html#VALfork", "<div class=\"info\">  <p>Fork a new process.</p> </div>", "  Fork a new process. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Graphics", "Graphics.html", "foreground", "Graphics.html#VALforeground", "<div class=\"info\">  <p>Default background and foreground colors (usually, either black foreground on a white background or white foreground on a black background).</p> </div>", "  Default background and foreground colors (usually, either black foreground on a white background or white foreground on a black background). ", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["CamlinternalLazy", "CamlinternalLazy.html", "force_val_lazy_block", "CamlinternalLazy.html#VALforce_val_lazy_block", "", "", "<code class=\"type\">'a lazy_t -&gt; 'a</code>", "'a lazy_t -> 'a"],
["CamlinternalLazy", "CamlinternalLazy.html", "force_val", "CamlinternalLazy.html#VALforce_val", "", "", "<code class=\"type\">'a lazy_t -&gt; 'a</code>", "'a lazy_t -> 'a"],
["Lazy", "Lazy.html", "force_val", "Lazy.html#VALforce_val", "<div class=\"info\">  <p><code class=\"code\">force_val&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its result.</p> </div>", "  force_val\194\160x forces the suspension x and returns its result. ", "<code class=\"type\">'a <a href=\"Lazy.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Clflags", "Clflags.html", "force_slash", "Clflags.html#VALforce_slash", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "force_poly", "Ast_helper.Typ.html#VALforce_poly", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Parsetree.core_type -> Parsetree.core_type"],
["Format", "Format.html", "force_newline", "Format.html#VALforce_newline", "<div class=\"info\">  <p>Force a new line in the current pretty-printing box.</p> </div>", "  Force a new line in the current pretty-printing box. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["CamlinternalLazy", "CamlinternalLazy.html", "force_lazy_block", "CamlinternalLazy.html#VALforce_lazy_block", "", "", "<code class=\"type\">'a lazy_t -&gt; 'a</code>", "'a lazy_t -> 'a"],
["CamlinternalLazy", "CamlinternalLazy.html", "force", "CamlinternalLazy.html#VALforce", "", "", "<code class=\"type\">'a lazy_t -&gt; 'a</code>", "'a lazy_t -> 'a"],
["Lazy", "Lazy.html", "force", "Lazy.html#VALforce", "<div class=\"info\">  <p><code class=\"code\">force&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its result.</p> </div>", "  force\194\160x forces the suspension x and returns its result. ", "<code class=\"type\">'a <a href=\"Lazy.html#TYPEt\">t</a> -&gt; 'a</code>", "'a t -> 'a"],
["Clflags", "Clflags.html", "for_package", "Clflags.html#VALfor_package", "", "", "<code class=\"type\">string option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string option ref"],
["List", "List.html", "for_all2", "List.html#VALfor_all2", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.</p> </div>", "  Same as List.for_all, but for a two-argument predicate. ", "<code class=\"type\">('a -&gt; 'b -&gt; bool) -&gt; 'a list -&gt; 'b list -&gt; bool</code>", "('a -> 'b -> bool) -> 'a list -> 'b list -> bool"],
["ListLabels", "ListLabels.html", "for_all2", "ListLabels.html#VALfor_all2", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.</p> </div>", "  Same as List.for_all, but for a two-argument predicate. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; bool) -&gt; 'a list -&gt; 'b list -&gt; bool</code>", "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool"],
["Misc", "Misc.html", "for_all2", "Misc.html#VALfor_all2", "", "", "<code class=\"type\">('a -&gt; 'b -&gt; bool) -&gt; 'a list -&gt; 'b list -&gt; bool</code>", "('a -> 'b -> bool) -> 'a list -> 'b list -> bool"],
["Array", "Array.html", "for_all", "Array.html#VALfor_all", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  Array.for_all\194\160p\194\160[|a1;\194\160...;\194\160an|] checks if all elements of the array satisfy the predicate p. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a array -&gt; bool</code>", "('a -> bool) -> 'a array -> bool"],
["ArrayLabels", "ArrayLabels.html", "for_all", "ArrayLabels.html#VALfor_all", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  Array.for_all\194\160p\194\160[|a1;\194\160...;\194\160an|] checks if all elements of the array satisfy the predicate p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a array -&gt; bool</code>", "f:('a -> bool) -> 'a array -> bool"],
["Set.S", "Set.S.html", "for_all", "Set.S.html#VALfor_all", "<div class=\"info\">  <p><code class=\"code\">for_all&nbsp;p&nbsp;s</code> checks if all elements of the set satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  for_all\194\160p\194\160s checks if all elements of the set satisfy the predicate p. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "(elt -> bool) -> t -> bool"],
["Map.S", "Map.S.html", "for_all", "Map.S.html#VALfor_all", "<div class=\"info\">  <p><code class=\"code\">for_all&nbsp;p&nbsp;m</code> checks if all the bindings of the map satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  for_all\194\160p\194\160m checks if all the bindings of the map satisfy the predicate p. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "(key -> 'a -> bool) -> 'a t -> bool"],
["List", "List.html", "for_all", "List.html#VALfor_all", "<div class=\"info\">  <p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  for_all\194\160p\194\160[a1;\194\160...;\194\160an] checks if all elements of the list satisfy the predicate p. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a list -&gt; bool</code>", "('a -> bool) -> 'a list -> bool"],
["ListLabels", "ListLabels.html", "for_all", "ListLabels.html#VALfor_all", "<div class=\"info\">  <p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  for_all\194\160p\194\160[a1;\194\160...;\194\160an] checks if all elements of the list satisfy the predicate p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a list -&gt; bool</code>", "f:('a -> bool) -> 'a list -> bool"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "for_all", "MoreLabels.Map.S.html#VALfor_all", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "f:(key -> 'a -> bool) -> 'a t -> bool"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "for_all", "MoreLabels.Set.S.html#VALfor_all", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "f:(elt -> bool) -> t -> bool"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "for_", "Ast_helper.Exp.html#VALfor_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEdirection_flag\">Asttypes.direction_flag</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern ->       Parsetree.expression ->       Parsetree.expression ->       Asttypes.direction_flag -> Parsetree.expression -> Parsetree.expression"],
["Misc", "Misc.html", "for4", "Misc.html#VALfor4", "", "", "<code class=\"type\">'a * 'b * 'c * 'd -&gt; 'd</code>", "'a * 'b * 'c * 'd -> 'd"],
["List", "List.html", "fold_right2", "List.html#VALfold_right2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.</p> </div>", "  List.fold_right2\194\160f\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn]\194\160c is f\194\160a1\194\160b1\194\160(f\194\160a2\194\160b2\194\160(...\194\160(f\194\160an\194\160bn\194\160c)\194\160...)). ", "<code class=\"type\">('a -&gt; 'b -&gt; 'c -&gt; 'c) -&gt; 'a list -&gt; 'b list -&gt; 'c -&gt; 'c</code>", "('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c"],
["ListLabels", "ListLabels.html", "fold_right2", "ListLabels.html#VALfold_right2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.</p> </div>", "  List.fold_right2\194\160f\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn]\194\160c is f\194\160a1\194\160b1\194\160(f\194\160a2\194\160b2\194\160(...\194\160(f\194\160an\194\160bn\194\160c)\194\160...)). ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'c -&gt; 'c) -&gt; 'a list -&gt; 'b list -&gt; init:'c -&gt; 'c</code>", "f:('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> init:'c -> 'c"],
["Array", "Array.html", "fold_right", "Array.html#VALfold_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p> </div>", "  Array.fold_right\194\160f\194\160a\194\160x computes f\194\160a.(0)\194\160(f\194\160a.(1)\194\160(\194\160...\194\160(f\194\160a.(n-1)\194\160x)\194\160...)), where n is the length of the array a. ", "<code class=\"type\">('b -&gt; 'a -&gt; 'a) -&gt; 'b array -&gt; 'a -&gt; 'a</code>", "('b -> 'a -> 'a) -> 'b array -> 'a -> 'a"],
["ArrayLabels", "ArrayLabels.html", "fold_right", "ArrayLabels.html#VALfold_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p> </div>", "  Array.fold_right\194\160f\194\160a\194\160x computes f\194\160a.(0)\194\160(f\194\160a.(1)\194\160(\194\160...\194\160(f\194\160a.(n-1)\194\160x)\194\160...)), where n is the length of the array a. ", "<code class=\"type\">f:('b -&gt; 'a -&gt; 'a) -&gt; 'b array -&gt; init:'a -&gt; 'a</code>", "f:('b -> 'a -> 'a) -> 'b array -> init:'a -> 'a"],
["List", "List.html", "fold_right", "List.html#VALfold_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.</p> </div>", "  List.fold_right\194\160f\194\160[a1;\194\160...;\194\160an]\194\160b is f\194\160a1\194\160(f\194\160a2\194\160(...\194\160(f\194\160an\194\160b)\194\160...)). ", "<code class=\"type\">('a -&gt; 'b -&gt; 'b) -&gt; 'a list -&gt; 'b -&gt; 'b</code>", "('a -> 'b -> 'b) -> 'a list -> 'b -> 'b"],
["ListLabels", "ListLabels.html", "fold_right", "ListLabels.html#VALfold_right", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.</p> </div>", "  List.fold_right\194\160f\194\160[a1;\194\160...;\194\160an]\194\160b is f\194\160a1\194\160(f\194\160a2\194\160(...\194\160(f\194\160an\194\160b)\194\160...)). ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'b) -&gt; 'a list -&gt; init:'b -&gt; 'b</code>", "f:('a -> 'b -> 'b) -> 'a list -> init:'b -> 'b"],
["List", "List.html", "fold_left2", "List.html#VALfold_left2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.</p> </div>", "  List.fold_left2\194\160f\194\160a\194\160[b1;\194\160...;\194\160bn]\194\160[c1;\194\160...;\194\160cn] is f\194\160(...\194\160(f\194\160(f\194\160a\194\160b1\194\160c1)\194\160b2\194\160c2)\194\160...)\194\160bn\194\160cn. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'c -&gt; 'a) -&gt; 'a -&gt; 'b list -&gt; 'c list -&gt; 'a</code>", "('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a"],
["ListLabels", "ListLabels.html", "fold_left2", "ListLabels.html#VALfold_left2", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.</p> </div>", "  List.fold_left2\194\160f\194\160a\194\160[b1;\194\160...;\194\160bn]\194\160[c1;\194\160...;\194\160cn] is f\194\160(...\194\160(f\194\160(f\194\160a\194\160b1\194\160c1)\194\160b2\194\160c2)\194\160...)\194\160bn\194\160cn. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'c -&gt; 'a) -&gt; init:'a -&gt; 'b list -&gt; 'c list -&gt; 'a</code>", "f:('a -> 'b -> 'c -> 'a) -> init:'a -> 'b list -> 'c list -> 'a"],
["Array", "Array.html", "fold_left", "Array.html#VALfold_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p> </div>", "  Array.fold_left\194\160f\194\160x\194\160a computes f\194\160(...\194\160(f\194\160(f\194\160x\194\160a.(0))\194\160a.(1))\194\160...)\194\160a.(n-1), where n is the length of the array a. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'a) -&gt; 'a -&gt; 'b array -&gt; 'a</code>", "('a -> 'b -> 'a) -> 'a -> 'b array -> 'a"],
["ArrayLabels", "ArrayLabels.html", "fold_left", "ArrayLabels.html#VALfold_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p> </div>", "  Array.fold_left\194\160f\194\160x\194\160a computes f\194\160(...\194\160(f\194\160(f\194\160x\194\160a.(0))\194\160a.(1))\194\160...)\194\160a.(n-1), where n is the length of the array a. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'a) -&gt; init:'a -&gt; 'b array -&gt; 'a</code>", "f:('a -> 'b -> 'a) -> init:'a -> 'b array -> 'a"],
["List", "List.html", "fold_left", "List.html#VALfold_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p> </div>", "  List.fold_left\194\160f\194\160a\194\160[b1;\194\160...;\194\160bn] is f\194\160(...\194\160(f\194\160(f\194\160a\194\160b1)\194\160b2)\194\160...)\194\160bn. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'a) -&gt; 'a -&gt; 'b list -&gt; 'a</code>", "('a -> 'b -> 'a) -> 'a -> 'b list -> 'a"],
["ListLabels", "ListLabels.html", "fold_left", "ListLabels.html#VALfold_left", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p> </div>", "  List.fold_left\194\160f\194\160a\194\160[b1;\194\160...;\194\160bn] is f\194\160(...\194\160(f\194\160(f\194\160a\194\160b1)\194\160b2)\194\160...)\194\160bn. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; 'a) -&gt; init:'a -&gt; 'b list -&gt; 'a</code>", "f:('a -> 'b -> 'a) -> init:'a -> 'b list -> 'a"],
["Seq", "Seq.html", "fold_left", "Seq.html#VALfold_left", "<div class=\"info\">  <p>Traverse the sequence from left to right, combining each element with the accumulator using the given function.</p> </div>", "  Traverse the sequence from left to right, combining each element with the accumulator using the given function. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'a) -&gt; 'a -&gt; 'b <a href=\"Seq.html#TYPEt\">t</a> -&gt; 'a</code>", "('a -> 'b -> 'a) -> 'a -> 'b t -> 'a"],
["Set.S", "Set.S.html", "fold", "Set.S.html#VALfold", "<div class=\"info\">  <p><code class=\"code\">fold&nbsp;f&nbsp;s&nbsp;a</code> computes <code class=\"code\">(f&nbsp;xN&nbsp;...&nbsp;(f&nbsp;x2&nbsp;(f&nbsp;x1&nbsp;a))...)</code>, where <code class=\"code\">x1&nbsp;...&nbsp;xN</code> are the elements of <code class=\"code\">s</code>, in increasing order.</p> </div>", "  fold\194\160f\194\160s\194\160a computes (f\194\160xN\194\160...\194\160(f\194\160x2\194\160(f\194\160x1\194\160a))...), where x1\194\160...\194\160xN are the elements of s, in increasing order. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; 'a -&gt; 'a) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; 'a -&gt; 'a</code>", "(elt -> 'a -> 'a) -> t -> 'a -> 'a"],
["Map.S", "Map.S.html", "fold", "Map.S.html#VALfold", "<div class=\"info\">  <p><code class=\"code\">fold&nbsp;f&nbsp;m&nbsp;a</code> computes <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;a)...)</code>, where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">m</code> (in increasing order), and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated data.</p> </div>", "  fold\194\160f\194\160m\194\160a computes (f\194\160kN\194\160dN\194\160...\194\160(f\194\160k1\194\160d1\194\160a)...), where k1\194\160...\194\160kN are the keys of all bindings in m (in increasing order), and d1\194\160...\194\160dN are the associated data. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'b -&gt; 'b) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'b -&gt; 'b</code>", "(key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b"],
["Hashtbl", "Hashtbl.html", "fold", "Hashtbl.html#VALfold", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.fold&nbsp;f&nbsp;tbl&nbsp;init</code> computes <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;init)...)</code>, where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">tbl</code>, and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated values.</p> </div>", "  Hashtbl.fold\194\160f\194\160tbl\194\160init computes (f\194\160kN\194\160dN\194\160...\194\160(f\194\160k1\194\160d1\194\160init)...), where k1\194\160...\194\160kN are the keys of all bindings in tbl, and d1\194\160...\194\160dN are the associated values. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'c -&gt; 'c) -&gt; ('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'c -&gt; 'c</code>", "('a -> 'b -> 'c -> 'c) -> ('a, 'b) t -> 'c -> 'c"],
["Hashtbl.S", "Hashtbl.S.html", "fold", "Hashtbl.S.html#VALfold", "", "", "<code class=\"type\">(<a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'b -&gt; 'b) -&gt; 'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; 'b -&gt; 'b</code>", "(key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "fold", "Hashtbl.SeededS.html#VALfold", "", "", "<code class=\"type\">(<a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'b -&gt; 'b) -&gt; 'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; 'b -&gt; 'b</code>", "(key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b"],
["Misc.Stdlib.Option", "Misc.Stdlib.Option.html", "fold", "Misc.Stdlib.Option.html#VALfold", "", "", "<code class=\"type\">('a -&gt; 'b -&gt; 'b) -&gt; 'a <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a> -&gt; 'b -&gt; 'b</code>", "('a -> 'b -> 'b) -> 'a t -> 'b -> 'b"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "fold", "MoreLabels.Hashtbl.html#VALfold", "", "", "<code class=\"type\">f:(key:'a -&gt; data:'b -&gt; 'c -&gt; 'c) -&gt;<br>       ('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; init:'c -&gt; 'c</code>", "f:(key:'a -> data:'b -> 'c -> 'c) ->       ('a, 'b) t -> init:'c -> 'c"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "fold", "MoreLabels.Hashtbl.S.html#VALfold", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; data:'a -&gt; 'b -&gt; 'b) -&gt;<br>       'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; init:'b -&gt; 'b</code>", "f:(key:key -> data:'a -> 'b -> 'b) ->       'a t -> init:'b -> 'b"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "fold", "MoreLabels.Hashtbl.SeededS.html#VALfold", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; data:'a -&gt; 'b -&gt; 'b) -&gt;<br>       'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; init:'b -&gt; 'b</code>", "f:(key:key -> data:'a -> 'b -> 'b) ->       'a t -> init:'b -> 'b"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "fold", "MoreLabels.Map.S.html#VALfold", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; data:'a -&gt; 'b -&gt; 'b) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; init:'b -&gt; 'b</code>", "f:(key:key -> data:'a -> 'b -> 'b) ->       'a t -> init:'b -> 'b"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "fold", "MoreLabels.Set.S.html#VALfold", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; 'a -&gt; 'a) -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; init:'a -&gt; 'a</code>", "f:(elt -> 'a -> 'a) -> t -> init:'a -> 'a"],
["Queue", "Queue.html", "fold", "Queue.html#VALfold", "<div class=\"info\">  <p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;q</code> is equivalent to <code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;accu&nbsp;l</code>, where <code class=\"code\">l</code> is the list of <code class=\"code\">q</code>'s elements.</p> </div>", "  fold\194\160f\194\160accu\194\160q is equivalent to List.fold_left\194\160f\194\160accu\194\160l, where l is the list of q's elements. ", "<code class=\"type\">('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'b</code>", "('b -> 'a -> 'b) -> 'b -> 'a t -> 'b"],
["Stack", "Stack.html", "fold", "Stack.html#VALfold", "<div class=\"info\">  <p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;s</code> is <code class=\"code\">(f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;accu&nbsp;x1)&nbsp;x2)&nbsp;...)&nbsp;xn)</code> where <code class=\"code\">x1</code> is the top of the stack, <code class=\"code\">x2</code> the second element, and <code class=\"code\">xn</code> the bottom element.</p> </div>", "  fold\194\160f\194\160accu\194\160s is (f\194\160(...\194\160(f\194\160(f\194\160accu\194\160x1)\194\160x2)\194\160...)\194\160xn) where x1 is the top of the stack, x2 the second element, and xn the bottom element. ", "<code class=\"type\">('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; 'b</code>", "('b -> 'a -> 'b) -> 'b -> 'a t -> 'b"],
["Tbl", "Tbl.html", "fold", "Tbl.html#VALfold", "", "", "<code class=\"type\">('k -&gt; 'v -&gt; 'acc -&gt; 'acc) -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; 'acc -&gt; 'acc</code>", "('k -> 'v -> 'acc -> 'acc) -> ('k, 'v) t -> 'acc -> 'acc"],
["Weak.S", "Weak.S.html", "fold", "Weak.S.html#VALfold", "<div class=\"info\">  <p><code class=\"code\">fold&nbsp;f&nbsp;t&nbsp;init</code> computes <code class=\"code\">(f&nbsp;d1&nbsp;(...&nbsp;(f&nbsp;dN&nbsp;init)))</code> where <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the elements of <code class=\"code\">t</code> in some unspecified order.</p> </div>", "  fold\194\160f\194\160t\194\160init computes (f\194\160d1\194\160(...\194\160(f\194\160dN\194\160init))) where d1\194\160...\194\160dN are the elements of t in some unspecified order. ", "<code class=\"type\">(<a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; 'a -&gt; 'a) -&gt; <a href=\"Weak.S.html#TYPEt\">t</a> -&gt; 'a -&gt; 'a</code>", "(data -> 'a -> 'a) -> t -> 'a -> 'a"],
["CamlinternalFormat", "CamlinternalFormat.html", "fmt_ebb_of_string", "CamlinternalFormat.html#VALfmt_ebb_of_string", "", "", "<code class=\"type\">?legacy_behavior:bool -&gt;<br>       string -&gt; ('b, 'c, 'e, 'f) <a href=\"CamlinternalFormat.html#TYPEfmt_ebb\">fmt_ebb</a></code>", "?legacy_behavior:bool ->       string -> ('b, 'c, 'e, 'f) fmt_ebb"],
["Format", "Format.html", "flush_symbolic_output_buffer", "Format.html#VALflush_symbolic_output_buffer", "<div class=\"info\">  <p><code class=\"code\">flush_symbolic_output_buffer&nbsp;sob</code> returns the contents of buffer <code class=\"code\">sob</code> and resets buffer <code class=\"code\">sob</code>.</p> </div>", "  flush_symbolic_output_buffer\194\160sob returns the contents of buffer sob and resets buffer sob. ", "<code class=\"type\"><a href=\"Format.html#TYPEsymbolic_output_buffer\">symbolic_output_buffer</a> -&gt; <a href=\"Format.html#TYPEsymbolic_output_item\">symbolic_output_item</a> list</code>", "symbolic_output_buffer -> symbolic_output_item list"],
["Format", "Format.html", "flush_str_formatter", "Format.html#VALflush_str_formatter", "<div class=\"info\">  <p>Returns the material printed with <code class=\"code\">str_formatter</code>, flushes the formatter and resets the corresponding buffer.</p> </div>", "  Returns the material printed with str_formatter, flushes the formatter and resets the corresponding buffer. ", "<code class=\"type\">unit -&gt; string</code>", "unit -> string"],
["Lexing", "Lexing.html", "flush_input", "Lexing.html#VALflush_input", "<div class=\"info\">  <p>Discard the contents of the buffer and reset the current position to 0.</p> </div>", "  Discard the contents of the buffer and reset the current position to 0. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; unit</code>", "lexbuf -> unit"],
["Pervasives", "Pervasives.html", "flush_all", "Pervasives.html#VALflush_all", "<div class=\"info\">  <p>Flush all open output channels; ignore errors.</p> </div>", "  Flush all open output channels; ignore errors. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Pervasives", "Pervasives.html", "flush", "Pervasives.html#VALflush", "<div class=\"info\">  <p>Flush the buffer associated with the given output channel, performing all pending writes on that channel.</p> </div>", "  Flush the buffer associated with the given output channel, performing all pending writes on that channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "out_channel -> unit"],
["Float", "Float.html", "floor", "Float.html#VALfloor", "<div class=\"info\">  <p>Round below to an integer value.</p> </div>", "  Round below to an integer value. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "floor", "Pervasives.html#VALfloor", "<div class=\"info\">  <p>Round below to an integer value.</p> </div>", "  Round below to an integer value. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "float_of_string_opt", "Pervasives.html#VALfloat_of_string_opt", "<div class=\"info\">  <p>Same as <code class=\"code\">float_of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p> </div>", "  Same as float_of_string, but returns None instead of raising. ", "<code class=\"type\">string -&gt; float option</code>", "string -> float option"],
["Pervasives", "Pervasives.html", "float_of_string", "Pervasives.html#VALfloat_of_string", "<div class=\"info\">  <p>Convert the given string to a float.</p> </div>", "  Convert the given string to a float. ", "<code class=\"type\">string -&gt; float</code>", "string -> float"],
["Pervasives", "Pervasives.html", "float_of_int", "Pervasives.html#VALfloat_of_int", "<div class=\"info\">  <p>Convert an integer to floating-point.</p> </div>", "  Convert an integer to floating-point. ", "<code class=\"type\">int -&gt; float</code>", "int -> float"],
["Int32", "Int32.html", "float_of_bits", "Int32.html#VALfloat_of_bits", "<div class=\"info\">  <p>Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'single format' bit layout, is the given <code class=\"code\">int32</code>.</p> </div>", "  Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'single format' bit layout, is the given int32. ", "<code class=\"type\">int32 -&gt; float</code>", "int32 -> float"],
["Int64", "Int64.html", "float_of_bits", "Int64.html#VALfloat_of_bits", "<div class=\"info\">  <p>Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'double format' bit layout, is the given <code class=\"code\">int64</code>.</p> </div>", "  Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'double format' bit layout, is the given int64. ", "<code class=\"type\">int64 -&gt; float</code>", "int64 -> float"],
["Clflags", "Clflags.html", "float_const_prop", "Clflags.html#VALfloat_const_prop", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Bigarray", "Bigarray.html", "float64", "Bigarray.html#VALfloat64", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(float, <a href=\"Bigarray.html#TYPEfloat64_elt\">float64_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(float, float64_elt) kind"],
["Bigarray", "Bigarray.html", "float32", "Bigarray.html#VALfloat32", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(float, <a href=\"Bigarray.html#TYPEfloat32_elt\">float32_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(float, float32_elt) kind"],
["Ast_helper.Const", "Ast_helper.Const.html", "float", "Ast_helper.Const.html#VALfloat", "", "", "<code class=\"type\">?suffix:char -&gt; string -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "?suffix:char -> string -> Parsetree.constant"],
["Pervasives", "Pervasives.html", "float", "Pervasives.html#VALfloat", "<div class=\"info\">  <p>Same as <a href=\"Pervasives.html#VALfloat_of_int\"><code class=\"code\">float_of_int</code></a>.</p> </div>", "  Same as float_of_int. ", "<code class=\"type\">int -&gt; float</code>", "int -> float"],
["Random", "Random.html", "float", "Random.html#VALfloat", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Random</span>.float&nbsp;bound</code> returns a random floating-point number between 0 and <code class=\"code\">bound</code> (inclusive).</p> </div>", "  Random.float\194\160bound returns a random floating-point number between 0 and bound (inclusive). ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Random.State", "Random.State.html", "float", "Random.State.html#VALfloat", "", "", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; float -&gt; float</code>", "t -> float -> float"],
["Config", "Config.html", "flexdll_dirs", "Config.html#VALflexdll_dirs", "", "", "<code class=\"type\">string list</code>", "string list"],
["List", "List.html", "flatten", "List.html#VALflatten", "<div class=\"info\">  <p>An alias for <code class=\"code\">concat</code>.</p> </div>", "  An alias for concat. ", "<code class=\"type\">'a list list -&gt; 'a list</code>", "'a list list -> 'a list"],
["ListLabels", "ListLabels.html", "flatten", "ListLabels.html#VALflatten", "<div class=\"info\">  <p>Same as <code class=\"code\">concat</code>.</p> </div>", "  Same as concat. ", "<code class=\"type\">'a list list -&gt; 'a list</code>", "'a list list -> 'a list"],
["Longident", "Longident.html", "flatten", "Longident.html#VALflatten", "", "", "<code class=\"type\"><a href=\"Longident.html#TYPEt\">t</a> -&gt; string list</code>", "t -> string list"],
["Seq", "Seq.html", "flat_map", "Seq.html#VALflat_map", "<div class=\"info\">  <p>Map each element to a subsequence, then return each element of this sub-sequence in turn.</p> </div>", "  Map each element to a subsequence, then return each element of this sub-sequence in turn. ", "<code class=\"type\">('a -&gt; 'b <a href=\"Seq.html#TYPEt\">t</a>) -&gt; 'a <a href=\"Seq.html#TYPEt\">t</a> -&gt; 'b <a href=\"Seq.html#TYPEt\">t</a></code>", "('a -> 'b t) -> 'a t -> 'b t"],
["Config", "Config.html", "flat_float_array", "Config.html#VALflat_float_array", "", "", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "flambda_invariant_checks", "Clflags.html#VALflambda_invariant_checks", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Config", "Config.html", "flambda", "Config.html#VALflambda", "", "", "<code class=\"type\">bool</code>", "bool"],
["Obj", "Obj.html", "first_non_constant_constructor_tag", "Obj.html#VALfirst_non_constant_constructor_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Str", "Str.html", "first_chars", "Str.html#VALfirst_chars", "<div class=\"info\">  <p><code class=\"code\">first_chars&nbsp;s&nbsp;n</code> returns the first <code class=\"code\">n</code> characters of <code class=\"code\">s</code>.</p> </div>", "  first_chars\194\160s\194\160n returns the first n characters of s. ", "<code class=\"type\">string -&gt; int -&gt; string</code>", "string -> int -> string"],
["Tbl", "Tbl.html", "find_str", "Tbl.html#VALfind_str", "", "", "<code class=\"type\">string -&gt; (string, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; 'v</code>", "string -> (string, 'v) t -> 'v"],
["Set.S", "Set.S.html", "find_opt", "Set.S.html#VALfind_opt", "<div class=\"info\">  <p><code class=\"code\">find_opt&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p> </div>", "  find_opt\194\160x\194\160s returns the element of s equal to x (according to Ord.compare), or None if no such element exists. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> option</code>", "elt -> t -> elt option"],
["Map.S", "Map.S.html", "find_opt", "Map.S.html#VALfind_opt", "<div class=\"info\">  <p><code class=\"code\">find_opt&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code> is <code class=\"code\">v</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p> </div>", "  find_opt\194\160x\194\160m returns Some\194\160v if the current binding of x in m is v, or None if no such binding exists. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a option</code>", "key -> 'a t -> 'a option"],
["Hashtbl", "Hashtbl.html", "find_opt", "Hashtbl.html#VALfind_opt", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_opt&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p> </div>", "  Hashtbl.find_opt\194\160tbl\194\160x returns the current binding of x in tbl, or None if no such binding exists. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b option</code>", "('a, 'b) t -> 'a -> 'b option"],
["Hashtbl.S", "Hashtbl.S.html", "find_opt", "Hashtbl.S.html#VALfind_opt", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a option</code>", "'a t -> key -> 'a option"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find_opt", "Hashtbl.SeededS.html#VALfind_opt", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a option</code>", "'a t -> key -> 'a option"],
["List", "List.html", "find_opt", "List.html#VALfind_opt", "<div class=\"info\">  <p><code class=\"code\">find_opt&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the list <code class=\"code\">l</code>.</p> </div>", "  find_opt\194\160p\194\160l returns the first element of the list l that satisfies the predicate p, or None if there is no value that satisfies p in the list l. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a list -&gt; 'a option</code>", "('a -> bool) -> 'a list -> 'a option"],
["ListLabels", "ListLabels.html", "find_opt", "ListLabels.html#VALfind_opt", "<div class=\"info\">  <p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  find\194\160p\194\160l returns the first element of the list l that satisfies the predicate p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a list -&gt; 'a option</code>", "f:('a -> bool) -> 'a list -> 'a option"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find_opt", "MoreLabels.Hashtbl.html#VALfind_opt", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b option</code>", "('a, 'b) t -> 'a -> 'b option"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find_opt", "MoreLabels.Hashtbl.S.html#VALfind_opt", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a option</code>", "'a t -> key -> 'a option"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find_opt", "MoreLabels.Hashtbl.SeededS.html#VALfind_opt", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt;<br>       <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a option</code>", "'a t ->       key -> 'a option"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_opt", "MoreLabels.Map.S.html#VALfind_opt", "", "", "<code class=\"type\"><a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a option</code>", "key -> 'a t -> 'a option"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_opt", "MoreLabels.Set.S.html#VALfind_opt", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> option</code>", "elt -> t -> elt option"],
["Weak.S", "Weak.S.html", "find_opt", "Weak.S.html#VALfind_opt", "<div class=\"info\">  <p><code class=\"code\">find_opt&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no such element.</p> </div>", "  find_opt\194\160t\194\160x returns an instance of x found in t or None if there is no such element. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> option</code>", "t -> data -> data option"],
["Set.S", "Set.S.html", "find_last_opt", "Set.S.html#VALfind_last_opt", "<div class=\"info\">  <p><code class=\"code\">find_last_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function, returns an option containing the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p> </div>", "  find_last_opt\194\160f\194\160s, where f is a monotonically decreasing function, returns an option containing the highest element e of s such that f\194\160e, or None if no such element exists. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> option</code>", "(elt -> bool) -> t -> elt option"],
["Map.S", "Map.S.html", "find_last_opt", "Map.S.html#VALfind_last_opt", "<div class=\"info\">  <p><code class=\"code\">find_last_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function, returns an option containing the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p> </div>", "  find_last_opt\194\160f\194\160m, where f is a monotonically decreasing function, returns an option containing the binding of m with the highest key k such that f\194\160k, or None if no such key exists. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "(key -> bool) -> 'a t -> (key * 'a) option"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_last_opt", "MoreLabels.Map.S.html#VALfind_last_opt", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "f:(key -> bool) ->       'a t -> (key * 'a) option"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_last_opt", "MoreLabels.Set.S.html#VALfind_last_opt", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt;<br>       <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> option</code>", "f:(elt -> bool) ->       t -> elt option"],
["Set.S", "Set.S.html", "find_last", "Set.S.html#VALfind_last", "<div class=\"info\">  <p><code class=\"code\">find_last&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function, returns the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p> </div>", "  find_last\194\160f\194\160s, where f is a monotonically decreasing function, returns the highest element e of s such that f\194\160e, or raises Not_found if no such element exists. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a></code>", "(elt -> bool) -> t -> elt"],
["Map.S", "Map.S.html", "find_last", "Map.S.html#VALfind_last", "<div class=\"info\">  <p><code class=\"code\">find_last&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function, returns the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p> </div>", "  find_last\194\160f\194\160m, where f is a monotonically decreasing function, returns the binding of m with the highest key k such that f\194\160k, or raises Not_found if no such key exists. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; <a href=\"Map.S.html#TYPEkey\">key</a> * 'a</code>", "(key -> bool) -> 'a t -> key * 'a"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_last", "MoreLabels.Map.S.html#VALfind_last", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a</code>", "f:(key -> bool) ->       'a t -> key * 'a"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_last", "MoreLabels.Set.S.html#VALfind_last", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt;<br>       <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a></code>", "f:(elt -> bool) ->       t -> elt"],
["Misc", "Misc.html", "find_in_path_uncap", "Misc.html#VALfind_in_path_uncap", "", "", "<code class=\"type\">string list -&gt; string -&gt; string</code>", "string list -> string -> string"],
["Misc", "Misc.html", "find_in_path_rel", "Misc.html#VALfind_in_path_rel", "", "", "<code class=\"type\">string list -&gt; string -&gt; string</code>", "string list -> string -> string"],
["Misc", "Misc.html", "find_in_path", "Misc.html#VALfind_in_path", "", "", "<code class=\"type\">string list -&gt; string -&gt; string</code>", "string list -> string -> string"],
["Set.S", "Set.S.html", "find_first_opt", "Set.S.html#VALfind_first_opt", "<div class=\"info\">  <p><code class=\"code\">find_first_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function, returns an option containing the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p> </div>", "  find_first_opt\194\160f\194\160s, where f is a monotonically increasing function, returns an option containing the lowest element e of s such that f\194\160e, or None if no such element exists. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> option</code>", "(elt -> bool) -> t -> elt option"],
["Map.S", "Map.S.html", "find_first_opt", "Map.S.html#VALfind_first_opt", "<div class=\"info\">  <p><code class=\"code\">find_first_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function, returns an option containing the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p> </div>", "  find_first_opt\194\160f\194\160m, where f is a monotonically increasing function, returns an option containing the binding of m with the lowest key k such that f\194\160k, or None if no such key exists. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "(key -> bool) -> 'a t -> (key * 'a) option"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_first_opt", "MoreLabels.Map.S.html#VALfind_first_opt", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "f:(key -> bool) ->       'a t -> (key * 'a) option"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_first_opt", "MoreLabels.Set.S.html#VALfind_first_opt", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt;<br>       <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> option</code>", "f:(elt -> bool) ->       t -> elt option"],
["Set.S", "Set.S.html", "find_first", "Set.S.html#VALfind_first", "<div class=\"info\">  <p><code class=\"code\">find_first&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function, returns the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p> </div>", "  find_first\194\160f\194\160s, where f is a monotonically increasing function, returns the lowest element e of s such that f\194\160e, or raises Not_found if no such element exists. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a></code>", "(elt -> bool) -> t -> elt"],
["Map.S", "Map.S.html", "find_first", "Map.S.html#VALfind_first", "<div class=\"info\">  <p><code class=\"code\">find_first&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function, returns the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p> </div>", "  find_first\194\160f\194\160m, where f is a monotonically increasing function, returns the binding of m with the lowest key k such that f\194\160k, or raises Not_found if no such key exists. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; <a href=\"Map.S.html#TYPEkey\">key</a> * 'a</code>", "(key -> bool) -> 'a t -> key * 'a"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_first", "MoreLabels.Map.S.html#VALfind_first", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; bool) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a</code>", "f:(key -> bool) ->       'a t -> key * 'a"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_first", "MoreLabels.Set.S.html#VALfind_first", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt;<br>       <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a></code>", "f:(elt -> bool) ->       t -> elt"],
["Hashtbl", "Hashtbl.html", "find_all", "Hashtbl.html#VALfind_all", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_all&nbsp;tbl&nbsp;x</code> returns the list of all data associated with <code class=\"code\">x</code> in <code class=\"code\">tbl</code>.</p> </div>", "  Hashtbl.find_all\194\160tbl\194\160x returns the list of all data associated with x in tbl. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b list</code>", "('a, 'b) t -> 'a -> 'b list"],
["Hashtbl.S", "Hashtbl.S.html", "find_all", "Hashtbl.S.html#VALfind_all", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a list</code>", "'a t -> key -> 'a list"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find_all", "Hashtbl.SeededS.html#VALfind_all", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a list</code>", "'a t -> key -> 'a list"],
["List", "List.html", "find_all", "List.html#VALfind_all", "<div class=\"info\">  <p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p> </div>", "  find_all is another name for List.filter. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a list -&gt; 'a list</code>", "('a -> bool) -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "find_all", "ListLabels.html#VALfind_all", "<div class=\"info\">  <p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p> </div>", "  find_all is another name for List.filter. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a list -&gt; 'a list</code>", "f:('a -> bool) -> 'a list -> 'a list"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find_all", "MoreLabels.Hashtbl.html#VALfind_all", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b list</code>", "('a, 'b) t -> 'a -> 'b list"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find_all", "MoreLabels.Hashtbl.S.html#VALfind_all", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a list</code>", "'a t -> key -> 'a list"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find_all", "MoreLabels.Hashtbl.SeededS.html#VALfind_all", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a list</code>", "'a t -> key -> 'a list"],
["Weak.S", "Weak.S.html", "find_all", "Weak.S.html#VALfind_all", "<div class=\"info\">  <p><code class=\"code\">find_all&nbsp;t&nbsp;x</code> returns a list of all the instances of <code class=\"code\">x</code> found in <code class=\"code\">t</code>.</p> </div>", "  find_all\194\160t\194\160x returns a list of all the instances of x found in t. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> list</code>", "t -> data -> data list"],
["Set.S", "Set.S.html", "find", "Set.S.html#VALfind", "<div class=\"info\">  <p><code class=\"code\">find&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p> </div>", "  find\194\160x\194\160s returns the element of s equal to x (according to Ord.compare), or raise Not_found if no such element exists. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a></code>", "elt -> t -> elt"],
["Map.S", "Map.S.html", "find", "Map.S.html#VALfind", "<div class=\"info\">  <p><code class=\"code\">find&nbsp;x&nbsp;m</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p> </div>", "  find\194\160x\194\160m returns the current binding of x in m, or raises Not_found if no such binding exists. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a</code>", "key -> 'a t -> 'a"],
["Hashtbl", "Hashtbl.html", "find", "Hashtbl.html#VALfind", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p> </div>", "  Hashtbl.find\194\160tbl\194\160x returns the current binding of x in tbl, or raises Not_found if no such binding exists. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b</code>", "('a, 'b) t -> 'a -> 'b"],
["Hashtbl.S", "Hashtbl.S.html", "find", "Hashtbl.S.html#VALfind", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a</code>", "'a t -> key -> 'a"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find", "Hashtbl.SeededS.html#VALfind", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a</code>", "'a t -> key -> 'a"],
["List", "List.html", "find", "List.html#VALfind", "<div class=\"info\">  <p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  find\194\160p\194\160l returns the first element of the list l that satisfies the predicate p. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a list -&gt; 'a</code>", "('a -> bool) -> 'a list -> 'a"],
["ListLabels", "ListLabels.html", "find", "ListLabels.html#VALfind", "<div class=\"info\">  <p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  find\194\160p\194\160l returns the first element of the list l that satisfies the predicate p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a list -&gt; 'a</code>", "f:('a -> bool) -> 'a list -> 'a"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find", "MoreLabels.Hashtbl.html#VALfind", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b</code>", "('a, 'b) t -> 'a -> 'b"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find", "MoreLabels.Hashtbl.S.html#VALfind", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a</code>", "'a t -> key -> 'a"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find", "MoreLabels.Hashtbl.SeededS.html#VALfind", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a</code>", "'a t -> key -> 'a"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find", "MoreLabels.Map.S.html#VALfind", "", "", "<code class=\"type\"><a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a</code>", "key -> 'a t -> 'a"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find", "MoreLabels.Set.S.html#VALfind", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a></code>", "elt -> t -> elt"],
["Tbl", "Tbl.html", "find", "Tbl.html#VALfind", "", "", "<code class=\"type\">'k -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; 'v</code>", "'k -> ('k, 'v) t -> 'v"],
["Weak.S", "Weak.S.html", "find", "Weak.S.html#VALfind", "<div class=\"info\">  <p><code class=\"code\">find&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>.</p> </div>", "  find\194\160t\194\160x returns an instance of x found in t. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a></code>", "t -> data -> data"],
["Gc", "Gc.html", "finalise_release", "Gc.html#VALfinalise_release", "<div class=\"info\">  <p>A finalisation function may call <code class=\"code\">finalise_release</code> to tell the GC that it can launch the next finalisation function without waiting for the current one to return.</p> </div>", "  A finalisation function may call finalise_release to tell the GC that it can launch the next finalisation function without waiting for the current one to return. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Gc", "Gc.html", "finalise_last", "Gc.html#VALfinalise_last", "<div class=\"info\">  <p>same as <a href=\"Gc.html#VALfinalise\"><code class=\"code\"><span class=\"constructor\">Gc</span>.finalise</code></a> except the value is not given as argument.</p> </div>", "  same as Gc.finalise except the value is not given as argument. ", "<code class=\"type\">(unit -&gt; unit) -&gt; 'a -&gt; unit</code>", "(unit -> unit) -> 'a -> unit"],
["Gc", "Gc.html", "finalise", "Gc.html#VALfinalise", "<div class=\"info\">  <p><code class=\"code\">finalise&nbsp;f&nbsp;v</code> registers <code class=\"code\">f</code> as a finalisation function for <code class=\"code\">v</code>.</p> </div>", "  finalise\194\160f\194\160v registers f as a finalisation function for v. ", "<code class=\"type\">('a -&gt; unit) -&gt; 'a -&gt; unit</code>", "('a -> unit) -> 'a -> unit"],
["Obj", "Obj.html", "final_tag", "Obj.html#VALfinal_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Hashtbl", "Hashtbl.html", "filter_map_inplace", "Hashtbl.html#VALfilter_map_inplace", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.filter_map_inplace&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in table <code class=\"code\">tbl</code> and update each binding depending on the result of <code class=\"code\">f</code>.</p> </div>", "  Hashtbl.filter_map_inplace\194\160f\194\160tbl applies f to all bindings in table tbl and update each binding depending on the result of f. ", "<code class=\"type\">('a -&gt; 'b -&gt; 'b option) -&gt; ('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "('a -> 'b -> 'b option) -> ('a, 'b) t -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "filter_map_inplace", "Hashtbl.S.html#VALfilter_map_inplace", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">(<a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'a option) -&gt; 'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "(key -> 'a -> 'a option) -> 'a t -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "filter_map_inplace", "Hashtbl.SeededS.html#VALfilter_map_inplace", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">(<a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'a option) -&gt; 'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "(key -> 'a -> 'a option) -> 'a t -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "filter_map_inplace", "MoreLabels.Hashtbl.html#VALfilter_map_inplace", "", "", "<code class=\"type\">f:(key:'a -&gt; data:'b -&gt; 'b option) -&gt; ('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "f:(key:'a -> data:'b -> 'b option) -> ('a, 'b) t -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "filter_map_inplace", "MoreLabels.Hashtbl.S.html#VALfilter_map_inplace", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; data:'a -&gt; 'a option) -&gt;<br>       'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "f:(key:key -> data:'a -> 'a option) ->       'a t -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "filter_map_inplace", "MoreLabels.Hashtbl.SeededS.html#VALfilter_map_inplace", "", "", "<code class=\"type\">f:(key:<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; data:'a -&gt; 'a option) -&gt;<br>       'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "f:(key:key -> data:'a -> 'a option) ->       'a t -> unit"],
["Identifiable.Map", "Identifiable.Map.html", "filter_map", "Identifiable.Map.html#VALfilter_map", "", "", "<code class=\"type\">'a t -&gt; f:(key -&gt; 'a -&gt; 'b option) -&gt; 'b t</code>", "'a t -> f:(key -> 'a -> 'b option) -> 'b t"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "filter_map", "Misc.Stdlib.List.html#VALfilter_map", "<div class=\"info\">  <p><code class=\"code\">filter_map&nbsp;f&nbsp;l</code> applies <code class=\"code\">f</code> to every element of <code class=\"code\">l</code>, filters out the <code class=\"code\"><span class=\"constructor\">None</span></code> elements and returns the list of the arguments of the <code class=\"code\"><span class=\"constructor\">Some</span></code> elements.</p> </div>", "  filter_map\194\160f\194\160l applies f to every element of l, filters out the None elements and returns the list of the arguments of the Some elements. ", "<code class=\"type\">('a -&gt; 'b option) -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'b <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a></code>", "('a -> 'b option) -> 'a t -> 'b t"],
["Seq", "Seq.html", "filter_map", "Seq.html#VALfilter_map", "<div class=\"info\">  <p>Apply the function to every element; if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">None</span></code> then <code class=\"code\">x</code> is dropped; if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;y</code> then <code class=\"code\">y</code> is returned.</p> </div>", "  Apply the function to every element; if f\194\160x\194\160=\194\160None then x is dropped; if f\194\160x\194\160=\194\160Some\194\160y then y is returned. ", "<code class=\"type\">('a -&gt; 'b option) -&gt; 'a <a href=\"Seq.html#TYPEt\">t</a> -&gt; 'b <a href=\"Seq.html#TYPEt\">t</a></code>", "('a -> 'b option) -> 'a t -> 'b t"],
["Consistbl", "Consistbl.html", "filter", "Consistbl.html#VALfilter", "", "", "<code class=\"type\">(string -&gt; bool) -&gt; <a href=\"Consistbl.html#TYPEt\">t</a> -&gt; unit</code>", "(string -> bool) -> t -> unit"],
["Set.S", "Set.S.html", "filter", "Set.S.html#VALfilter", "<div class=\"info\">  <p><code class=\"code\">filter&nbsp;p&nbsp;s</code> returns the set of all elements in <code class=\"code\">s</code> that satisfy predicate <code class=\"code\">p</code>.</p> </div>", "  filter\194\160p\194\160s returns the set of all elements in s that satisfy predicate p. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "(elt -> bool) -> t -> t"],
["Map.S", "Map.S.html", "filter", "Map.S.html#VALfilter", "<div class=\"info\">  <p><code class=\"code\">filter&nbsp;p&nbsp;m</code> returns the map with all the bindings in <code class=\"code\">m</code> that satisfy predicate <code class=\"code\">p</code>.</p> </div>", "  filter\194\160p\194\160m returns the map with all the bindings in m that satisfy predicate p. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "(key -> 'a -> bool) -> 'a t -> 'a t"],
["List", "List.html", "filter", "List.html#VALfilter", "<div class=\"info\">  <p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  filter\194\160p\194\160l returns all the elements of the list l that satisfy the predicate p. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a list -&gt; 'a list</code>", "('a -> bool) -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "filter", "ListLabels.html#VALfilter", "<div class=\"info\">  <p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>.</p> </div>", "  filter\194\160p\194\160l returns all the elements of the list l that satisfy the predicate p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a list -&gt; 'a list</code>", "f:('a -> bool) -> 'a list -> 'a list"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "filter", "MoreLabels.Map.S.html#VALfilter", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "f:(key -> 'a -> bool) ->       'a t -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "filter", "MoreLabels.Set.S.html#VALfilter", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "f:(elt -> bool) -> t -> t"],
["Seq", "Seq.html", "filter", "Seq.html#VALfilter", "<div class=\"info\">  <p>Remove from the sequence the elements that do not satisfy the given predicate.</p> </div>", "  Remove from the sequence the elements that do not satisfy the given predicate. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a <a href=\"Seq.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">t</a></code>", "('a -> bool) -> 'a t -> 'a t"],
["Graphics", "Graphics.html", "fill_rect", "Graphics.html#VALfill_rect", "<div class=\"info\">  <p><code class=\"code\">fill_rect&nbsp;x&nbsp;y&nbsp;w&nbsp;h</code> fills the rectangle with lower left corner at <code class=\"code\">x,y</code>, width <code class=\"code\">w</code> and height <code class=\"code\">h</code>, with the current color.</p> </div>", "  fill_rect\194\160x\194\160y\194\160w\194\160h fills the rectangle with lower left corner at x,y, width w and height h, with the current color. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> int -> unit"],
["Graphics", "Graphics.html", "fill_poly", "Graphics.html#VALfill_poly", "<div class=\"info\">  <p>Fill the given polygon with the current color.</p> </div>", "  Fill the given polygon with the current color. ", "<code class=\"type\">(int * int) array -&gt; unit</code>", "(int * int) array -> unit"],
["Graphics", "Graphics.html", "fill_ellipse", "Graphics.html#VALfill_ellipse", "<div class=\"info\">  <p>Fill an ellipse with the current color.</p> </div>", "  Fill an ellipse with the current color. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> int -> unit"],
["Graphics", "Graphics.html", "fill_circle", "Graphics.html#VALfill_circle", "<div class=\"info\">  <p>Fill a circle with the current color.</p> </div>", "  Fill a circle with the current color. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> unit"],
["Graphics", "Graphics.html", "fill_arc", "Graphics.html#VALfill_arc", "<div class=\"info\">  <p>Fill an elliptical pie slice with the current color.</p> </div>", "  Fill an elliptical pie slice with the current color. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> int -> int -> int -> unit"],
["Array", "Array.html", "fill", "Array.html#VALfill", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place, storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p> </div>", "  Array.fill\194\160a\194\160ofs\194\160len\194\160x modifies the array a in place, storing x in elements number ofs to ofs\194\160+\194\160len\194\160-\194\1601. ", "<code class=\"type\">'a array -&gt; int -&gt; int -&gt; 'a -&gt; unit</code>", "'a array -> int -> int -> 'a -> unit"],
["ArrayLabels", "ArrayLabels.html", "fill", "ArrayLabels.html#VALfill", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place, storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p> </div>", "  Array.fill\194\160a\194\160ofs\194\160len\194\160x modifies the array a in place, storing x in elements number ofs to ofs\194\160+\194\160len\194\160-\194\1601. ", "<code class=\"type\">'a array -&gt; pos:int -&gt; len:int -&gt; 'a -&gt; unit</code>", "'a array -> pos:int -> len:int -> 'a -> unit"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "fill", "Bigarray.Genarray.html#VALfill", "<div class=\"info\">  <p>Set all elements of a big array to a given value.</p> </div>", "  Set all elements of a big array to a given value. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> 'a -> unit"],
["Bigarray.Array0", "Bigarray.Array0.html", "fill", "Bigarray.Array0.html#VALfill", "<div class=\"info\">  <p>Fill the given big array with the given value.</p> </div>", "  Fill the given big array with the given value. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> 'a -> unit"],
["Bigarray.Array1", "Bigarray.Array1.html", "fill", "Bigarray.Array1.html#VALfill", "<div class=\"info\">  <p>Fill the given big array with the given value.</p> </div>", "  Fill the given big array with the given value. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> 'a -> unit"],
["Bigarray.Array2", "Bigarray.Array2.html", "fill", "Bigarray.Array2.html#VALfill", "<div class=\"info\">  <p>Fill the given big array with the given value.</p> </div>", "  Fill the given big array with the given value. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> 'a -> unit"],
["Bigarray.Array3", "Bigarray.Array3.html", "fill", "Bigarray.Array3.html#VALfill", "<div class=\"info\">  <p>Fill the given big array with the given value.</p> </div>", "  Fill the given big array with the given value. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; 'a -&gt; unit</code>", "('a, 'b, 'c) t -> 'a -> unit"],
["Bytes", "Bytes.html", "fill", "Bytes.html#VALfill", "<div class=\"info\">  <p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p> </div>", "  fill\194\160s\194\160start\194\160len\194\160c modifies s in place, replacing len characters with c, starting at start. ", "<code class=\"type\">bytes -&gt; int -&gt; int -&gt; char -&gt; unit</code>", "bytes -> int -> int -> char -> unit"],
["BytesLabels", "BytesLabels.html", "fill", "BytesLabels.html#VALfill", "<div class=\"info\">  <p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p> </div>", "  fill\194\160s\194\160start\194\160len\194\160c modifies s in place, replacing len characters with c, starting at start. ", "<code class=\"type\">bytes -&gt; pos:int -&gt; len:int -&gt; char -&gt; unit</code>", "bytes -> pos:int -> len:int -> char -> unit"],
["StringLabels", "StringLabels.html", "fill", "StringLabels.html#VALfill", "<div class=\"info\">  <span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> bytes by <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p> </span></div>", "  String.fill\194\160s\194\160start\194\160len\194\160c modifies byte sequence s in place, replacing len bytes by c, starting at start. ", "<code class=\"type\">bytes -&gt; pos:int -&gt; len:int -&gt; char -&gt; unit</code>", "bytes -> pos:int -> len:int -> char -> unit"],
["String", "String.html", "fill", "String.html#VALfill", "<div class=\"info\">  <span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> bytes with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p> </span></div>", "  String.fill\194\160s\194\160start\194\160len\194\160c modifies byte sequence s in place, replacing len bytes with c, starting at start. ", "<code class=\"type\">bytes -&gt; int -&gt; int -&gt; char -&gt; unit</code>", "bytes -> int -> int -> char -> unit"],
["Weak", "Weak.html", "fill", "Weak.html#VALfill", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.fill&nbsp;ar&nbsp;ofs&nbsp;len&nbsp;el</code> sets to <code class=\"code\">el</code> all pointers of <code class=\"code\">ar</code> from <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p> </div>", "  Weak.fill\194\160ar\194\160ofs\194\160len\194\160el sets to el all pointers of ar from ofs to ofs\194\160+\194\160len\194\160-\194\1601. ", "<code class=\"type\">'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; 'a option -&gt; unit</code>", "'a t -> int -> int -> 'a option -> unit"],
["Sys", "Sys.html", "file_exists", "Sys.html#VALfile_exists", "<div class=\"info\">  <p>Test if a file with the given name exists.</p> </div>", "  Test if a file with the given name exists. ", "<code class=\"type\">string -&gt; bool</code>", "string -> bool"],
["Digest", "Digest.html", "file", "Digest.html#VALfile", "<div class=\"info\">  <p>Return the digest of the file whose name is given.</p> </div>", "  Return the digest of the file whose name is given. ", "<code class=\"type\">string -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "string -> t"],
["Pparse", "Pparse.html", "file", "Pparse.html#VALfile", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt;<br>       tool_name:string -&gt;<br>       string -&gt; (<a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; 'a) -&gt; 'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; 'a</code>", "Format.formatter ->       tool_name:string ->       string -> (Lexing.lexbuf -> 'a) -> 'a ast_kind -> 'a"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "field", "Ast_helper.Exp.html#VALfield", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Ast_helper.lid -> Parsetree.expression"],
["Ast_helper.Type", "Ast_helper.Type.html", "field", "Ast_helper.Type.html#VALfield", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       ?mut:<a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPElabel_declaration\">Parsetree.label_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?info:Docstrings.info ->       ?mut:Asttypes.mutable_flag ->       Ast_helper.str -> Parsetree.core_type -> Parsetree.label_declaration"],
["Obj", "Obj.html", "field", "Obj.html#VALfield", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Obj.html#TYPEt\">t</a></code>", "t -> int -> t"],
["Unix", "Unix.html", "fchown", "Unix.html#VALfchown", "<div class=\"info\">  <p>Change the owner uid and owner gid of an opened file.</p> </div>", "  Change the owner uid and owner gid of an opened file. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; int -&gt; int -&gt; unit</code>", "file_descr -> int -> int -> unit"],
["UnixLabels", "UnixLabels.html", "fchown", "UnixLabels.html#VALfchown", "<div class=\"info\">  <p>Change the owner uid and owner gid of an opened file.</p> </div>", "  Change the owner uid and owner gid of an opened file. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; uid:int -&gt; gid:int -&gt; unit</code>", "file_descr -> uid:int -> gid:int -> unit"],
["Unix", "Unix.html", "fchmod", "Unix.html#VALfchmod", "<div class=\"info\">  <p>Change the permissions of an opened file.</p> </div>", "  Change the permissions of an opened file. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "file_descr -> file_perm -> unit"],
["UnixLabels", "UnixLabels.html", "fchmod", "UnixLabels.html#VALfchmod", "<div class=\"info\">  <p>Change the permissions of an opened file.</p> </div>", "  Change the permissions of an opened file. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; perm:<a href=\"UnixLabels.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "file_descr -> perm:file_perm -> unit"],
["Misc", "Misc.html", "fatal_errorf", "Misc.html#VALfatal_errorf", "", "", "<code class=\"type\">('a, <a href=\"Format.html#TYPEformatter\">Format.formatter</a>, unit, 'b) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "('a, Format.formatter, unit, 'b) format4 -> 'a"],
["Misc", "Misc.html", "fatal_error", "Misc.html#VALfatal_error", "", "", "<code class=\"type\">string -&gt; 'a</code>", "string -> 'a"],
["Array", "Array.html", "fast_sort", "Array.html#VALfast_sort", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster on typical input.</p> </div>", "  Same as Array.sort or Array.stable_sort, whichever is faster on typical input. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a array -&gt; unit</code>", "('a -> 'a -> int) -> 'a array -> unit"],
["ArrayLabels", "ArrayLabels.html", "fast_sort", "ArrayLabels.html#VALfast_sort", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster on typical input.</p> </div>", "  Same as Array.sort or Array.stable_sort, whichever is faster on typical input. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a array -&gt; unit</code>", "cmp:('a -> 'a -> int) -> 'a array -> unit"],
["List", "List.html", "fast_sort", "List.html#VALfast_sort", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster on typical input.</p> </div>", "  Same as List.sort or List.stable_sort, whichever is faster on typical input. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "('a -> 'a -> int) -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "fast_sort", "ListLabels.html#VALfast_sort", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster on typical input.</p> </div>", "  Same as List.sort or List.stable_sort, whichever is faster on typical input. ", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; 'a list</code>", "cmp:('a -> 'a -> int) -> 'a list -> 'a list"],
["Clflags", "Clflags.html", "fast", "Clflags.html#VALfast", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Pervasives", "Pervasives.html", "failwith", "Pervasives.html#VALfailwith", "<div class=\"info\">  <p>Raise exception <code class=\"code\"><span class=\"constructor\">Failure</span></code> with the given string.</p> </div>", "  Raise exception Failure with the given string. ", "<code class=\"type\">string -&gt; 'a</code>", "string -> 'a"],
["Consistbl", "Consistbl.html", "extract", "Consistbl.html#VALextract", "", "", "<code class=\"type\">string list -&gt; <a href=\"Consistbl.html#TYPEt\">t</a> -&gt; (string * <a href=\"Digest.html#TYPEt\">Digest.t</a> option) list</code>", "string list -> t -> (string * Digest.t option) list"],
["Ast_mapper", "Ast_mapper.html", "extension_of_error", "Ast_mapper.html#VALextension_of_error", "<div class=\"info\">  <p>Encode an error into an 'ocaml.error' extension node which can be inserted in a generated Parsetree.</p> </div>", "  Encode an error into an 'ocaml.error' extension node which can be inserted in a generated Parsetree. ", "<code class=\"type\"><a href=\"Location.html#TYPEerror\">Location.error</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a></code>", "Location.error -> Parsetree.extension"],
["Obj", "Obj.html", "extension_name", "Obj.html#VALextension_name", "", "", "<code class=\"type\">extension_constructor -&gt; string</code>", "extension_constructor -> string"],
["Obj", "Obj.html", "extension_id", "Obj.html#VALextension_id", "", "", "<code class=\"type\">extension_constructor -&gt; int</code>", "extension_constructor -> int"],
["Obj", "Obj.html", "extension_constructor", "Obj.html#VALextension_constructor", "", "", "<code class=\"type\">'a -&gt; extension_constructor</code>", "'a -> extension_constructor"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "extension", "Ast_helper.Typ.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "extension", "Ast_helper.Pat.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "extension", "Ast_helper.Exp.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.expression"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "extension", "Ast_helper.Mty.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "extension", "Ast_helper.Mod.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.module_expr"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "extension", "Ast_helper.Sig.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "extension", "Ast_helper.Str.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.structure_item"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "extension", "Ast_helper.Cty.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_type"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "extension", "Ast_helper.Ctf.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "extension", "Ast_helper.Cl.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "extension", "Ast_helper.Cf.html#VALextension", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_field"],
["Filename", "Filename.html", "extension", "Filename.html#VALextension", "<div class=\"info\">  <p><code class=\"code\">extension&nbsp;name</code> is the shortest suffix <code class=\"code\">ext</code> of <code class=\"code\">name0</code> where:</p> </div>", "  extension\194\160name is the shortest suffix ext of name0 where: ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Bytes", "Bytes.html", "extend", "Bytes.html#VALextend", "<div class=\"info\">  <p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and <code class=\"code\">right</code> uninitialized bytes appended to it.</p> </div>", "  extend\194\160s\194\160left\194\160right returns a new byte sequence that contains the bytes of s, with left uninitialized bytes prepended and right uninitialized bytes appended to it. ", "<code class=\"type\">bytes -&gt; int -&gt; int -&gt; bytes</code>", "bytes -> int -> int -> bytes"],
["BytesLabels", "BytesLabels.html", "extend", "BytesLabels.html#VALextend", "<div class=\"info\">  <p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and <code class=\"code\">right</code> uninitialized bytes appended to it.</p> </div>", "  extend\194\160s\194\160left\194\160right returns a new byte sequence that contains the bytes of s, with left uninitialized bytes prepended and right uninitialized bytes appended to it. ", "<code class=\"type\">bytes -&gt; left:int -&gt; right:int -&gt; bytes</code>", "bytes -> left:int -> right:int -> bytes"],
["Config", "Config.html", "ext_obj", "Config.html#VALext_obj", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_lib", "Config.html#VALext_lib", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_dll", "Config.html#VALext_dll", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ext_asm", "Config.html#VALext_asm", "", "", "<code class=\"type\">string</code>", "string"],
["Parse", "Parse.html", "expression", "Parse.html#VALexpression", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "Lexing.lexbuf -> Parsetree.expression"],
["Pprintast", "Pprintast.html", "expression", "Pprintast.html#VALexpression", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; unit</code>", "Format.formatter -> Parsetree.expression -> unit"],
["Printast", "Printast.html", "expression", "Printast.html#VALexpression", "", "", "<code class=\"type\">int -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; unit</code>", "int -> Format.formatter -> Parsetree.expression -> unit"],
["Float", "Float.html", "expm1", "Float.html#VALexpm1", "<div class=\"info\">  <p><code class=\"code\">expm1&nbsp;x</code> computes <code class=\"code\">exp&nbsp;x&nbsp;-.&nbsp;1.0</code>, giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p> </div>", "  expm1\194\160x computes exp\194\160x\194\160-.\194\1601.0, giving numerically-accurate results even if x is close to 0.0. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "expm1", "Pervasives.html#VALexpm1", "<div class=\"info\">  <p><code class=\"code\">expm1&nbsp;x</code> computes <code class=\"code\">exp&nbsp;x&nbsp;-.&nbsp;1.0</code>, giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p> </div>", "  expm1\194\160x computes exp\194\160x\194\160-.\194\1601.0, giving numerically-accurate results even if x is close to 0.0. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Builtin_attributes", "Builtin_attributes.html", "explicit_arity", "Builtin_attributes.html#VALexplicit_arity", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; bool</code>", "Parsetree.attributes -> bool"],
["Ccomp", "Ccomp.html", "expand_libname", "Ccomp.html#VALexpand_libname", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Misc", "Misc.html", "expand_directory", "Misc.html#VALexpand_directory", "", "", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["Complex", "Complex.html", "exp", "Complex.html#VALexp", "<div class=\"info\">  <p>Exponentiation.</p> </div>", "  Exponentiation. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t"],
["Float", "Float.html", "exp", "Float.html#VALexp", "<div class=\"info\">  <p>Exponential.</p> </div>", "  Exponential. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "exp", "Pervasives.html#VALexp", "<div class=\"info\">  <p>Exponential.</p> </div>", "  Exponential. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Printexc", "Printexc.html", "exn_slot_name", "Printexc.html#VALexn_slot_name", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_name&nbsp;exn</code> returns the internal name of the constructor used to create the exception value <code class=\"code\">exn</code>.</p> </div>", "  Printexc.exn_slot_name\194\160exn returns the internal name of the constructor used to create the exception value exn. ", "<code class=\"type\">exn -&gt; string</code>", "exn -> string"],
["Printexc", "Printexc.html", "exn_slot_id", "Printexc.html#VALexn_slot_id", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_id</code> returns an integer which uniquely identifies the constructor used to create the exception value <code class=\"code\">exn</code> (in the current runtime).</p> </div>", "  Printexc.exn_slot_id returns an integer which uniquely identifies the constructor used to create the exception value exn (in the current runtime). ", "<code class=\"type\">exn -&gt; int</code>", "exn -> int"],
["Pervasives", "Pervasives.html", "exit", "Pervasives.html#VALexit", "<div class=\"info\">  <p>Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure.</p> </div>", "  Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure. ", "<code class=\"type\">int -&gt; 'a</code>", "int -> 'a"],
["Thread", "Thread.html", "exit", "Thread.html#VALexit", "<div class=\"info\">  <p>Terminate prematurely the currently executing thread.</p> </div>", "  Terminate prematurely the currently executing thread. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["List", "List.html", "exists2", "List.html#VALexists2", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.</p> </div>", "  Same as List.exists, but for a two-argument predicate. ", "<code class=\"type\">('a -&gt; 'b -&gt; bool) -&gt; 'a list -&gt; 'b list -&gt; bool</code>", "('a -> 'b -> bool) -> 'a list -> 'b list -> bool"],
["ListLabels", "ListLabels.html", "exists2", "ListLabels.html#VALexists2", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.</p> </div>", "  Same as List.exists, but for a two-argument predicate. ", "<code class=\"type\">f:('a -&gt; 'b -&gt; bool) -&gt; 'a list -&gt; 'b list -&gt; bool</code>", "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool"],
["Misc.Stdlib.Array", "Misc.Stdlib.Array.html", "exists2", "Misc.Stdlib.Array.html#VALexists2", "", "", "<code class=\"type\">('a -&gt; 'b -&gt; bool) -&gt; 'a array -&gt; 'b array -&gt; bool</code>", "('a -> 'b -> bool) -> 'a array -> 'b array -> bool"],
["Array", "Array.html", "exists", "Array.html#VALexists", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of the array satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  Array.exists\194\160p\194\160[|a1;\194\160...;\194\160an|] checks if at least one element of the array satisfies the predicate p. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a array -&gt; bool</code>", "('a -> bool) -> 'a array -> bool"],
["ArrayLabels", "ArrayLabels.html", "exists", "ArrayLabels.html#VALexists", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of the array satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  Array.exists\194\160p\194\160[|a1;\194\160...;\194\160an|] checks if at least one element of the array satisfies the predicate p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a array -&gt; bool</code>", "f:('a -> bool) -> 'a array -> bool"],
["Set.S", "Set.S.html", "exists", "Set.S.html#VALexists", "<div class=\"info\">  <p><code class=\"code\">exists&nbsp;p&nbsp;s</code> checks if at least one element of the set satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  exists\194\160p\194\160s checks if at least one element of the set satisfies the predicate p. ", "<code class=\"type\">(<a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "(elt -> bool) -> t -> bool"],
["Map.S", "Map.S.html", "exists", "Map.S.html#VALexists", "<div class=\"info\">  <p><code class=\"code\">exists&nbsp;p&nbsp;m</code> checks if at least one binding of the map satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  exists\194\160p\194\160m checks if at least one binding of the map satisfies the predicate p. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "(key -> 'a -> bool) -> 'a t -> bool"],
["List", "List.html", "exists", "List.html#VALexists", "<div class=\"info\">  <p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of the list satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  exists\194\160p\194\160[a1;\194\160...;\194\160an] checks if at least one element of the list satisfies the predicate p. ", "<code class=\"type\">('a -&gt; bool) -&gt; 'a list -&gt; bool</code>", "('a -> bool) -> 'a list -> bool"],
["ListLabels", "ListLabels.html", "exists", "ListLabels.html#VALexists", "<div class=\"info\">  <p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of the list satisfies the predicate <code class=\"code\">p</code>.</p> </div>", "  exists\194\160p\194\160[a1;\194\160...;\194\160an] checks if at least one element of the list satisfies the predicate p. ", "<code class=\"type\">f:('a -&gt; bool) -&gt; 'a list -&gt; bool</code>", "f:('a -> bool) -> 'a list -> bool"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "exists", "MoreLabels.Map.S.html#VALexists", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "f:(key -> 'a -> bool) -> 'a t -> bool"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "exists", "MoreLabels.Set.S.html#VALexists", "", "", "<code class=\"type\">f:(<a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; bool) -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "f:(elt -> bool) -> t -> bool"],
["Unix", "Unix.html", "execvpe", "Unix.html#VALexecvpe", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execve</code></a>, except that the program is searched in the path.</p> </div>", "  Same as Unix.execve, except that the program is searched in the path. ", "<code class=\"type\">string -&gt; string array -&gt; string array -&gt; 'a</code>", "string -> string array -> string array -> 'a"],
["UnixLabels", "UnixLabels.html", "execvpe", "UnixLabels.html#VALexecvpe", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execve</code></a>, except that the program is searched in the path.</p> </div>", "  Same as UnixLabels.execve, except that the program is searched in the path. ", "<code class=\"type\">prog:string -&gt; args:string array -&gt; env:string array -&gt; 'a</code>", "prog:string -> args:string array -> env:string array -> 'a"],
["ThreadUnix", "ThreadUnix.html", "execvp", "ThreadUnix.html#VALexecvp", "", "", "<code class=\"type\">string -&gt; string array -&gt; unit</code>", "string -> string array -> unit"],
["Unix", "Unix.html", "execvp", "Unix.html#VALexecvp", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that the program is searched in the path.</p> </div>", "  Same as Unix.execv, except that the program is searched in the path. ", "<code class=\"type\">string -&gt; string array -&gt; 'a</code>", "string -> string array -> 'a"],
["UnixLabels", "UnixLabels.html", "execvp", "UnixLabels.html#VALexecvp", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that the program is searched in the path.</p> </div>", "  Same as UnixLabels.execv, except that the program is searched in the path. ", "<code class=\"type\">prog:string -&gt; args:string array -&gt; 'a</code>", "prog:string -> args:string array -> 'a"],
["ThreadUnix", "ThreadUnix.html", "execve", "ThreadUnix.html#VALexecve", "", "", "<code class=\"type\">string -&gt; string array -&gt; string array -&gt; unit</code>", "string -> string array -> string array -> unit"],
["Unix", "Unix.html", "execve", "Unix.html#VALexecve", "<div class=\"info\">  <p>Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that the third argument provides the environment to the program executed.</p> </div>", "  Same as Unix.execv, except that the third argument provides the environment to the program executed. ", "<code class=\"type\">string -&gt; string array -&gt; string array -&gt; 'a</code>", "string -> string array -> string array -> 'a"],
["UnixLabels", "UnixLabels.html", "execve", "UnixLabels.html#VALexecve", "<div class=\"info\">  <p>Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that the third argument provides the environment to the program executed.</p> </div>", "  Same as UnixLabels.execv, except that the third argument provides the environment to the program executed. ", "<code class=\"type\">prog:string -&gt; args:string array -&gt; env:string array -&gt; 'a</code>", "prog:string -> args:string array -> env:string array -> 'a"],
["ThreadUnix", "ThreadUnix.html", "execv", "ThreadUnix.html#VALexecv", "", "", "<code class=\"type\">string -&gt; string array -&gt; unit</code>", "string -> string array -> unit"],
["Unix", "Unix.html", "execv", "Unix.html#VALexecv", "<div class=\"info\">  <p><code class=\"code\">execv&nbsp;prog&nbsp;args</code> execute the program in file <code class=\"code\">prog</code>, with the arguments <code class=\"code\">args</code>, and the current process environment.</p> </div>", "  execv\194\160prog\194\160args execute the program in file prog, with the arguments args, and the current process environment. ", "<code class=\"type\">string -&gt; string array -&gt; 'a</code>", "string -> string array -> 'a"],
["UnixLabels", "UnixLabels.html", "execv", "UnixLabels.html#VALexecv", "<div class=\"info\">  <p><code class=\"code\">execv&nbsp;prog&nbsp;args</code> execute the program in file <code class=\"code\">prog</code>, with the arguments <code class=\"code\">args</code>, and the current process environment.</p> </div>", "  execv\194\160prog\194\160args execute the program in file prog, with the arguments args, and the current process environment. ", "<code class=\"type\">prog:string -&gt; args:string array -&gt; 'a</code>", "prog:string -> args:string array -> 'a"],
["Sys", "Sys.html", "executable_name", "Sys.html#VALexecutable_name", "<div class=\"info\">  <p>The name of the file containing the executable currently running.</p> </div>", "  The name of the file containing the executable currently running. ", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "exec_magic_number", "Config.html#VALexec_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "exception_", "Ast_helper.Pat.html#VALexception_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern -> Parsetree.pattern"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "exception_", "Ast_helper.Sig.html#VALexception_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.extension_constructor -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "exception_", "Ast_helper.Str.html#VALexception_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.extension_constructor -> Parsetree.structure_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "eval", "Ast_helper.Str.html#VALeval", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Parsetree.attributes ->       Parsetree.expression -> Parsetree.structure_item"],
["ThreadUnix", "ThreadUnix.html", "establish_server", "ThreadUnix.html#VALestablish_server", "", "", "<code class=\"type\">(<a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit) -&gt;<br>       <a href=\"Unix.html#TYPEsockaddr\">Unix.sockaddr</a> -&gt; unit</code>", "(in_channel -> out_channel -> unit) ->       Unix.sockaddr -> unit"],
["Unix", "Unix.html", "establish_server", "Unix.html#VALestablish_server", "<div class=\"info\">  <p>Establish a server on the given address.</p> </div>", "  Establish a server on the given address. ", "<code class=\"type\">(<a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit) -&gt;<br>       <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; unit</code>", "(in_channel -> out_channel -> unit) ->       sockaddr -> unit"],
["UnixLabels", "UnixLabels.html", "establish_server", "UnixLabels.html#VALestablish_server", "<div class=\"info\">  <p>Establish a server on the given address.</p> </div>", "  Establish a server on the given address. ", "<code class=\"type\">(<a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit) -&gt;<br>       addr:<a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt; unit</code>", "(in_channel -> out_channel -> unit) ->       addr:sockaddr -> unit"],
["Bytes", "Bytes.html", "escaped", "Bytes.html#VALescaped", "<div class=\"info\">  <p>Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.</p> </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "escaped", "BytesLabels.html#VALescaped", "<div class=\"info\">  <p>Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.</p> </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["Char", "Char.html", "escaped", "Char.html#VALescaped", "<div class=\"info\">  <p>Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml.</p> </div>", "  Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml. ", "<code class=\"type\">char -&gt; string</code>", "char -> string"],
["StringLabels", "StringLabels.html", "escaped", "StringLabels.html#VALescaped", "<div class=\"info\">  <p>Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.</p> </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "escaped", "String.html#VALescaped", "<div class=\"info\">  <p>Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.</p> </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Location", "Location.html", "errorf", "Location.html#VALerrorf", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ?sub:<a href=\"Location.html#TYPEerror\">error</a> list -&gt;<br>       ?if_highlight:string -&gt;<br>       ('a, <a href=\"Format.html#TYPEformatter\">Format.formatter</a>, unit, <a href=\"Location.html#TYPEerror\">error</a>) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "?loc:t ->       ?sub:error list ->       ?if_highlight:string ->       ('a, Format.formatter, unit, error) format4 -> 'a"],
["Clflags", "Clflags.html", "error_size", "Clflags.html#VALerror_size", "", "", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "int ref"],
["Location", "Location.html", "error_reporter", "Location.html#VALerror_reporter", "<div class=\"info\">  <p>Hook for intercepting error reports.</p> </div>", "  Hook for intercepting error reports. ", "<code class=\"type\">(<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEerror\">error</a> -&gt; unit) <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "(Format.formatter -> error -> unit) ref"],
["Location", "Location.html", "error_of_printer_file", "Location.html#VALerror_of_printer_file", "", "", "<code class=\"type\">(<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; 'a -&gt; unit) -&gt; 'a -&gt; <a href=\"Location.html#TYPEerror\">error</a></code>", "(Format.formatter -> 'a -> unit) -> 'a -> error"],
["Location", "Location.html", "error_of_printer", "Location.html#VALerror_of_printer", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; (<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; 'a -&gt; unit) -&gt; 'a -&gt; <a href=\"Location.html#TYPEerror\">error</a></code>", "t -> (Format.formatter -> 'a -> unit) -> 'a -> error"],
["Builtin_attributes", "Builtin_attributes.html", "error_of_extension", "Builtin_attributes.html#VALerror_of_extension", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Location.html#TYPEerror\">Location.error</a></code>", "Parsetree.extension -> Location.error"],
["Location", "Location.html", "error_of_exn", "Location.html#VALerror_of_exn", "", "", "<code class=\"type\">exn -&gt; [ `Already_displayed | `Ok of <a href=\"Location.html#TYPEerror\">error</a> ] option</code>", "exn -> [ `Already_displayed | `Ok of error ] option"],
["Dynlink", "Dynlink.html", "error_message", "Dynlink.html#VALerror_message", "<div class=\"info\">  <p>Convert an error description to a printable message.</p> </div>", "  Convert an error description to a printable message. ", "<code class=\"type\"><a href=\"Dynlink.html#TYPEerror\">error</a> -&gt; string</code>", "error -> string"],
["Unix", "Unix.html", "error_message", "Unix.html#VALerror_message", "<div class=\"info\">  <p>Return a string describing the given error code.</p> </div>", "  Return a string describing the given error code. ", "<code class=\"type\"><a href=\"Unix.html#TYPEerror\">error</a> -&gt; string</code>", "error -> string"],
["UnixLabels", "UnixLabels.html", "error_message", "UnixLabels.html#VALerror_message", "<div class=\"info\">  <p>Return a string describing the given error code.</p> </div>", "  Return a string describing the given error code. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEerror\">error</a> -&gt; string</code>", "error -> string"],
["Location", "Location.html", "error", "Location.html#VALerror", "", "", "<code class=\"type\">?loc:<a href=\"Location.html#TYPEt\">t</a> -&gt;<br>       ?sub:<a href=\"Location.html#TYPEerror\">error</a> list -&gt; ?if_highlight:string -&gt; string -&gt; <a href=\"Location.html#TYPEerror\">error</a></code>", "?loc:t ->       ?sub:error list -> ?if_highlight:string -> string -> error"],
["Format", "Format.html", "err_formatter", "Format.html#VALerr_formatter", "<div class=\"info\">  <p>A formatter to write to standard error.</p> </div>", "  A formatter to write to standard error. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">formatter</a></code>", "formatter"],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "erase_rel", "CamlinternalFormatBasics.html#VALerase_rel", "", "", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">fmtty</a></code>", "('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l)       fmtty_rel ->       ('a, 'b, 'c, 'd, 'e, 'f) fmtty"],
["Bytes", "Bytes.html", "equal", "Bytes.html#VALequal", "<div class=\"info\">  <p>The equality function for byte sequences.</p> </div>", "  The equality function for byte sequences. ", "<code class=\"type\"><a href=\"Bytes.html#TYPEt\">t</a> -&gt; <a href=\"Bytes.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["BytesLabels", "BytesLabels.html", "equal", "BytesLabels.html#VALequal", "<div class=\"info\">  <p>The equality function for byte sequences.</p> </div>", "  The equality function for byte sequences. ", "<code class=\"type\"><a href=\"BytesLabels.html#TYPEt\">t</a> -&gt; <a href=\"BytesLabels.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Char", "Char.html", "equal", "Char.html#VALequal", "<div class=\"info\">  <p>The equal function for chars.</p> </div>", "  The equal function for chars. ", "<code class=\"type\"><a href=\"Char.html#TYPEt\">t</a> -&gt; <a href=\"Char.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Set.S", "Set.S.html", "equal", "Set.S.html#VALequal", "<div class=\"info\">  <p><code class=\"code\">equal&nbsp;s1&nbsp;s2</code> tests whether the sets <code class=\"code\">s1</code> and <code class=\"code\">s2</code> are equal, that is, contain equal elements.</p> </div>", "  equal\194\160s1\194\160s2 tests whether the sets s1 and s2 are equal, that is, contain equal elements. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Map.S", "Map.S.html", "equal", "Map.S.html#VALequal", "<div class=\"info\">  <p><code class=\"code\">equal&nbsp;cmp&nbsp;m1&nbsp;m2</code> tests whether the maps <code class=\"code\">m1</code> and <code class=\"code\">m2</code> are equal, that is, contain equal keys and associate them with equal data.</p> </div>", "  equal\194\160cmp\194\160m1\194\160m2 tests whether the maps m1 and m2 are equal, that is, contain equal keys and associate them with equal data. ", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool"],
["Digest", "Digest.html", "equal", "Digest.html#VALequal", "<div class=\"info\">  <p>The equal function for 16-character digest.</p> </div>", "  The equal function for 16-character digest. ", "<code class=\"type\"><a href=\"Digest.html#TYPEt\">t</a> -&gt; <a href=\"Digest.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Float", "Float.html", "equal", "Float.html#VALequal", "<div class=\"info\">  <p>The equal function for floating-point numbers, compared using <a href=\"Float.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Float</span>.compare</code></a>.</p> </div>", "  The equal function for floating-point numbers, compared using Float.compare. ", "<code class=\"type\"><a href=\"Float.html#TYPEt\">t</a> -&gt; <a href=\"Float.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Hashtbl.HashedType", "Hashtbl.HashedType.html", "equal", "Hashtbl.HashedType.html#VALequal", "<div class=\"info\">  <p>The equality predicate used to compare keys.</p> </div>", "  The equality predicate used to compare keys. ", "<code class=\"type\"><a href=\"Hashtbl.HashedType.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.HashedType.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Hashtbl.SeededHashedType", "Hashtbl.SeededHashedType.html", "equal", "Hashtbl.SeededHashedType.html#VALequal", "<div class=\"info\">  <p>The equality predicate used to compare keys.</p> </div>", "  The equality predicate used to compare keys. ", "<code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededHashedType.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Int32", "Int32.html", "equal", "Int32.html#VALequal", "<div class=\"info\">  <p>The equal function for int32s.</p> </div>", "  The equal function for int32s. ", "<code class=\"type\"><a href=\"Int32.html#TYPEt\">t</a> -&gt; <a href=\"Int32.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Int64", "Int64.html", "equal", "Int64.html#VALequal", "<div class=\"info\">  <p>The equal function for int64s.</p> </div>", "  The equal function for int64s. ", "<code class=\"type\"><a href=\"Int64.html#TYPEt\">t</a> -&gt; <a href=\"Int64.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "equal", "Misc.Stdlib.List.html#VALequal", "<div class=\"info\">  <p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> iff the given lists have the same length and content with respect to the given equality function.</p> </div>", "  Returns true iff the given lists have the same length and content with respect to the given equality function. ", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; bool</code>", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool"],
["Misc.Stdlib.Option", "Misc.Stdlib.Option.html", "equal", "Misc.Stdlib.Option.html#VALequal", "", "", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt;<br>       'a <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.Option.html#TYPEt\">t</a> -&gt; bool</code>", "('a -> 'a -> bool) ->       'a t -> 'a t -> bool"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "equal", "MoreLabels.Map.S.html#VALequal", "", "", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; bool) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; bool</code>", "cmp:('a -> 'a -> bool) ->       'a t -> 'a t -> bool"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "equal", "MoreLabels.Set.S.html#VALequal", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Nativeint", "Nativeint.html", "equal", "Nativeint.html#VALequal", "<div class=\"info\">  <p>The equal function for native ints.</p> </div>", "  The equal function for native ints. ", "<code class=\"type\"><a href=\"Nativeint.html#TYPEt\">t</a> -&gt; <a href=\"Nativeint.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["StringLabels", "StringLabels.html", "equal", "StringLabels.html#VALequal", "<div class=\"info\">  <p>The equal function for strings.</p> </div>", "  The equal function for strings. ", "<code class=\"type\"><a href=\"StringLabels.html#TYPEt\">t</a> -&gt; <a href=\"StringLabels.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["String", "String.html", "equal", "String.html#VALequal", "<div class=\"info\">  <p>The equal function for strings.</p> </div>", "  The equal function for strings. ", "<code class=\"type\"><a href=\"String.html#TYPEt\">t</a> -&gt; <a href=\"String.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Targetint", "Targetint.html", "equal", "Targetint.html#VALequal", "<div class=\"info\">  <p>The equal function for target ints.</p> </div>", "  The equal function for target ints. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Uchar", "Uchar.html", "equal", "Uchar.html#VALequal", "<div class=\"info\">  <p><code class=\"code\">equal&nbsp;u&nbsp;u'</code> is <code class=\"code\">u&nbsp;=&nbsp;u'</code>.</p> </div>", "  equal\194\160u\194\160u' is u\194\160=\194\160u'. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; <a href=\"Uchar.html#TYPEt\">t</a> -&gt; bool</code>", "t -> t -> bool"],
["Pervasives", "Pervasives.html", "epsilon_float", "Pervasives.html#VALepsilon_float", "<div class=\"info\">  <p>The difference between <code class=\"code\">1.0</code> and the smallest exactly representable floating-point number greater than <code class=\"code\">1.0</code>.</p> </div>", "  The difference between 1.0 and the smallest exactly representable floating-point number greater than 1.0. ", "<code class=\"type\">float</code>", "float"],
["Float", "Float.html", "epsilon", "Float.html#VALepsilon", "<div class=\"info\">  <p>The difference between <code class=\"code\">1.0</code> and the smallest exactly representable floating-point number greater than <code class=\"code\">1.0</code>.</p> </div>", "  The difference between 1.0 and the smallest exactly representable floating-point number greater than 1.0. ", "<code class=\"type\">float</code>", "float"],
["Format", "Format.html", "eprintf", "Format.html#VALeprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">err_formatter</code>.</p> </div>", "  Same as fprintf above, but output on err_formatter. ", "<code class=\"type\">('a, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "('a, formatter, unit) format -> 'a"],
["Printf", "Printf.html", "eprintf", "Printf.html#VALeprintf", "<div class=\"info\">  <p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stderr</code>.</p> </div>", "  Same as Printf.fprintf, but output on stderr. ", "<code class=\"type\">('a, <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "('a, out_channel, unit) format -> 'a"],
["Unix", "Unix.html", "environment", "Unix.html#VALenvironment", "<div class=\"info\">  <p>Return the process environment, as an array of strings with the format ``variable=value''.</p> </div>", "  Return the process environment, as an array of strings with the format ``variable=value''. ", "<code class=\"type\">unit -&gt; string array</code>", "unit -> string array"],
["UnixLabels", "UnixLabels.html", "environment", "UnixLabels.html#VALenvironment", "<div class=\"info\">  <p>Return the process environment, as an array of strings with the format ``variable=value''.</p> </div>", "  Return the process environment, as an array of strings with the format ``variable=value''. ", "<code class=\"type\">unit -&gt; string array</code>", "unit -> string array"],
["Scanf.Scanning", "Scanf.Scanning.html", "end_of_input", "Scanf.Scanning.html#VALend_of_input", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.end_of_input&nbsp;ic</code> tests the end-of-input condition of the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p> </div>", "  Scanning.end_of_input\194\160ic tests the end-of-input condition of the given Scanf.Scanning.in_channel formatted input channel. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a> -&gt; bool</code>", "in_channel -> bool"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "encode_prefix", "Build_path_prefix_map.html#VALencode_prefix", "", "", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEpath_prefix\">path_prefix</a> -&gt; string</code>", "path_prefix -> string"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "encode_pair", "Build_path_prefix_map.html#VALencode_pair", "", "", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEpair\">pair</a> -&gt; string</code>", "pair -> string"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "encode_map", "Build_path_prefix_map.html#VALencode_map", "", "", "<code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEmap\">map</a> -&gt; string</code>", "map -> string"],
["Spacetime", "Spacetime.html", "enabled", "Spacetime.html#VALenabled", "<div class=\"info\">  <p><code class=\"code\">enabled</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> if the compiler is configured with spacetime and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise</p> </div>", "  enabled is true if the compiler is configured with spacetime and false otherwise ", "<code class=\"type\">bool</code>", "bool"],
["Sys", "Sys.html", "enable_runtime_warnings", "Sys.html#VALenable_runtime_warnings", "<div class=\"info\">  <p>Control whether the OCaml runtime system can emit warnings on stderr.</p> </div>", "  Control whether the OCaml runtime system can emit warnings on stderr. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Config", "Config.html", "enable_call_counts", "Config.html#VALenable_call_counts", "", "", "<code class=\"type\">bool</code>", "bool"],
["Docstrings", "Docstrings.html", "empty_text_lazy", "Docstrings.html#VALempty_text_lazy", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">text</a> <a href=\"Lazy.html#TYPEt\">Lazy.t</a></code>", "text Lazy.t"],
["Docstrings", "Docstrings.html", "empty_text", "Docstrings.html#VALempty_text", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">text</a></code>", "text"],
["Docstrings", "Docstrings.html", "empty_info", "Docstrings.html#VALempty_info", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEinfo\">info</a></code>", "info"],
["Docstrings", "Docstrings.html", "empty_docs", "Docstrings.html#VALempty_docs", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocs\">docs</a></code>", "docs"],
["Bytes", "Bytes.html", "empty", "Bytes.html#VALempty", "<div class=\"info\">  <p>A byte sequence of size 0.</p> </div>", "  A byte sequence of size 0. ", "<code class=\"type\">bytes</code>", "bytes"],
["BytesLabels", "BytesLabels.html", "empty", "BytesLabels.html#VALempty", "<div class=\"info\">  <p>A byte sequence of size 0.</p> </div>", "  A byte sequence of size 0. ", "<code class=\"type\">bytes</code>", "bytes"],
["Set.S", "Set.S.html", "empty", "Set.S.html#VALempty", "<div class=\"info\">  <p>The empty set.</p> </div>", "  The empty set. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a></code>", "t"],
["Map.S", "Map.S.html", "empty", "Map.S.html#VALempty", "<div class=\"info\">  <p>The empty map.</p> </div>", "  The empty map. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "'a t"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "empty", "MoreLabels.Map.S.html#VALempty", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "empty", "MoreLabels.Set.S.html#VALempty", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "t"],
["Seq", "Seq.html", "empty", "Seq.html#VALempty", "<div class=\"info\">  <p>The empty sequence, containing no elements.</p> </div>", "  The empty sequence, containing no elements. ", "<code class=\"type\">'a <a href=\"Seq.html#TYPEt\">t</a></code>", "'a t"],
["Stream", "Stream.html", "empty", "Stream.html#VALempty", "<div class=\"info\">  <p>Return <code class=\"code\">()</code> if the stream is empty, else raise <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a>.</p> </div>", "  Return () if the stream is empty, else raise Stream.Failure. ", "<code class=\"type\">'a <a href=\"Stream.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Tbl", "Tbl.html", "empty", "Tbl.html#VALempty", "", "", "<code class=\"type\">('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a></code>", "('k, 'v) t"],
["Set.S", "Set.S.html", "elements", "Set.S.html#VALelements", "<div class=\"info\">  <p>Return the list of all elements of the given set.</p> </div>", "  Return the list of all elements of the given set. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> list</code>", "t -> elt list"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "elements", "MoreLabels.Set.S.html#VALelements", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> list</code>", "t -> elt list"],
["Misc", "Misc.html", "edit_distance", "Misc.html#VALedit_distance", "<div class=\"info\">  <p><code class=\"code\">edit_distance&nbsp;a&nbsp;b&nbsp;cutoff</code> computes the edit distance between strings <code class=\"code\">a</code> and <code class=\"code\">b</code>.</p> </div>", "  edit_distance\194\160a\194\160b\194\160cutoff computes the edit distance between strings a and b. ", "<code class=\"type\">string -&gt; string -&gt; int -&gt; int option</code>", "string -> string -> int -> int option"],
["Location", "Location.html", "echo_eof", "Location.html#VALecho_eof", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Unix", "Unix.html", "dup2", "Unix.html#VALdup2", "<div class=\"info\">  <p><code class=\"code\">dup2&nbsp;fd1&nbsp;fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already opened.</p> </div>", "  dup2\194\160fd1\194\160fd2 duplicates fd1 to fd2, closing fd2 if already opened. ", "<code class=\"type\">?cloexec:bool -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "?cloexec:bool -> file_descr -> file_descr -> unit"],
["UnixLabels", "UnixLabels.html", "dup2", "UnixLabels.html#VALdup2", "<div class=\"info\">  <p><code class=\"code\">dup2&nbsp;fd1&nbsp;fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already opened.</p> </div>", "  dup2\194\160fd1\194\160fd2 duplicates fd1 to fd2, closing fd2 if already opened. ", "<code class=\"type\">?cloexec:bool -&gt;<br>       src:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; dst:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "?cloexec:bool ->       src:file_descr -> dst:file_descr -> unit"],
["Obj", "Obj.html", "dup", "Obj.html#VALdup", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; <a href=\"Obj.html#TYPEt\">t</a></code>", "t -> t"],
["Unix", "Unix.html", "dup", "Unix.html#VALdup", "<div class=\"info\">  <p>Return a new file descriptor referencing the same file as the given descriptor.</p> </div>", "  Return a new file descriptor referencing the same file as the given descriptor. ", "<code class=\"type\">?cloexec:bool -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool -> file_descr -> file_descr"],
["UnixLabels", "UnixLabels.html", "dup", "UnixLabels.html#VALdup", "<div class=\"info\">  <p>Return a new file descriptor referencing the same file as the given descriptor.</p> </div>", "  Return a new file descriptor referencing the same file as the given descriptor. ", "<code class=\"type\">?cloexec:bool -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "?cloexec:bool -> file_descr -> file_descr"],
["Clflags", "Clflags.html", "dumped_pass", "Clflags.html#VALdumped_pass", "", "", "<code class=\"type\">string -&gt; bool</code>", "string -> bool"],
["Clflags", "Clflags.html", "dump_typedtree", "Clflags.html#VALdump_typedtree", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_split", "Clflags.html#VALdump_split", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_spill", "Clflags.html#VALdump_spill", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_source", "Clflags.html#VALdump_source", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_selection", "Clflags.html#VALdump_selection", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_scheduling", "Clflags.html#VALdump_scheduling", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_reload", "Clflags.html#VALdump_reload", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_regalloc", "Clflags.html#VALdump_regalloc", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_rawlambda", "Clflags.html#VALdump_rawlambda", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_rawflambda", "Clflags.html#VALdump_rawflambda", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_rawclambda", "Clflags.html#VALdump_rawclambda", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_prefer", "Clflags.html#VALdump_prefer", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_parsetree", "Clflags.html#VALdump_parsetree", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_live", "Clflags.html#VALdump_live", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_linear", "Clflags.html#VALdump_linear", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_lambda", "Clflags.html#VALdump_lambda", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_interval", "Clflags.html#VALdump_interval", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_interf", "Clflags.html#VALdump_interf", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_instr", "Clflags.html#VALdump_instr", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Graphics", "Graphics.html", "dump_image", "Graphics.html#VALdump_image", "<div class=\"info\">  <p>Convert an image to a color matrix.</p> </div>", "  Convert an image to a color matrix. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEimage\">image</a> -&gt; <a href=\"Graphics.html#TYPEcolor\">color</a> array array</code>", "image -> color array array"],
["Clflags", "Clflags.html", "dump_flambda_verbose", "Clflags.html#VALdump_flambda_verbose", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_flambda_let", "Clflags.html#VALdump_flambda_let", "", "", "<code class=\"type\">int option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "int option ref"],
["Clflags", "Clflags.html", "dump_flambda", "Clflags.html#VALdump_flambda", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_cse", "Clflags.html#VALdump_cse", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_combine", "Clflags.html#VALdump_combine", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_cmm", "Clflags.html#VALdump_cmm", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_clambda", "Clflags.html#VALdump_clambda", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "dump_avail", "Clflags.html#VALdump_avail", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["CamlinternalOO", "CamlinternalOO.html", "dummy_table", "CamlinternalOO.html#VALdummy_table", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a></code>", "table"],
["Lexing", "Lexing.html", "dummy_pos", "Lexing.html#VALdummy_pos", "<div class=\"info\">  <p>A value of type <code class=\"code\">position</code>, guaranteed to be different from any valid position.</p> </div>", "  A value of type position, guaranteed to be different from any valid position. ", "<code class=\"type\"><a href=\"Lexing.html#TYPEposition\">position</a></code>", "position"],
["CamlinternalOO", "CamlinternalOO.html", "dummy_class", "CamlinternalOO.html#VALdummy_class", "", "", "<code class=\"type\">string * int * int -&gt;<br>       <a href=\"CamlinternalOO.html#TYPEt\">t</a> * (<a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"Obj.html#TYPEt\">Obj.t</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a>) *<br>       (<a href=\"Obj.html#TYPEt\">Obj.t</a> -&gt; <a href=\"CamlinternalOO.html#TYPEt\">t</a>) * <a href=\"Obj.html#TYPEt\">Obj.t</a></code>", "string * int * int ->       t * (table -> Obj.t -> t) *       (Obj.t -> t) * Obj.t"],
["Ast_mapper", "Ast_mapper.html", "drop_ppx_context_str", "Ast_mapper.html#VALdrop_ppx_context_str", "<div class=\"info\">  <p>Drop the ocaml.ppx.context attribute from a structure.</p> </div>", "  Drop the ocaml.ppx.context attribute from a structure. ", "<code class=\"type\">restore:bool -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "restore:bool -> Parsetree.structure -> Parsetree.structure"],
["Ast_mapper", "Ast_mapper.html", "drop_ppx_context_sig", "Ast_mapper.html#VALdrop_ppx_context_sig", "<div class=\"info\">  <p>Same as <code class=\"code\">drop_ppx_context_str</code>, but for signatures.</p> </div>", "  Same as drop_ppx_context_str, but for signatures. ", "<code class=\"type\">restore:bool -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "restore:bool -> Parsetree.signature -> Parsetree.signature"],
["Graphics", "Graphics.html", "draw_string", "Graphics.html#VALdraw_string", "<div class=\"info\">  <p>Draw a character or a character string with lower left corner at current position.</p> </div>", "  Draw a character or a character string with lower left corner at current position. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Graphics", "Graphics.html", "draw_segments", "Graphics.html#VALdraw_segments", "<div class=\"info\">  <p><code class=\"code\">draw_segments&nbsp;segments</code> draws the segments given in the array argument.</p> </div>", "  draw_segments\194\160segments draws the segments given in the array argument. ", "<code class=\"type\">(int * int * int * int) array -&gt; unit</code>", "(int * int * int * int) array -> unit"],
["Graphics", "Graphics.html", "draw_rect", "Graphics.html#VALdraw_rect", "<div class=\"info\">  <p><code class=\"code\">draw_rect&nbsp;x&nbsp;y&nbsp;w&nbsp;h</code> draws the rectangle with lower left corner at <code class=\"code\">x,y</code>, width <code class=\"code\">w</code> and height <code class=\"code\">h</code>.</p> </div>", "  draw_rect\194\160x\194\160y\194\160w\194\160h draws the rectangle with lower left corner at x,y, width w and height h. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> int -> unit"],
["Graphics", "Graphics.html", "draw_poly_line", "Graphics.html#VALdraw_poly_line", "<div class=\"info\">  <p><code class=\"code\">draw_poly_line&nbsp;points</code> draws the line that joins the points given by the array argument.</p> </div>", "  draw_poly_line\194\160points draws the line that joins the points given by the array argument. ", "<code class=\"type\">(int * int) array -&gt; unit</code>", "(int * int) array -> unit"],
["Graphics", "Graphics.html", "draw_poly", "Graphics.html#VALdraw_poly", "<div class=\"info\">  <p><code class=\"code\">draw_poly&nbsp;polygon</code> draws the given polygon.</p> </div>", "  draw_poly\194\160polygon draws the given polygon. ", "<code class=\"type\">(int * int) array -&gt; unit</code>", "(int * int) array -> unit"],
["Graphics", "Graphics.html", "draw_image", "Graphics.html#VALdraw_image", "<div class=\"info\">  <p>Draw the given image with lower left corner at the given point.</p> </div>", "  Draw the given image with lower left corner at the given point. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEimage\">image</a> -&gt; int -&gt; int -&gt; unit</code>", "image -> int -> int -> unit"],
["Graphics", "Graphics.html", "draw_ellipse", "Graphics.html#VALdraw_ellipse", "<div class=\"info\">  <p><code class=\"code\">draw_ellipse&nbsp;x&nbsp;y&nbsp;rx&nbsp;ry</code> draws an ellipse with center <code class=\"code\">x,y</code>, horizontal radius <code class=\"code\">rx</code> and vertical radius <code class=\"code\">ry</code>.</p> </div>", "  draw_ellipse\194\160x\194\160y\194\160rx\194\160ry draws an ellipse with center x,y, horizontal radius rx and vertical radius ry. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> int -> unit"],
["Graphics", "Graphics.html", "draw_circle", "Graphics.html#VALdraw_circle", "<div class=\"info\">  <p><code class=\"code\">draw_circle&nbsp;x&nbsp;y&nbsp;r</code> draws a circle with center <code class=\"code\">x,y</code> and radius <code class=\"code\">r</code>.</p> </div>", "  draw_circle\194\160x\194\160y\194\160r draws a circle with center x,y and radius r. ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> unit"],
["Graphics", "Graphics.html", "draw_char", "Graphics.html#VALdraw_char", "<div class=\"info\">  <p>See <a href=\"Graphics.html#VALdraw_string\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.draw_string</code></a>.</p> </div>", "  See Graphics.draw_string. ", "<code class=\"type\">char -&gt; unit</code>", "char -> unit"],
["Graphics", "Graphics.html", "draw_arc", "Graphics.html#VALdraw_arc", "<div class=\"info\">  <p><code class=\"code\">draw_arc&nbsp;x&nbsp;y&nbsp;rx&nbsp;ry&nbsp;a1&nbsp;a2</code> draws an elliptical arc with center <code class=\"code\">x,y</code>, horizontal radius <code class=\"code\">rx</code>, vertical radius <code class=\"code\">ry</code>, from angle <code class=\"code\">a1</code> to angle <code class=\"code\">a2</code> (in degrees).</p> </div>", "  draw_arc\194\160x\194\160y\194\160rx\194\160ry\194\160a1\194\160a2 draws an elliptical arc with center x,y, horizontal radius rx, vertical radius ry, from angle a1 to angle a2 (in degrees). ", "<code class=\"type\">int -&gt; int -&gt; int -&gt; int -&gt; int -&gt; int -&gt; unit</code>", "int -> int -> int -> int -> int -> int -> unit"],
["Obj", "Obj.html", "double_tag", "Obj.html#VALdouble_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Obj", "Obj.html", "double_field", "Obj.html#VALdouble_field", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; int -&gt; float</code>", "t -> int -> float"],
["Obj", "Obj.html", "double_array_tag", "Obj.html#VALdouble_array_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "dont_write_files", "Clflags.html#VALdont_write_files", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Unix", "Unix.html", "domain_of_sockaddr", "Unix.html#VALdomain_of_sockaddr", "<div class=\"info\">  <p>Return the socket domain adequate for the given socket address.</p> </div>", "  Return the socket domain adequate for the given socket address. ", "<code class=\"type\"><a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; <a href=\"Unix.html#TYPEsocket_domain\">socket_domain</a></code>", "sockaddr -> socket_domain"],
["UnixLabels", "UnixLabels.html", "domain_of_sockaddr", "UnixLabels.html#VALdomain_of_sockaddr", "<div class=\"info\">  <p>Return the socket domain adequate for the given socket address.</p> </div>", "  Return the socket domain adequate for the given socket address. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt; <a href=\"UnixLabels.html#TYPEsocket_domain\">socket_domain</a></code>", "sockaddr -> socket_domain"],
["Docstrings", "Docstrings.html", "docstring_loc", "Docstrings.html#VALdocstring_loc", "<div class=\"info\">  <p>Get the location of a docstring</p> </div>", "  Get the location of a docstring ", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Location.html#TYPEt\">Location.t</a></code>", "docstring -> Location.t"],
["Docstrings", "Docstrings.html", "docstring_body", "Docstrings.html#VALdocstring_body", "<div class=\"info\">  <p>Get the text of a docstring</p> </div>", "  Get the text of a docstring ", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; string</code>", "docstring -> string"],
["Docstrings", "Docstrings.html", "docstring", "Docstrings.html#VALdocstring", "<div class=\"info\">  <p>Create a docstring</p> </div>", "  Create a docstring ", "<code class=\"type\">string -&gt; <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Docstrings.html#TYPEdocstring\">docstring</a></code>", "string -> Location.t -> docstring"],
["Docstrings", "Docstrings.html", "docs_attr", "Docstrings.html#VALdocs_attr", "", "", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "docstring -> Parsetree.attribute"],
["Clflags", "Clflags.html", "dllpaths", "Clflags.html#VALdllpaths", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Clflags", "Clflags.html", "dllibs", "Clflags.html#VALdllibs", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Clflags", "Clflags.html", "dlcode", "Clflags.html#VALdlcode", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Complex", "Complex.html", "div", "Complex.html#VALdiv", "<div class=\"info\">  <p>Division</p> </div>", "  Division ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Float", "Float.html", "div", "Float.html#VALdiv", "<div class=\"info\">  <p>Floating-point division.</p> </div>", "  Floating-point division. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Int32", "Int32.html", "div", "Int32.html#VALdiv", "<div class=\"info\">  <p>Integer division.</p> </div>", "  Integer division. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "div", "Int64.html#VALdiv", "<div class=\"info\">  <p>Integer division.</p> </div>", "  Integer division. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["Nativeint", "Nativeint.html", "div", "Nativeint.html#VALdiv", "<div class=\"info\">  <p>Integer division.</p> </div>", "  Integer division. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["Targetint", "Targetint.html", "div", "Targetint.html#VALdiv", "<div class=\"info\">  <p>Integer division.</p> </div>", "  Integer division. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Graphics", "Graphics.html", "display_mode", "Graphics.html#VALdisplay_mode", "<div class=\"info\">  <p>Set display mode on or off.</p> </div>", "  Set display mode on or off. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Identifiable.Map", "Identifiable.Map.html", "disjoint_union", "Identifiable.Map.html#VALdisjoint_union", "<div class=\"info\">  <p><code class=\"code\">disjoint_union&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and <code class=\"code\">m2</code>.</p> </div>", "  disjoint_union\194\160m1\194\160m2 contains all bindings from m1 and m2. ", "<code class=\"type\">?eq:('a -&gt; 'a -&gt; bool) -&gt;<br>       ?print:(<a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; 'a -&gt; unit) -&gt; 'a t -&gt; 'a t -&gt; 'a t</code>", "?eq:('a -> 'a -> bool) ->       ?print:(Format.formatter -> 'a -> unit) -> 'a t -> 'a t -> 'a t"],
["Filename", "Filename.html", "dirname", "Filename.html#VALdirname", "<div class=\"info\">  <p>See <a href=\"Filename.html#VALbasename\"><code class=\"code\"><span class=\"constructor\">Filename</span>.basename</code></a>.</p> </div>", "  See Filename.basename. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Filename", "Filename.html", "dir_sep", "Filename.html#VALdir_sep", "<div class=\"info\">  <p>The directory separator (e.g.</p> </div>", "  The directory separator (e.g. ", "<code class=\"type\">string</code>", "string"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "dims", "Bigarray.Genarray.html#VALdims", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Genarray</span>.dims&nbsp;a</code> returns all dimensions of the big array <code class=\"code\">a</code>, as an array of integers of length <code class=\"code\"><span class=\"constructor\">Genarray</span>.num_dims&nbsp;a</code>.</p> </div>", "  Genarray.dims\194\160a returns all dimensions of the big array a, as an array of integers of length Genarray.num_dims\194\160a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; int array</code>", "('a, 'b, 'c) t -> int array"],
["Bigarray.Array3", "Bigarray.Array3.html", "dim3", "Bigarray.Array3.html#VALdim3", "<div class=\"info\">  <p>Return the third dimension of the given three-dimensional big array.</p> </div>", "  Return the third dimension of the given three-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array2", "Bigarray.Array2.html", "dim2", "Bigarray.Array2.html#VALdim2", "<div class=\"info\">  <p>Return the second dimension of the given two-dimensional big array.</p> </div>", "  Return the second dimension of the given two-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array3", "Bigarray.Array3.html", "dim2", "Bigarray.Array3.html#VALdim2", "<div class=\"info\">  <p>Return the second dimension of the given three-dimensional big array.</p> </div>", "  Return the second dimension of the given three-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array2", "Bigarray.Array2.html", "dim1", "Bigarray.Array2.html#VALdim1", "<div class=\"info\">  <p>Return the first dimension of the given two-dimensional big array.</p> </div>", "  Return the first dimension of the given two-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array3", "Bigarray.Array3.html", "dim1", "Bigarray.Array3.html#VALdim1", "<div class=\"info\">  <p>Return the first dimension of the given three-dimensional big array.</p> </div>", "  Return the first dimension of the given three-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Bigarray.Array1", "Bigarray.Array1.html", "dim", "Bigarray.Array1.html#VALdim", "<div class=\"info\">  <p>Return the size (dimension) of the given one-dimensional big array.</p> </div>", "  Return the size (dimension) of the given one-dimensional big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; int</code>", "('a, 'b, 'c) t -> int"],
["Set.S", "Set.S.html", "diff", "Set.S.html#VALdiff", "<div class=\"info\">  <p>Set difference.</p> </div>", "  Set difference. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "t -> t -> t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "diff", "MoreLabels.Set.S.html#VALdiff", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Misc", "Misc.html", "did_you_mean", "Misc.html#VALdid_you_mean", "<div class=\"info\">  <p><code class=\"code\">did_you_mean&nbsp;ppf&nbsp;get_choices</code> hints that the user may have meant one of the option returned by calling <code class=\"code\">get_choices</code>.</p> </div>", "  did_you_mean\194\160ppf\194\160get_choices hints that the user may have meant one of the option returned by calling get_choices. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; (unit -&gt; string list) -&gt; unit</code>", "Format.formatter -> (unit -> string list) -> unit"],
["Unix", "Unix.html", "descr_of_out_channel", "Unix.html#VALdescr_of_out_channel", "<div class=\"info\">  <p>Return the descriptor corresponding to an output channel.</p> </div>", "  Return the descriptor corresponding to an output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "out_channel -> file_descr"],
["UnixLabels", "UnixLabels.html", "descr_of_out_channel", "UnixLabels.html#VALdescr_of_out_channel", "<div class=\"info\">  <p>Return the descriptor corresponding to an output channel.</p> </div>", "  Return the descriptor corresponding to an output channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "out_channel -> file_descr"],
["Unix", "Unix.html", "descr_of_in_channel", "Unix.html#VALdescr_of_in_channel", "<div class=\"info\">  <p>Return the descriptor corresponding to an input channel.</p> </div>", "  Return the descriptor corresponding to an input channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a></code>", "in_channel -> file_descr"],
["UnixLabels", "UnixLabels.html", "descr_of_in_channel", "UnixLabels.html#VALdescr_of_in_channel", "<div class=\"info\">  <p>Return the descriptor corresponding to an input channel.</p> </div>", "  Return the descriptor corresponding to an input channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a></code>", "in_channel -> file_descr"],
["Builtin_attributes", "Builtin_attributes.html", "deprecated_of_str", "Builtin_attributes.html#VALdeprecated_of_str", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; string option</code>", "Parsetree.structure -> string option"],
["Builtin_attributes", "Builtin_attributes.html", "deprecated_of_sig", "Builtin_attributes.html#VALdeprecated_of_sig", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; string option</code>", "Parsetree.signature -> string option"],
["Builtin_attributes", "Builtin_attributes.html", "deprecated_of_attrs", "Builtin_attributes.html#VALdeprecated_of_attrs", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string option</code>", "Parsetree.attributes -> string option"],
["Location", "Location.html", "deprecated", "Location.html#VALdeprecated", "", "", "<code class=\"type\">?def:<a href=\"Location.html#TYPEt\">t</a> -&gt; ?use:<a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; string -&gt; unit</code>", "?def:t -> ?use:t -> t -> string -> unit"],
["Misc", "Misc.html", "delete_eol_spaces", "Misc.html#VALdelete_eol_spaces", "<div class=\"info\">  <p><code class=\"code\">delete_eol_spaces&nbsp;s</code> returns a fresh copy of <code class=\"code\">s</code> with any end of line spaces removed.</p> </div>", "  delete_eol_spaces\194\160s returns a fresh copy of s with any end of line spaces removed. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Gc", "Gc.html", "delete_alarm", "Gc.html#VALdelete_alarm", "<div class=\"info\">  <p><code class=\"code\">delete_alarm&nbsp;a</code> will stop the calls to the function associated to <code class=\"code\">a</code>.</p> </div>", "  delete_alarm\194\160a will stop the calls to the function associated to a. ", "<code class=\"type\"><a href=\"Gc.html#TYPEalarm\">alarm</a> -&gt; unit</code>", "alarm -> unit"],
["Thread", "Thread.html", "delay", "Thread.html#VALdelay", "<div class=\"info\">  <p><code class=\"code\">delay&nbsp;d</code> suspends the execution of the calling thread for <code class=\"code\">d</code> seconds.</p> </div>", "  delay\194\160d suspends the execution of the calling thread for d seconds. ", "<code class=\"type\">float -&gt; unit</code>", "float -> unit"],
["Warnings", "Warnings.html", "defaults_warn_error", "Warnings.html#VALdefaults_warn_error", "", "", "<code class=\"type\">string</code>", "string"],
["Warnings", "Warnings.html", "defaults_w", "Warnings.html#VALdefaults_w", "", "", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "default_warning_printer", "Location.html#VALdefault_warning_printer", "<div class=\"info\">  <p>Original warning printer for use in hooks.</p> </div>", "  Original warning printer for use in hooks. ", "<code class=\"type\"><a href=\"Location.html#TYPEt\">t</a> -&gt; <a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Warnings.html#TYPEt\">Warnings.t</a> -&gt; unit</code>", "t -> Format.formatter -> Warnings.t -> unit"],
["Clflags", "Clflags.html", "default_unbox_closures_factor", "Clflags.html#VALdefault_unbox_closures_factor", "", "", "<code class=\"type\">int</code>", "int"],
["Misc.Color", "Misc.Color.html", "default_styles", "Misc.Color.html#VALdefault_styles", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEstyles\">styles</a></code>", "styles"],
["Clflags", "Clflags.html", "default_simplify_rounds", "Clflags.html#VALdefault_simplify_rounds", "", "", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "int ref"],
["Config", "Config.html", "default_safe_string", "Config.html#VALdefault_safe_string", "", "", "<code class=\"type\">bool</code>", "bool"],
["Location", "Location.html", "default_printer", "Location.html#VALdefault_printer", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEt\">t</a> -&gt; unit</code>", "Format.formatter -> t -> unit"],
["Ast_mapper", "Ast_mapper.html", "default_mapper", "Ast_mapper.html#VALdefault_mapper", "<div class=\"info\">  <p>A default mapper, which implements a \"deep identity\" mapping.</p> </div>", "  A default mapper, which implements a \"deep identity\" mapping. ", "<code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a></code>", "mapper"],
["Ast_helper", "Ast_helper.html", "default_loc", "Ast_helper.html#VALdefault_loc", "<div class=\"info\">  <p>Default value for all optional location arguments.</p> </div>", "  Default value for all optional location arguments. ", "<code class=\"type\"><a href=\"Ast_helper.html#TYPEloc\">loc</a> <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "loc ref"],
["Ast_iterator", "Ast_iterator.html", "default_iterator", "Ast_iterator.html#VALdefault_iterator", "<div class=\"info\">  <p>A default iterator, which implements a \"do not do anything\" mapping.</p> </div>", "  A default iterator, which implements a \"do not do anything\" mapping. ", "<code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a></code>", "iterator"],
["Clflags", "Clflags.html", "default_inline_toplevel_threshold", "Clflags.html#VALdefault_inline_toplevel_threshold", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_threshold", "Clflags.html#VALdefault_inline_threshold", "", "", "<code class=\"type\">float</code>", "float"],
["Clflags", "Clflags.html", "default_inline_prim_cost", "Clflags.html#VALdefault_inline_prim_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_max_unroll", "Clflags.html#VALdefault_inline_max_unroll", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_max_depth", "Clflags.html#VALdefault_inline_max_depth", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_lifting_benefit", "Clflags.html#VALdefault_inline_lifting_benefit", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_indirect_cost", "Clflags.html#VALdefault_inline_indirect_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_call_cost", "Clflags.html#VALdefault_inline_call_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_branch_factor", "Clflags.html#VALdefault_inline_branch_factor", "", "", "<code class=\"type\">float</code>", "float"],
["Clflags", "Clflags.html", "default_inline_branch_cost", "Clflags.html#VALdefault_inline_branch_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "default_inline_alloc_cost", "Clflags.html#VALdefault_inline_alloc_cost", "", "", "<code class=\"type\">int</code>", "int"],
["Config", "Config.html", "default_executable_name", "Config.html#VALdefault_executable_name", "", "", "<code class=\"type\">string</code>", "string"],
["Location", "Location.html", "default_error_reporter", "Location.html#VALdefault_error_reporter", "<div class=\"info\">  <p>Original error reporter for use in hooks.</p> </div>", "  Original error reporter for use in hooks. ", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Location.html#TYPEerror\">error</a> -&gt; unit</code>", "Format.formatter -> error -> unit"],
["Dynlink", "Dynlink.html", "default_available_units", "Dynlink.html#VALdefault_available_units", "<div class=\"info\">  <p>Reset the set of units that can be referenced from dynamically-linked code to its default value, that is, all units composing the currently running program.</p> </div>", "  Reset the set of units that can be referenced from dynamically-linked code to its default value, that is, all units composing the currently running program. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "default", "Arg_helper.Make.html#VALdefault", "", "", "<code class=\"type\">S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Value.t -> parsed"],
["Pervasives", "Pervasives.html", "decr", "Pervasives.html#VALdecr", "<div class=\"info\">  <p>Decrement the integer contained in the given reference.</p> </div>", "  Decrement the integer contained in the given reference. ", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; unit</code>", "int ref -> unit"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "decode_prefix", "Build_path_prefix_map.html#VALdecode_prefix", "", "", "<code class=\"type\">string -&gt;<br>       (<a href=\"Build_path_prefix_map.html#TYPEpath_prefix\">path_prefix</a>, <a href=\"Build_path_prefix_map.html#TYPEerror_message\">error_message</a>)<br>       <a href=\"Pervasives.html#TYPEresult\">result</a></code>", "string ->       (path_prefix, error_message)       result"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "decode_pair", "Build_path_prefix_map.html#VALdecode_pair", "", "", "<code class=\"type\">string -&gt;<br>       (<a href=\"Build_path_prefix_map.html#TYPEpair\">pair</a>, <a href=\"Build_path_prefix_map.html#TYPEerror_message\">error_message</a>)<br>       <a href=\"Pervasives.html#TYPEresult\">result</a></code>", "string ->       (pair, error_message)       result"],
["Build_path_prefix_map", "Build_path_prefix_map.html", "decode_map", "Build_path_prefix_map.html#VALdecode_map", "", "", "<code class=\"type\">string -&gt;<br>       (<a href=\"Build_path_prefix_map.html#TYPEmap\">map</a>, <a href=\"Build_path_prefix_map.html#TYPEerror_message\">error_message</a>)<br>       <a href=\"Pervasives.html#TYPEresult\">result</a></code>", "string ->       (map, error_message)       result"],
["Ast_helper.Te", "Ast_helper.Te.html", "decl", "Ast_helper.Te.html#VALdecl", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       ?args:<a href=\"Parsetree.html#TYPEconstructor_arguments\">Parsetree.constructor_arguments</a> -&gt;<br>       ?res:<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?info:Docstrings.info ->       ?args:Parsetree.constructor_arguments ->       ?res:Parsetree.core_type -> Ast_helper.str -> Parsetree.extension_constructor"],
["Clflags", "Clflags.html", "debug_runavail", "Clflags.html#VALdebug_runavail", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "debug", "Clflags.html#VALdebug", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Marshal", "Marshal.html", "data_size", "Marshal.html#VALdata_size", "<div class=\"info\">  <p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p> </div>", "  See Marshal.header_size. ", "<code class=\"type\">bytes -&gt; int -&gt; int</code>", "bytes -> int -> int"],
["Identifiable.Map", "Identifiable.Map.html", "data", "Identifiable.Map.html#VALdata", "", "", "<code class=\"type\">'a t -&gt; 'a list</code>", "'a t -> 'a list"],
["Sys", "Sys.html", "cygwin", "Sys.html#VALcygwin", "<div class=\"info\">  <p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Cygwin\"</span></code>.</p> </div>", "  True if Sys.os_type\194\160=\194\160\"Cygwin\". ", "<code class=\"type\">bool</code>", "bool"],
["Graphics", "Graphics.html", "cyan", "Graphics.html#VALcyan", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Misc", "Misc.html", "cut_at", "Misc.html#VALcut_at", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.cut_at&nbsp;s&nbsp;c</code> returns a pair containing the sub-string before the first occurrence of <code class=\"code\">c</code> in <code class=\"code\">s</code>, and the sub-string after the first occurrence of <code class=\"code\">c</code> in <code class=\"code\">s</code>.</p> </div>", "  String.cut_at\194\160s\194\160c returns a pair containing the sub-string before the first occurrence of c in s, and the sub-string after the first occurrence of c in s. ", "<code class=\"type\">string -&gt; char -&gt; string * string</code>", "string -> char -> string * string"],
["Obj", "Obj.html", "custom_tag", "Obj.html#VALcustom_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Clflags", "Clflags.html", "custom_runtime", "Clflags.html#VALcustom_runtime", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Graphics", "Graphics.html", "curveto", "Graphics.html#VALcurveto", "<div class=\"info\">  <p><code class=\"code\">curveto&nbsp;b&nbsp;c&nbsp;d</code> draws a cubic Bezier curve starting from the current point to point <code class=\"code\">d</code>, with control points <code class=\"code\">b</code> and <code class=\"code\">c</code>, and moves the current point to <code class=\"code\">d</code>.</p> </div>", "  curveto\194\160b\194\160c\194\160d draws a cubic Bezier curve starting from the current point to point d, with control points b and c, and moves the current point to d. ", "<code class=\"type\">int * int -&gt; int * int -&gt; int * int -&gt; unit</code>", "int * int -> int * int -> int * int -> unit"],
["Graphics", "Graphics.html", "current_y", "Graphics.html#VALcurrent_y", "<div class=\"info\">  <p>Return the ordinate of the current point.</p> </div>", "  Return the ordinate of the current point. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Graphics", "Graphics.html", "current_x", "Graphics.html#VALcurrent_x", "<div class=\"info\">  <p>Return the abscissa of the current point.</p> </div>", "  Return the abscissa of the current point. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Graphics", "Graphics.html", "current_point", "Graphics.html#VALcurrent_point", "<div class=\"info\">  <p>Return the position of the current point.</p> </div>", "  Return the position of the current point. ", "<code class=\"type\">unit -&gt; int * int</code>", "unit -> int * int"],
["Filename", "Filename.html", "current_dir_name", "Filename.html#VALcurrent_dir_name", "<div class=\"info\">  <p>The conventional name for the current directory (e.g.</p> </div>", "  The conventional name for the current directory (e.g. ", "<code class=\"type\">string</code>", "string"],
["Arg", "Arg.html", "current", "Arg.html#VALcurrent", "<div class=\"info\">  <p>Position (in <a href=\"Sys.html#VALargv\"><code class=\"code\"><span class=\"constructor\">Sys</span>.argv</code></a>) of the argument being processed.</p> </div>", "  Position (in Sys.argv) of the argument being processed. ", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "int ref"],
["Location", "Location.html", "curr", "Location.html#VALcurr", "<div class=\"info\">  <p>Get the location of the current token from the <code class=\"code\">lexbuf</code>.</p> </div>", "  Get the location of the current token from the lexbuf. ", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Location.html#TYPEt\">t</a></code>", "Lexing.lexbuf -> t"],
["CamlinternalOO", "CamlinternalOO.html", "create_table", "CamlinternalOO.html#VALcreate_table", "", "", "<code class=\"type\">string array -&gt; <a href=\"CamlinternalOO.html#TYPEtable\">table</a></code>", "string array -> table"],
["Unix", "Unix.html", "create_process_env", "Unix.html#VALcreate_process_env", "<div class=\"info\">  <p><code class=\"code\">create_process_env&nbsp;prog&nbsp;args&nbsp;env&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code> works as <a href=\"Unix.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.create_process</code></a>, except that the extra argument <code class=\"code\">env</code> specifies the environment passed to the program.</p> </div>", "  create_process_env\194\160prog\194\160args\194\160env\194\160new_stdin\194\160new_stdout\194\160new_stderr works as Unix.create_process, except that the extra argument env specifies the environment passed to the program. ", "<code class=\"type\">string -&gt;<br>       string array -&gt;<br>       string array -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; int</code>", "string ->       string array ->       string array -> file_descr -> file_descr -> file_descr -> int"],
["UnixLabels", "UnixLabels.html", "create_process_env", "UnixLabels.html#VALcreate_process_env", "<div class=\"info\">  <p><code class=\"code\">create_process_env&nbsp;prog&nbsp;args&nbsp;env&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code> works as <a href=\"UnixLabels.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.create_process</code></a>, except that the extra argument <code class=\"code\">env</code> specifies the environment passed to the program.</p> </div>", "  create_process_env\194\160prog\194\160args\194\160env\194\160new_stdin\194\160new_stdout\194\160new_stderr works as UnixLabels.create_process, except that the extra argument env specifies the environment passed to the program. ", "<code class=\"type\">prog:string -&gt;<br>       args:string array -&gt;<br>       env:string array -&gt;<br>       stdin:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       stdout:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; stderr:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; int</code>", "prog:string ->       args:string array ->       env:string array ->       stdin:file_descr ->       stdout:file_descr -> stderr:file_descr -> int"],
["Unix", "Unix.html", "create_process", "Unix.html#VALcreate_process", "<div class=\"info\">  <p><code class=\"code\">create_process&nbsp;prog&nbsp;args&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code> forks a new process that executes the program in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>.</p> </div>", "  create_process\194\160prog\194\160args\194\160new_stdin\194\160new_stdout\194\160new_stderr forks a new process that executes the program in file prog, with arguments args. ", "<code class=\"type\">string -&gt;<br>       string array -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; int</code>", "string ->       string array -> file_descr -> file_descr -> file_descr -> int"],
["UnixLabels", "UnixLabels.html", "create_process", "UnixLabels.html#VALcreate_process", "<div class=\"info\">  <p><code class=\"code\">create_process&nbsp;prog&nbsp;args&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code> forks a new process that executes the program in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>.</p> </div>", "  create_process\194\160prog\194\160args\194\160new_stdin\194\160new_stdout\194\160new_stderr forks a new process that executes the program in file prog, with arguments args. ", "<code class=\"type\">prog:string -&gt;<br>       args:string array -&gt;<br>       stdin:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt;<br>       stdout:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; stderr:<a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; int</code>", "prog:string ->       args:string array ->       stdin:file_descr ->       stdout:file_descr -> stderr:file_descr -> int"],
["CamlinternalOO", "CamlinternalOO.html", "create_object_opt", "CamlinternalOO.html#VALcreate_object_opt", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPEobj\">obj</a></code>", "obj -> table -> obj"],
["CamlinternalOO", "CamlinternalOO.html", "create_object_and_run_initializers", "CamlinternalOO.html#VALcreate_object_and_run_initializers", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; <a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPEobj\">obj</a></code>", "obj -> table -> obj"],
["CamlinternalOO", "CamlinternalOO.html", "create_object", "CamlinternalOO.html#VALcreate_object", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; <a href=\"CamlinternalOO.html#TYPEobj\">obj</a></code>", "table -> obj"],
["Array", "Array.html", "create_matrix", "Array.html#VALcreate_matrix", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">int -&gt; int -&gt; 'a -&gt; 'a array array</code>", "int -> int -> 'a -> 'a array array"],
["ArrayLabels", "ArrayLabels.html", "create_matrix", "ArrayLabels.html#VALcreate_matrix", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">dimx:int -&gt; dimy:int -&gt; 'a -&gt; 'a array array</code>", "dimx:int -> dimy:int -> 'a -> 'a array array"],
["Graphics", "Graphics.html", "create_image", "Graphics.html#VALcreate_image", "<div class=\"info\">  <p><code class=\"code\">create_image&nbsp;w&nbsp;h</code> returns a new image <code class=\"code\">w</code> pixels wide and <code class=\"code\">h</code> pixels tall, to be used in conjunction with <code class=\"code\">blit_image</code>.</p> </div>", "  create_image\194\160w\194\160h returns a new image w pixels wide and h pixels tall, to be used in conjunction with blit_image. ", "<code class=\"type\">int -&gt; int -&gt; <a href=\"Graphics.html#TYPEimage\">image</a></code>", "int -> int -> image"],
["Misc", "Misc.html", "create_hashtable", "Misc.html#VALcreate_hashtable", "", "", "<code class=\"type\">int -&gt; ('a * 'b) list -&gt; ('a, 'b) <a href=\"Hashtbl.html#TYPEt\">Hashtbl.t</a></code>", "int -> ('a * 'b) list -> ('a, 'b) Hashtbl.t"],
["Array", "Array.html", "create_float", "Array.html#VALcreate_float", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>, with uninitialized data.</p> </div>", "  Array.create_float\194\160n returns a fresh float array of length n, with uninitialized data. ", "<code class=\"type\">int -&gt; float array</code>", "int -> float array"],
["ArrayLabels", "ArrayLabels.html", "create_float", "ArrayLabels.html#VALcreate_float", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>, with uninitialized data.</p> </div>", "  Array.create_float\194\160n returns a fresh float array of length n, with uninitialized data. ", "<code class=\"type\">int -&gt; float array</code>", "int -> float array"],
["CamlinternalFormat", "CamlinternalFormat.html", "create_char_set", "CamlinternalFormat.html#VALcreate_char_set", "", "", "<code class=\"type\">unit -&gt; <a href=\"CamlinternalFormat.html#TYPEmutable_char_set\">mutable_char_set</a></code>", "unit -> mutable_char_set"],
["Ccomp", "Ccomp.html", "create_archive", "Ccomp.html#VALcreate_archive", "", "", "<code class=\"type\">string -&gt; string list -&gt; int</code>", "string -> string list -> int"],
["Gc", "Gc.html", "create_alarm", "Gc.html#VALcreate_alarm", "<div class=\"info\">  <p><code class=\"code\">create_alarm&nbsp;f</code> will arrange for <code class=\"code\">f</code> to be called at the end of each major GC cycle, starting with the current cycle or the next one.</p> </div>", "  create_alarm\194\160f will arrange for f to be called at the end of each major GC cycle, starting with the current cycle or the next one. ", "<code class=\"type\">(unit -&gt; unit) -&gt; <a href=\"Gc.html#TYPEalarm\">alarm</a></code>", "(unit -> unit) -> alarm"],
["Array", "Array.html", "create", "Array.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">int -&gt; 'a -&gt; 'a array</code>", "int -> 'a -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "create", "ArrayLabels.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">int -&gt; 'a -&gt; 'a array</code>", "int -> 'a -> 'a array"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "create", "Bigarray.Genarray.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Genarray</span>.create&nbsp;kind&nbsp;layout&nbsp;dimensions</code> returns a new big array whose element kind is determined by the parameter <code class=\"code\">kind</code> (one of <code class=\"code\">float32</code>, <code class=\"code\">float64</code>, <code class=\"code\">int8_signed</code>, etc) and whose layout is determined by the parameter <code class=\"code\">layout</code> (one of <code class=\"code\">c_layout</code> or <code class=\"code\">fortran_layout</code>).</p> </div>", "  Genarray.create\194\160kind\194\160layout\194\160dimensions returns a new big array whose element kind is determined by the parameter kind (one of float32, float64, int8_signed, etc) and whose layout is determined by the parameter layout (one of c_layout or fortran_layout). ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; int array -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> int array -> ('a, 'b, 'c) t"],
["Bigarray.Array0", "Bigarray.Array0.html", "create", "Bigarray.Array0.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array0</span>.create&nbsp;kind&nbsp;layout</code> returns a new bigarray of zero dimension.</p> </div>", "  Array0.create\194\160kind\194\160layout returns a new bigarray of zero dimension. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> ('a, 'b, 'c) t"],
["Bigarray.Array1", "Bigarray.Array1.html", "create", "Bigarray.Array1.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array1</span>.create&nbsp;kind&nbsp;layout&nbsp;dim</code> returns a new bigarray of one dimension, whose size is <code class=\"code\">dim</code>.</p> </div>", "  Array1.create\194\160kind\194\160layout\194\160dim returns a new bigarray of one dimension, whose size is dim. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> int -> ('a, 'b, 'c) t"],
["Bigarray.Array2", "Bigarray.Array2.html", "create", "Bigarray.Array2.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array2</span>.create&nbsp;kind&nbsp;layout&nbsp;dim1&nbsp;dim2</code> returns a new bigarray of two dimension, whose size is <code class=\"code\">dim1</code> in the first dimension and <code class=\"code\">dim2</code> in the second dimension.</p> </div>", "  Array2.create\194\160kind\194\160layout\194\160dim1\194\160dim2 returns a new bigarray of two dimension, whose size is dim1 in the first dimension and dim2 in the second dimension. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; int -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> int -> int -> ('a, 'b, 'c) t"],
["Bigarray.Array3", "Bigarray.Array3.html", "create", "Bigarray.Array3.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array3</span>.create&nbsp;kind&nbsp;layout&nbsp;dim1&nbsp;dim2&nbsp;dim3</code> returns a new bigarray of three dimension, whose size is <code class=\"code\">dim1</code> in the first dimension, <code class=\"code\">dim2</code> in the second dimension, and <code class=\"code\">dim3</code> in the third.</p> </div>", "  Array3.create\194\160kind\194\160layout\194\160dim1\194\160dim2\194\160dim3 returns a new bigarray of three dimension, whose size is dim1 in the first dimension, dim2 in the second dimension, and dim3 in the third. ", "<code class=\"type\">('a, 'b) <a href=\"Bigarray.html#TYPEkind\">Bigarray.kind</a> -&gt;<br>       'c <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; int -&gt; int -&gt; int -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a></code>", "('a, 'b) Bigarray.kind ->       'c Bigarray.layout -> int -> int -> int -> ('a, 'b, 'c) t"],
["Buffer", "Buffer.html", "create", "Buffer.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\">create&nbsp;n</code> returns a fresh buffer, initially empty.</p> </div>", "  create\194\160n returns a fresh buffer, initially empty. ", "<code class=\"type\">int -&gt; <a href=\"Buffer.html#TYPEt\">t</a></code>", "int -> t"],
["Bytes", "Bytes.html", "create", "Bytes.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>.</p> </div>", "  create\194\160n returns a new byte sequence of length n. ", "<code class=\"type\">int -&gt; bytes</code>", "int -> bytes"],
["BytesLabels", "BytesLabels.html", "create", "BytesLabels.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>.</p> </div>", "  create\194\160n returns a new byte sequence of length n. ", "<code class=\"type\">int -&gt; bytes</code>", "int -> bytes"],
["Condition", "Condition.html", "create", "Condition.html#VALcreate", "<div class=\"info\">  <p>Return a new condition variable.</p> </div>", "  Return a new condition variable. ", "<code class=\"type\">unit -&gt; <a href=\"Condition.html#TYPEt\">t</a></code>", "unit -> t"],
["Consistbl", "Consistbl.html", "create", "Consistbl.html#VALcreate", "", "", "<code class=\"type\">unit -&gt; <a href=\"Consistbl.html#TYPEt\">t</a></code>", "unit -> t"],
["Ephemeron.K1", "Ephemeron.K1.html", "create", "Ephemeron.K1.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create&nbsp;()</code> creates an ephemeron with one key.</p> </div>", "  Ephemeron.K1.create\194\160() creates an ephemeron with one key. ", "<code class=\"type\">unit -&gt; ('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a></code>", "unit -> ('k, 'd) t"],
["Ephemeron.K2", "Ephemeron.K2.html", "create", "Ephemeron.K2.html#VALcreate", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create</code></a></p> </div>", "  Same as Ephemeron.K1.create ", "<code class=\"type\">unit -&gt; ('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a></code>", "unit -> ('k1, 'k2, 'd) t"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "create", "Ephemeron.Kn.html#VALcreate", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create</code></a></p> </div>", "  Same as Ephemeron.K1.create ", "<code class=\"type\">int -&gt; ('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a></code>", "int -> ('k, 'd) t"],
["Float.Array", "Float.Array.html", "create", "Float.Array.html#VALcreate", "", "", "<code class=\"type\">int -&gt; <a href=\"Float.Array.html#TYPEt\">t</a></code>", "int -> t"],
["Hashtbl", "Hashtbl.html", "create", "Hashtbl.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create&nbsp;n</code> creates a new, empty hash table, with initial size <code class=\"code\">n</code>.</p> </div>", "  Hashtbl.create\194\160n creates a new, empty hash table, with initial size n. ", "<code class=\"type\">?random:bool -&gt; int -&gt; ('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a></code>", "?random:bool -> int -> ('a, 'b) t"],
["Hashtbl.S", "Hashtbl.S.html", "create", "Hashtbl.S.html#VALcreate", "", "", "<code class=\"type\">int -&gt; 'a <a href=\"Hashtbl.S.html#TYPEt\">t</a></code>", "int -> 'a t"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "create", "Hashtbl.SeededS.html#VALcreate", "", "", "<code class=\"type\">?random:bool -&gt; int -&gt; 'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a></code>", "?random:bool -> int -> 'a t"],
["Misc.LongString", "Misc.LongString.html", "create", "Misc.LongString.html#VALcreate", "", "", "<code class=\"type\">int -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a></code>", "int -> t"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "create", "MoreLabels.Hashtbl.html#VALcreate", "", "", "<code class=\"type\">?random:bool -&gt; int -&gt; ('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a></code>", "?random:bool -> int -> ('a, 'b) t"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "create", "MoreLabels.Hashtbl.S.html#VALcreate", "", "", "<code class=\"type\">int -&gt; 'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a></code>", "int -> 'a t"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "create", "MoreLabels.Hashtbl.SeededS.html#VALcreate", "", "", "<code class=\"type\">?random:bool -&gt; int -&gt; 'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a></code>", "?random:bool -> int -> 'a t"],
["Mutex", "Mutex.html", "create", "Mutex.html#VALcreate", "<div class=\"info\">  <p>Return a new mutex.</p> </div>", "  Return a new mutex. ", "<code class=\"type\">unit -&gt; <a href=\"Mutex.html#TYPEt\">t</a></code>", "unit -> t"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "create", "Obj.Ephemeron.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\">create&nbsp;n</code> returns an ephemeron with <code class=\"code\">n</code> keys.</p> </div>", "  create\194\160n returns an ephemeron with n keys. ", "<code class=\"type\">int -&gt; <a href=\"Obj.Ephemeron.html#TYPEt\">t</a></code>", "int -> t"],
["Queue", "Queue.html", "create", "Queue.html#VALcreate", "<div class=\"info\">  <p>Return a new queue, initially empty.</p> </div>", "  Return a new queue, initially empty. ", "<code class=\"type\">unit -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a></code>", "unit -> 'a t"],
["Spacetime.Series", "Spacetime.Series.html", "create", "Spacetime.Series.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\">create&nbsp;~path</code> creates a series file at <code class=\"code\">path</code>.</p> </div>", "  create\194\160~path creates a series file at path. ", "<code class=\"type\">path:string -&gt; <a href=\"Spacetime.Series.html#TYPEt\">t</a></code>", "path:string -> t"],
["Stack", "Stack.html", "create", "Stack.html#VALcreate", "<div class=\"info\">  <p>Return a new stack, initially empty.</p> </div>", "  Return a new stack, initially empty. ", "<code class=\"type\">unit -&gt; 'a <a href=\"Stack.html#TYPEt\">t</a></code>", "unit -> 'a t"],
["StringLabels", "StringLabels.html", "create", "StringLabels.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.</p> </span></div>", "  String.create\194\160n returns a fresh byte sequence of length n. ", "<code class=\"type\">int -&gt; bytes</code>", "int -> bytes"],
["String", "String.html", "create", "String.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.</p> </span></div>", "  String.create\194\160n returns a fresh byte sequence of length n. ", "<code class=\"type\">int -&gt; bytes</code>", "int -> bytes"],
["Thread", "Thread.html", "create", "Thread.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Thread</span>.create&nbsp;funct&nbsp;arg</code> creates a new thread of control, in which the function application <code class=\"code\">funct&nbsp;arg</code> is executed concurrently with the other threads of the program.</p> </div>", "  Thread.create\194\160funct\194\160arg creates a new thread of control, in which the function application funct\194\160arg is executed concurrently with the other threads of the program. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a -&gt; <a href=\"Thread.html#TYPEt\">t</a></code>", "('a -> 'b) -> 'a -> t"],
["Weak", "Weak.html", "create", "Weak.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.create&nbsp;n</code> returns a new weak array of length <code class=\"code\">n</code>.</p> </div>", "  Weak.create\194\160n returns a new weak array of length n. ", "<code class=\"type\">int -&gt; 'a <a href=\"Weak.html#TYPEt\">t</a></code>", "int -> 'a t"],
["Weak.S", "Weak.S.html", "create", "Weak.S.html#VALcreate", "<div class=\"info\">  <p><code class=\"code\">create&nbsp;n</code> creates a new empty weak hash set, of initial size <code class=\"code\">n</code>.</p> </div>", "  create\194\160n creates a new empty weak hash set, of initial size n. ", "<code class=\"type\">int -&gt; <a href=\"Weak.S.html#TYPEt\">t</a></code>", "int -> t"],
["Gc", "Gc.html", "counters", "Gc.html#VALcounters", "<div class=\"info\">  <p>Return <code class=\"code\">(minor_words,&nbsp;promoted_words,&nbsp;major_words)</code>.</p> </div>", "  Return (minor_words,\194\160promoted_words,\194\160major_words). ", "<code class=\"type\">unit -&gt; float * float * float</code>", "unit -> float * float * float"],
["Stream", "Stream.html", "count", "Stream.html#VALcount", "<div class=\"info\">  <p>Return the current count of the stream elements, i.e.</p> </div>", "  Return the current count of the stream elements, i.e. ", "<code class=\"type\">'a <a href=\"Stream.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["Weak.S", "Weak.S.html", "count", "Weak.S.html#VALcount", "<div class=\"info\">  <p>Count the number of elements in the table.</p> </div>", "  Count the number of elements in the table. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Float", "Float.html", "cosh", "Float.html#VALcosh", "<div class=\"info\">  <p>Hyperbolic cosine.</p> </div>", "  Hyperbolic cosine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "cosh", "Pervasives.html#VALcosh", "<div class=\"info\">  <p>Hyperbolic cosine.</p> </div>", "  Hyperbolic cosine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Float", "Float.html", "cos", "Float.html#VALcos", "<div class=\"info\">  <p>Cosine.</p> </div>", "  Cosine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "cos", "Pervasives.html#VALcos", "<div class=\"info\">  <p>Cosine.</p> </div>", "  Cosine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Parse", "Parse.html", "core_type", "Parse.html#VALcore_type", "", "", "<code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">Lexing.lexbuf</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Lexing.lexbuf -> Parsetree.core_type"],
["Pprintast", "Pprintast.html", "core_type", "Pprintast.html#VALcore_type", "", "", "<code class=\"type\"><a href=\"Format.html#TYPEformatter\">Format.formatter</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; unit</code>", "Format.formatter -> Parsetree.core_type -> unit"],
["Float", "Float.html", "copysign", "Float.html#VALcopysign", "<div class=\"info\">  <p><code class=\"code\">copysign&nbsp;x&nbsp;y</code> returns a float whose absolute value is that of <code class=\"code\">x</code> and whose sign is that of <code class=\"code\">y</code>.</p> </div>", "  copysign\194\160x\194\160y returns a float whose absolute value is that of x and whose sign is that of y. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "copysign", "Pervasives.html#VALcopysign", "<div class=\"info\">  <p><code class=\"code\">copysign&nbsp;x&nbsp;y</code> returns a float whose absolute value is that of <code class=\"code\">x</code> and whose sign is that of <code class=\"code\">y</code>.</p> </div>", "  copysign\194\160x\194\160y returns a float whose absolute value is that of x and whose sign is that of y. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Misc", "Misc.html", "copy_file_chunk", "Misc.html#VALcopy_file_chunk", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int -&gt; unit</code>", "in_channel -> out_channel -> int -> unit"],
["Misc", "Misc.html", "copy_file", "Misc.html#VALcopy_file", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "in_channel -> out_channel -> unit"],
["Array", "Array.html", "copy", "Array.html#VALcopy", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array containing the same elements as <code class=\"code\">a</code>.</p> </div>", "  Array.copy\194\160a returns a copy of a, that is, a fresh array containing the same elements as a. ", "<code class=\"type\">'a array -&gt; 'a array</code>", "'a array -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "copy", "ArrayLabels.html#VALcopy", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array containing the same elements as <code class=\"code\">a</code>.</p> </div>", "  Array.copy\194\160a returns a copy of a, that is, a fresh array containing the same elements as a. ", "<code class=\"type\">'a array -&gt; 'a array</code>", "'a array -> 'a array"],
["Bytes", "Bytes.html", "copy", "Bytes.html#VALcopy", "<div class=\"info\">  <p>Return a new byte sequence that contains the same bytes as the argument.</p> </div>", "  Return a new byte sequence that contains the same bytes as the argument. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "copy", "BytesLabels.html#VALcopy", "<div class=\"info\">  <p>Return a new byte sequence that contains the same bytes as the argument.</p> </div>", "  Return a new byte sequence that contains the same bytes as the argument. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["CamlinternalOO", "CamlinternalOO.html", "copy", "CamlinternalOO.html#VALcopy", "", "", "<code class=\"type\">(&lt; .. &gt; as 'a) -&gt; 'a</code>", "(< .. > as 'a) -> 'a"],
["Hashtbl", "Hashtbl.html", "copy", "Hashtbl.html#VALcopy", "<div class=\"info\">  <p>Return a copy of the given hashtable.</p> </div>", "  Return a copy of the given hashtable. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; ('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a></code>", "('a, 'b) t -> ('a, 'b) t"],
["Hashtbl.S", "Hashtbl.S.html", "copy", "Hashtbl.S.html#VALcopy", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Hashtbl.S.html#TYPEt\">t</a></code>", "'a t -> 'a t"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "copy", "Hashtbl.SeededS.html#VALcopy", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; 'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a></code>", "'a t -> 'a t"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "copy", "MoreLabels.Hashtbl.html#VALcopy", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; ('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a></code>", "('a, 'b) t -> ('a, 'b) t"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "copy", "MoreLabels.Hashtbl.S.html#VALcopy", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a></code>", "'a t -> 'a t"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "copy", "MoreLabels.Hashtbl.SeededS.html#VALcopy", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a></code>", "'a t -> 'a t"],
["Oo", "Oo.html", "copy", "Oo.html#VALcopy", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Oo</span>.copy&nbsp;o</code> returns a copy of object <code class=\"code\">o</code>, that is a fresh object with the same methods and instance variables as <code class=\"code\">o</code>.</p> </div>", "  Oo.copy\194\160o returns a copy of object o, that is a fresh object with the same methods and instance variables as o. ", "<code class=\"type\">(&lt; .. &gt; as 'a) -&gt; 'a</code>", "(< .. > as 'a) -> 'a"],
["Queue", "Queue.html", "copy", "Queue.html#VALcopy", "<div class=\"info\">  <p>Return a copy of the given queue.</p> </div>", "  Return a copy of the given queue. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a></code>", "'a t -> 'a t"],
["Random.State", "Random.State.html", "copy", "Random.State.html#VALcopy", "<div class=\"info\">  <p>Return a copy of the given state.</p> </div>", "  Return a copy of the given state. ", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; <a href=\"Random.State.html#TYPEt\">t</a></code>", "t -> t"],
["Stack", "Stack.html", "copy", "Stack.html#VALcopy", "<div class=\"info\">  <p>Return a copy of the given stack.</p> </div>", "  Return a copy of the given stack. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; 'a <a href=\"Stack.html#TYPEt\">t</a></code>", "'a t -> 'a t"],
["StringLabels", "StringLabels.html", "copy", "StringLabels.html#VALcopy", "<div class=\"info\">  <p>Return a copy of the given string.</p> </div>", "  Return a copy of the given string. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "copy", "String.html#VALcopy", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the given string.</p> </span></div>", "  Return a copy of the given string. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Printexc", "Printexc.html", "convert_raw_backtrace_slot", "Printexc.html#VALconvert_raw_backtrace_slot", "<div class=\"info\">  <p>Extracts the user-friendly <code class=\"code\">backtrace_slot</code> from a low-level <code class=\"code\">raw_backtrace_slot</code>.</p> </div>", "  Extracts the user-friendly backtrace_slot from a low-level raw_backtrace_slot. ", "<code class=\"type\"><a href=\"Printexc.html#TYPEraw_backtrace_slot\">raw_backtrace_slot</a> -&gt; <a href=\"Printexc.html#TYPEbacktrace_slot\">backtrace_slot</a></code>", "raw_backtrace_slot -> backtrace_slot"],
["Buffer", "Buffer.html", "contents", "Buffer.html#VALcontents", "<div class=\"info\">  <p>Return a copy of the current contents of the buffer.</p> </div>", "  Return a copy of the current contents of the buffer. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; string</code>", "t -> string"],
["Bytes", "Bytes.html", "contains_from", "Bytes.html#VALcontains_from", "<div class=\"info\">  <p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.</p> </div>", "  contains_from\194\160s\194\160start\194\160c tests if byte c appears in s after position start. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; bool</code>", "bytes -> int -> char -> bool"],
["BytesLabels", "BytesLabels.html", "contains_from", "BytesLabels.html#VALcontains_from", "<div class=\"info\">  <p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.</p> </div>", "  contains_from\194\160s\194\160start\194\160c tests if byte c appears in s after position start. ", "<code class=\"type\">bytes -&gt; int -&gt; char -&gt; bool</code>", "bytes -> int -> char -> bool"],
["StringLabels", "StringLabels.html", "contains_from", "StringLabels.html#VALcontains_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.</p> </div>", "  String.contains_from\194\160s\194\160start\194\160c tests if character c appears in s after position start. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; bool</code>", "string -> int -> char -> bool"],
["String", "String.html", "contains_from", "String.html#VALcontains_from", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.</p> </div>", "  String.contains_from\194\160s\194\160start\194\160c tests if character c appears in s after position start. ", "<code class=\"type\">string -&gt; int -&gt; char -&gt; bool</code>", "string -> int -> char -> bool"],
["Bytes", "Bytes.html", "contains", "Bytes.html#VALcontains", "<div class=\"info\">  <p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p> </div>", "  contains\194\160s\194\160c tests if byte c appears in s. ", "<code class=\"type\">bytes -&gt; char -&gt; bool</code>", "bytes -> char -> bool"],
["BytesLabels", "BytesLabels.html", "contains", "BytesLabels.html#VALcontains", "<div class=\"info\">  <p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p> </div>", "  contains\194\160s\194\160c tests if byte c appears in s. ", "<code class=\"type\">bytes -&gt; char -&gt; bool</code>", "bytes -> char -> bool"],
["StringLabels", "StringLabels.html", "contains", "StringLabels.html#VALcontains", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in the string <code class=\"code\">s</code>.</p> </div>", "  String.contains\194\160s\194\160c tests if character c appears in the string s. ", "<code class=\"type\">string -&gt; char -&gt; bool</code>", "string -> char -> bool"],
["String", "String.html", "contains", "String.html#VALcontains", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code> appears in the string <code class=\"code\">s</code>.</p> </div>", "  String.contains\194\160s\194\160c tests if character c appears in the string s. ", "<code class=\"type\">string -&gt; char -&gt; bool</code>", "string -> char -> bool"],
["Ast_helper.Type", "Ast_helper.Type.html", "constructor", "Ast_helper.Type.html#VALconstructor", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       ?args:<a href=\"Parsetree.html#TYPEconstructor_arguments\">Parsetree.constructor_arguments</a> -&gt;<br>       ?res:<a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEconstructor_declaration\">Parsetree.constructor_declaration</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?info:Docstrings.info ->       ?args:Parsetree.constructor_arguments ->       ?res:Parsetree.core_type ->       Ast_helper.str -> Parsetree.constructor_declaration"],
["Ast_helper.Te", "Ast_helper.Te.html", "constructor", "Ast_helper.Te.html#VALconstructor", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       ?docs:<a href=\"Docstrings.html#TYPEdocs\">Docstrings.docs</a> -&gt;<br>       ?info:<a href=\"Docstrings.html#TYPEinfo\">Docstrings.info</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor_kind\">Parsetree.extension_constructor_kind</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       ?docs:Docstrings.docs ->       ?info:Docstrings.info ->       Ast_helper.str ->       Parsetree.extension_constructor_kind -> Parsetree.extension_constructor"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "construct", "Ast_helper.Pat.html#VALconstruct", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> option -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.pattern option -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "construct", "Ast_helper.Exp.html#VALconstruct", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> option -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.expression option -> Parsetree.expression"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "constraint_", "Ast_helper.Pat.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern -> Parsetree.core_type -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "constraint_", "Ast_helper.Exp.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression -> Parsetree.core_type -> Parsetree.expression"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "constraint_", "Ast_helper.Mod.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_expr -> Parsetree.module_type -> Parsetree.module_expr"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "constraint_", "Ast_helper.Ctf.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.core_type -> Parsetree.core_type -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "constraint_", "Ast_helper.Cl.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.class_expr -> Parsetree.class_type -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "constraint_", "Ast_helper.Cf.html#VALconstraint_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.core_type -> Parsetree.core_type -> Parsetree.class_field"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "constr", "Ast_helper.Typ.html#VALconstr", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "constr", "Ast_helper.Cty.html#VALconstr", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.class_type"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "constr", "Ast_helper.Cl.html#VALconstr", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.class_expr"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "constant", "Ast_helper.Pat.html#VALconstant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.constant -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "constant", "Ast_helper.Exp.html#VALconstant", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.constant -> Parsetree.expression"],
["List", "List.html", "cons", "List.html#VALcons", "<div class=\"info\">  <p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p> </div>", "  cons\194\160x\194\160xs is x\194\160::\194\160xs ", "<code class=\"type\">'a -&gt; 'a list -&gt; 'a list</code>", "'a -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "cons", "ListLabels.html#VALcons", "<div class=\"info\">  <p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p> </div>", "  cons\194\160x\194\160xs is x\194\160::\194\160xs ", "<code class=\"type\">'a -&gt; 'a list -&gt; 'a list</code>", "'a -> 'a list -> 'a list"],
["Strongly_connected_components.S", "Strongly_connected_components.S.html", "connected_components_sorted_from_roots_to_leaf", "Strongly_connected_components.S.html#VALconnected_components_sorted_from_roots_to_leaf", "", "", "<code class=\"type\"><a href=\"Strongly_connected_components.S.html#TYPEdirected_graph\">directed_graph</a> -&gt;<br>       <a href=\"Strongly_connected_components.S.html#TYPEcomponent\">component</a> array</code>", "directed_graph ->       component array"],
["ThreadUnix", "ThreadUnix.html", "connect", "ThreadUnix.html#VALconnect", "", "", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; <a href=\"Unix.html#TYPEsockaddr\">Unix.sockaddr</a> -&gt; unit</code>", "Unix.file_descr -> Unix.sockaddr -> unit"],
["Unix", "Unix.html", "connect", "Unix.html#VALconnect", "<div class=\"info\">  <p>Connect a socket to an address.</p> </div>", "  Connect a socket to an address. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; unit</code>", "file_descr -> sockaddr -> unit"],
["UnixLabels", "UnixLabels.html", "connect", "UnixLabels.html#VALconnect", "<div class=\"info\">  <p>Connect a socket to an address.</p> </div>", "  Connect a socket to an address. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; addr:<a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt; unit</code>", "file_descr -> addr:sockaddr -> unit"],
["Complex", "Complex.html", "conj", "Complex.html#VALconj", "<div class=\"info\">  <p>Conjugate: given the complex <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x&nbsp;-&nbsp;i.y</code>.</p> </div>", "  Conjugate: given the complex x\194\160+\194\160i.y, returns x\194\160-\194\160i.y. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "concrete", "Ast_helper.Cf.html#VALconcrete", "", "", "<code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field_kind\">Parsetree.class_field_kind</a></code>", "Asttypes.override_flag -> Parsetree.expression -> Parsetree.class_field_kind"],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "concat_fmtty", "CamlinternalFormatBasics.html#VALconcat_fmtty", "", "", "<code class=\"type\">('g1, 'b1, 'c1, 'j1, 'd1, 'a1, 'g2, 'b2, 'c2, 'j2, 'd2, 'a2)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a> -&gt;<br>       ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a> -&gt;<br>       ('g1, 'b1, 'c1, 'j1, 'e1, 'f1, 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code>", "('g1, 'b1, 'c1, 'j1, 'd1, 'a1, 'g2, 'b2, 'c2, 'j2, 'd2, 'a2)       fmtty_rel ->       ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)       fmtty_rel ->       ('g1, 'b1, 'c1, 'j1, 'e1, 'f1, 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)       fmtty_rel"],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "concat_fmt", "CamlinternalFormatBasics.html#VALconcat_fmt", "", "", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a> -&gt;<br>       ('f, 'b, 'c, 'e, 'g, 'h) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'g, 'h) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code>", "('a, 'b, 'c, 'd, 'e, 'f) fmt ->       ('f, 'b, 'c, 'e, 'g, 'h) fmt ->       ('a, 'b, 'c, 'd, 'g, 'h) fmt"],
["Array", "Array.html", "concat", "Array.html#VALconcat", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p> </div>", "  Same as Array.append, but concatenates a list of arrays. ", "<code class=\"type\">'a array list -&gt; 'a array</code>", "'a array list -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "concat", "ArrayLabels.html#VALconcat", "<div class=\"info\">  <p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p> </div>", "  Same as Array.append, but concatenates a list of arrays. ", "<code class=\"type\">'a array list -&gt; 'a array</code>", "'a array list -> 'a array"],
["Bytes", "Bytes.html", "concat", "Bytes.html#VALconcat", "<div class=\"info\">  <p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>, inserting the separator byte sequence <code class=\"code\">sep</code> between each, and returns the result as a new byte sequence.</p> </div>", "  concat\194\160sep\194\160sl concatenates the list of byte sequences sl, inserting the separator byte sequence sep between each, and returns the result as a new byte sequence. ", "<code class=\"type\">bytes -&gt; bytes list -&gt; bytes</code>", "bytes -> bytes list -> bytes"],
["BytesLabels", "BytesLabels.html", "concat", "BytesLabels.html#VALconcat", "<div class=\"info\">  <p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>, inserting the separator byte sequence <code class=\"code\">sep</code> between each, and returns the result as a new byte sequence.</p> </div>", "  concat\194\160sep\194\160sl concatenates the list of byte sequences sl, inserting the separator byte sequence sep between each, and returns the result as a new byte sequence. ", "<code class=\"type\">sep:bytes -&gt; bytes list -&gt; bytes</code>", "sep:bytes -> bytes list -> bytes"],
["Filename", "Filename.html", "concat", "Filename.html#VALconcat", "<div class=\"info\">  <p><code class=\"code\">concat&nbsp;dir&nbsp;file</code> returns a file name that designates file <code class=\"code\">file</code> in directory <code class=\"code\">dir</code>.</p> </div>", "  concat\194\160dir\194\160file returns a file name that designates file file in directory dir. ", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["List", "List.html", "concat", "List.html#VALconcat", "<div class=\"info\">  <p>Concatenate a list of lists.</p> </div>", "  Concatenate a list of lists. ", "<code class=\"type\">'a list list -&gt; 'a list</code>", "'a list list -> 'a list"],
["ListLabels", "ListLabels.html", "concat", "ListLabels.html#VALconcat", "<div class=\"info\">  <p>Concatenate a list of lists.</p> </div>", "  Concatenate a list of lists. ", "<code class=\"type\">'a list list -&gt; 'a list</code>", "'a list list -> 'a list"],
["StringLabels", "StringLabels.html", "concat", "StringLabels.html#VALconcat", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>, inserting the separator string <code class=\"code\">sep</code> between each.</p> </div>", "  String.concat\194\160sep\194\160sl concatenates the list of strings sl, inserting the separator string sep between each. ", "<code class=\"type\">sep:string -&gt; string list -&gt; string</code>", "sep:string -> string list -> string"],
["String", "String.html", "concat", "String.html#VALconcat", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>, inserting the separator string <code class=\"code\">sep</code> between each.</p> </div>", "  String.concat\194\160sep\194\160sl concatenates the list of strings sl, inserting the separator string sep between each. ", "<code class=\"type\">string -&gt; string list -&gt; string</code>", "string -> string list -> string"],
["Strongly_connected_components.S", "Strongly_connected_components.S.html", "component_graph", "Strongly_connected_components.S.html#VALcomponent_graph", "", "", "<code class=\"type\"><a href=\"Strongly_connected_components.S.html#TYPEdirected_graph\">directed_graph</a> -&gt;<br>       (<a href=\"Strongly_connected_components.S.html#TYPEcomponent\">component</a> * int list) array</code>", "directed_graph ->       (component * int list) array"],
["Bigarray", "Bigarray.html", "complex64", "Bigarray.html#VALcomplex64", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(<a href=\"Complex.html#TYPEt\">Complex.t</a>, <a href=\"Bigarray.html#TYPEcomplex64_elt\">complex64_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(Complex.t, complex64_elt) kind"],
["Bigarray", "Bigarray.html", "complex32", "Bigarray.html#VALcomplex32", "<div class=\"info\">  <p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p> </div>", "  See Bigarray.char. ", "<code class=\"type\">(<a href=\"Complex.html#TYPEt\">Complex.t</a>, <a href=\"Bigarray.html#TYPEcomplex32_elt\">complex32_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(Complex.t, complex32_elt) kind"],
["Clflags", "Clflags.html", "compile_only", "Clflags.html#VALcompile_only", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Ccomp", "Ccomp.html", "compile_file", "Ccomp.html#VALcompile_file", "", "", "<code class=\"type\">?output:string -&gt; ?opt:string -&gt; string -&gt; int</code>", "?output:string -> ?opt:string -> string -> int"],
["List", "List.html", "compare_lengths", "List.html#VALcompare_lengths", "<div class=\"info\">  <p>Compare the lengths of two lists.</p> </div>", "  Compare the lengths of two lists. ", "<code class=\"type\">'a list -&gt; 'b list -&gt; int</code>", "'a list -> 'b list -> int"],
["ListLabels", "ListLabels.html", "compare_lengths", "ListLabels.html#VALcompare_lengths", "<div class=\"info\">  <p>Compare the lengths of two lists.</p> </div>", "  Compare the lengths of two lists. ", "<code class=\"type\">'a list -&gt; 'b list -&gt; int</code>", "'a list -> 'b list -> int"],
["List", "List.html", "compare_length_with", "List.html#VALcompare_length_with", "<div class=\"info\">  <p>Compare the length of a list to an integer.</p> </div>", "  Compare the length of a list to an integer. ", "<code class=\"type\">'a list -&gt; int -&gt; int</code>", "'a list -> int -> int"],
["ListLabels", "ListLabels.html", "compare_length_with", "ListLabels.html#VALcompare_length_with", "<div class=\"info\">  <p>Compare the length of a list to an integer.</p> </div>", "  Compare the length of a list to an integer. ", "<code class=\"type\">'a list -&gt; len:int -&gt; int</code>", "'a list -> len:int -> int"],
["Bytes", "Bytes.html", "compare", "Bytes.html#VALcompare", "<div class=\"info\">  <p>The comparison function for byte sequences, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for byte sequences, with the same specification as compare. ", "<code class=\"type\"><a href=\"Bytes.html#TYPEt\">t</a> -&gt; <a href=\"Bytes.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["BytesLabels", "BytesLabels.html", "compare", "BytesLabels.html#VALcompare", "<div class=\"info\">  <p>The comparison function for byte sequences, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for byte sequences, with the same specification as compare. ", "<code class=\"type\"><a href=\"BytesLabels.html#TYPEt\">t</a> -&gt; <a href=\"BytesLabels.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Char", "Char.html", "compare", "Char.html#VALcompare", "<div class=\"info\">  <p>The comparison function for characters, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for characters, with the same specification as compare. ", "<code class=\"type\"><a href=\"Char.html#TYPEt\">t</a> -&gt; <a href=\"Char.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Set.S", "Set.S.html", "compare", "Set.S.html#VALcompare", "<div class=\"info\">  <p>Total ordering between sets.</p> </div>", "  Total ordering between sets. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Map.S", "Map.S.html", "compare", "Map.S.html#VALcompare", "<div class=\"info\">  <p>Total ordering between maps.</p> </div>", "  Total ordering between maps. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; int</code>", "('a -> 'a -> int) -> 'a t -> 'a t -> int"],
["Digest", "Digest.html", "compare", "Digest.html#VALcompare", "<div class=\"info\">  <p>The comparison function for 16-character digest, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> and the implementation shared with <a href=\"String.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">String</span>.compare</code></a>.</p> </div>", "  The comparison function for 16-character digest, with the same specification as compare and the implementation shared with String.compare. ", "<code class=\"type\"><a href=\"Digest.html#TYPEt\">t</a> -&gt; <a href=\"Digest.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Float", "Float.html", "compare", "Float.html#VALcompare", "<div class=\"info\">  <p><code class=\"code\">compare&nbsp;x&nbsp;y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>, a negative integer if <code class=\"code\">x</code> is less than <code class=\"code\">y</code>, and a positive integer if <code class=\"code\">x</code> is greater than <code class=\"code\">y</code>.</p> </div>", "  compare\194\160x\194\160y returns 0 if x is equal to y, a negative integer if x is less than y, and a positive integer if x is greater than y. ", "<code class=\"type\"><a href=\"Float.html#TYPEt\">t</a> -&gt; <a href=\"Float.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Set.OrderedType", "Set.OrderedType.html", "compare", "Set.OrderedType.html#VALcompare", "<div class=\"info\">  <p>A total ordering function over the set elements.</p> </div>", "  A total ordering function over the set elements. ", "<code class=\"type\"><a href=\"Set.OrderedType.html#TYPEt\">t</a> -&gt; <a href=\"Set.OrderedType.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Map.OrderedType", "Map.OrderedType.html", "compare", "Map.OrderedType.html#VALcompare", "<div class=\"info\">  <p>A total ordering function over the keys.</p> </div>", "  A total ordering function over the keys. ", "<code class=\"type\"><a href=\"Map.OrderedType.html#TYPEt\">t</a> -&gt; <a href=\"Map.OrderedType.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Int32", "Int32.html", "compare", "Int32.html#VALcompare", "<div class=\"info\">  <p>The comparison function for 32-bit integers, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for 32-bit integers, with the same specification as compare. ", "<code class=\"type\"><a href=\"Int32.html#TYPEt\">t</a> -&gt; <a href=\"Int32.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Int64", "Int64.html", "compare", "Int64.html#VALcompare", "<div class=\"info\">  <p>The comparison function for 64-bit integers, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for 64-bit integers, with the same specification as compare. ", "<code class=\"type\"><a href=\"Int64.html#TYPEt\">t</a> -&gt; <a href=\"Int64.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Misc.Stdlib.List", "Misc.Stdlib.List.html", "compare", "Misc.Stdlib.List.html#VALcompare", "<div class=\"info\">  <p>The lexicographic order supported by the provided order.</p> </div>", "  The lexicographic order supported by the provided order. ", "<code class=\"type\">('a -&gt; 'a -&gt; int) -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; 'a <a href=\"Misc.Stdlib.List.html#TYPEt\">t</a> -&gt; int</code>", "('a -> 'a -> int) -> 'a t -> 'a t -> int"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "compare", "MoreLabels.Map.S.html#VALcompare", "", "", "<code class=\"type\">cmp:('a -&gt; 'a -&gt; int) -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; int</code>", "cmp:('a -> 'a -> int) ->       'a t -> 'a t -> int"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "compare", "MoreLabels.Set.S.html#VALcompare", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Nativeint", "Nativeint.html", "compare", "Nativeint.html#VALcompare", "<div class=\"info\">  <p>The comparison function for native integers, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for native integers, with the same specification as compare. ", "<code class=\"type\"><a href=\"Nativeint.html#TYPEt\">t</a> -&gt; <a href=\"Nativeint.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Pervasives", "Pervasives.html", "compare", "Pervasives.html#VALcompare", "<div class=\"info\">  <p><code class=\"code\">compare&nbsp;x&nbsp;y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>, a negative integer if <code class=\"code\">x</code> is less than <code class=\"code\">y</code>, and a positive integer if <code class=\"code\">x</code> is greater than <code class=\"code\">y</code>.</p> </div>", "  compare\194\160x\194\160y returns 0 if x is equal to y, a negative integer if x is less than y, and a positive integer if x is greater than y. ", "<code class=\"type\">'a -&gt; 'a -&gt; int</code>", "'a -> 'a -> int"],
["StringLabels", "StringLabels.html", "compare", "StringLabels.html#VALcompare", "<div class=\"info\">  <p>The comparison function for strings, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for strings, with the same specification as compare. ", "<code class=\"type\"><a href=\"StringLabels.html#TYPEt\">t</a> -&gt; <a href=\"StringLabels.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["String", "String.html", "compare", "String.html#VALcompare", "<div class=\"info\">  <p>The comparison function for strings, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for strings, with the same specification as compare. ", "<code class=\"type\"><a href=\"String.html#TYPEt\">t</a> -&gt; <a href=\"String.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Targetint", "Targetint.html", "compare", "Targetint.html#VALcompare", "<div class=\"info\">  <p>The comparison function for target integers, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p> </div>", "  The comparison function for target integers, with the same specification as compare. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Uchar", "Uchar.html", "compare", "Uchar.html#VALcompare", "<div class=\"info\">  <p><code class=\"code\">compare&nbsp;u&nbsp;u'</code> is <code class=\"code\"><span class=\"constructor\">Pervasives</span>.compare&nbsp;u&nbsp;u'</code>.</p> </div>", "  compare\194\160u\194\160u' is Pervasives.compare\194\160u\194\160u'. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a> -&gt; <a href=\"Uchar.html#TYPEt\">t</a> -&gt; int</code>", "t -> t -> int"],
["Gc", "Gc.html", "compact", "Gc.html#VALcompact", "<div class=\"info\">  <p>Perform a full major collection and compact the heap.</p> </div>", "  Perform a full major collection and compact the heap. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Lexer", "Lexer.html", "comments", "Lexer.html#VALcomments", "", "", "<code class=\"type\">unit -&gt; (string * <a href=\"Location.html#TYPEt\">Location.t</a>) list</code>", "unit -> (string * Location.t) list"],
["Ccomp", "Ccomp.html", "command", "Ccomp.html#VALcommand", "", "", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["Sys", "Sys.html", "command", "Sys.html#VALcommand", "<div class=\"info\">  <p>Execute the given shell command and return its exit code.</p> </div>", "  Execute the given shell command and return its exit code. ", "<code class=\"type\">string -&gt; int</code>", "string -> int"],
["List", "List.html", "combine", "List.html#VALcombine", "<div class=\"info\">  <p>Transform a pair of lists into a list of pairs: <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.</p> </div>", "  Transform a pair of lists into a list of pairs: combine\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn] is [(a1,b1);\194\160...;\194\160(an,bn)]. ", "<code class=\"type\">'a list -&gt; 'b list -&gt; ('a * 'b) list</code>", "'a list -> 'b list -> ('a * 'b) list"],
["ListLabels", "ListLabels.html", "combine", "ListLabels.html#VALcombine", "<div class=\"info\">  <p>Transform a pair of lists into a list of pairs: <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.</p> </div>", "  Transform a pair of lists into a list of pairs: combine\194\160[a1;\194\160...;\194\160an]\194\160[b1;\194\160...;\194\160bn] is [(a1,b1);\194\160...;\194\160(an,bn)]. ", "<code class=\"type\">'a list -&gt; 'b list -&gt; ('a * 'b) list</code>", "'a list -> 'b list -> ('a * 'b) list"],
["Clflags", "Clflags.html", "color", "Clflags.html#VALcolor", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEsetting\">Misc.Color.setting</a> option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "Misc.Color.setting option ref"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "coerce", "Ast_helper.Exp.html#VALcoerce", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> option -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       Parsetree.core_type option -> Parsetree.core_type -> Parsetree.expression"],
["Char", "Char.html", "code", "Char.html#VALcode", "<div class=\"info\">  <p>Return the ASCII code of the argument.</p> </div>", "  Return the ASCII code of the argument. ", "<code class=\"type\">char -&gt; int</code>", "char -> int"],
["Config", "Config.html", "cmxs_magic_number", "Config.html#VALcmxs_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmxa_magic_number", "Config.html#VALcmxa_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmx_magic_number", "Config.html#VALcmx_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmt_magic_number", "Config.html#VALcmt_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmo_magic_number", "Config.html#VALcmo_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cmi_magic_number", "Config.html#VALcmi_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "cma_magic_number", "Config.html#VALcma_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Obj", "Obj.html", "closure_tag", "Obj.html#VALclosure_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Unix", "Unix.html", "closedir", "Unix.html#VALclosedir", "<div class=\"info\">  <p>Close a directory descriptor.</p> </div>", "  Close a directory descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEdir_handle\">dir_handle</a> -&gt; unit</code>", "dir_handle -> unit"],
["UnixLabels", "UnixLabels.html", "closedir", "UnixLabels.html#VALclosedir", "<div class=\"info\">  <p>Close a directory descriptor.</p> </div>", "  Close a directory descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEdir_handle\">dir_handle</a> -&gt; unit</code>", "dir_handle -> unit"],
["Format", "Format.html", "close_tbox", "Format.html#VALclose_tbox", "<div class=\"info\">  <p>Closes the most recently opened tabulation box.</p> </div>", "  Closes the most recently opened tabulation box. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Format", "Format.html", "close_tag", "Format.html#VALclose_tag", "<div class=\"info\">  <p><code class=\"code\">pp_close_tag&nbsp;ppf&nbsp;()</code> closes the most recently opened semantic tag <code class=\"code\">t</code>.</p> </div>", "  pp_close_tag\194\160ppf\194\160() closes the most recently opened semantic tag t. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["GraphicsX11", "GraphicsX11.html", "close_subwindow", "GraphicsX11.html#VALclose_subwindow", "<div class=\"info\">  <p>Close the sub-window having the given identifier.</p> </div>", "  Close the sub-window having the given identifier. ", "<code class=\"type\"><a href=\"GraphicsX11.html#TYPEwindow_id\">window_id</a> -&gt; unit</code>", "window_id -> unit"],
["Unix", "Unix.html", "close_process_out", "Unix.html#VALclose_process_out", "<div class=\"info\">  <p>Close channels opened by <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by Unix.open_process_out, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Unix.html#TYPEprocess_status\">process_status</a></code>", "out_channel -> process_status"],
["UnixLabels", "UnixLabels.html", "close_process_out", "UnixLabels.html#VALclose_process_out", "<div class=\"info\">  <p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by UnixLabels.open_process_out, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"UnixLabels.html#TYPEprocess_status\">process_status</a></code>", "out_channel -> process_status"],
["Unix", "Unix.html", "close_process_in", "Unix.html#VALclose_process_in", "<div class=\"info\">  <p>Close channels opened by <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by Unix.open_process_in, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"Unix.html#TYPEprocess_status\">process_status</a></code>", "in_channel -> process_status"],
["UnixLabels", "UnixLabels.html", "close_process_in", "UnixLabels.html#VALclose_process_in", "<div class=\"info\">  <p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by UnixLabels.open_process_in, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; <a href=\"UnixLabels.html#TYPEprocess_status\">process_status</a></code>", "in_channel -> process_status"],
["Unix", "Unix.html", "close_process_full", "Unix.html#VALclose_process_full", "<div class=\"info\">  <p>Close channels opened by <a href=\"Unix.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_full</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by Unix.open_process_full, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> * <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt;<br>       <a href=\"Unix.html#TYPEprocess_status\">process_status</a></code>", "in_channel * out_channel * in_channel ->       process_status"],
["UnixLabels", "UnixLabels.html", "close_process_full", "UnixLabels.html#VALclose_process_full", "<div class=\"info\">  <p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_full</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by UnixLabels.open_process_full, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> * <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt;<br>       <a href=\"UnixLabels.html#TYPEprocess_status\">process_status</a></code>", "in_channel * out_channel * in_channel ->       process_status"],
["Unix", "Unix.html", "close_process", "Unix.html#VALclose_process", "<div class=\"info\">  <p>Close channels opened by <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by Unix.open_process, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"Unix.html#TYPEprocess_status\">process_status</a></code>", "in_channel * out_channel -> process_status"],
["UnixLabels", "UnixLabels.html", "close_process", "UnixLabels.html#VALclose_process", "<div class=\"info\">  <p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>, wait for the associated command to terminate, and return its termination status.</p> </div>", "  Close channels opened by UnixLabels.open_process, wait for the associated command to terminate, and return its termination status. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> * <a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; <a href=\"UnixLabels.html#TYPEprocess_status\">process_status</a></code>", "in_channel * out_channel -> process_status"],
["Pervasives", "Pervasives.html", "close_out_noerr", "Pervasives.html#VALclose_out_noerr", "<div class=\"info\">  <p>Same as <code class=\"code\">close_out</code>, but ignore all errors.</p> </div>", "  Same as close_out, but ignore all errors. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "out_channel -> unit"],
["Pervasives", "Pervasives.html", "close_out", "Pervasives.html#VALclose_out", "<div class=\"info\">  <p>Close the given channel, flushing all buffered write operations.</p> </div>", "  Close the given channel, flushing all buffered write operations. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; unit</code>", "out_channel -> unit"],
["Pervasives", "Pervasives.html", "close_in_noerr", "Pervasives.html#VALclose_in_noerr", "<div class=\"info\">  <p>Same as <code class=\"code\">close_in</code>, but ignore all errors.</p> </div>", "  Same as close_in, but ignore all errors. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; unit</code>", "in_channel -> unit"],
["Pervasives", "Pervasives.html", "close_in", "Pervasives.html#VALclose_in", "<div class=\"info\">  <p>Close the given channel.</p> </div>", "  Close the given channel. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; unit</code>", "in_channel -> unit"],
["Scanf.Scanning", "Scanf.Scanning.html", "close_in", "Scanf.Scanning.html#VALclose_in", "<div class=\"info\">  <p>Closes the <a href=\"Pervasives.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> associated with the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p> </div>", "  Closes the in_channel associated with the given Scanf.Scanning.in_channel formatted input channel. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a> -&gt; unit</code>", "in_channel -> unit"],
["Graphics", "Graphics.html", "close_graph", "Graphics.html#VALclose_graph", "<div class=\"info\">  <p>Delete the graphics window or switch the screen back to text mode.</p> </div>", "  Delete the graphics window or switch the screen back to text mode. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Format", "Format.html", "close_box", "Format.html#VALclose_box", "<div class=\"info\">  <p>Closes the most recently open pretty-printing box.</p> </div>", "  Closes the most recently open pretty-printing box. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Unix", "Unix.html", "close", "Unix.html#VALclose", "<div class=\"info\">  <p>Close a file descriptor.</p> </div>", "  Close a file descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["UnixLabels", "UnixLabels.html", "close", "UnixLabels.html#VALclose", "<div class=\"info\">  <p>Close a file descriptor.</p> </div>", "  Close a file descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["Format", "Format.html", "clear_symbolic_output_buffer", "Format.html#VALclear_symbolic_output_buffer", "<div class=\"info\">  <p><code class=\"code\">clear_symbolic_output_buffer&nbsp;sob</code> resets buffer <code class=\"code\">sob</code>.</p> </div>", "  clear_symbolic_output_buffer\194\160sob resets buffer sob. ", "<code class=\"type\"><a href=\"Format.html#TYPEsymbolic_output_buffer\">symbolic_output_buffer</a> -&gt; unit</code>", "symbolic_output_buffer -> unit"],
["Parsing", "Parsing.html", "clear_parser", "Parsing.html#VALclear_parser", "<div class=\"info\">  <p>Empty the parser stack.</p> </div>", "  Empty the parser stack. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Unix", "Unix.html", "clear_nonblock", "Unix.html#VALclear_nonblock", "<div class=\"info\">  <p>Clear the ``non-blocking'' flag on the given descriptor.</p> </div>", "  Clear the ``non-blocking'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["UnixLabels", "UnixLabels.html", "clear_nonblock", "UnixLabels.html#VALclear_nonblock", "<div class=\"info\">  <p>Clear the ``non-blocking'' flag on the given descriptor.</p> </div>", "  Clear the ``non-blocking'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["Graphics", "Graphics.html", "clear_graph", "Graphics.html#VALclear_graph", "<div class=\"info\">  <p>Erase the graphics window.</p> </div>", "  Erase the graphics window. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Unix", "Unix.html", "clear_close_on_exec", "Unix.html#VALclear_close_on_exec", "<div class=\"info\">  <p>Clear the ``close-on-exec'' flag on the given descriptor.</p> </div>", "  Clear the ``close-on-exec'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["UnixLabels", "UnixLabels.html", "clear_close_on_exec", "UnixLabels.html#VALclear_close_on_exec", "<div class=\"info\">  <p>Clear the ``close-on-exec'' flag on the given descriptor.</p> </div>", "  Clear the ``close-on-exec'' flag on the given descriptor. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; unit</code>", "file_descr -> unit"],
["Dynlink", "Dynlink.html", "clear_available_units", "Dynlink.html#VALclear_available_units", "<div class=\"info\">  <p>Empty the list of compilation units accessible to dynamically-linked programs.</p> </div>", "  Empty the list of compilation units accessible to dynamically-linked programs. ", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Buffer", "Buffer.html", "clear", "Buffer.html#VALclear", "<div class=\"info\">  <p>Empty the buffer.</p> </div>", "  Empty the buffer. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Consistbl", "Consistbl.html", "clear", "Consistbl.html#VALclear", "", "", "<code class=\"type\"><a href=\"Consistbl.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Hashtbl", "Hashtbl.html", "clear", "Hashtbl.html#VALclear", "<div class=\"info\">  <p>Empty a hash table.</p> </div>", "  Empty a hash table. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b) t -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "clear", "Hashtbl.S.html#VALclear", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "clear", "Hashtbl.SeededS.html#VALclear", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "clear", "MoreLabels.Hashtbl.html#VALclear", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b) t -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "clear", "MoreLabels.Hashtbl.S.html#VALclear", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "clear", "MoreLabels.Hashtbl.SeededS.html#VALclear", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Queue", "Queue.html", "clear", "Queue.html#VALclear", "<div class=\"info\">  <p>Discard all elements from a queue.</p> </div>", "  Discard all elements from a queue. ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Stack", "Stack.html", "clear", "Stack.html#VALclear", "<div class=\"info\">  <p>Discard all elements from a stack.</p> </div>", "  Discard all elements from a stack. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; unit</code>", "'a t -> unit"],
["Weak.S", "Weak.S.html", "clear", "Weak.S.html#VALclear", "<div class=\"info\">  <p>Remove all elements from the table.</p> </div>", "  Remove all elements from the table. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Ephemeron.S", "Ephemeron.S.html", "clean", "Ephemeron.S.html#VALclean", "<div class=\"info\">  <p>remove all dead bindings.</p> </div>", "  remove all dead bindings. ", "<code class=\"type\">'a t -&gt; unit</code>", "'a t -> unit"],
["Ephemeron.SeededS", "Ephemeron.SeededS.html", "clean", "Ephemeron.SeededS.html#VALclean", "<div class=\"info\">  <p>remove all dead bindings.</p> </div>", "  remove all dead bindings. ", "<code class=\"type\">'a t -&gt; unit</code>", "'a t -> unit"],
["Float", "Float.html", "classify_float", "Float.html#VALclassify_float", "<div class=\"info\">  <p>Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number.</p> </div>", "  Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number. ", "<code class=\"type\">float -&gt; <a href=\"Float.html#TYPEfpclass\">fpclass</a></code>", "float -> fpclass"],
["Pervasives", "Pervasives.html", "classify_float", "Pervasives.html#VALclassify_float", "<div class=\"info\">  <p>Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number.</p> </div>", "  Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number. ", "<code class=\"type\">float -&gt; <a href=\"Pervasives.html#TYPEfpclass\">fpclass</a></code>", "float -> fpclass"],
["Clflags", "Clflags.html", "classic_inlining", "Clflags.html#VALclassic_inlining", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Clflags", "Clflags.html", "classic_arguments", "Clflags.html#VALclassic_arguments", "", "", "<code class=\"type\"><a href=\"Clflags.html#TYPEinlining_arguments\">inlining_arguments</a></code>", "inlining_arguments"],
["Clflags", "Clflags.html", "classic", "Clflags.html#VALclassic", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "class_type", "Ast_helper.Sig.html#VALclass_type", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_declaration\">Parsetree.class_type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_type_declaration list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "class_type", "Ast_helper.Str.html#VALclass_type", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_declaration\">Parsetree.class_type_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_type_declaration list -> Parsetree.structure_item"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "class_", "Ast_helper.Typ.html#VALclass_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> list -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "class_", "Ast_helper.Sig.html#VALclass_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_description\">Parsetree.class_description</a> list -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_description list -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "class_", "Ast_helper.Str.html#VALclass_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_declaration\">Parsetree.class_declaration</a> list -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc ->       Parsetree.class_declaration list -> Parsetree.structure_item"],
["Clflags", "Clflags.html", "clambda_checks", "Clflags.html#VALclambda_checks", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Unix", "Unix.html", "chroot", "Unix.html#VALchroot", "<div class=\"info\">  <p>Change the process root directory.</p> </div>", "  Change the process root directory. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["UnixLabels", "UnixLabels.html", "chroot", "UnixLabels.html#VALchroot", "<div class=\"info\">  <p>Change the process root directory.</p> </div>", "  Change the process root directory. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Char", "Char.html", "chr", "Char.html#VALchr", "<div class=\"info\">  <p>Return the character with the given ASCII code.</p> </div>", "  Return the character with the given ASCII code. ", "<code class=\"type\">int -&gt; char</code>", "int -> char"],
["Unix", "Unix.html", "chown", "Unix.html#VALchown", "<div class=\"info\">  <p>Change the owner uid and owner gid of the named file.</p> </div>", "  Change the owner uid and owner gid of the named file. ", "<code class=\"type\">string -&gt; int -&gt; int -&gt; unit</code>", "string -> int -> int -> unit"],
["UnixLabels", "UnixLabels.html", "chown", "UnixLabels.html#VALchown", "<div class=\"info\">  <p>Change the owner uid and owner gid of the named file.</p> </div>", "  Change the owner uid and owner gid of the named file. ", "<code class=\"type\">string -&gt; uid:int -&gt; gid:int -&gt; unit</code>", "string -> uid:int -> gid:int -> unit"],
["Filename", "Filename.html", "chop_suffix", "Filename.html#VALchop_suffix", "<div class=\"info\">  <p><code class=\"code\">chop_suffix&nbsp;name&nbsp;suff</code> removes the suffix <code class=\"code\">suff</code> from the filename <code class=\"code\">name</code>.</p> </div>", "  chop_suffix\194\160name\194\160suff removes the suffix suff from the filename name. ", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["Misc", "Misc.html", "chop_extensions", "Misc.html#VALchop_extensions", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Filename", "Filename.html", "chop_extension", "Filename.html#VALchop_extension", "<div class=\"info\">  <p>Same as <a href=\"Filename.html#VALremove_extension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.remove_extension</code></a>, but raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the given name has an empty extension.</p> </div>", "  Same as Filename.remove_extension, but raise Invalid_argument if the given name has an empty extension. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Set.S", "Set.S.html", "choose_opt", "Set.S.html#VALchoose_opt", "<div class=\"info\">  <p>Return one element of the given set, or <code class=\"code\"><span class=\"constructor\">None</span></code> if the set is empty.</p> </div>", "  Return one element of the given set, or None if the set is empty. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a> option</code>", "t -> elt option"],
["Map.S", "Map.S.html", "choose_opt", "Map.S.html#VALchoose_opt", "<div class=\"info\">  <p>Return one binding of the given map, or <code class=\"code\"><span class=\"constructor\">None</span></code> if the map is empty.</p> </div>", "  Return one binding of the given map, or None if the map is empty. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "'a t -> (key * 'a) option"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "choose_opt", "MoreLabels.Map.S.html#VALchoose_opt", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) option</code>", "'a t -> (key * 'a) option"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "choose_opt", "MoreLabels.Set.S.html#VALchoose_opt", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> option</code>", "t -> elt option"],
["Set.S", "Set.S.html", "choose", "Set.S.html#VALchoose", "<div class=\"info\">  <p>Return one element of the given set, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty.</p> </div>", "  Return one element of the given set, or raise Not_found if the set is empty. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEelt\">elt</a></code>", "t -> elt"],
["Map.S", "Map.S.html", "choose", "Map.S.html#VALchoose", "<div class=\"info\">  <p>Return one binding of the given map, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty.</p> </div>", "  Return one binding of the given map, or raise Not_found if the map is empty. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; <a href=\"Map.S.html#TYPEkey\">key</a> * 'a</code>", "'a t -> key * 'a"],
["Event", "Event.html", "choose", "Event.html#VALchoose", "<div class=\"info\">  <p><code class=\"code\">choose&nbsp;evl</code> returns the event that is the alternative of all the events in the list <code class=\"code\">evl</code>.</p> </div>", "  choose\194\160evl returns the event that is the alternative of all the events in the list evl. ", "<code class=\"type\">'a <a href=\"Event.html#TYPEevent\">event</a> list -&gt; 'a <a href=\"Event.html#TYPEevent\">event</a></code>", "'a event list -> 'a event"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "choose", "MoreLabels.Map.S.html#VALchoose", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a</code>", "'a t -> key * 'a"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "choose", "MoreLabels.Set.S.html#VALchoose", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a></code>", "t -> elt"],
["Unix", "Unix.html", "chmod", "Unix.html#VALchmod", "<div class=\"info\">  <p>Change the permissions of the named file.</p> </div>", "  Change the permissions of the named file. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "string -> file_perm -> unit"],
["UnixLabels", "UnixLabels.html", "chmod", "UnixLabels.html#VALchmod", "<div class=\"info\">  <p>Change the permissions of the named file.</p> </div>", "  Change the permissions of the named file. ", "<code class=\"type\">string -&gt; perm:<a href=\"UnixLabels.html#TYPEfile_perm\">file_perm</a> -&gt; unit</code>", "string -> perm:file_perm -> unit"],
["Filename", "Filename.html", "check_suffix", "Filename.html#VALcheck_suffix", "<div class=\"info\">  <p><code class=\"code\">check_suffix&nbsp;name&nbsp;suff</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the filename <code class=\"code\">name</code> ends with the suffix <code class=\"code\">suff</code>.</p> </div>", "  check_suffix\194\160name\194\160suff returns true if the filename name ends with the suffix suff. ", "<code class=\"type\">string -&gt; string -&gt; bool</code>", "string -> string -> bool"],
["Typemod", "Typemod.html", "check_nongen_schemes", "Typemod.html#VALcheck_nongen_schemes", "", "", "<code class=\"type\">Env.t -&gt; Types.signature -&gt; unit</code>", "Env.t -> Types.signature -> unit"],
["Consistbl", "Consistbl.html", "check_noadd", "Consistbl.html#VALcheck_noadd", "", "", "<code class=\"type\"><a href=\"Consistbl.html#TYPEt\">t</a> -&gt; string -&gt; <a href=\"Digest.html#TYPEt\">Digest.t</a> -&gt; string -&gt; unit</code>", "t -> string -> Digest.t -> string -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "check_key2", "Ephemeron.K2.html#VALcheck_key2", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p> </div>", "  Same as Ephemeron.K1.check_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; bool</code>", "('k1, 'k2, 'd) t -> bool"],
["Ephemeron.K2", "Ephemeron.K2.html", "check_key1", "Ephemeron.K2.html#VALcheck_key1", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p> </div>", "  Same as Ephemeron.K1.check_key ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; bool</code>", "('k1, 'k2, 'd) t -> bool"],
["Ephemeron.K1", "Ephemeron.K1.html", "check_key", "Ephemeron.K1.html#VALcheck_key", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the key of the <code class=\"code\">eph</code> is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.</p> </div>", "  Ephemeron.K1.check_key\194\160eph returns true if the key of the eph is full, false if it is empty. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; bool</code>", "('k, 'd) t -> bool"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "check_key", "Ephemeron.Kn.html#VALcheck_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p> </div>", "  Same as Ephemeron.K1.check_key ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; int -&gt; bool</code>", "('k, 'd) t -> int -> bool"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "check_key", "Obj.Ephemeron.html#VALcheck_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p> </div>", "  Same as Ephemeron.K1.check_key ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int -&gt; bool</code>", "t -> int -> bool"],
["Warnings", "Warnings.html", "check_fatal", "Warnings.html#VALcheck_fatal", "", "", "<code class=\"type\">unit -&gt; unit</code>", "unit -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_deprecated_mutable_inclusion", "Builtin_attributes.html#VALcheck_deprecated_mutable_inclusion", "", "", "<code class=\"type\">def:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       use:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "def:Location.t ->       use:Location.t ->       Location.t -> Parsetree.attributes -> Parsetree.attributes -> string -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_deprecated_mutable", "Builtin_attributes.html#VALcheck_deprecated_mutable", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "Location.t -> Parsetree.attributes -> string -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_deprecated_inclusion", "Builtin_attributes.html#VALcheck_deprecated_inclusion", "", "", "<code class=\"type\">def:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       use:<a href=\"Location.html#TYPEt\">Location.t</a> -&gt;<br>       <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "def:Location.t ->       use:Location.t ->       Location.t -> Parsetree.attributes -> Parsetree.attributes -> string -> unit"],
["Builtin_attributes", "Builtin_attributes.html", "check_deprecated", "Builtin_attributes.html#VALcheck_deprecated", "", "", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; string -&gt; unit</code>", "Location.t -> Parsetree.attributes -> string -> unit"],
["Ephemeron.K1", "Ephemeron.K1.html", "check_data", "Ephemeron.K1.html#VALcheck_data", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the data of the <code class=\"code\">eph</code> is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.</p> </div>", "  Ephemeron.K1.check_data\194\160eph returns true if the data of the eph is full, false if it is empty. ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; bool</code>", "('k, 'd) t -> bool"],
["Ephemeron.K2", "Ephemeron.K2.html", "check_data", "Ephemeron.K2.html#VALcheck_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p> </div>", "  Same as Ephemeron.K1.check_data ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; bool</code>", "('k1, 'k2, 'd) t -> bool"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "check_data", "Ephemeron.Kn.html#VALcheck_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p> </div>", "  Same as Ephemeron.K1.check_data ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; bool</code>", "('k, 'd) t -> bool"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "check_data", "Obj.Ephemeron.html#VALcheck_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p> </div>", "  Same as Ephemeron.K1.check_data ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Consistbl", "Consistbl.html", "check", "Consistbl.html#VALcheck", "", "", "<code class=\"type\"><a href=\"Consistbl.html#TYPEt\">t</a> -&gt; string -&gt; <a href=\"Digest.html#TYPEt\">Digest.t</a> -&gt; string -&gt; unit</code>", "t -> string -> Digest.t -> string -> unit"],
["Weak", "Weak.html", "check", "Weak.html#VALcheck", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.check&nbsp;ar&nbsp;n</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.</p> </div>", "  Weak.check\194\160ar\194\160n returns true if the nth cell of ar is full, false if it is empty. ", "<code class=\"type\">'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int -&gt; bool</code>", "'a t -> int -> bool"],
["Sys", "Sys.html", "chdir", "Sys.html#VALchdir", "<div class=\"info\">  <p>Change the current working directory of the process.</p> </div>", "  Change the current working directory of the process. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Unix", "Unix.html", "chdir", "Unix.html#VALchdir", "<div class=\"info\">  <p>Change the process working directory.</p> </div>", "  Change the process working directory. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["UnixLabels", "UnixLabels.html", "chdir", "UnixLabels.html#VALchdir", "<div class=\"info\">  <p>Change the process working directory.</p> </div>", "  Change the process working directory. ", "<code class=\"type\">string -&gt; unit</code>", "string -> unit"],
["Pervasives", "Pervasives.html", "char_of_int", "Pervasives.html#VALchar_of_int", "<div class=\"info\">  <p>Return the character with the given ASCII code.</p> </div>", "  Return the character with the given ASCII code. ", "<code class=\"type\">int -&gt; char</code>", "int -> char"],
["CamlinternalFormat", "CamlinternalFormat.html", "char_of_iconv", "CamlinternalFormat.html#VALchar_of_iconv", "", "", "<code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">CamlinternalFormatBasics.int_conv</a> -&gt; char</code>", "CamlinternalFormatBasics.int_conv -> char"],
["Ast_helper.Const", "Ast_helper.Const.html", "char", "Ast_helper.Const.html#VALchar", "", "", "<code class=\"type\">char -&gt; <a href=\"Parsetree.html#TYPEconstant\">Parsetree.constant</a></code>", "char -> Parsetree.constant"],
["Bigarray", "Bigarray.html", "char", "Bigarray.html#VALchar", "<div class=\"info\">  <p>As shown by the types of the values above, big arrays of kind <code class=\"code\">float32_elt</code> and <code class=\"code\">float64_elt</code> are accessed using the OCaml type <code class=\"code\">float</code>.</p> </div>", "  As shown by the types of the values above, big arrays of kind float32_elt and float64_elt are accessed using the OCaml type float. ", "<code class=\"type\">(char, <a href=\"Bigarray.html#TYPEint8_unsigned_elt\">int8_unsigned_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code>", "(char, int8_unsigned_elt) kind"],
["Digest", "Digest.html", "channel", "Digest.html#VALchannel", "<div class=\"info\">  <p>If <code class=\"code\">len</code> is nonnegative, <code class=\"code\"><span class=\"constructor\">Digest</span>.channel&nbsp;ic&nbsp;len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code> and returns their digest, or raises <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if end-of-file is reached before <code class=\"code\">len</code> characters are read.</p> </div>", "  If len is nonnegative, Digest.channel\194\160ic\194\160len reads len characters from channel ic and returns their digest, or raises End_of_file if end-of-file is reached before len characters are read. ", "<code class=\"type\"><a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "in_channel -> int -> t"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "change_layout", "Bigarray.Genarray.html#VALchange_layout", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Genarray</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having the same dimensions as <code class=\"code\">a</code>).</p> </div>", "  Genarray.change_layout\194\160a\194\160layout returns a bigarray with the specified layout, sharing the data with a (and hence having the same dimensions as a). ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt;<br>       'd <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; ('a, 'b, 'd) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a></code>", "('a, 'b, 'c) t ->       'd Bigarray.layout -> ('a, 'b, 'd) t"],
["Bigarray.Array0", "Bigarray.Array0.html", "change_layout", "Bigarray.Array0.html#VALchange_layout", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array0</span>.change_layout&nbsp;a&nbsp;layout</code> returns a big array with the specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code>.</p> </div>", "  Array0.change_layout\194\160a\194\160layout returns a big array with the specified layout, sharing the data with a. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt;<br>       'd <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; ('a, 'b, 'd) <a href=\"Bigarray.Array0.html#TYPEt\">t</a></code>", "('a, 'b, 'c) t ->       'd Bigarray.layout -> ('a, 'b, 'd) t"],
["Bigarray.Array1", "Bigarray.Array1.html", "change_layout", "Bigarray.Array1.html#VALchange_layout", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array1</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having the same dimension as <code class=\"code\">a</code>).</p> </div>", "  Array1.change_layout\194\160a\194\160layout returns a bigarray with the specified layout, sharing the data with a (and hence having the same dimension as a). ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt;<br>       'd <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; ('a, 'b, 'd) <a href=\"Bigarray.Array1.html#TYPEt\">t</a></code>", "('a, 'b, 'c) t ->       'd Bigarray.layout -> ('a, 'b, 'd) t"],
["Bigarray.Array2", "Bigarray.Array2.html", "change_layout", "Bigarray.Array2.html#VALchange_layout", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array2</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having the same dimensions as <code class=\"code\">a</code>).</p> </div>", "  Array2.change_layout\194\160a\194\160layout returns a bigarray with the specified layout, sharing the data with a (and hence having the same dimensions as a). ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt;<br>       'd <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; ('a, 'b, 'd) <a href=\"Bigarray.Array2.html#TYPEt\">t</a></code>", "('a, 'b, 'c) t ->       'd Bigarray.layout -> ('a, 'b, 'd) t"],
["Bigarray.Array3", "Bigarray.Array3.html", "change_layout", "Bigarray.Array3.html#VALchange_layout", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array3</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having the same dimensions as <code class=\"code\">a</code>).</p> </div>", "  Array3.change_layout\194\160a\194\160layout returns a bigarray with the specified layout, sharing the data with a (and hence having the same dimensions as a). ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt;<br>       'd <a href=\"Bigarray.html#TYPElayout\">Bigarray.layout</a> -&gt; ('a, 'b, 'd) <a href=\"Bigarray.Array3.html#TYPEt\">t</a></code>", "('a, 'b, 'c) t ->       'd Bigarray.layout -> ('a, 'b, 'd) t"],
["Float", "Float.html", "ceil", "Float.html#VALceil", "<div class=\"info\">  <p>Round above to an integer value.</p> </div>", "  Round above to an integer value. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "ceil", "Pervasives.html#VALceil", "<div class=\"info\">  <p>Round above to an integer value.</p> </div>", "  Round above to an integer value. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Config", "Config.html", "ccomp_type", "Config.html#VALccomp_type", "", "", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "ccobjs", "Clflags.html#VALccobjs", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Config", "Config.html", "cc_profile", "Config.html#VALcc_profile", "", "", "<code class=\"type\">string</code>", "string"],
["Sys", "Sys.html", "catch_break", "Sys.html#VALcatch_break", "<div class=\"info\">  <p><code class=\"code\">catch_break</code> governs whether interactive interrupt (ctrl-C) terminates the program or raises the <code class=\"code\"><span class=\"constructor\">Break</span></code> exception.</p> </div>", "  catch_break governs whether interactive interrupt (ctrl-C) terminates the program or raises the Break exception. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Printexc", "Printexc.html", "catch", "Printexc.html#VALcatch", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.catch&nbsp;fn&nbsp;x</code> is similar to <a href=\"Printexc.html#VALprint\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print</code></a>, but aborts the program with exit code 2 after printing the uncaught exception.</p> </div>", "  Printexc.catch\194\160fn\194\160x is similar to Printexc.print, but aborts the program with exit code 2 after printing the uncaught exception. ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a -&gt; 'b</code>", "('a -> 'b) -> 'a -> 'b"],
["Bytes", "Bytes.html", "cat", "Bytes.html#VALcat", "<div class=\"info\">  <p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result as new byte sequence.</p> </div>", "  cat\194\160s1\194\160s2 concatenates s1 and s2 and returns the result as new byte sequence. ", "<code class=\"type\">bytes -&gt; bytes -&gt; bytes</code>", "bytes -> bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "cat", "BytesLabels.html#VALcat", "<div class=\"info\">  <p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result as new byte sequence.</p> </div>", "  cat\194\160s1\194\160s2 concatenates s1 and s2 and returns the result as new byte sequence. ", "<code class=\"type\">bytes -&gt; bytes -&gt; bytes</code>", "bytes -> bytes -> bytes"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "case", "Ast_helper.Exp.html#VALcase", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt;<br>       ?guard:<a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a></code>", "Parsetree.pattern ->       ?guard:Parsetree.expression -> Parsetree.expression -> Parsetree.case"],
["Set.S", "Set.S.html", "cardinal", "Set.S.html#VALcardinal", "<div class=\"info\">  <p>Return the number of elements of a set.</p> </div>", "  Return the number of elements of a set. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Map.S", "Map.S.html", "cardinal", "Map.S.html#VALcardinal", "<div class=\"info\">  <p>Return the number of bindings of a map.</p> </div>", "  Return the number of bindings of a map. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "cardinal", "MoreLabels.Map.S.html#VALcardinal", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; int</code>", "'a t -> int"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "cardinal", "MoreLabels.Set.S.html#VALcardinal", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Bytes", "Bytes.html", "capitalize_ascii", "Bytes.html#VALcapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "capitalize_ascii", "BytesLabels.html#VALcapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["StringLabels", "StringLabels.html", "capitalize_ascii", "StringLabels.html#VALcapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "capitalize_ascii", "String.html#VALcapitalize_ascii", "<div class=\"info\">  <p>Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set.</p> </div>", "  Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Bytes", "Bytes.html", "capitalize", "Bytes.html#VALcapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["BytesLabels", "BytesLabels.html", "capitalize", "BytesLabels.html#VALcapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">bytes -&gt; bytes</code>", "bytes -> bytes"],
["StringLabels", "StringLabels.html", "capitalize", "StringLabels.html#VALcapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["String", "String.html", "capitalize", "String.html#VALcapitalize", "<div class=\"info\">  <span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set..</p> </span></div>", "  Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set.. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Ccomp", "Ccomp.html", "call_linker", "Ccomp.html#VALcall_linker", "", "", "<code class=\"type\"><a href=\"Ccomp.html#TYPElink_mode\">link_mode</a> -&gt; string -&gt; string list -&gt; string -&gt; bool</code>", "link_mode -> string -> string list -> string -> bool"],
["Pparse", "Pparse.html", "call_external_preprocessor", "Pparse.html#VALcall_external_preprocessor", "", "", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["Config", "Config.html", "c_output_obj", "Config.html#VALc_output_obj", "", "", "<code class=\"type\">string</code>", "string"],
["Bigarray", "Bigarray.html", "c_layout", "Bigarray.html#VALc_layout", "", "", "<code class=\"type\"><a href=\"Bigarray.html#TYPEc_layout\">c_layout</a> <a href=\"Bigarray.html#TYPElayout\">layout</a></code>", "c_layout layout"],
["Clflags", "Clflags.html", "c_compiler", "Clflags.html#VALc_compiler", "", "", "<code class=\"type\">string option <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string option ref"],
["Config", "Config.html", "c_compiler", "Config.html#VALc_compiler", "", "", "<code class=\"type\">string</code>", "string"],
["Digest", "Digest.html", "bytes", "Digest.html#VALbytes", "<div class=\"info\">  <p>Return the digest of the given byte sequence.</p> </div>", "  Return the digest of the given byte sequence. ", "<code class=\"type\">bytes -&gt; <a href=\"Digest.html#TYPEt\">t</a></code>", "bytes -> t"],
["Config", "Config.html", "bytecomp_c_libraries", "Config.html#VALbytecomp_c_libraries", "", "", "<code class=\"type\">string</code>", "string"],
["Clflags", "Clflags.html", "bytecode_compatible_32", "Clflags.html#VALbytecode_compatible_32", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Graphics", "Graphics.html", "button_down", "Graphics.html#VALbutton_down", "<div class=\"info\">  <p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the mouse button is pressed, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p> </div>", "  Return true if the mouse button is pressed, false otherwise. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["CamlinternalFormat", "CamlinternalFormat.html", "bufput_acc", "CamlinternalFormat.html#VALbufput_acc", "", "", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">Buffer.t</a> -&gt; (<a href=\"Buffer.html#TYPEt\">Buffer.t</a>, unit) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> -&gt; unit</code>", "Buffer.t -> (Buffer.t, unit) acc -> unit"],
["Scanf", "Scanf.html", "bscanf_format", "Scanf.html#VALbscanf_format", "<div class=\"info\">  <p><code class=\"code\">bscanf_format&nbsp;ic&nbsp;fmt&nbsp;f</code> reads a format string token from the formatted input channel <code class=\"code\">ic</code>, according to the given format string <code class=\"code\">fmt</code>, and applies <code class=\"code\">f</code> to the resulting format string value.</p> </div>", "  bscanf_format\194\160ic\194\160fmt\194\160f reads a format string token from the formatted input channel ic, according to the given format string fmt, and applies f to the resulting format string value. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">Scanning.in_channel</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt;<br>       (('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt; 'g) -&gt; 'g</code>", "Scanning.in_channel ->       ('a, 'b, 'c, 'd, 'e, 'f) format6 ->       (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g"],
["Scanf", "Scanf.html", "bscanf", "Scanf.html#VALbscanf", "", "", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">Scanning.in_channel</a> -&gt; ('a, 'b, 'c, 'd) <a href=\"Scanf.html#TYPEscanner\">scanner</a></code>", "Scanning.in_channel -> ('a, 'b, 'c, 'd) scanner"],
["Condition", "Condition.html", "broadcast", "Condition.html#VALbroadcast", "<div class=\"info\">  <p><code class=\"code\">broadcast&nbsp;c</code> restarts all processes waiting on the condition variable <code class=\"code\">c</code>.</p> </div>", "  broadcast\194\160c restarts all processes waiting on the condition variable c. ", "<code class=\"type\"><a href=\"Condition.html#TYPEt\">t</a> -&gt; unit</code>", "t -> unit"],
["Format", "Format.html", "bprintf", "Format.html#VALbprintf", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">Buffer.t</a> -&gt; ('a, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "Buffer.t -> ('a, formatter, unit) format -> 'a"],
["Printf", "Printf.html", "bprintf", "Printf.html#VALbprintf", "<div class=\"info\">  <p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module <a href=\"Buffer.html\"><code class=\"code\"><span class=\"constructor\">Buffer</span></code></a>).</p> </div>", "  Same as Printf.fprintf, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module Buffer). ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">Buffer.t</a> -&gt; ('a, <a href=\"Buffer.html#TYPEt\">Buffer.t</a>, unit) <a href=\"Pervasives.html#TYPEformat\">format</a> -&gt; 'a</code>", "Buffer.t -> ('a, Buffer.t, unit) format -> 'a"],
["Str", "Str.html", "bounded_split_delim", "Str.html#VALbounded_split_delim", "<div class=\"info\">  <p>Same as <a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a>, but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result.</p> </div>", "  Same as Str.bounded_split, but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; int -&gt; string list</code>", "regexp -> string -> int -> string list"],
["Str", "Str.html", "bounded_split", "Str.html#VALbounded_split", "<div class=\"info\">  <p>Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a>, but splits into at most <code class=\"code\">n</code> substrings, where <code class=\"code\">n</code> is the extra integer parameter.</p> </div>", "  Same as Str.split, but splits into at most n substrings, where n is the extra integer parameter. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; int -&gt; string list</code>", "regexp -> string -> int -> string list"],
["Str", "Str.html", "bounded_full_split", "Str.html#VALbounded_full_split", "<div class=\"info\">  <p>Same as <a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a>, but returns the delimiters as well as the substrings contained between delimiters.</p> </div>", "  Same as Str.bounded_split_delim, but returns the delimiters as well as the substrings contained between delimiters. ", "<code class=\"type\"><a href=\"Str.html#TYPEregexp\">regexp</a> -&gt; string -&gt; int -&gt; <a href=\"Str.html#TYPEsplit_result\">split_result</a> list</code>", "regexp -> string -> int -> split_result list"],
["Pervasives", "Pervasives.html", "bool_of_string_opt", "Pervasives.html#VALbool_of_string_opt", "<div class=\"info\">  <p>Convert the given string to a boolean.</p> </div>", "  Convert the given string to a boolean. ", "<code class=\"type\">string -&gt; bool option</code>", "string -> bool option"],
["Pervasives", "Pervasives.html", "bool_of_string", "Pervasives.html#VALbool_of_string", "<div class=\"info\">  <p>Convert the given string to a boolean.</p> </div>", "  Convert the given string to a boolean. ", "<code class=\"type\">string -&gt; bool</code>", "string -> bool"],
["Random", "Random.html", "bool", "Random.html#VALbool", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Random</span>.bool&nbsp;()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code> with probability 0.5 each.</p> </div>", "  Random.bool\194\160() returns true or false with probability 0.5 each. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Random.State", "Random.State.html", "bool", "Random.State.html#VALbool", "<div class=\"info\">  <p>These functions are the same as the basic functions, except that they use (and update) the given PRNG state instead of the default one.</p> </div>", "  These functions are the same as the basic functions, except that they use (and update) the given PRNG state instead of the default one. ", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; bool</code>", "t -> bool"],
["Uchar", "Uchar.html", "bom", "Uchar.html#VALbom", "<div class=\"info\">  <p><code class=\"code\">bom</code> is U+FEFF, the <a href=\"http://unicode.org/glossary/#byte_order_mark\">byte order mark</a> (BOM) character.</p> </div>", "  bom is U+FEFF, the byte order mark (BOM) character. ", "<code class=\"type\"><a href=\"Uchar.html#TYPEt\">t</a></code>", "t"],
["Graphics", "Graphics.html", "blue", "Graphics.html#VALblue", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Bytes", "Bytes.html", "blit_string", "Bytes.html#VALblit_string", "<div class=\"info\">  <p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>, starting at index <code class=\"code\">dstoff</code>.</p> </div>", "  blit\194\160src\194\160srcoff\194\160dst\194\160dstoff\194\160len copies len bytes from string src, starting at index srcoff, to byte sequence dst, starting at index dstoff. ", "<code class=\"type\">string -&gt; int -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "string -> int -> bytes -> int -> int -> unit"],
["BytesLabels", "BytesLabels.html", "blit_string", "BytesLabels.html#VALblit_string", "<div class=\"info\">  <p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>, starting at index <code class=\"code\">dstoff</code>.</p> </div>", "  blit\194\160src\194\160srcoff\194\160dst\194\160dstoff\194\160len copies len bytes from string src, starting at index srcoff, to byte sequence dst, starting at index dstoff. ", "<code class=\"type\">src:string -&gt; src_pos:int -&gt; dst:bytes -&gt; dst_pos:int -&gt; len:int -&gt; unit</code>", "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_key2", "Ephemeron.K2.html#VALblit_key2", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p> </div>", "  Same as Ephemeron.K1.blit_key ", "<code class=\"type\">('a, 'k2, 'b) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; ('c, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'k2, 'b) t -> ('c, 'k2, 'd) t -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_key12", "Ephemeron.K2.html#VALblit_key12", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p> </div>", "  Same as Ephemeron.K1.blit_key ", "<code class=\"type\">('k1, 'k2, 'a) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; ('k1, 'k2, 'b) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; unit</code>", "('k1, 'k2, 'a) t -> ('k1, 'k2, 'b) t -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_key1", "Ephemeron.K2.html#VALblit_key1", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p> </div>", "  Same as Ephemeron.K1.blit_key ", "<code class=\"type\">('k1, 'a, 'b) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; ('k1, 'c, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; unit</code>", "('k1, 'a, 'b) t -> ('k1, 'c, 'd) t -> unit"],
["Ephemeron.K1", "Ephemeron.K1.html", "blit_key", "Ephemeron.K1.html#VALblit_key", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key&nbsp;eph1&nbsp;eph2</code> sets the key of <code class=\"code\">eph2</code> with the key of <code class=\"code\">eph1</code>.</p> </div>", "  Ephemeron.K1.blit_key\194\160eph1\194\160eph2 sets the key of eph2 with the key of eph1. ", "<code class=\"type\">('k, 'a) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; ('k, 'b) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; unit</code>", "('k, 'a) t -> ('k, 'b) t -> unit"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "blit_key", "Ephemeron.Kn.html#VALblit_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p> </div>", "  Same as Ephemeron.K1.blit_key ", "<code class=\"type\">('k, 'a) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt;<br>       int -&gt; ('k, 'b) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "('k, 'a) t ->       int -> ('k, 'b) t -> int -> int -> unit"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "blit_key", "Obj.Ephemeron.html#VALblit_key", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p> </div>", "  Same as Ephemeron.K1.blit_key ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "t -> int -> t -> int -> int -> unit"],
["Graphics", "Graphics.html", "blit_image", "Graphics.html#VALblit_image", "<div class=\"info\">  <p><code class=\"code\">blit_image&nbsp;img&nbsp;x&nbsp;y</code> copies screen pixels into the image <code class=\"code\">img</code>, modifying <code class=\"code\">img</code> in-place.</p> </div>", "  blit_image\194\160img\194\160x\194\160y copies screen pixels into the image img, modifying img in-place. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEimage\">image</a> -&gt; int -&gt; int -&gt; unit</code>", "image -> int -> int -> unit"],
["Ephemeron.K1", "Ephemeron.K1.html", "blit_data", "Ephemeron.K1.html#VALblit_data", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data&nbsp;eph1&nbsp;eph2</code> sets the data of <code class=\"code\">eph2</code> with the data of <code class=\"code\">eph1</code>.</p> </div>", "  Ephemeron.K1.blit_data\194\160eph1\194\160eph2 sets the data of eph2 with the data of eph1. ", "<code class=\"type\">('a, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; ('b, 'd) <a href=\"Ephemeron.K1.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'd) t -> ('b, 'd) t -> unit"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_data", "Ephemeron.K2.html#VALblit_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p> </div>", "  Same as Ephemeron.K1.blit_data ", "<code class=\"type\">('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; ('k1, 'k2, 'd) <a href=\"Ephemeron.K2.html#TYPEt\">t</a> -&gt; unit</code>", "('k1, 'k2, 'd) t -> ('k1, 'k2, 'd) t -> unit"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "blit_data", "Ephemeron.Kn.html#VALblit_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p> </div>", "  Same as Ephemeron.K1.blit_data ", "<code class=\"type\">('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; ('k, 'd) <a href=\"Ephemeron.Kn.html#TYPEt\">t</a> -&gt; unit</code>", "('k, 'd) t -> ('k, 'd) t -> unit"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "blit_data", "Obj.Ephemeron.html#VALblit_data", "<div class=\"info\">  <p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p> </div>", "  Same as Ephemeron.K1.blit_data ", "<code class=\"type\"><a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; <a href=\"Obj.Ephemeron.html#TYPEt\">t</a> -&gt; unit</code>", "t -> t -> unit"],
["Array", "Array.html", "blit", "Array.html#VALblit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>, starting at element number <code class=\"code\">o2</code>.</p> </div>", "  Array.blit\194\160v1\194\160o1\194\160v2\194\160o2\194\160len copies len elements from array v1, starting at element number o1, to array v2, starting at element number o2. ", "<code class=\"type\">'a array -&gt; int -&gt; 'a array -&gt; int -&gt; int -&gt; unit</code>", "'a array -> int -> 'a array -> int -> int -> unit"],
["ArrayLabels", "ArrayLabels.html", "blit", "ArrayLabels.html#VALblit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>, starting at element number <code class=\"code\">o2</code>.</p> </div>", "  Array.blit\194\160v1\194\160o1\194\160v2\194\160o2\194\160len copies len elements from array v1, starting at element number o1, to array v2, starting at element number o2. ", "<code class=\"type\">src:'a array -&gt; src_pos:int -&gt; dst:'a array -&gt; dst_pos:int -&gt; len:int -&gt; unit</code>", "src:'a array -> src_pos:int -> dst:'a array -> dst_pos:int -> len:int -> unit"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "blit", "Bigarray.Genarray.html#VALblit", "<div class=\"info\">  <p>Copy all elements of a big array in another big array.</p> </div>", "  Copy all elements of a big array in another big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit"],
["Bigarray.Array0", "Bigarray.Array0.html", "blit", "Bigarray.Array0.html#VALblit", "<div class=\"info\">  <p>Copy the first big array to the second big array.</p> </div>", "  Copy the first big array to the second big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit"],
["Bigarray.Array1", "Bigarray.Array1.html", "blit", "Bigarray.Array1.html#VALblit", "<div class=\"info\">  <p>Copy the first big array to the second big array.</p> </div>", "  Copy the first big array to the second big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit"],
["Bigarray.Array2", "Bigarray.Array2.html", "blit", "Bigarray.Array2.html#VALblit", "<div class=\"info\">  <p>Copy the first big array to the second big array.</p> </div>", "  Copy the first big array to the second big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit"],
["Bigarray.Array3", "Bigarray.Array3.html", "blit", "Bigarray.Array3.html#VALblit", "<div class=\"info\">  <p>Copy the first big array to the second big array.</p> </div>", "  Copy the first big array to the second big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">t</a> -&gt; unit</code>", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit"],
["Buffer", "Buffer.html", "blit", "Buffer.html#VALblit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Buffer</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> characters from the current contents of the buffer <code class=\"code\">src</code>, starting at offset <code class=\"code\">srcoff</code> to <code class=\"code\">dst</code>, starting at character <code class=\"code\">dstoff</code>.</p> </div>", "  Buffer.blit\194\160src\194\160srcoff\194\160dst\194\160dstoff\194\160len copies len characters from the current contents of the buffer src, starting at offset srcoff to dst, starting at character dstoff. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; int -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "t -> int -> bytes -> int -> int -> unit"],
["Bytes", "Bytes.html", "blit", "Bytes.html#VALblit", "<div class=\"info\">  <p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at index <code class=\"code\">dstoff</code>.</p> </div>", "  blit\194\160src\194\160srcoff\194\160dst\194\160dstoff\194\160len copies len bytes from sequence src, starting at index srcoff, to sequence dst, starting at index dstoff. ", "<code class=\"type\">bytes -&gt; int -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "bytes -> int -> bytes -> int -> int -> unit"],
["BytesLabels", "BytesLabels.html", "blit", "BytesLabels.html#VALblit", "<div class=\"info\">  <p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at index <code class=\"code\">dstoff</code>.</p> </div>", "  blit\194\160src\194\160srcoff\194\160dst\194\160dstoff\194\160len copies len bytes from sequence src, starting at index srcoff, to sequence dst, starting at index dstoff. ", "<code class=\"type\">src:bytes -&gt; src_pos:int -&gt; dst:bytes -&gt; dst_pos:int -&gt; len:int -&gt; unit</code>", "src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit"],
["Misc.LongString", "Misc.LongString.html", "blit", "Misc.LongString.html#VALblit", "", "", "<code class=\"type\"><a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; <a href=\"Misc.LongString.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "t -> int -> t -> int -> int -> unit"],
["StringLabels", "StringLabels.html", "blit", "StringLabels.html#VALblit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">String</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from the string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>, starting at character number <code class=\"code\">dstoff</code>.</p> </div>", "  String.blit\194\160src\194\160srcoff\194\160dst\194\160dstoff\194\160len copies len bytes from the string src, starting at index srcoff, to byte sequence dst, starting at character number dstoff. ", "<code class=\"type\">src:string -&gt; src_pos:int -&gt; dst:bytes -&gt; dst_pos:int -&gt; len:int -&gt; unit</code>", "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit"],
["String", "String.html", "blit", "String.html#VALblit", "<div class=\"info\">  <p>Same as <a href=\"Bytes.html#VALblit_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.blit_string</code></a>.</p> </div>", "  Same as Bytes.blit_string. ", "<code class=\"type\">string -&gt; int -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "string -> int -> bytes -> int -> int -> unit"],
["Weak", "Weak.html", "blit", "Weak.html#VALblit", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Weak</span>.blit&nbsp;ar1&nbsp;off1&nbsp;ar2&nbsp;off2&nbsp;len</code> copies <code class=\"code\">len</code> weak pointers from <code class=\"code\">ar1</code> (starting at <code class=\"code\">off1</code>) to <code class=\"code\">ar2</code> (starting at <code class=\"code\">off2</code>).</p> </div>", "  Weak.blit\194\160ar1\194\160off1\194\160ar2\194\160off2\194\160len copies len weak pointers from ar1 (starting at off1) to ar2 (starting at off2). ", "<code class=\"type\">'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int -&gt; 'a <a href=\"Weak.html#TYPEt\">t</a> -&gt; int -&gt; int -&gt; unit</code>", "'a t -> int -> 'a t -> int -> int -> unit"],
["Graphics", "Graphics.html", "black", "Graphics.html#VALblack", "", "", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Int32", "Int32.html", "bits_of_float", "Int32.html#VALbits_of_float", "<div class=\"info\">  <p>Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout.</p> </div>", "  Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout. ", "<code class=\"type\">float -&gt; int32</code>", "float -> int32"],
["Int64", "Int64.html", "bits_of_float", "Int64.html#VALbits_of_float", "<div class=\"info\">  <p>Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout.</p> </div>", "  Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout. ", "<code class=\"type\">float -&gt; int64</code>", "float -> int64"],
["Random", "Random.html", "bits", "Random.html#VALbits", "<div class=\"info\">  <p>Return 30 random bits in a nonnegative integer.</p> </div>", "  Return 30 random bits in a nonnegative integer. ", "<code class=\"type\">unit -&gt; int</code>", "unit -> int"],
["Random.State", "Random.State.html", "bits", "Random.State.html#VALbits", "", "", "<code class=\"type\"><a href=\"Random.State.html#TYPEt\">t</a> -&gt; int</code>", "t -> int"],
["Map.S", "Map.S.html", "bindings", "Map.S.html#VALbindings", "<div class=\"info\">  <p>Return the list of all bindings of the given map.</p> </div>", "  Return the list of all bindings of the given map. ", "<code class=\"type\">'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) list</code>", "'a t -> (key * 'a) list"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "bindings", "MoreLabels.Map.S.html#VALbindings", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) list</code>", "'a t -> (key * 'a) list"],
["Unix", "Unix.html", "bind", "Unix.html#VALbind", "<div class=\"info\">  <p>Bind a socket to an address.</p> </div>", "  Bind a socket to an address. ", "<code class=\"type\"><a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a> -&gt; unit</code>", "file_descr -> sockaddr -> unit"],
["UnixLabels", "UnixLabels.html", "bind", "UnixLabels.html#VALbind", "<div class=\"info\">  <p>Bind a socket to an address.</p> </div>", "  Bind a socket to an address. ", "<code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; addr:<a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a> -&gt; unit</code>", "file_descr -> addr:sockaddr -> unit"],
["Clflags", "Clflags.html", "binary_annotations", "Clflags.html#VALbinary_annotations", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Sys", "Sys.html", "big_endian", "Sys.html#VALbig_endian", "<div class=\"info\">  <p>Whether the machine currently executing the Caml program is big-endian.</p> </div>", "  Whether the machine currently executing the Caml program is big-endian. ", "<code class=\"type\">bool</code>", "bool"],
["Scanf.Scanning", "Scanf.Scanning.html", "beginning_of_input", "Scanf.Scanning.html#VALbeginning_of_input", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Scanning</span>.beginning_of_input&nbsp;ic</code> tests the beginning of input condition of the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p> </div>", "  Scanning.beginning_of_input\194\160ic tests the beginning of input condition of the given Scanf.Scanning.in_channel formatted input channel. ", "<code class=\"type\"><a href=\"Scanf.Scanning.html#TYPEin_channel\">in_channel</a> -&gt; bool</code>", "in_channel -> bool"],
["Filename", "Filename.html", "basename", "Filename.html#VALbasename", "<div class=\"info\">  <p>Split a file name into directory name / base file name.</p> </div>", "  Split a file name into directory name / base file name. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Terminfo", "Terminfo.html", "backup", "Terminfo.html#VALbackup", "", "", "<code class=\"type\"><a href=\"Pervasives.html#TYPEout_channel\">out_channel</a> -&gt; int -&gt; unit</code>", "out_channel -> int -> unit"],
["Warnings", "Warnings.html", "backup", "Warnings.html#VALbackup", "", "", "<code class=\"type\">unit -&gt; <a href=\"Warnings.html#TYPEstate\">state</a></code>", "unit -> state"],
["Printexc", "Printexc.html", "backtrace_status", "Printexc.html#VALbacktrace_status", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Printexc</span>.backtrace_status()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if exception backtraces are currently recorded, <code class=\"code\"><span class=\"keyword\">false</span></code> if not.</p> </div>", "  Printexc.backtrace_status() returns true if exception backtraces are currently recorded, false if not. ", "<code class=\"type\">unit -&gt; bool</code>", "unit -> bool"],
["Printexc", "Printexc.html", "backtrace_slots", "Printexc.html#VALbacktrace_slots", "<div class=\"info\">  <p>Returns the slots of a raw backtrace, or <code class=\"code\"><span class=\"constructor\">None</span></code> if none of them contain useful information.</p> </div>", "  Returns the slots of a raw backtrace, or None if none of them contain useful information. ", "<code class=\"type\"><a href=\"Printexc.html#TYPEraw_backtrace\">raw_backtrace</a> -&gt; <a href=\"Printexc.html#TYPEbacktrace_slot\">backtrace_slot</a> array option</code>", "raw_backtrace -> backtrace_slot array option"],
["Graphics", "Graphics.html", "background", "Graphics.html#VALbackground", "<div class=\"info\">  <p>See <a href=\"Graphics.html#VALforeground\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.foreground</code></a>.</p> </div>", "  See Graphics.foreground. ", "<code class=\"type\"><a href=\"Graphics.html#TYPEcolor\">color</a></code>", "color"],
["Sys", "Sys.html", "backend_type", "Sys.html#VALbackend_type", "<div class=\"info\">  <p>Backend type currently executing the OCaml program.</p> </div>", "  Backend type currently executing the OCaml program. ", "<code class=\"type\"><a href=\"Sys.html#TYPEbackend_type\">backend_type</a></code>", "backend_type"],
["Graphics", "Graphics.html", "auto_synchronize", "Graphics.html#VALauto_synchronize", "<div class=\"info\">  <p>By default, drawing takes place both on the window displayed on screen, and in a memory area (the 'backing store').</p> </div>", "  By default, drawing takes place both on the window displayed on screen, and in a memory area (the 'backing store'). ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Ast_mapper", "Ast_mapper.html", "attribute_of_warning", "Ast_mapper.html#VALattribute_of_warning", "<div class=\"info\">  <p>Encode a warning message into an 'ocaml.ppwarning' attribute which can be inserted in a generated Parsetree.</p> </div>", "  Encode a warning message into an 'ocaml.ppwarning' attribute which can be inserted in a generated Parsetree. ", "<code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> -&gt; string -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>", "Location.t -> string -> Parsetree.attribute"],
["Ast_helper.Sig", "Ast_helper.Sig.html", "attribute", "Ast_helper.Sig.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.signature_item"],
["Ast_helper.Str", "Ast_helper.Str.html", "attribute", "Ast_helper.Str.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.structure_item"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "attribute", "Ast_helper.Ctf.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.class_type_field"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "attribute", "Ast_helper.Cf.html#VALattribute", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "?loc:Ast_helper.loc -> Parsetree.attribute -> Parsetree.class_field"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "attr", "Ast_helper.Typ.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "Parsetree.core_type -> Parsetree.attribute -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "attr", "Ast_helper.Pat.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "Parsetree.pattern -> Parsetree.attribute -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "attr", "Ast_helper.Exp.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "Parsetree.expression -> Parsetree.attribute -> Parsetree.expression"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "attr", "Ast_helper.Mty.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "Parsetree.module_type -> Parsetree.attribute -> Parsetree.module_type"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "attr", "Ast_helper.Mod.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "Parsetree.module_expr -> Parsetree.attribute -> Parsetree.module_expr"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "attr", "Ast_helper.Cty.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "Parsetree.class_type -> Parsetree.attribute -> Parsetree.class_type"],
["Ast_helper.Ctf", "Ast_helper.Ctf.html", "attr", "Ast_helper.Ctf.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>", "Parsetree.class_type_field ->       Parsetree.attribute -> Parsetree.class_type_field"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "attr", "Ast_helper.Cl.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "Parsetree.class_expr -> Parsetree.attribute -> Parsetree.class_expr"],
["Ast_helper.Cf", "Ast_helper.Cf.html", "attr", "Ast_helper.Cf.html#VALattr", "", "", "<code class=\"type\"><a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>", "Parsetree.class_field -> Parsetree.attribute -> Parsetree.class_field"],
["Float", "Float.html", "atan2", "Float.html#VALatan2", "<div class=\"info\">  <p><code class=\"code\">atan2&nbsp;y&nbsp;x</code> returns the arc tangent of <code class=\"code\">y&nbsp;/.&nbsp;x</code>.</p> </div>", "  atan2\194\160y\194\160x returns the arc tangent of y\194\160/.\194\160x. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "atan2", "Pervasives.html#VALatan2", "<div class=\"info\">  <p><code class=\"code\">atan2&nbsp;y&nbsp;x</code> returns the arc tangent of <code class=\"code\">y&nbsp;/.&nbsp;x</code>.</p> </div>", "  atan2\194\160y\194\160x returns the arc tangent of y\194\160/.\194\160x. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Float", "Float.html", "atan", "Float.html#VALatan", "<div class=\"info\">  <p>Arc tangent.</p> </div>", "  Arc tangent. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "atan", "Pervasives.html#VALatan", "<div class=\"info\">  <p>Arc tangent.</p> </div>", "  Arc tangent. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "at_exit", "Pervasives.html#VALat_exit", "<div class=\"info\">  <p>Register the given function to be called at program termination time.</p> </div>", "  Register the given function to be called at program termination time. ", "<code class=\"type\">(unit -&gt; unit) -&gt; unit</code>", "(unit -> unit) -> unit"],
["Config", "Config.html", "ast_intf_magic_number", "Config.html#VALast_intf_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ast_impl_magic_number", "Config.html#VALast_impl_magic_number", "", "", "<code class=\"type\">string</code>", "string"],
["List", "List.html", "assq_opt", "List.html#VALassq_opt", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.assoc_opt, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b option</code>", "'a -> ('a * 'b) list -> 'b option"],
["ListLabels", "ListLabels.html", "assq_opt", "ListLabels.html#VALassq_opt", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.assoc_opt, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b option</code>", "'a -> ('a * 'b) list -> 'b option"],
["List", "List.html", "assq", "List.html#VALassq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.assoc, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b</code>", "'a -> ('a * 'b) list -> 'b"],
["ListLabels", "ListLabels.html", "assq", "ListLabels.html#VALassq", "<div class=\"info\">  <p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of structural equality to compare keys.</p> </div>", "  Same as List.assoc, but uses physical equality instead of structural equality to compare keys. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b</code>", "'a -> ('a * 'b) list -> 'b"],
["List", "List.html", "assoc_opt", "List.html#VALassoc_opt", "<div class=\"info\">  <p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>.</p> </div>", "  assoc_opt\194\160a\194\160l returns the value associated with key a in the list of pairs l. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b option</code>", "'a -> ('a * 'b) list -> 'b option"],
["ListLabels", "ListLabels.html", "assoc_opt", "ListLabels.html#VALassoc_opt", "<div class=\"info\">  <p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>.</p> </div>", "  assoc_opt\194\160a\194\160l returns the value associated with key a in the list of pairs l. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b option</code>", "'a -> ('a * 'b) list -> 'b option"],
["List", "List.html", "assoc", "List.html#VALassoc", "<div class=\"info\">  <p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>.</p> </div>", "  assoc\194\160a\194\160l returns the value associated with key a in the list of pairs l. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b</code>", "'a -> ('a * 'b) list -> 'b"],
["ListLabels", "ListLabels.html", "assoc", "ListLabels.html#VALassoc", "<div class=\"info\">  <p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>.</p> </div>", "  assoc\194\160a\194\160l returns the value associated with key a in the list of pairs l. ", "<code class=\"type\">'a -&gt; ('a * 'b) list -&gt; 'b</code>", "'a -> ('a * 'b) list -> 'b"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "assert_", "Ast_helper.Exp.html#VALassert_", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression"],
["Format", "Format.html", "asprintf", "Format.html#VALasprintf", "<div class=\"info\">  <p>Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments.</p> </div>", "  Same as printf above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. ", "<code class=\"type\">('a, <a href=\"Format.html#TYPEformatter\">formatter</a>, unit, string) <a href=\"Pervasives.html#TYPEformat4\">format4</a> -&gt; 'a</code>", "('a, formatter, unit, string) format4 -> 'a"],
["Config", "Config.html", "asm_cfi_supported", "Config.html#VALasm_cfi_supported", "", "", "<code class=\"type\">bool</code>", "bool"],
["Config", "Config.html", "asm", "Config.html#VALasm", "", "", "<code class=\"type\">string</code>", "string"],
["Float", "Float.html", "asin", "Float.html#VALasin", "<div class=\"info\">  <p>Arc sine.</p> </div>", "  Arc sine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "asin", "Pervasives.html#VALasin", "<div class=\"info\">  <p>Arc sine.</p> </div>", "  Arc sine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "arrow", "Ast_helper.Typ.html#VALarrow", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.core_type -> Parsetree.core_type -> Parsetree.core_type"],
["Ast_helper.Cty", "Ast_helper.Cty.html", "arrow", "Ast_helper.Cty.html#VALarrow", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Asttypes.arg_label ->       Parsetree.core_type -> Parsetree.class_type -> Parsetree.class_type"],
["Bigarray", "Bigarray.html", "array3_of_genarray", "Bigarray.html#VALarray3_of_genarray", "<div class=\"info\">  <p>Return the three-dimensional big array corresponding to the given generic big array.</p> </div>", "  Return the three-dimensional big array corresponding to the given generic big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array3.html#TYPEt\">Array3.t</a></code>", "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array3.t"],
["Bigarray", "Bigarray.html", "array2_of_genarray", "Bigarray.html#VALarray2_of_genarray", "<div class=\"info\">  <p>Return the two-dimensional big array corresponding to the given generic big array.</p> </div>", "  Return the two-dimensional big array corresponding to the given generic big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array2.html#TYPEt\">Array2.t</a></code>", "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array2.t"],
["Bigarray", "Bigarray.html", "array1_of_genarray", "Bigarray.html#VALarray1_of_genarray", "<div class=\"info\">  <p>Return the one-dimensional big array corresponding to the given generic big array.</p> </div>", "  Return the one-dimensional big array corresponding to the given generic big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array1.html#TYPEt\">Array1.t</a></code>", "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array1.t"],
["Bigarray", "Bigarray.html", "array0_of_genarray", "Bigarray.html#VALarray0_of_genarray", "<div class=\"info\">  <p>Return the zero-dimensional big array corresponding to the given generic big array.</p> </div>", "  Return the zero-dimensional big array corresponding to the given generic big array. ", "<code class=\"type\">('a, 'b, 'c) <a href=\"Bigarray.Genarray.html#TYPEt\">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href=\"Bigarray.Array0.html#TYPEt\">Array0.t</a></code>", "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array0.t"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "array", "Ast_helper.Pat.html#VALarray", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> list -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.pattern list -> Parsetree.pattern"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "array", "Ast_helper.Exp.html#VALarray", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Parsetree.expression list -> Parsetree.expression"],
["Sort", "Sort.html", "array", "Sort.html#VALarray", "<div class=\"info\">  <p>Sort an array in increasing order according to an ordering predicate.</p> </div>", "  Sort an array in increasing order according to an ordering predicate. ", "<code class=\"type\">('a -&gt; 'a -&gt; bool) -&gt; 'a array -&gt; unit</code>", "('a -> 'a -> bool) -> 'a array -> unit"],
["Sys", "Sys.html", "argv", "Sys.html#VALargv", "<div class=\"info\">  <p>The command line arguments given to the process.</p> </div>", "  The command line arguments given to the process. ", "<code class=\"type\">string array</code>", "string array"],
["Clflags", "Clflags.html", "arg_spec", "Clflags.html#VALarg_spec", "", "", "<code class=\"type\">(string * <a href=\"Arg.html#TYPEspec\">Arg.spec</a> * string) list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "(string * Arg.spec * string) list ref"],
["Complex", "Complex.html", "arg", "Complex.html#VALarg", "<div class=\"info\">  <p>Argument.</p> </div>", "  Argument. ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; float</code>", "t -> float"],
["Config", "Config.html", "architecture", "Config.html#VALarchitecture", "", "", "<code class=\"type\">string</code>", "string"],
["Config", "Config.html", "ar", "Config.html#VALar", "", "", "<code class=\"type\">string</code>", "string"],
["Pparse", "Pparse.html", "apply_rewriters_str", "Pparse.html#VALapply_rewriters_str", "", "", "<code class=\"type\">?restore:bool -&gt;<br>       tool_name:string -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "?restore:bool ->       tool_name:string -> Parsetree.structure -> Parsetree.structure"],
["Pparse", "Pparse.html", "apply_rewriters_sig", "Pparse.html#VALapply_rewriters_sig", "", "", "<code class=\"type\">?restore:bool -&gt;<br>       tool_name:string -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "?restore:bool ->       tool_name:string -> Parsetree.signature -> Parsetree.signature"],
["Pparse", "Pparse.html", "apply_rewriters", "Pparse.html#VALapply_rewriters", "<div class=\"info\">  <p>If <code class=\"code\">restore&nbsp;=&nbsp;<span class=\"keyword\">true</span></code> (the default), cookies set by external rewriters will be kept for later calls.</p> </div>", "  If restore\194\160=\194\160true (the default), cookies set by external rewriters will be kept for later calls. ", "<code class=\"type\">?restore:bool -&gt; tool_name:string -&gt; 'a <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a> -&gt; 'a -&gt; 'a</code>", "?restore:bool -> tool_name:string -> 'a ast_kind -> 'a -> 'a"],
["Misc.HookSig", "Misc.HookSig.html", "apply_hooks", "Misc.HookSig.html#VALapply_hooks", "", "", "<code class=\"type\"><a href=\"Misc.html#TYPEhook_info\">Misc.hook_info</a> -&gt; <a href=\"Misc.HookSig.html#TYPEt\">t</a> -&gt; <a href=\"Misc.HookSig.html#TYPEt\">t</a></code>", "Misc.hook_info -> t -> t"],
["Ast_helper.Exp", "Ast_helper.Exp.html", "apply", "Ast_helper.Exp.html#VALapply", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt;<br>       (<a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.expression ->       (Asttypes.arg_label * Parsetree.expression) list -> Parsetree.expression"],
["Ast_helper.Mod", "Ast_helper.Mod.html", "apply", "Ast_helper.Mod.html#VALapply", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.module_expr -> Parsetree.module_expr -> Parsetree.module_expr"],
["Ast_helper.Cl", "Ast_helper.Cl.html", "apply", "Ast_helper.Cl.html#VALapply", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt;<br>       (<a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a>) list -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.class_expr ->       (Asttypes.arg_label * Parsetree.expression) list -> Parsetree.class_expr"],
["Ast_mapper", "Ast_mapper.html", "apply", "Ast_mapper.html#VALapply", "<div class=\"info\">  <p>Apply a mapper (parametrized by the unit name) to a dumped parsetree found in the <code class=\"code\">source</code> file and put the result in the <code class=\"code\">target</code> file.</p> </div>", "  Apply a mapper (parametrized by the unit name) to a dumped parsetree found in the source file and put the result in the target file. ", "<code class=\"type\">source:string -&gt; target:string -&gt; <a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; unit</code>", "source:string -> target:string -> mapper -> unit"],
["Clflags", "Clflags.html", "applicative_functors", "Clflags.html#VALapplicative_functors", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Array", "Array.html", "append", "Array.html#VALappend", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p> </div>", "  Array.append\194\160v1\194\160v2 returns a fresh array containing the concatenation of the arrays v1 and v2. ", "<code class=\"type\">'a array -&gt; 'a array -&gt; 'a array</code>", "'a array -> 'a array -> 'a array"],
["ArrayLabels", "ArrayLabels.html", "append", "ArrayLabels.html#VALappend", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p> </div>", "  Array.append\194\160v1\194\160v2 returns a fresh array containing the concatenation of the arrays v1 and v2. ", "<code class=\"type\">'a array -&gt; 'a array -&gt; 'a array</code>", "'a array -> 'a array -> 'a array"],
["List", "List.html", "append", "List.html#VALappend", "<div class=\"info\">  <p>Concatenate two lists.</p> </div>", "  Concatenate two lists. ", "<code class=\"type\">'a list -&gt; 'a list -&gt; 'a list</code>", "'a list -> 'a list -> 'a list"],
["ListLabels", "ListLabels.html", "append", "ListLabels.html#VALappend", "<div class=\"info\">  <p>Catenate two lists.</p> </div>", "  Catenate two lists. ", "<code class=\"type\">'a list -&gt; 'a list -&gt; 'a list</code>", "'a list -> 'a list -> 'a list"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "any", "Ast_helper.Typ.html#VALany", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; unit -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc -> ?attrs:Ast_helper.attrs -> unit -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "any", "Ast_helper.Pat.html#VALany", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt; ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; unit -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc -> ?attrs:Ast_helper.attrs -> unit -> Parsetree.pattern"],
["Misc.Color", "Misc.Color.html", "ansi_of_style_l", "Misc.Color.html#VALansi_of_style_l", "", "", "<code class=\"type\"><a href=\"Misc.Color.html#TYPEstyle\">style</a> list -&gt; string</code>", "style list -> string"],
["Clflags", "Clflags.html", "annotations", "Clflags.html#VALannotations", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Event", "Event.html", "always", "Event.html#VALalways", "<div class=\"info\">  <p><code class=\"code\">always&nbsp;v</code> returns an event that is always ready for synchronization.</p> </div>", "  always\194\160v returns an event that is always ready for synchronization. ", "<code class=\"type\">'a -&gt; 'a <a href=\"Event.html#TYPEevent\">event</a></code>", "'a -> 'a event"],
["Dynlink", "Dynlink.html", "allow_unsafe_modules", "Dynlink.html#VALallow_unsafe_modules", "<div class=\"info\">  <p>Govern whether unsafe object files are allowed to be dynamically linked.</p> </div>", "  Govern whether unsafe object files are allowed to be dynamically linked. ", "<code class=\"type\">bool -&gt; unit</code>", "bool -> unit"],
["Dynlink", "Dynlink.html", "allow_only", "Dynlink.html#VALallow_only", "<div class=\"info\">  <p><code class=\"code\">allow_only&nbsp;units</code> restricts the compilation units that dynamically-linked units can reference: it forbids all references to units other than those named in the list <code class=\"code\">units</code>.</p> </div>", "  allow_only\194\160units restricts the compilation units that dynamically-linked units can reference: it forbids all references to units other than those named in the list units. ", "<code class=\"type\">string list -&gt; unit</code>", "string list -> unit"],
["Gc", "Gc.html", "allocated_bytes", "Gc.html#VALallocated_bytes", "<div class=\"info\">  <p>Return the total number of bytes allocated since the program was started.</p> </div>", "  Return the total number of bytes allocated since the program was started. ", "<code class=\"type\">unit -&gt; float</code>", "unit -> float"],
["Clflags", "Clflags.html", "all_ppx", "Clflags.html#VALall_ppx", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Clflags", "Clflags.html", "all_passes", "Clflags.html#VALall_passes", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Profile", "Profile.html", "all_columns", "Profile.html#VALall_columns", "", "", "<code class=\"type\"><a href=\"Profile.html#TYPEcolumn\">column</a> list</code>", "column list"],
["Clflags", "Clflags.html", "all_ccopts", "Clflags.html#VALall_ccopts", "", "", "<code class=\"type\">string list <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "string list ref"],
["Arg", "Arg.html", "align", "Arg.html#VALalign", "<div class=\"info\">  <p>Align the documentation strings by inserting spaces at the first alignment separator (tab or, if tab is not found, space), according to the length of the keyword.</p> </div>", "  Align the documentation strings by inserting spaces at the first alignment separator (tab or, if tab is not found, space), according to the length of the keyword. ", "<code class=\"type\">?limit:int -&gt;<br>       (<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list -&gt; (<a href=\"Arg.html#TYPEkey\">key</a> * <a href=\"Arg.html#TYPEspec\">spec</a> * <a href=\"Arg.html#TYPEdoc\">doc</a>) list</code>", "?limit:int ->       (key * spec * doc) list -> (key * spec * doc) list"],
["Misc", "Misc.html", "align", "Misc.html#VALalign", "", "", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Ast_helper.Typ", "Ast_helper.Typ.html", "alias", "Ast_helper.Typ.html#VALalias", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; string -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.core_type -> string -> Parsetree.core_type"],
["Ast_helper.Pat", "Ast_helper.Pat.html", "alias", "Ast_helper.Pat.html#VALalias", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Ast_helper.html#TYPEstr\">Ast_helper.str</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs ->       Parsetree.pattern -> Ast_helper.str -> Parsetree.pattern"],
["Ast_helper.Mty", "Ast_helper.Mty.html", "alias", "Ast_helper.Mty.html#VALalias", "", "", "<code class=\"type\">?loc:<a href=\"Ast_helper.html#TYPEloc\">Ast_helper.loc</a> -&gt;<br>       ?attrs:<a href=\"Ast_helper.html#TYPEattrs\">Ast_helper.attrs</a> -&gt; <a href=\"Ast_helper.html#TYPElid\">Ast_helper.lid</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>", "?loc:Ast_helper.loc ->       ?attrs:Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_type"],
["Unix", "Unix.html", "alarm", "Unix.html#VALalarm", "<div class=\"info\">  <p>Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds.</p> </div>", "  Schedule a SIGALRM signal after the given number of seconds. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["UnixLabels", "UnixLabels.html", "alarm", "UnixLabels.html#VALalarm", "<div class=\"info\">  <p>Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds.</p> </div>", "  Schedule a SIGALRM signal after the given number of seconds. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Clflags", "Clflags.html", "afl_instrument", "Clflags.html#VALafl_instrument", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Config", "Config.html", "afl_instrument", "Config.html#VALafl_instrument", "", "", "<code class=\"type\">bool</code>", "bool"],
["Clflags", "Clflags.html", "afl_inst_ratio", "Clflags.html#VALafl_inst_ratio", "", "", "<code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "int ref"],
["Buffer", "Buffer.html", "add_utf_8_uchar", "Buffer.html#VALadd_utf_8_uchar", "<div class=\"info\">  <p><code class=\"code\">add_utf_8_uchar&nbsp;b&nbsp;u</code> appends the <a href=\"https://tools.ietf.org/html/rfc3629\"> UTF-8</a> encoding of <code class=\"code\">u</code> at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_utf_8_uchar\194\160b\194\160u appends the  UTF-8 encoding of u at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; <a href=\"Uchar.html#TYPEt\">Uchar.t</a> -&gt; unit</code>", "t -> Uchar.t -> unit"],
["Buffer", "Buffer.html", "add_utf_16le_uchar", "Buffer.html#VALadd_utf_16le_uchar", "<div class=\"info\">  <p><code class=\"code\">add_utf_16le_uchar&nbsp;b&nbsp;u</code> appends the <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16LE</a> encoding of <code class=\"code\">u</code> at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_utf_16le_uchar\194\160b\194\160u appends the UTF-16LE encoding of u at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; <a href=\"Uchar.html#TYPEt\">Uchar.t</a> -&gt; unit</code>", "t -> Uchar.t -> unit"],
["Buffer", "Buffer.html", "add_utf_16be_uchar", "Buffer.html#VALadd_utf_16be_uchar", "<div class=\"info\">  <p><code class=\"code\">add_utf_16be_uchar&nbsp;b&nbsp;u</code> appends the <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16BE</a> encoding of <code class=\"code\">u</code> at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_utf_16be_uchar\194\160b\194\160u appends the UTF-16BE encoding of u at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; <a href=\"Uchar.html#TYPEt\">Uchar.t</a> -&gt; unit</code>", "t -> Uchar.t -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "add_user_override", "Arg_helper.Make.html#VALadd_user_override", "", "", "<code class=\"type\">S.Key.t -&gt; S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Key.t -> S.Value.t -> parsed -> parsed"],
["Depend", "Depend.html", "add_use_file", "Depend.html#VALadd_use_file", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEtoplevel_phrase\">Parsetree.toplevel_phrase</a> list -&gt; unit</code>", "bound_map -> Parsetree.toplevel_phrase list -> unit"],
["Docstrings", "Docstrings.html", "add_text_attrs", "Docstrings.html#VALadd_text_attrs", "<div class=\"info\">  <p>Convert text to attributes and add them to an attribute list</p> </div>", "  Convert text to attributes and add them to an attribute list ", "<code class=\"type\"><a href=\"Docstrings.html#TYPEtext\">text</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a></code>", "text -> Parsetree.attributes -> Parsetree.attributes"],
["Format", "Format.html", "add_symbolic_output_item", "Format.html#VALadd_symbolic_output_item", "<div class=\"info\">  <p><code class=\"code\">add_symbolic_output_item&nbsp;sob&nbsp;itm</code> adds item <code class=\"code\">itm</code> to buffer <code class=\"code\">sob</code>.</p> </div>", "  add_symbolic_output_item\194\160sob\194\160itm adds item itm to buffer sob. ", "<code class=\"type\"><a href=\"Format.html#TYPEsymbolic_output_buffer\">symbolic_output_buffer</a> -&gt; <a href=\"Format.html#TYPEsymbolic_output_item\">symbolic_output_item</a> -&gt; unit</code>", "symbolic_output_buffer -> symbolic_output_item -> unit"],
["Buffer", "Buffer.html", "add_substring", "Buffer.html#VALadd_substring", "<div class=\"info\">  <p><code class=\"code\">add_substring&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset <code class=\"code\">ofs</code> in string <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_substring\194\160b\194\160s\194\160ofs\194\160len takes len characters from offset ofs in string s and appends them at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; string -&gt; int -&gt; int -&gt; unit</code>", "t -> string -> int -> int -> unit"],
["Buffer", "Buffer.html", "add_substitute", "Buffer.html#VALadd_substitute", "<div class=\"info\">  <p><code class=\"code\">add_substitute&nbsp;b&nbsp;f&nbsp;s</code> appends the string pattern <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code> with substitution.</p> </div>", "  add_substitute\194\160b\194\160f\194\160s appends the string pattern s at the end of buffer b with substitution. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; (string -&gt; string) -&gt; string -&gt; unit</code>", "t -> (string -> string) -> string -> unit"],
["Buffer", "Buffer.html", "add_subbytes", "Buffer.html#VALadd_subbytes", "<div class=\"info\">  <p><code class=\"code\">add_subbytes&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset <code class=\"code\">ofs</code> in byte sequence <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_subbytes\194\160b\194\160s\194\160ofs\194\160len takes len characters from offset ofs in byte sequence s and appends them at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; bytes -&gt; int -&gt; int -&gt; unit</code>", "t -> bytes -> int -> int -> unit"],
["Buffer", "Buffer.html", "add_string", "Buffer.html#VALadd_string", "<div class=\"info\">  <p><code class=\"code\">add_string&nbsp;b&nbsp;s</code> appends the string <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_string\194\160b\194\160s appends the string s at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; string -&gt; unit</code>", "t -> string -> unit"],
["Depend", "Depend.html", "add_signature_binding", "Depend.html#VALadd_signature_binding", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Depend.html#TYPEbound_map\">bound_map</a></code>", "bound_map -> Parsetree.signature -> bound_map"],
["Depend", "Depend.html", "add_signature", "Depend.html#VALadd_signature", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; unit</code>", "bound_map -> Parsetree.signature -> unit"],
["Buffer", "Buffer.html", "add_seq", "Buffer.html#VALadd_seq", "<div class=\"info\">  <p>Add chars to the buffer</p> </div>", "  Add chars to the buffer ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; char <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "t -> char Seq.t -> unit"],
["Set.S", "Set.S.html", "add_seq", "Set.S.html#VALadd_seq", "<div class=\"info\">  <p>Add the given elements to the set, in order.</p> </div>", "  Add the given elements to the set, in order. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "elt Seq.t -> t -> t"],
["Map.S", "Map.S.html", "add_seq", "Map.S.html#VALadd_seq", "<div class=\"info\">  <p>Add the given bindings to the map, in order.</p> </div>", "  Add the given bindings to the map, in order. ", "<code class=\"type\">(<a href=\"Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t -> 'a t -> 'a t"],
["Hashtbl", "Hashtbl.html", "add_seq", "Hashtbl.html#VALadd_seq", "<div class=\"info\">  <p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALadd\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add</code></a></p> </div>", "  Add the given bindings to the table, using Hashtbl.add ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; ('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "('a, 'b) t -> ('a * 'b) Seq.t -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "add_seq", "Hashtbl.S.html#VALadd_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; (<a href=\"Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> (key * 'a) Seq.t -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "add_seq", "Hashtbl.SeededS.html#VALadd_seq", "<div class=\"info\">  </div>", "  ", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; (<a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> (key * 'a) Seq.t -> unit"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "add_seq", "MoreLabels.Hashtbl.html#VALadd_seq", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; ('a * 'b) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "('a, 'b) t -> ('a * 'b) Seq.t -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "add_seq", "MoreLabels.Hashtbl.S.html#VALadd_seq", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; (<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> (key * 'a) Seq.t -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "add_seq", "MoreLabels.Hashtbl.SeededS.html#VALadd_seq", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt;<br>       (<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t ->       (key * 'a) Seq.t -> unit"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "add_seq", "MoreLabels.Map.S.html#VALadd_seq", "", "", "<code class=\"type\">(<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> * 'a) <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt;<br>       'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "(key * 'a) Seq.t ->       'a t -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "add_seq", "MoreLabels.Set.S.html#VALadd_seq", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "elt Seq.t -> t -> t"],
["Queue", "Queue.html", "add_seq", "Queue.html#VALadd_seq", "<div class=\"info\">  <p>Add the elements from the generator to the end of the queue</p> </div>", "  Add the elements from the generator to the end of the queue ", "<code class=\"type\">'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> 'a Seq.t -> unit"],
["Stack", "Stack.html", "add_seq", "Stack.html#VALadd_seq", "<div class=\"info\">  <p>Add the elements from the iterator on the top of the stack.</p> </div>", "  Add the elements from the iterator on the top of the stack. ", "<code class=\"type\">'a <a href=\"Stack.html#TYPEt\">t</a> -&gt; 'a <a href=\"Seq.html#TYPEt\">Seq.t</a> -&gt; unit</code>", "'a t -> 'a Seq.t -> unit"],
["Ast_mapper", "Ast_mapper.html", "add_ppx_context_str", "Ast_mapper.html#VALadd_ppx_context_str", "<div class=\"info\">  <p>Extract information from the current environment and encode it into an attribute which is prepended to the list of structure items in order to pass the information to an external processor.</p> </div>", "  Extract information from the current environment and encode it into an attribute which is prepended to the list of structure items in order to pass the information to an external processor. ", "<code class=\"type\">tool_name:string -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>", "tool_name:string -> Parsetree.structure -> Parsetree.structure"],
["Ast_mapper", "Ast_mapper.html", "add_ppx_context_sig", "Ast_mapper.html#VALadd_ppx_context_sig", "<div class=\"info\">  <p>Same as <code class=\"code\">add_ppx_context_str</code>, but for signatures.</p> </div>", "  Same as add_ppx_context_str, but for signatures. ", "<code class=\"type\">tool_name:string -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>", "tool_name:string -> Parsetree.signature -> Parsetree.signature"],
["Obj", "Obj.html", "add_offset", "Obj.html#VALadd_offset", "", "", "<code class=\"type\"><a href=\"Obj.html#TYPEt\">t</a> -&gt; <a href=\"Int32.html#TYPEt\">Int32.t</a> -&gt; <a href=\"Obj.html#TYPEt\">t</a></code>", "t -> Int32.t -> t"],
["Dynlink", "Dynlink.html", "add_interfaces", "Dynlink.html#VALadd_interfaces", "<div class=\"info\">  <p><code class=\"code\">add_interfaces&nbsp;units&nbsp;path</code> grants dynamically-linked object files access to the compilation units named in list <code class=\"code\">units</code>.</p> </div>", "  add_interfaces\194\160units\194\160path grants dynamically-linked object files access to the compilation units named in list units. ", "<code class=\"type\">string list -&gt; string list -&gt; unit</code>", "string list -> string list -> unit"],
["CamlinternalOO", "CamlinternalOO.html", "add_initializer", "CamlinternalOO.html#VALadd_initializer", "", "", "<code class=\"type\"><a href=\"CamlinternalOO.html#TYPEtable\">table</a> -&gt; (<a href=\"CamlinternalOO.html#TYPEobj\">obj</a> -&gt; unit) -&gt; unit</code>", "table -> (obj -> unit) -> unit"],
["Docstrings", "Docstrings.html", "add_info_attrs", "Docstrings.html#VALadd_info_attrs", "<div class=\"info\">  <p>Convert field info to attributes and add them to an attribute list</p> </div>", "  Convert field info to attributes and add them to an attribute list ", "<code class=\"type\"><a href=\"Docstrings.html#TYPEinfo\">info</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a></code>", "info -> Parsetree.attributes -> Parsetree.attributes"],
["CamlinternalFormat", "CamlinternalFormat.html", "add_in_char_set", "CamlinternalFormat.html#VALadd_in_char_set", "", "", "<code class=\"type\"><a href=\"CamlinternalFormat.html#TYPEmutable_char_set\">mutable_char_set</a> -&gt; char -&gt; unit</code>", "mutable_char_set -> char -> unit"],
["Depend", "Depend.html", "add_implementation_binding", "Depend.html#VALadd_implementation_binding", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Depend.html#TYPEbound_map\">bound_map</a></code>", "bound_map -> Parsetree.structure -> bound_map"],
["Depend", "Depend.html", "add_implementation", "Depend.html#VALadd_implementation", "", "", "<code class=\"type\"><a href=\"Depend.html#TYPEbound_map\">bound_map</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>", "bound_map -> Parsetree.structure -> unit"],
["Misc.HookSig", "Misc.HookSig.html", "add_hook", "Misc.HookSig.html#VALadd_hook", "", "", "<code class=\"type\">string -&gt; (<a href=\"Misc.html#TYPEhook_info\">Misc.hook_info</a> -&gt; <a href=\"Misc.HookSig.html#TYPEt\">t</a> -&gt; <a href=\"Misc.HookSig.html#TYPEt\">t</a>) -&gt; unit</code>", "string -> (Misc.hook_info -> t -> t) -> unit"],
["Docstrings", "Docstrings.html", "add_docs_attrs", "Docstrings.html#VALadd_docs_attrs", "<div class=\"info\">  <p>Convert item documentation to attributes and add them to an attribute list</p> </div>", "  Convert item documentation to attributes and add them to an attribute list ", "<code class=\"type\"><a href=\"Docstrings.html#TYPEdocs\">docs</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a> -&gt; <a href=\"Parsetree.html#TYPEattributes\">Parsetree.attributes</a></code>", "docs -> Parsetree.attributes -> Parsetree.attributes"],
["Buffer", "Buffer.html", "add_char", "Buffer.html#VALadd_char", "<div class=\"info\">  <p><code class=\"code\">add_char&nbsp;b&nbsp;c</code> appends the character <code class=\"code\">c</code> at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_char\194\160b\194\160c appends the character c at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; char -&gt; unit</code>", "t -> char -> unit"],
["Buffer", "Buffer.html", "add_channel", "Buffer.html#VALadd_channel", "<div class=\"info\">  <p><code class=\"code\">add_channel&nbsp;b&nbsp;ic&nbsp;n</code> reads at most <code class=\"code\">n</code> characters from the input channel <code class=\"code\">ic</code> and stores them at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_channel\194\160b\194\160ic\194\160n reads at most n characters from the input channel ic and stores them at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; <a href=\"Pervasives.html#TYPEin_channel\">in_channel</a> -&gt; int -&gt; unit</code>", "t -> in_channel -> int -> unit"],
["Buffer", "Buffer.html", "add_bytes", "Buffer.html#VALadd_bytes", "<div class=\"info\">  <p><code class=\"code\">add_bytes&nbsp;b&nbsp;s</code> appends the byte sequence <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p> </div>", "  add_bytes\194\160b\194\160s appends the byte sequence s at the end of buffer b. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; bytes -&gt; unit</code>", "t -> bytes -> unit"],
["Buffer", "Buffer.html", "add_buffer", "Buffer.html#VALadd_buffer", "<div class=\"info\">  <p><code class=\"code\">add_buffer&nbsp;b1&nbsp;b2</code> appends the current contents of buffer <code class=\"code\">b2</code> at the end of buffer <code class=\"code\">b1</code>.</p> </div>", "  add_buffer\194\160b1\194\160b2 appends the current contents of buffer b2 at the end of buffer b1. ", "<code class=\"type\"><a href=\"Buffer.html#TYPEt\">t</a> -&gt; <a href=\"Buffer.html#TYPEt\">t</a> -&gt; unit</code>", "t -> t -> unit"],
["Arg_helper.Make", "Arg_helper.Make.html", "add_base_override", "Arg_helper.Make.html#VALadd_base_override", "", "", "<code class=\"type\">S.Key.t -&gt; S.Value.t -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a> -&gt; <a href=\"Arg_helper.Make.html#TYPEparsed\">parsed</a></code>", "S.Key.t -> S.Value.t -> parsed -> parsed"],
["Dynlink", "Dynlink.html", "add_available_units", "Dynlink.html#VALadd_available_units", "<div class=\"info\">  <p>Same as <a href=\"Dynlink.html#VALadd_interfaces\"><code class=\"code\"><span class=\"constructor\">Dynlink</span>.add_interfaces</code></a>, but instead of searching <code class=\"code\">.cmi</code> files to find the unit interfaces, uses the interface digests given for each unit.</p> </div>", "  Same as Dynlink.add_interfaces, but instead of searching .cmi files to find the unit interfaces, uses the interface digests given for each unit. ", "<code class=\"type\">(string * <a href=\"Digest.html#TYPEt\">Digest.t</a>) list -&gt; unit</code>", "(string * Digest.t) list -> unit"],
["Clflags", "Clflags.html", "add_arguments", "Clflags.html#VALadd_arguments", "", "", "<code class=\"type\">string -&gt; (string * <a href=\"Arg.html#TYPEspec\">Arg.spec</a> * string) list -&gt; unit</code>", "string -> (string * Arg.spec * string) list -> unit"],
["Complex", "Complex.html", "add", "Complex.html#VALadd", "<div class=\"info\">  <p>Addition</p> </div>", "  Addition ", "<code class=\"type\"><a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a> -&gt; <a href=\"Complex.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Set.S", "Set.S.html", "add", "Set.S.html#VALadd", "<div class=\"info\">  <p><code class=\"code\">add&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>, plus <code class=\"code\">x</code>.</p> </div>", "  add\194\160x\194\160s returns a set containing all elements of s, plus x. ", "<code class=\"type\"><a href=\"Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a> -&gt; <a href=\"Set.S.html#TYPEt\">t</a></code>", "elt -> t -> t"],
["Map.S", "Map.S.html", "add", "Map.S.html#VALadd", "<div class=\"info\">  <p><code class=\"code\">add&nbsp;x&nbsp;y&nbsp;m</code> returns a map containing the same bindings as <code class=\"code\">m</code>, plus a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>.</p> </div>", "  add\194\160x\194\160y\194\160m returns a map containing the same bindings as m, plus a binding of x to y. ", "<code class=\"type\"><a href=\"Map.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"Map.S.html#TYPEt\">t</a></code>", "key -> 'a -> 'a t -> 'a t"],
["Float", "Float.html", "add", "Float.html#VALadd", "<div class=\"info\">  <p>Floating-point addition.</p> </div>", "  Floating-point addition. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Hashtbl", "Hashtbl.html", "add", "Hashtbl.html#VALadd", "<div class=\"info\">  <p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add&nbsp;tbl&nbsp;x&nbsp;y</code> adds a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code> in table <code class=\"code\">tbl</code>.</p> </div>", "  Hashtbl.add\194\160tbl\194\160x\194\160y adds a binding of x to y in table tbl. ", "<code class=\"type\">('a, 'b) <a href=\"Hashtbl.html#TYPEt\">t</a> -&gt; 'a -&gt; 'b -&gt; unit</code>", "('a, 'b) t -> 'a -> 'b -> unit"],
["Hashtbl.S", "Hashtbl.S.html", "add", "Hashtbl.S.html#VALadd", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.S.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.S.html#TYPEkey\">key</a> -&gt; 'a -&gt; unit</code>", "'a t -> key -> 'a -> unit"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "add", "Hashtbl.SeededS.html#VALadd", "", "", "<code class=\"type\">'a <a href=\"Hashtbl.SeededS.html#TYPEt\">t</a> -&gt; <a href=\"Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; 'a -&gt; unit</code>", "'a t -> key -> 'a -> unit"],
["Int32", "Int32.html", "add", "Int32.html#VALadd", "<div class=\"info\">  <p>Addition.</p> </div>", "  Addition. ", "<code class=\"type\">int32 -&gt; int32 -&gt; int32</code>", "int32 -> int32 -> int32"],
["Int64", "Int64.html", "add", "Int64.html#VALadd", "<div class=\"info\">  <p>Addition.</p> </div>", "  Addition. ", "<code class=\"type\">int64 -&gt; int64 -&gt; int64</code>", "int64 -> int64 -> int64"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "add", "MoreLabels.Hashtbl.html#VALadd", "", "", "<code class=\"type\">('a, 'b) <a href=\"MoreLabels.Hashtbl.html#TYPEt\">t</a> -&gt; key:'a -&gt; data:'b -&gt; unit</code>", "('a, 'b) t -> key:'a -> data:'b -> unit"],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "add", "MoreLabels.Hashtbl.S.html#VALadd", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.S.html#TYPEt\">t</a> -&gt; key:<a href=\"MoreLabels.Hashtbl.S.html#TYPEkey\">key</a> -&gt; data:'a -&gt; unit</code>", "'a t -> key:key -> data:'a -> unit"],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "add", "MoreLabels.Hashtbl.SeededS.html#VALadd", "", "", "<code class=\"type\">'a <a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEt\">t</a> -&gt;<br>       key:<a href=\"MoreLabels.Hashtbl.SeededS.html#TYPEkey\">key</a> -&gt; data:'a -&gt; unit</code>", "'a t ->       key:key -> data:'a -> unit"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "add", "MoreLabels.Map.S.html#VALadd", "", "", "<code class=\"type\">key:<a href=\"MoreLabels.Map.S.html#TYPEkey\">key</a> -&gt;<br>       data:'a -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a> -&gt; 'a <a href=\"MoreLabels.Map.S.html#TYPEt\">t</a></code>", "key:key ->       data:'a -> 'a t -> 'a t"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "add", "MoreLabels.Set.S.html#VALadd", "", "", "<code class=\"type\"><a href=\"MoreLabels.Set.S.html#TYPEelt\">elt</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a> -&gt; <a href=\"MoreLabels.Set.S.html#TYPEt\">t</a></code>", "elt -> t -> t"],
["Nativeint", "Nativeint.html", "add", "Nativeint.html#VALadd", "<div class=\"info\">  <p>Addition.</p> </div>", "  Addition. ", "<code class=\"type\">nativeint -&gt; nativeint -&gt; nativeint</code>", "nativeint -> nativeint -> nativeint"],
["Queue", "Queue.html", "add", "Queue.html#VALadd", "<div class=\"info\">  <p><code class=\"code\">add&nbsp;x&nbsp;q</code> adds the element <code class=\"code\">x</code> at the end of the queue <code class=\"code\">q</code>.</p> </div>", "  add\194\160x\194\160q adds the element x at the end of the queue q. ", "<code class=\"type\">'a -&gt; 'a <a href=\"Queue.html#TYPEt\">t</a> -&gt; unit</code>", "'a -> 'a t -> unit"],
["Targetint", "Targetint.html", "add", "Targetint.html#VALadd", "<div class=\"info\">  <p>Addition.</p> </div>", "  Addition. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t -> t"],
["Tbl", "Tbl.html", "add", "Tbl.html#VALadd", "", "", "<code class=\"type\">'k -&gt; 'v -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a> -&gt; ('k, 'v) <a href=\"Tbl.html#TYPEt\">t</a></code>", "'k -> 'v -> ('k, 'v) t -> ('k, 'v) t"],
["Weak.S", "Weak.S.html", "add", "Weak.S.html#VALadd", "<div class=\"info\">  <p><code class=\"code\">add&nbsp;t&nbsp;x</code> adds <code class=\"code\">x</code> to <code class=\"code\">t</code>.</p> </div>", "  add\194\160t\194\160x adds x to t. ", "<code class=\"type\"><a href=\"Weak.S.html#TYPEt\">t</a> -&gt; <a href=\"Weak.S.html#TYPEdata\">data</a> -&gt; unit</code>", "t -> data -> unit"],
["Dynlink", "Dynlink.html", "adapt_filename", "Dynlink.html#VALadapt_filename", "<div class=\"info\">  <p>In bytecode, the identity function.</p> </div>", "  In bytecode, the identity function. ", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Float", "Float.html", "acos", "Float.html#VALacos", "<div class=\"info\">  <p>Arc cosine.</p> </div>", "  Arc cosine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "acos", "Pervasives.html#VALacos", "<div class=\"info\">  <p>Arc cosine.</p> </div>", "  Arc cosine. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Unix", "Unix.html", "access", "Unix.html#VALaccess", "<div class=\"info\">  <p>Check that the process has the given permissions over the named file.</p> </div>", "  Check that the process has the given permissions over the named file. ", "<code class=\"type\">string -&gt; <a href=\"Unix.html#TYPEaccess_permission\">access_permission</a> list -&gt; unit</code>", "string -> access_permission list -> unit"],
["UnixLabels", "UnixLabels.html", "access", "UnixLabels.html#VALaccess", "<div class=\"info\">  <p>Check that the process has the given permissions over the named file.</p> </div>", "  Check that the process has the given permissions over the named file. ", "<code class=\"type\">string -&gt; perm:<a href=\"UnixLabels.html#TYPEaccess_permission\">access_permission</a> list -&gt; unit</code>", "string -> perm:access_permission list -> unit"],
["ThreadUnix", "ThreadUnix.html", "accept", "ThreadUnix.html#VALaccept", "", "", "<code class=\"type\">?cloexec:bool -&gt; <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">Unix.file_descr</a> * <a href=\"Unix.html#TYPEsockaddr\">Unix.sockaddr</a></code>", "?cloexec:bool -> Unix.file_descr -> Unix.file_descr * Unix.sockaddr"],
["Unix", "Unix.html", "accept", "Unix.html#VALaccept", "<div class=\"info\">  <p>Accept connections on the given socket.</p> </div>", "  Accept connections on the given socket. ", "<code class=\"type\">?cloexec:bool -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"Unix.html#TYPEfile_descr\">file_descr</a> * <a href=\"Unix.html#TYPEsockaddr\">sockaddr</a></code>", "?cloexec:bool -> file_descr -> file_descr * sockaddr"],
["UnixLabels", "UnixLabels.html", "accept", "UnixLabels.html#VALaccept", "<div class=\"info\">  <p>Accept connections on the given socket.</p> </div>", "  Accept connections on the given socket. ", "<code class=\"type\">?cloexec:bool -&gt;<br>       <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> -&gt; <a href=\"UnixLabels.html#TYPEfile_descr\">file_descr</a> * <a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a></code>", "?cloexec:bool ->       file_descr -> file_descr * sockaddr"],
["Obj", "Obj.html", "abstract_tag", "Obj.html#VALabstract_tag", "", "", "<code class=\"type\">int</code>", "int"],
["Location", "Location.html", "absolute_path", "Location.html#VALabsolute_path", "", "", "<code class=\"type\">string -&gt; string</code>", "string -> string"],
["Location", "Location.html", "absname", "Location.html#VALabsname", "", "", "<code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code>", "bool ref"],
["Pervasives", "Pervasives.html", "abs_float", "Pervasives.html#VALabs_float", "<div class=\"info\">  <p><code class=\"code\">abs_float&nbsp;f</code> returns the absolute value of <code class=\"code\">f</code>.</p> </div>", "  abs_float\194\160f returns the absolute value of f. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Float", "Float.html", "abs", "Float.html#VALabs", "<div class=\"info\">  <p><code class=\"code\">abs&nbsp;f</code> returns the absolute value of <code class=\"code\">f</code>.</p> </div>", "  abs\194\160f returns the absolute value of f. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Int32", "Int32.html", "abs", "Int32.html#VALabs", "<div class=\"info\">  <p>Return the absolute value of its argument.</p> </div>", "  Return the absolute value of its argument. ", "<code class=\"type\">int32 -&gt; int32</code>", "int32 -> int32"],
["Int64", "Int64.html", "abs", "Int64.html#VALabs", "<div class=\"info\">  <p>Return the absolute value of its argument.</p> </div>", "  Return the absolute value of its argument. ", "<code class=\"type\">int64 -&gt; int64</code>", "int64 -> int64"],
["Nativeint", "Nativeint.html", "abs", "Nativeint.html#VALabs", "<div class=\"info\">  <p>Return the absolute value of its argument.</p> </div>", "  Return the absolute value of its argument. ", "<code class=\"type\">nativeint -&gt; nativeint</code>", "nativeint -> nativeint"],
["Pervasives", "Pervasives.html", "abs", "Pervasives.html#VALabs", "<div class=\"info\">  <p>Return the absolute value of the argument.</p> </div>", "  Return the absolute value of the argument. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Targetint", "Targetint.html", "abs", "Targetint.html#VALabs", "<div class=\"info\">  <p>Return the absolute value of its argument.</p> </div>", "  Return the absolute value of its argument. ", "<code class=\"type\"><a href=\"Targetint.html#TYPEt\">t</a> -&gt; <a href=\"Targetint.html#TYPEt\">t</a></code>", "t -> t"],
["Pervasives", "Pervasives.html", "__POS__", "Pervasives.html#VAL__POS__", "<div class=\"info\">  <p><code class=\"code\">__POS__</code> returns a tuple <code class=\"code\">(file,lnum,cnum,enum)</code>, corresponding to the location at which this expression appears in the file currently being parsed by the compiler.</p> </div>", "  __POS__ returns a tuple (file,lnum,cnum,enum), corresponding to the location at which this expression appears in the file currently being parsed by the compiler. ", "<code class=\"type\">string * int * int * int</code>", "string * int * int * int"],
["Pervasives", "Pervasives.html", "__POS_OF__", "Pervasives.html#VAL__POS_OF__", "<div class=\"info\">  <p><code class=\"code\">__POS_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(loc,expr)</code>, where <code class=\"code\">loc</code> is a tuple <code class=\"code\">(file,lnum,cnum,enum)</code> corresponding to the location at which the expression <code class=\"code\">expr</code> appears in the file currently being parsed by the compiler.</p> </div>", "  __POS_OF__\194\160expr returns a pair (loc,expr), where loc is a tuple (file,lnum,cnum,enum) corresponding to the location at which the expression expr appears in the file currently being parsed by the compiler. ", "<code class=\"type\">'a -&gt; (string * int * int * int) * 'a</code>", "'a -> (string * int * int * int) * 'a"],
["Pervasives", "Pervasives.html", "__MODULE__", "Pervasives.html#VAL__MODULE__", "<div class=\"info\">  <p><code class=\"code\">__MODULE__</code> returns the module name of the file being parsed by the compiler.</p> </div>", "  __MODULE__ returns the module name of the file being parsed by the compiler. ", "<code class=\"type\">string</code>", "string"],
["Pervasives", "Pervasives.html", "__LOC__", "Pervasives.html#VAL__LOC__", "<div class=\"info\">  <p><code class=\"code\">__LOC__</code> returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\".</p> </div>", "  __LOC__ returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\". ", "<code class=\"type\">string</code>", "string"],
["Pervasives", "Pervasives.html", "__LOC_OF__", "Pervasives.html#VAL__LOC_OF__", "<div class=\"info\">  <p><code class=\"code\">__LOC_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(loc,&nbsp;expr)</code> where <code class=\"code\">loc</code> is the location of <code class=\"code\">expr</code> in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\".</p> </div>", "  __LOC_OF__\194\160expr returns a pair (loc,\194\160expr) where loc is the location of expr in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\". ", "<code class=\"type\">'a -&gt; string * 'a</code>", "'a -> string * 'a"],
["Pervasives", "Pervasives.html", "__LINE__", "Pervasives.html#VAL__LINE__", "<div class=\"info\">  <p><code class=\"code\">__LINE__</code> returns the line number at which this expression appears in the file currently being parsed by the compiler.</p> </div>", "  __LINE__ returns the line number at which this expression appears in the file currently being parsed by the compiler. ", "<code class=\"type\">int</code>", "int"],
["Pervasives", "Pervasives.html", "__LINE_OF__", "Pervasives.html#VAL__LINE_OF__", "<div class=\"info\">  <p><code class=\"code\">__LINE_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(line,&nbsp;expr)</code>, where <code class=\"code\">line</code> is the line number at which the expression <code class=\"code\">expr</code> appears in the file currently being parsed by the compiler.</p> </div>", "  __LINE_OF__\194\160expr returns a pair (line,\194\160expr), where line is the line number at which the expression expr appears in the file currently being parsed by the compiler. ", "<code class=\"type\">'a -&gt; int * 'a</code>", "'a -> int * 'a"],
["Pervasives", "Pervasives.html", "__FILE__", "Pervasives.html#VAL__FILE__", "<div class=\"info\">  <p><code class=\"code\">__FILE__</code> returns the name of the file currently being parsed by the compiler.</p> </div>", "  __FILE__ returns the name of the file currently being parsed by the compiler. ", "<code class=\"type\">string</code>", "string"],
["Pervasives", "Pervasives.html", "(~-.)", "Pervasives.html#VAL(~-.)", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "(~-)", "Pervasives.html#VAL(~-)", "<div class=\"info\">  <p>Unary negation.</p> </div>", "  Unary negation. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Pervasives", "Pervasives.html", "(~+.)", "Pervasives.html#VAL(~+.)", "<div class=\"info\">  <p>Unary addition.</p> </div>", "  Unary addition. ", "<code class=\"type\">float -&gt; float</code>", "float -> float"],
["Pervasives", "Pervasives.html", "(~+)", "Pervasives.html#VAL(~+)", "<div class=\"info\">  <p>Unary addition.</p> </div>", "  Unary addition. ", "<code class=\"type\">int -&gt; int</code>", "int -> int"],
["Pervasives", "Pervasives.html", "(||)", "Pervasives.html#VAL(||)", "<div class=\"info\">  <p>The boolean 'or'.</p> </div>", "  The boolean 'or'. ", "<code class=\"type\">bool -&gt; bool -&gt; bool</code>", "bool -> bool -> bool"],
["Pervasives", "Pervasives.html", "(|>)", "Pervasives.html#VAL(|>)", "<div class=\"info\">  <p>Reverse-application operator: <code class=\"code\">x&nbsp;|&gt;&nbsp;f&nbsp;|&gt;&nbsp;g</code> is exactly equivalent to <code class=\"code\">g&nbsp;(f&nbsp;(x))</code>.</p> </div>", "  Reverse-application operator: x\194\160|>\194\160f\194\160|>\194\160g is exactly equivalent to g\194\160(f\194\160(x)). ", "<code class=\"type\">'a -&gt; ('a -&gt; 'b) -&gt; 'b</code>", "'a -> ('a -> 'b) -> 'b"],
["Pervasives", "Pervasives.html", "(or)", "Pervasives.html#VAL(or)", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">bool -&gt; bool -&gt; bool</code>", "bool -> bool -> bool"],
["Pervasives", "Pervasives.html", "(mod)", "Pervasives.html#VAL(mod)", "<div class=\"info\">  <p>Integer remainder.</p> </div>", "  Integer remainder. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(lxor)", "Pervasives.html#VAL(lxor)", "<div class=\"info\">  <p>Bitwise logical exclusive or.</p> </div>", "  Bitwise logical exclusive or. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(lsr)", "Pervasives.html#VAL(lsr)", "<div class=\"info\">  <p><code class=\"code\">n&nbsp;<span class=\"keyword\">lsr</span>&nbsp;m</code> shifts <code class=\"code\">n</code> to the right by <code class=\"code\">m</code> bits.</p> </div>", "  n\194\160lsr\194\160m shifts n to the right by m bits. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(lsl)", "Pervasives.html#VAL(lsl)", "<div class=\"info\">  <p><code class=\"code\">n&nbsp;<span class=\"keyword\">lsl</span>&nbsp;m</code> shifts <code class=\"code\">n</code> to the left by <code class=\"code\">m</code> bits.</p> </div>", "  n\194\160lsl\194\160m shifts n to the left by m bits. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(lor)", "Pervasives.html#VAL(lor)", "<div class=\"info\">  <p>Bitwise logical or.</p> </div>", "  Bitwise logical or. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(land)", "Pervasives.html#VAL(land)", "<div class=\"info\">  <p>Bitwise logical and.</p> </div>", "  Bitwise logical and. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(asr)", "Pervasives.html#VAL(asr)", "<div class=\"info\">  <p><code class=\"code\">n&nbsp;<span class=\"keyword\">asr</span>&nbsp;m</code> shifts <code class=\"code\">n</code> to the right by <code class=\"code\">m</code> bits.</p> </div>", "  n\194\160asr\194\160m shifts n to the right by m bits. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(^^)", "Pervasives.html#VAL(^^)", "<div class=\"info\">  <p><code class=\"code\">f1&nbsp;^^&nbsp;f2</code> catenates format strings <code class=\"code\">f1</code> and <code class=\"code\">f2</code>.</p> </div>", "  f1\194\160^^\194\160f2 catenates format strings f1 and f2. ", "<code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt;<br>       ('f, 'b, 'c, 'e, 'g, 'h) <a href=\"Pervasives.html#TYPEformat6\">format6</a> -&gt;<br>       ('a, 'b, 'c, 'd, 'g, 'h) <a href=\"Pervasives.html#TYPEformat6\">format6</a></code>", "('a, 'b, 'c, 'd, 'e, 'f) format6 ->       ('f, 'b, 'c, 'e, 'g, 'h) format6 ->       ('a, 'b, 'c, 'd, 'g, 'h) format6"],
["Pervasives", "Pervasives.html", "(^)", "Pervasives.html#VAL(^)", "<div class=\"info\">  <p>String concatenation.</p> </div>", "  String concatenation. ", "<code class=\"type\">string -&gt; string -&gt; string</code>", "string -> string -> string"],
["Pervasives", "Pervasives.html", "(@@)", "Pervasives.html#VAL(@@)", "<div class=\"info\">  <p>Application operator: <code class=\"code\">g&nbsp;@@&nbsp;f&nbsp;@@&nbsp;x</code> is exactly equivalent to <code class=\"code\">g&nbsp;(f&nbsp;(x))</code>.</p> </div>", "  Application operator: g\194\160@@\194\160f\194\160@@\194\160x is exactly equivalent to g\194\160(f\194\160(x)). ", "<code class=\"type\">('a -&gt; 'b) -&gt; 'a -&gt; 'b</code>", "('a -> 'b) -> 'a -> 'b"],
["Pervasives", "Pervasives.html", "(@)", "Pervasives.html#VAL(@)", "<div class=\"info\">  <p>List concatenation.</p> </div>", "  List concatenation. ", "<code class=\"type\">'a list -&gt; 'a list -&gt; 'a list</code>", "'a list -> 'a list -> 'a list"],
["Pervasives", "Pervasives.html", "(>=)", "Pervasives.html#VAL(>=)", "<div class=\"info\">  <p>Structural ordering functions.</p> </div>", "  Structural ordering functions. ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(>)", "Pervasives.html#VAL(>)", "<div class=\"info\">  <p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.</p> </div>", "  See (>=). ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(==)", "Pervasives.html#VAL(==)", "<div class=\"info\">  <p><code class=\"code\">e1&nbsp;==&nbsp;e2</code> tests for physical equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>.</p> </div>", "  e1\194\160==\194\160e2 tests for physical equality of e1 and e2. ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(=)", "Pervasives.html#VAL(=)", "<div class=\"info\">  <p><code class=\"code\">e1&nbsp;=&nbsp;e2</code> tests for structural equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>.</p> </div>", "  e1\194\160=\194\160e2 tests for structural equality of e1 and e2. ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(<>)", "Pervasives.html#VAL(<>)", "<div class=\"info\">  <p>Negation of <a href=\"Pervasives.html#VAL(=)\"><code class=\"code\">(=)</code></a>.</p> </div>", "  Negation of (=). ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(<=)", "Pervasives.html#VAL(<=)", "<div class=\"info\">  <p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.</p> </div>", "  See (>=). ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(<)", "Pervasives.html#VAL(<)", "<div class=\"info\">  <p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.</p> </div>", "  See (>=). ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(:=)", "Pervasives.html#VAL(:=)", "<div class=\"info\">  <p><code class=\"code\">r&nbsp;:=&nbsp;a</code> stores the value of <code class=\"code\">a</code> in reference <code class=\"code\">r</code>.</p> </div>", "  r\194\160:=\194\160a stores the value of a in reference r. ", "<code class=\"type\">'a <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; 'a -&gt; unit</code>", "'a ref -> 'a -> unit"],
["Pervasives", "Pervasives.html", "(/.)", "Pervasives.html#VAL(/.)", "<div class=\"info\">  <p>Floating-point division.</p> </div>", "  Floating-point division. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "(/)", "Pervasives.html#VAL(/)", "<div class=\"info\">  <p>Integer division.</p> </div>", "  Integer division. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(-.)", "Pervasives.html#VAL(-.)", "<div class=\"info\">  <p>Floating-point subtraction.</p> </div>", "  Floating-point subtraction. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "(-)", "Pervasives.html#VAL(-)", "<div class=\"info\">  <p>Integer subtraction.</p> </div>", "  Integer subtraction. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(+.)", "Pervasives.html#VAL(+.)", "<div class=\"info\">  <p>Floating-point addition.</p> </div>", "  Floating-point addition. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "(+)", "Pervasives.html#VAL(+)", "<div class=\"info\">  <p>Integer addition.</p> </div>", "  Integer addition. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
["Pervasives", "Pervasives.html", "(&)", "Pervasives.html#VAL(&)", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  ", "<code class=\"type\">bool -&gt; bool -&gt; bool</code>", "bool -> bool -> bool"],
["Pervasives", "Pervasives.html", "(&&)", "Pervasives.html#VAL(&&)", "<div class=\"info\">  <p>The boolean 'and'.</p> </div>", "  The boolean 'and'. ", "<code class=\"type\">bool -&gt; bool -&gt; bool</code>", "bool -> bool -> bool"],
["Pervasives", "Pervasives.html", "(!=)", "Pervasives.html#VAL(!=)", "<div class=\"info\">  <p>Negation of <a href=\"Pervasives.html#VAL(==)\"><code class=\"code\">(==)</code></a>.</p> </div>", "  Negation of (==). ", "<code class=\"type\">'a -&gt; 'a -&gt; bool</code>", "'a -> 'a -> bool"],
["Pervasives", "Pervasives.html", "(!)", "Pervasives.html#VAL(!)", "<div class=\"info\">  <p><code class=\"code\">!r</code> returns the current contents of reference <code class=\"code\">r</code>.</p> </div>", "  !r returns the current contents of reference r. ", "<code class=\"type\">'a <a href=\"Pervasives.html#TYPEref\">ref</a> -&gt; 'a</code>", "'a ref -> 'a"],
["Pervasives", "Pervasives.html", "( *. )", "Pervasives.html#VAL( *. )", "<div class=\"info\">  <p>Floating-point multiplication.</p> </div>", "  Floating-point multiplication. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "( ** )", "Pervasives.html#VAL( ** )", "<div class=\"info\">  <p>Exponentiation.</p> </div>", "  Exponentiation. ", "<code class=\"type\">float -&gt; float -&gt; float</code>", "float -> float -> float"],
["Pervasives", "Pervasives.html", "( * )", "Pervasives.html#VAL( * )", "<div class=\"info\">  <p>Integer multiplication.</p> </div>", "  Integer multiplication. ", "<code class=\"type\">int -&gt; int -&gt; int</code>", "int -> int -> int"],
]
