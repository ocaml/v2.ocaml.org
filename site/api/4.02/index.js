var GENERAL_INDEX = [
["Big_int", "Big_int.html", "zero_big_int", "Big_int.html#VALzero_big_int", "<div class=\"info\">  The big integer <code class=\"code\">0</code>. </div>", "  The big integer 0. "],
["Complex", "Complex.html", "zero", "Complex.html#VALzero", "<div class=\"info\">  The complex number <code class=\"code\">0</code>. </div>", "  The complex number 0. "],
["Int32", "Int32.html", "zero", "Int32.html#VALzero", "<div class=\"info\">  The 32-bit integer 0. </div>", "  The 32-bit integer 0. "],
["Int64", "Int64.html", "zero", "Int64.html#VALzero", "<div class=\"info\">  The 64-bit integer 0. </div>", "  The 64-bit integer 0. "],
["Nativeint", "Nativeint.html", "zero", "Nativeint.html#VALzero", "<div class=\"info\">  The native integer 0. </div>", "  The native integer 0. "],
["Thread", "Thread.html", "yield", "Thread.html#VALyield", "<div class=\"info\">  Re-schedule the calling thread without suspending it. </div>", "  Re-schedule the calling thread without suspending it. "],
["Graphics", "Graphics.html", "yellow", "Graphics.html#VALyellow", "", ""],
["Big_int", "Big_int.html", "xor_big_int", "Big_int.html#VALxor_big_int", "<div class=\"info\">  Bitwise logical 'exclusive or'. </div>", "  Bitwise logical 'exclusive or'. "],
["ThreadUnix", "ThreadUnix.html", "write_substring", "ThreadUnix.html#VALwrite_substring", "", ""],
["Unix", "Unix.html", "write_substring", "Unix.html#VALwrite_substring", "<div class=\"info\">  Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as write, but take the data from a string instead of a byte sequence. "],
["UnixLabels", "UnixLabels.html", "write_substring", "UnixLabels.html#VALwrite_substring", "<div class=\"info\">  Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as write, but take the data from a string instead of a byte sequence. "],
["ThreadUnix", "ThreadUnix.html", "write", "ThreadUnix.html#VALwrite", "", ""],
["Unix", "Unix.html", "write", "Unix.html#VALwrite", "<div class=\"info\">  <code class=\"code\">write fd buff ofs len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>, taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>. </div>", "  write fd buff ofs len writes len bytes to descriptor fd, taking them from byte sequence buff, starting at position ofs in buff. "],
["UnixLabels", "UnixLabels.html", "write", "UnixLabels.html#VALwrite", "<div class=\"info\">  <code class=\"code\">write fd buff ofs len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>, taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>. </div>", "  write fd buff ofs len writes len bytes to descriptor fd, taking them from byte sequence buff, starting at position ofs in buff. "],
["Event", "Event.html", "wrap_abort", "Event.html#VALwrap_abort", "<div class=\"info\">  <code class=\"code\">wrap_abort ev fn</code> returns the event that performs the same communications as <code class=\"code\">ev</code>, but if it is not selected the function <code class=\"code\">fn</code> is called after the synchronization. </div>", "  wrap_abort ev fn returns the event that performs the same communications as ev, but if it is not selected the function fn is called after the synchronization. "],
["Event", "Event.html", "wrap", "Event.html#VALwrap", "<div class=\"info\">  <code class=\"code\">wrap ev fn</code> returns the event that performs the same communications as <code class=\"code\">ev</code>, then applies the post-processing function <code class=\"code\">fn</code> on the return value. </div>", "  wrap ev fn returns the event that performs the same communications as ev, then applies the post-processing function fn on the return value. "],
["Sys", "Sys.html", "word_size", "Sys.html#VALword_size", "<div class=\"info\">  Size of one word on the machine currently executing the OCaml program, in bits: 32 or 64. </div>", "  Size of one word on the machine currently executing the OCaml program, in bits: 32 or 64. "],
["GraphicsX11", "GraphicsX11.html", "window_id", "GraphicsX11.html#VALwindow_id", "<div class=\"info\">  Return the unique identifier of the OCaml graphics window. </div>", "  Return the unique identifier of the OCaml graphics window. "],
["Sys", "Sys.html", "win32", "Sys.html#VALwin32", "<div class=\"info\">  True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type = <span class=\"string\">\"Win32\"</span></code>. </div>", "  True if Sys.os_type = \"Win32\". "],
["CamlinternalOO", "CamlinternalOO.html", "widen", "CamlinternalOO.html#VALwiden", "", ""],
["Graphics", "Graphics.html", "white", "Graphics.html#VALwhite", "", ""],
["ThreadUnix", "ThreadUnix.html", "waitpid", "ThreadUnix.html#VALwaitpid", "", ""],
["Unix", "Unix.html", "waitpid", "Unix.html#VALwaitpid", "<div class=\"info\">  Same as <a href=\"Unix.html#VALwait\"><code class=\"code\"><span class=\"constructor\">Unix</span>.wait</code></a>, but waits for the child process whose pid is given. </div>", "  Same as Unix.wait, but waits for the child process whose pid is given. "],
["UnixLabels", "UnixLabels.html", "waitpid", "UnixLabels.html#VALwaitpid", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALwait\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.wait</code></a>, but waits for the child process whose pid is given. </div>", "  Same as UnixLabels.wait, but waits for the child process whose pid is given. "],
["Thread", "Thread.html", "wait_write", "Thread.html#VALwait_write", "<div class=\"info\">  This function does nothing in this implementation. </div>", "  This function does nothing in this implementation. "],
["Thread", "Thread.html", "wait_timed_write", "Thread.html#VALwait_timed_write", "<div class=\"info\">  Suspend the execution of the calling thread until at least one character is available for reading (<code class=\"code\">wait_read</code>) or one character can be written without blocking (<code class=\"code\">wait_write</code>) on the given Unix file descriptor. </div>", "  Suspend the execution of the calling thread until at least one character is available for reading (wait_read) or one character can be written without blocking (wait_write) on the given Unix file descriptor. "],
["Thread", "Thread.html", "wait_timed_read", "Thread.html#VALwait_timed_read", "<div class=\"info\">  See <a href=\"Thread.html#VALwait_timed_read\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_timed_read</code></a>. </div>", "  See Thread.wait_timed_read. "],
["Thread", "Thread.html", "wait_signal", "Thread.html#VALwait_signal", "<div class=\"info\">  <code class=\"code\">wait_signal sigs</code> suspends the execution of the calling thread until the process receives one of the signals specified in the list <code class=\"code\">sigs</code>. </div>", "  wait_signal sigs suspends the execution of the calling thread until the process receives one of the signals specified in the list sigs. "],
["Thread", "Thread.html", "wait_read", "Thread.html#VALwait_read", "<div class=\"info\">  See <a href=\"Thread.html#VALwait_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_write</code></a>. </div>", "  See Thread.wait_write. "],
["Thread", "Thread.html", "wait_pid", "Thread.html#VALwait_pid", "<div class=\"info\">  <code class=\"code\">wait_pid p</code> suspends the execution of the calling thread until the process specified by the process identifier <code class=\"code\">p</code> terminates. </div>", "  wait_pid p suspends the execution of the calling thread until the process specified by the process identifier p terminates. "],
["Graphics", "Graphics.html", "wait_next_event", "Graphics.html#VALwait_next_event", "<div class=\"info\">  Wait until one of the events specified in the given event list occurs, and return the status of the mouse and keyboard at that time. </div>", "  Wait until one of the events specified in the given event list occurs, and return the status of the mouse and keyboard at that time. "],
["Condition", "Condition.html", "wait", "Condition.html#VALwait", "<div class=\"info\">  <code class=\"code\">wait c m</code> atomically unlocks the mutex <code class=\"code\">m</code> and suspends the calling process on the condition variable <code class=\"code\">c</code>. </div>", "  wait c m atomically unlocks the mutex m and suspends the calling process on the condition variable c. "],
["ThreadUnix", "ThreadUnix.html", "wait", "ThreadUnix.html#VALwait", "", ""],
["Unix", "Unix.html", "wait", "Unix.html#VALwait", "<div class=\"info\">  Wait until one of the children processes die, and return its pid and termination status. </div>", "  Wait until one of the children processes die, and return its pid and termination status. "],
["UnixLabels", "UnixLabels.html", "wait", "UnixLabels.html#VALwait", "<div class=\"info\">  Wait until one of the children processes die, and return its pid and termination status. </div>", "  Wait until one of the children processes die, and return its pid and termination status. "],
["Unix", "Unix.html", "utimes", "Unix.html#VALutimes", "<div class=\"info\">  Set the last access time (second arg) and last modification time (third arg) for a file. </div>", "  Set the last access time (second arg) and last modification time (third arg) for a file. "],
["UnixLabels", "UnixLabels.html", "utimes", "UnixLabels.html#VALutimes", "<div class=\"info\">  Set the last access time (second arg) and last modification time (third arg) for a file. </div>", "  Set the last access time (second arg) and last modification time (third arg) for a file. "],
["Arg", "Arg.html", "usage_string", "Arg.html#VALusage_string", "<div class=\"info\">  Returns the message that would have been printed by <a href=\"Arg.html#VALusage\"><code class=\"code\"><span class=\"constructor\">Arg</span>.usage</code></a>, if provided with the same parameters. </div>", "  Returns the message that would have been printed by Arg.usage, if provided with the same parameters. "],
["Arg", "Arg.html", "usage", "Arg.html#VALusage", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Arg</span>.usage speclist usage_msg</code> prints to standard error an error message that includes the list of valid options. </div>", "  Arg.usage speclist usage_msg prints to standard error an error message that includes the list of valid options. "],
["Bytes", "Bytes.html", "uppercase", "Bytes.html#VALuppercase", "<div class=\"info\">  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["BytesLabels", "BytesLabels.html", "uppercase", "BytesLabels.html#VALuppercase", "<div class=\"info\">  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["Char", "Char.html", "uppercase", "Char.html#VALuppercase", "<div class=\"info\">  Convert the given character to its equivalent uppercase character. </div>", "  Convert the given character to its equivalent uppercase character. "],
["StringLabels", "StringLabels.html", "uppercase", "StringLabels.html#VALuppercase", "<div class=\"info\">  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["String", "String.html", "uppercase", "String.html#VALuppercase", "<div class=\"info\">  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["CamlinternalMod", "CamlinternalMod.html", "update_mod", "CamlinternalMod.html#VALupdate_mod", "", ""],
["Bytes", "Bytes.html", "unsafe_to_string", "Bytes.html#VALunsafe_to_string", "<div class=\"info\">  Unsafely convert a byte sequence into a string. </div>", "  Unsafely convert a byte sequence into a string. "],
["Bigarray.Array1", "Bigarray.Array1.html", "unsafe_set", "Bigarray.Array1.html#VALunsafe_set", "<div class=\"info\">  Like <a href=\"Bigarray.Array1.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.set</code></a>, but bounds checking is not always performed. </div>", "  Like Bigarray.Array1.set, but bounds checking is not always performed. "],
["Bigarray.Array2", "Bigarray.Array2.html", "unsafe_set", "Bigarray.Array2.html#VALunsafe_set", "<div class=\"info\">  Like <a href=\"Bigarray.Array2.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.set</code></a>, but bounds checking is not always performed. </div>", "  Like Bigarray.Array2.set, but bounds checking is not always performed. "],
["Bigarray.Array3", "Bigarray.Array3.html", "unsafe_set", "Bigarray.Array3.html#VALunsafe_set", "<div class=\"info\">  Like <a href=\"Bigarray.Array3.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.set</code></a>, but bounds checking is not always performed. </div>", "  Like Bigarray.Array3.set, but bounds checking is not always performed. "],
["Bytes", "Bytes.html", "unsafe_of_string", "Bytes.html#VALunsafe_of_string", "<div class=\"info\">  Unsafely convert a shared string to a byte sequence that should not be mutated. </div>", "  Unsafely convert a shared string to a byte sequence that should not be mutated. "],
["Bigarray.Array1", "Bigarray.Array1.html", "unsafe_get", "Bigarray.Array1.html#VALunsafe_get", "<div class=\"info\">  Like <a href=\"Bigarray.Array1.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.get</code></a>, but bounds checking is not always performed. </div>", "  Like Bigarray.Array1.get, but bounds checking is not always performed. "],
["Bigarray.Array2", "Bigarray.Array2.html", "unsafe_get", "Bigarray.Array2.html#VALunsafe_get", "<div class=\"info\">  Like <a href=\"Bigarray.Array2.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.get</code></a>, but bounds checking is not always performed. </div>", "  Like Bigarray.Array2.get, but bounds checking is not always performed. "],
["Bigarray.Array3", "Bigarray.Array3.html", "unsafe_get", "Bigarray.Array3.html#VALunsafe_get", "<div class=\"info\">  Like <a href=\"Bigarray.Array3.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.get</code></a>, but bounds checking is not always performed. </div>", "  Like Bigarray.Array3.get, but bounds checking is not always performed. "],
["Obj", "Obj.html", "unmarshal", "Obj.html#VALunmarshal", "", ""],
["Mutex", "Mutex.html", "unlock", "Mutex.html#VALunlock", "<div class=\"info\">  Unlock the given mutex. </div>", "  Unlock the given mutex. "],
["Unix", "Unix.html", "unlink", "Unix.html#VALunlink", "<div class=\"info\">  Removes the named file </div>", "  Removes the named file "],
["UnixLabels", "UnixLabels.html", "unlink", "UnixLabels.html#VALunlink", "<div class=\"info\">  Removes the named file </div>", "  Removes the named file "],
["Sys", "Sys.html", "unix", "Sys.html#VALunix", "<div class=\"info\">  True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type = <span class=\"string\">\"Unix\"</span></code>. </div>", "  True if Sys.os_type = \"Unix\". "],
["Big_int", "Big_int.html", "unit_big_int", "Big_int.html#VALunit_big_int", "<div class=\"info\">  The big integer <code class=\"code\">1</code>. </div>", "  The big integer 1. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "union", "MoreLabels.Set.S.html#VALunion", "", ""],
["Set.S", "Set.S.html", "union", "Set.S.html#VALunion", "<div class=\"info\">  Set union. </div>", "  Set union. "],
["Scanf", "Scanf.html", "unescaped", "Scanf.html#VALunescaped", "<div class=\"info\">  Return a copy of the argument with escape sequences, following the lexical conventions of OCaml, replaced by their corresponding special characters. </div>", "  Return a copy of the argument with escape sequences, following the lexical conventions of OCaml, replaced by their corresponding special characters. "],
["Bytes", "Bytes.html", "uncapitalize", "Bytes.html#VALuncapitalize", "<div class=\"info\">  Return a copy of the argument, with the first byte set to lowercase. </div>", "  Return a copy of the argument, with the first byte set to lowercase. "],
["BytesLabels", "BytesLabels.html", "uncapitalize", "BytesLabels.html#VALuncapitalize", "<div class=\"info\">  Return a copy of the argument, with the first byte set to lowercase. </div>", "  Return a copy of the argument, with the first byte set to lowercase. "],
["StringLabels", "StringLabels.html", "uncapitalize", "StringLabels.html#VALuncapitalize", "<div class=\"info\">  Return a copy of the argument, with the first character set to lowercase. </div>", "  Return a copy of the argument, with the first character set to lowercase. "],
["String", "String.html", "uncapitalize", "String.html#VALuncapitalize", "<div class=\"info\">  Return a copy of the argument, with the first character set to lowercase. </div>", "  Return a copy of the argument, with the first character set to lowercase. "],
["Obj", "Obj.html", "unaligned_tag", "Obj.html#VALunaligned_tag", "", ""],
["Unix", "Unix.html", "umask", "Unix.html#VALumask", "<div class=\"info\">  Set the process's file mode creation mask, and return the previous mask. </div>", "  Set the process's file mode creation mask, and return the previous mask. "],
["UnixLabels", "UnixLabels.html", "umask", "UnixLabels.html#VALumask", "<div class=\"info\">  Set the process's file mode creation mask, and return the previous mask. </div>", "  Set the process's file mode creation mask, and return the previous mask. "],
["CamlinternalFormat", "CamlinternalFormat.html", "type_format", "CamlinternalFormat.html#VALtype_format", "", ""],
["Mutex", "Mutex.html", "try_lock", "Mutex.html#VALtry_lock", "<div class=\"info\">  Same as <a href=\"Mutex.html#VALlock\"><code class=\"code\"><span class=\"constructor\">Mutex</span>.lock</code></a>, but does not suspend the calling thread if the mutex is already locked: just return <code class=\"code\"><span class=\"keyword\">false</span></code> immediately in that case. </div>", "  Same as Mutex.lock, but does not suspend the calling thread if the mutex is already locked: just return false immediately in that case. "],
["Obj", "Obj.html", "truncate", "Obj.html#VALtruncate", "", ""],
["Pervasives", "Pervasives.html", "truncate", "Pervasives.html#VALtruncate", "<div class=\"info\">  Same as <a href=\"Pervasives.html#VALint_of_float\"><code class=\"code\">int_of_float</code></a>. </div>", "  Same as int_of_float. "],
["Unix", "Unix.html", "truncate", "Unix.html#VALtruncate", "<div class=\"info\">  Truncates the named file to the given size. </div>", "  Truncates the named file to the given size. "],
["Unix.LargeFile", "Unix.LargeFile.html", "truncate", "Unix.LargeFile.html#VALtruncate", "", ""],
["UnixLabels", "UnixLabels.html", "truncate", "UnixLabels.html#VALtruncate", "<div class=\"info\">  Truncates the named file to the given size. </div>", "  Truncates the named file to the given size. "],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "truncate", "UnixLabels.LargeFile.html#VALtruncate", "", ""],
["Bytes", "Bytes.html", "trim", "Bytes.html#VALtrim", "<div class=\"info\">  Return a copy of the argument, without leading and trailing whitespace. </div>", "  Return a copy of the argument, without leading and trailing whitespace. "],
["BytesLabels", "BytesLabels.html", "trim", "BytesLabels.html#VALtrim", "<div class=\"info\">  Return a copy of the argument, without leading and trailing whitespace. </div>", "  Return a copy of the argument, without leading and trailing whitespace. "],
["StringLabels", "StringLabels.html", "trim", "StringLabels.html#VALtrim", "<div class=\"info\">  Return a copy of the argument, without leading and trailing whitespace. </div>", "  Return a copy of the argument, without leading and trailing whitespace. "],
["String", "String.html", "trim", "String.html#VALtrim", "<div class=\"info\">  Return a copy of the argument, without leading and trailing whitespace. </div>", "  Return a copy of the argument, without leading and trailing whitespace. "],
["Graphics", "Graphics.html", "transp", "Graphics.html#VALtransp", "<div class=\"info\">  In matrices of colors, this color represent a 'transparent' point: when drawing the corresponding image, all pixels on the screen corresponding to a transparent pixel in the image will not be modified, while other points will be set to the color of the corresponding point in the image. </div>", "  In matrices of colors, this color represent a 'transparent' point: when drawing the corresponding image, all pixels on the screen corresponding to a transparent pixel in the image will not be modified, while other points will be set to the color of the corresponding point in the image. "],
["Queue", "Queue.html", "transfer", "Queue.html#VALtransfer", "<div class=\"info\">  <code class=\"code\">transfer q1 q2</code> adds all of <code class=\"code\">q1</code>'s elements at the end of the queue <code class=\"code\">q2</code>, then clears <code class=\"code\">q1</code>. </div>", "  transfer q1 q2 adds all of q1's elements at the end of the queue q2, then clears q1. "],
["CamlinternalFormat", "CamlinternalFormat.html", "trans", "CamlinternalFormat.html#VALtrans", "", ""],
["Marshal", "Marshal.html", "total_size", "Marshal.html#VALtotal_size", "<div class=\"info\">  See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>. </div>", "  See Marshal.header_size. "],
["Queue", "Queue.html", "top", "Queue.html#VALtop", "<div class=\"info\">  <code class=\"code\">top</code> is a synonym for <code class=\"code\">peek</code>. </div>", "  top is a synonym for peek. "],
["Stack", "Stack.html", "top", "Stack.html#VALtop", "<div class=\"info\">  <code class=\"code\">top s</code> returns the topmost element in stack <code class=\"code\">s</code>, or raises <code class=\"code\"><span class=\"constructor\">Empty</span></code> if the stack is empty. </div>", "  top s returns the topmost element in stack s, or raises Empty if the stack is empty. "],
["Bytes", "Bytes.html", "to_string", "Bytes.html#VALto_string", "<div class=\"info\">  Return a new string that contains the same bytes as the given byte sequence. </div>", "  Return a new string that contains the same bytes as the given byte sequence. "],
["BytesLabels", "BytesLabels.html", "to_string", "BytesLabels.html#VALto_string", "<div class=\"info\">  Return a new string that contains the same bytes as the given byte sequence. </div>", "  Return a new string that contains the same bytes as the given byte sequence. "],
["Int32", "Int32.html", "to_string", "Int32.html#VALto_string", "<div class=\"info\">  Return the string representation of its argument, in signed decimal. </div>", "  Return the string representation of its argument, in signed decimal. "],
["Int64", "Int64.html", "to_string", "Int64.html#VALto_string", "<div class=\"info\">  Return the string representation of its argument, in decimal. </div>", "  Return the string representation of its argument, in decimal. "],
["Marshal", "Marshal.html", "to_string", "Marshal.html#VALto_string", "<div class=\"info\">  Same as <code class=\"code\">to_bytes</code> but return the result as a string instead of a byte sequence. </div>", "  Same as to_bytes but return the result as a string instead of a byte sequence. "],
["Nativeint", "Nativeint.html", "to_string", "Nativeint.html#VALto_string", "<div class=\"info\">  Return the string representation of its argument, in decimal. </div>", "  Return the string representation of its argument, in decimal. "],
["Printexc", "Printexc.html", "to_string", "Printexc.html#VALto_string", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.to_string e</code> returns a string representation of the exception <code class=\"code\">e</code>. </div>", "  Printexc.to_string e returns a string representation of the exception e. "],
["Int64", "Int64.html", "to_nativeint", "Int64.html#VALto_nativeint", "<div class=\"info\">  Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a native integer. </div>", "  Convert the given 64-bit integer (type int64) to a native integer. "],
["Array", "Array.html", "to_list", "Array.html#VALto_list", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.to_list a</code> returns the list of all the elements of <code class=\"code\">a</code>. </div>", "  Array.to_list a returns the list of all the elements of a. "],
["ArrayLabels", "ArrayLabels.html", "to_list", "ArrayLabels.html#VALto_list", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.to_list a</code> returns the list of all the elements of <code class=\"code\">a</code>. </div>", "  Array.to_list a returns the list of all the elements of a. "],
["Int64", "Int64.html", "to_int32", "Int64.html#VALto_int32", "<div class=\"info\">  Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a 32-bit integer (type <code class=\"code\">int32</code>). </div>", "  Convert the given 64-bit integer (type int64) to a 32-bit integer (type int32). "],
["Nativeint", "Nativeint.html", "to_int32", "Nativeint.html#VALto_int32", "<div class=\"info\">  Convert the given native integer to a 32-bit integer (type <code class=\"code\">int32</code>). </div>", "  Convert the given native integer to a 32-bit integer (type int32). "],
["Int32", "Int32.html", "to_int", "Int32.html#VALto_int", "<div class=\"info\">  Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to an integer (type <code class=\"code\">int</code>). </div>", "  Convert the given 32-bit integer (type int32) to an integer (type int). "],
["Int64", "Int64.html", "to_int", "Int64.html#VALto_int", "<div class=\"info\">  Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to an integer (type <code class=\"code\">int</code>). </div>", "  Convert the given 64-bit integer (type int64) to an integer (type int). "],
["Nativeint", "Nativeint.html", "to_int", "Nativeint.html#VALto_int", "<div class=\"info\">  Convert the given native integer (type <code class=\"code\">nativeint</code>) to an integer (type <code class=\"code\">int</code>). </div>", "  Convert the given native integer (type nativeint) to an integer (type int). "],
["Digest", "Digest.html", "to_hex", "Digest.html#VALto_hex", "<div class=\"info\">  Return the printable hexadecimal representation of the given digest. </div>", "  Return the printable hexadecimal representation of the given digest. "],
["Int32", "Int32.html", "to_float", "Int32.html#VALto_float", "<div class=\"info\">  Convert the given 32-bit integer to a floating-point number. </div>", "  Convert the given 32-bit integer to a floating-point number. "],
["Int64", "Int64.html", "to_float", "Int64.html#VALto_float", "<div class=\"info\">  Convert the given 64-bit integer to a floating-point number. </div>", "  Convert the given 64-bit integer to a floating-point number. "],
["Nativeint", "Nativeint.html", "to_float", "Nativeint.html#VALto_float", "<div class=\"info\">  Convert the given native integer to a floating-point number. </div>", "  Convert the given native integer to a floating-point number. "],
["Marshal", "Marshal.html", "to_channel", "Marshal.html#VALto_channel", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel chan v flags</code> writes the representation of <code class=\"code\">v</code> on channel <code class=\"code\">chan</code>. </div>", "  Marshal.to_channel chan v flags writes the representation of v on channel chan. "],
["Buffer", "Buffer.html", "to_bytes", "Buffer.html#VALto_bytes", "<div class=\"info\">  Return a copy of the current contents of the buffer. </div>", "  Return a copy of the current contents of the buffer. "],
["Marshal", "Marshal.html", "to_bytes", "Marshal.html#VALto_bytes", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_bytes v flags</code> returns a byte sequence containing the representation of <code class=\"code\">v</code>. </div>", "  Marshal.to_bytes v flags returns a byte sequence containing the representation of v. "],
["Marshal", "Marshal.html", "to_buffer", "Marshal.html#VALto_buffer", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_buffer buff ofs len v flags</code> marshals the value <code class=\"code\">v</code>, storing its byte representation in the sequence <code class=\"code\">buff</code>, starting at index <code class=\"code\">ofs</code>, and writing at most <code class=\"code\">len</code> bytes. </div>", "  Marshal.to_buffer buff ofs len v flags marshals the value v, storing its byte representation in the sequence buff, starting at index ofs, and writing at most len bytes. "],
["List", "List.html", "tl", "List.html#VALtl", "<div class=\"info\">  Return the given list without its first element. </div>", "  Return the given list without its first element. "],
["ListLabels", "ListLabels.html", "tl", "ListLabels.html#VALtl", "<div class=\"info\">  Return the given list without its first element. </div>", "  Return the given list without its first element. "],
["Unix", "Unix.html", "times", "Unix.html#VALtimes", "<div class=\"info\">  Return the execution times of the process. </div>", "  Return the execution times of the process. "],
["UnixLabels", "UnixLabels.html", "times", "UnixLabels.html#VALtimes", "<div class=\"info\">  Return the execution times of the process. </div>", "  Return the execution times of the process. "],
["ThreadUnix", "ThreadUnix.html", "timed_write_substring", "ThreadUnix.html#VALtimed_write_substring", "<div class=\"info\">  See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>. </div>", "  See ThreadUnix.timed_write. "],
["ThreadUnix", "ThreadUnix.html", "timed_write", "ThreadUnix.html#VALtimed_write", "<div class=\"info\">  Behave as <a href=\"ThreadUnix.html#VALread\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.read</code></a> and <a href=\"ThreadUnix.html#VALwrite\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.write</code></a>, except that <code class=\"code\"><span class=\"constructor\">Unix_error</span>(<span class=\"constructor\">ETIMEDOUT</span>,_,_)</code> is raised if no data is available for reading or ready for writing after <code class=\"code\">d</code> seconds. </div>", "  Behave as ThreadUnix.read and ThreadUnix.write, except that Unix_error(ETIMEDOUT,_,_) is raised if no data is available for reading or ready for writing after d seconds. "],
["ThreadUnix", "ThreadUnix.html", "timed_read", "ThreadUnix.html#VALtimed_read", "<div class=\"info\">  See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>. </div>", "  See ThreadUnix.timed_write. "],
["Sys", "Sys.html", "time", "Sys.html#VALtime", "<div class=\"info\">  Return the processor time, in seconds, used by the program since the beginning of execution. </div>", "  Return the processor time, in seconds, used by the program since the beginning of execution. "],
["Unix", "Unix.html", "time", "Unix.html#VALtime", "<div class=\"info\">  Return the current time since 00:00:00 GMT, Jan. </div>", "  Return the current time since 00:00:00 GMT, Jan. "],
["UnixLabels", "UnixLabels.html", "time", "UnixLabels.html#VALtime", "<div class=\"info\">  Return the current time since 00:00:00 GMT, Jan. </div>", "  Return the current time since 00:00:00 GMT, Jan. "],
["Graphics", "Graphics.html", "text_size", "Graphics.html#VALtext_size", "<div class=\"info\">  Return the dimensions of the given text, if it were drawn with the current font and size. </div>", "  Return the dimensions of the given text, if it were drawn with the current font and size. "],
["Filename", "Filename.html", "temp_file", "Filename.html#VALtemp_file", "<div class=\"info\">  <code class=\"code\">temp_file prefix suffix</code> returns the name of a fresh temporary file in the temporary directory. </div>", "  temp_file prefix suffix returns the name of a fresh temporary file in the temporary directory. "],
["Filename", "Filename.html", "temp_dir_name", "Filename.html#VALtemp_dir_name", "<div class=\"info\">  <span class=\"deprecated\">The name of the initial temporary directory: Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\" if the variable is not set. </span></div>", "  The name of the initial temporary directory: Under Unix, the value of the TMPDIR environment variable, or \"/tmp\" if the variable is not set. "],
["Unix", "Unix.html", "tcsetattr", "Unix.html#VALtcsetattr", "<div class=\"info\">  Set the status of the terminal referred to by the given file descriptor. </div>", "  Set the status of the terminal referred to by the given file descriptor. "],
["UnixLabels", "UnixLabels.html", "tcsetattr", "UnixLabels.html#VALtcsetattr", "<div class=\"info\">  Set the status of the terminal referred to by the given file descriptor. </div>", "  Set the status of the terminal referred to by the given file descriptor. "],
["Unix", "Unix.html", "tcsendbreak", "Unix.html#VALtcsendbreak", "<div class=\"info\">  Send a break condition on the given file descriptor. </div>", "  Send a break condition on the given file descriptor. "],
["UnixLabels", "UnixLabels.html", "tcsendbreak", "UnixLabels.html#VALtcsendbreak", "<div class=\"info\">  Send a break condition on the given file descriptor. </div>", "  Send a break condition on the given file descriptor. "],
["Unix", "Unix.html", "tcgetattr", "Unix.html#VALtcgetattr", "<div class=\"info\">  Return the status of the terminal referred to by the given file descriptor. </div>", "  Return the status of the terminal referred to by the given file descriptor. "],
["UnixLabels", "UnixLabels.html", "tcgetattr", "UnixLabels.html#VALtcgetattr", "<div class=\"info\">  Return the status of the terminal referred to by the given file descriptor. </div>", "  Return the status of the terminal referred to by the given file descriptor. "],
["Unix", "Unix.html", "tcflush", "Unix.html#VALtcflush", "<div class=\"info\">  Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read, <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both. </div>", "  Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: TCIFLUSH flushes data received but not read, TCOFLUSH flushes data written but not transmitted, and TCIOFLUSH flushes both. "],
["UnixLabels", "UnixLabels.html", "tcflush", "UnixLabels.html#VALtcflush", "<div class=\"info\">  Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read, <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both. </div>", "  Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: TCIFLUSH flushes data received but not read, TCOFLUSH flushes data written but not transmitted, and TCIOFLUSH flushes both. "],
["Unix", "Unix.html", "tcflow", "Unix.html#VALtcflow", "<div class=\"info\">  Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output, <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input, and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input. </div>", "  Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: TCOOFF suspends output, TCOON restarts output, TCIOFF transmits a STOP character to suspend input, and TCION transmits a START character to restart input. "],
["UnixLabels", "UnixLabels.html", "tcflow", "UnixLabels.html#VALtcflow", "<div class=\"info\">  Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output, <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input, and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input. </div>", "  Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: TCOOFF suspends output, TCOON restarts output, TCIOFF transmits a STOP character to suspend input, and TCION transmits a START character to restart input. "],
["Unix", "Unix.html", "tcdrain", "Unix.html#VALtcdrain", "<div class=\"info\">  Waits until all output written on the given file descriptor has been transmitted. </div>", "  Waits until all output written on the given file descriptor has been transmitted. "],
["UnixLabels", "UnixLabels.html", "tcdrain", "UnixLabels.html#VALtcdrain", "<div class=\"info\">  Waits until all output written on the given file descriptor has been transmitted. </div>", "  Waits until all output written on the given file descriptor has been transmitted. "],
["Pervasives", "Pervasives.html", "tanh", "Pervasives.html#VALtanh", "<div class=\"info\">  Hyperbolic tangent. </div>", "  Hyperbolic tangent. "],
["Pervasives", "Pervasives.html", "tan", "Pervasives.html#VALtan", "<div class=\"info\">  Tangent. </div>", "  Tangent. "],
["Queue", "Queue.html", "take", "Queue.html#VALtake", "<div class=\"info\">  <code class=\"code\">take q</code> removes and returns the first element in queue <code class=\"code\">q</code>, or raises <code class=\"code\"><span class=\"constructor\">Empty</span></code> if the queue is empty. </div>", "  take q removes and returns the first element in queue q, or raises Empty if the queue is empty. "],
["Obj", "Obj.html", "tag", "Obj.html#VALtag", "", ""],
["ThreadUnix", "ThreadUnix.html", "system", "ThreadUnix.html#VALsystem", "", ""],
["Unix", "Unix.html", "system", "Unix.html#VALsystem", "<div class=\"info\">  Execute the given command, wait until it terminates, and return its termination status. </div>", "  Execute the given command, wait until it terminates, and return its termination status. "],
["UnixLabels", "UnixLabels.html", "system", "UnixLabels.html#VALsystem", "<div class=\"info\">  Execute the given command, wait until it terminates, and return its termination status. </div>", "  Execute the given command, wait until it terminates, and return its termination status. "],
["Graphics", "Graphics.html", "synchronize", "Graphics.html#VALsynchronize", "<div class=\"info\">  Synchronize the backing store and the on-screen window, by copying the contents of the backing store onto the graphics window. </div>", "  Synchronize the backing store and the on-screen window, by copying the contents of the backing store onto the graphics window. "],
["Event", "Event.html", "sync", "Event.html#VALsync", "<div class=\"info\">  'Synchronize' on an event: offer all the communication possibilities specified in the event to the outside world, and block until one of the communications succeed. </div>", "  'Synchronize' on an event: offer all the communication possibilities specified in the event to the outside world, and block until one of the communications succeed. "],
["CamlinternalFormat", "CamlinternalFormat.html", "symm", "CamlinternalFormat.html#VALsymm", "", ""],
["Unix", "Unix.html", "symlink", "Unix.html#VALsymlink", "<div class=\"info\">  <code class=\"code\">symlink source dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link to the file <code class=\"code\">source</code>. </div>", "  symlink source dest creates the file dest as a symbolic link to the file source. "],
["UnixLabels", "UnixLabels.html", "symlink", "UnixLabels.html#VALsymlink", "<div class=\"info\">  <code class=\"code\">symlink source dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link to the file <code class=\"code\">source</code>. </div>", "  symlink source dest creates the file dest as a symbolic link to the file source. "],
["Parsing", "Parsing.html", "symbol_start_pos", "Parsing.html#VALsymbol_start_pos", "<div class=\"info\">  Same as <code class=\"code\">symbol_start</code>, but return a <code class=\"code\">position</code> instead of an offset. </div>", "  Same as symbol_start, but return a position instead of an offset. "],
["Parsing", "Parsing.html", "symbol_start", "Parsing.html#VALsymbol_start", "<div class=\"info\">  <code class=\"code\">symbol_start</code> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a> are to be called in the action part of a grammar rule only. </div>", "  symbol_start and Parsing.symbol_end are to be called in the action part of a grammar rule only. "],
["Parsing", "Parsing.html", "symbol_end_pos", "Parsing.html#VALsymbol_end_pos", "<div class=\"info\">  Same as <code class=\"code\">symbol_end</code>, but return a <code class=\"code\">position</code> instead of an offset. </div>", "  Same as symbol_end, but return a position instead of an offset. "],
["Parsing", "Parsing.html", "symbol_end", "Parsing.html#VALsymbol_end", "<div class=\"info\">  See <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a>. </div>", "  See Parsing.symbol_start. "],
["Num", "Num.html", "succ_num", "Num.html#VALsucc_num", "<div class=\"info\">  <code class=\"code\">succ n</code> is <code class=\"code\">n+1</code> </div>", "  succ n is n+1 "],
["Big_int", "Big_int.html", "succ_big_int", "Big_int.html#VALsucc_big_int", "<div class=\"info\">  Successor (add 1). </div>", "  Successor (add 1). "],
["Int32", "Int32.html", "succ", "Int32.html#VALsucc", "<div class=\"info\">  Successor. </div>", "  Successor. "],
["Int64", "Int64.html", "succ", "Int64.html#VALsucc", "<div class=\"info\">  Successor. </div>", "  Successor. "],
["Nativeint", "Nativeint.html", "succ", "Nativeint.html#VALsucc", "<div class=\"info\">  Successor. </div>", "  Successor. "],
["Pervasives", "Pervasives.html", "succ", "Pervasives.html#VALsucc", "<div class=\"info\">  <code class=\"code\">succ x</code> is <code class=\"code\">x + 1</code>. </div>", "  succ x is x + 1. "],
["Digest", "Digest.html", "substring", "Digest.html#VALsubstring", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Digest</span>.substring s ofs len</code> returns the digest of the substring of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> characters. </div>", "  Digest.substring s ofs len returns the digest of the substring of s starting at index ofs and containing len characters. "],
["Str", "Str.html", "substitute_first", "Str.html#VALsubstitute_first", "<div class=\"info\">  Same as <a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a>, except that only the first substring matching the regular expression is replaced. </div>", "  Same as Str.global_substitute, except that only the first substring matching the regular expression is replaced. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "subset", "MoreLabels.Set.S.html#VALsubset", "", ""],
["Set.S", "Set.S.html", "subset", "Set.S.html#VALsubset", "<div class=\"info\">  <code class=\"code\">subset s1 s2</code> tests whether the set <code class=\"code\">s1</code> is a subset of the set <code class=\"code\">s2</code>. </div>", "  subset s1 s2 tests whether the set s1 is a subset of the set s2. "],
["Digest", "Digest.html", "subbytes", "Digest.html#VALsubbytes", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Digest</span>.subbytes s ofs len</code> returns the digest of the subsequence of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> bytes. </div>", "  Digest.subbytes s ofs len returns the digest of the subsequence of s starting at index ofs and containing len bytes. "],
["Bytes", "Bytes.html", "sub_string", "Bytes.html#VALsub_string", "<div class=\"info\">  Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence. </div>", "  Same as sub but return a string instead of a byte sequence. "],
["BytesLabels", "BytesLabels.html", "sub_string", "BytesLabels.html#VALsub_string", "<div class=\"info\">  Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence. </div>", "  Same as sub but return a string instead of a byte sequence. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "sub_right", "Bigarray.Genarray.html#VALsub_right", "<div class=\"info\">  Extract a sub-array of the given big array by restricting the last (right-most) dimension. </div>", "  Extract a sub-array of the given big array by restricting the last (right-most) dimension. "],
["Bigarray.Array2", "Bigarray.Array2.html", "sub_right", "Bigarray.Array2.html#VALsub_right", "<div class=\"info\">  Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the second dimension. </div>", "  Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the second dimension. "],
["Bigarray.Array3", "Bigarray.Array3.html", "sub_right", "Bigarray.Array3.html#VALsub_right", "<div class=\"info\">  Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the second dimension. </div>", "  Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the second dimension. "],
["Num", "Num.html", "sub_num", "Num.html#VALsub_num", "<div class=\"info\">  Subtraction </div>", "  Subtraction "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "sub_left", "Bigarray.Genarray.html#VALsub_left", "<div class=\"info\">  Extract a sub-array of the given big array by restricting the first (left-most) dimension. </div>", "  Extract a sub-array of the given big array by restricting the first (left-most) dimension. "],
["Bigarray.Array2", "Bigarray.Array2.html", "sub_left", "Bigarray.Array2.html#VALsub_left", "<div class=\"info\">  Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the first dimension. </div>", "  Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the first dimension. "],
["Bigarray.Array3", "Bigarray.Array3.html", "sub_left", "Bigarray.Array3.html#VALsub_left", "<div class=\"info\">  Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the first dimension. </div>", "  Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the first dimension. "],
["Big_int", "Big_int.html", "sub_big_int", "Big_int.html#VALsub_big_int", "<div class=\"info\">  Subtraction. </div>", "  Subtraction. "],
["Array", "Array.html", "sub", "Array.html#VALsub", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.sub a start len</code> returns a fresh array of length <code class=\"code\">len</code>, containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start + len - 1</code> of array <code class=\"code\">a</code>. </div>", "  Array.sub a start len returns a fresh array of length len, containing the elements number start to start + len - 1 of array a. "],
["ArrayLabels", "ArrayLabels.html", "sub", "ArrayLabels.html#VALsub", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.sub a start len</code> returns a fresh array of length <code class=\"code\">len</code>, containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start + len - 1</code> of array <code class=\"code\">a</code>. </div>", "  Array.sub a start len returns a fresh array of length len, containing the elements number start to start + len - 1 of array a. "],
["Bigarray.Array1", "Bigarray.Array1.html", "sub", "Bigarray.Array1.html#VALsub", "<div class=\"info\">  Extract a sub-array of the given one-dimensional big array. </div>", "  Extract a sub-array of the given one-dimensional big array. "],
["Buffer", "Buffer.html", "sub", "Buffer.html#VALsub", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Buffer</span>.sub b off len</code> returns (a copy of) the bytes from the current contents of the buffer <code class=\"code\">b</code> starting at offset <code class=\"code\">off</code> of length <code class=\"code\">len</code> bytes. </div>", "  Buffer.sub b off len returns (a copy of) the bytes from the current contents of the buffer b starting at offset off of length len bytes. "],
["Bytes", "Bytes.html", "sub", "Bytes.html#VALsub", "<div class=\"info\">  <code class=\"code\">sub s start len</code> returns a new byte sequence of length <code class=\"code\">len</code>, containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>. </div>", "  sub s start len returns a new byte sequence of length len, containing the subsequence of s that starts at position start and has length len. "],
["BytesLabels", "BytesLabels.html", "sub", "BytesLabels.html#VALsub", "<div class=\"info\">  <code class=\"code\">sub s start len</code> returns a new byte sequence of length <code class=\"code\">len</code>, containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>. </div>", "  sub s start len returns a new byte sequence of length len, containing the subsequence of s that starts at position start and has length len. "],
["Complex", "Complex.html", "sub", "Complex.html#VALsub", "<div class=\"info\">  Subtraction </div>", "  Subtraction "],
["Int32", "Int32.html", "sub", "Int32.html#VALsub", "<div class=\"info\">  Subtraction. </div>", "  Subtraction. "],
["Int64", "Int64.html", "sub", "Int64.html#VALsub", "<div class=\"info\">  Subtraction. </div>", "  Subtraction. "],
["Nativeint", "Nativeint.html", "sub", "Nativeint.html#VALsub", "<div class=\"info\">  Subtraction. </div>", "  Subtraction. "],
["StringLabels", "StringLabels.html", "sub", "StringLabels.html#VALsub", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.sub s start len</code> returns a fresh string of length <code class=\"code\">len</code>, containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>. </div>", "  String.sub s start len returns a fresh string of length len, containing the substring of s that starts at position start and has length len. "],
["String", "String.html", "sub", "String.html#VALsub", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.sub s start len</code> returns a fresh string of length <code class=\"code\">len</code>, containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and has length <code class=\"code\">len</code>. </div>", "  String.sub s start len returns a fresh string of length len, containing the substring of s that starts at position start and has length len. "],
["CamlinternalFormat", "CamlinternalFormat.html", "strput_acc", "CamlinternalFormat.html#VALstrput_acc", "", ""],
["Obj", "Obj.html", "string_tag", "Obj.html#VALstring_tag", "", ""],
["Str", "Str.html", "string_partial_match", "Str.html#VALstring_partial_match", "<div class=\"info\">  Similar to <a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a>, but also returns true if the argument string is a prefix of a string that matches. </div>", "  Similar to Str.string_match, but also returns true if the argument string is a prefix of a string that matches. "],
["Num", "Num.html", "string_of_num", "Num.html#VALstring_of_num", "<div class=\"info\">  Convert a number to a string, using fractional notation. </div>", "  Convert a number to a string, using fractional notation. "],
["Pervasives", "Pervasives.html", "string_of_int", "Pervasives.html#VALstring_of_int", "<div class=\"info\">  Return the string representation of an integer, in decimal. </div>", "  Return the string representation of an integer, in decimal. "],
["Unix", "Unix.html", "string_of_inet_addr", "Unix.html#VALstring_of_inet_addr", "<div class=\"info\">  Return the printable representation of the given Internet address. </div>", "  Return the printable representation of the given Internet address. "],
["UnixLabels", "UnixLabels.html", "string_of_inet_addr", "UnixLabels.html#VALstring_of_inet_addr", "<div class=\"info\">  Return the printable representation of the given Internet address. </div>", "  Return the printable representation of the given Internet address. "],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_formatting_lit", "CamlinternalFormat.html#VALstring_of_formatting_lit", "", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_formatting_gen", "CamlinternalFormat.html#VALstring_of_formatting_gen", "", ""],
["Pervasives", "Pervasives.html", "string_of_format", "Pervasives.html#VALstring_of_format", "<div class=\"info\">  Converts a format string into a string. </div>", "  Converts a format string into a string. "],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_fmtty", "CamlinternalFormat.html#VALstring_of_fmtty", "", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_fmt", "CamlinternalFormat.html#VALstring_of_fmt", "", ""],
["Pervasives", "Pervasives.html", "string_of_float", "Pervasives.html#VALstring_of_float", "<div class=\"info\">  Return the string representation of a floating-point number. </div>", "  Return the string representation of a floating-point number. "],
["Pervasives", "Pervasives.html", "string_of_bool", "Pervasives.html#VALstring_of_bool", "<div class=\"info\">  Return the string representation of a boolean. </div>", "  Return the string representation of a boolean. "],
["Big_int", "Big_int.html", "string_of_big_int", "Big_int.html#VALstring_of_big_int", "<div class=\"info\">  Return the string representation of the given big integer, in decimal (base 10). </div>", "  Return the string representation of the given big integer, in decimal (base 10). "],
["Str", "Str.html", "string_match", "Str.html#VALstring_match", "<div class=\"info\">  <code class=\"code\">string_match r s start</code> tests whether a substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> matches the regular expression <code class=\"code\">r</code>. </div>", "  string_match r s start tests whether a substring of s that starts at position start matches the regular expression r. "],
["Str", "Str.html", "string_before", "Str.html#VALstring_before", "<div class=\"info\">  <code class=\"code\">string_before s n</code> returns the substring of all characters of <code class=\"code\">s</code> that precede position <code class=\"code\">n</code> (excluding the character at position <code class=\"code\">n</code>). </div>", "  string_before s n returns the substring of all characters of s that precede position n (excluding the character at position n). "],
["Str", "Str.html", "string_after", "Str.html#VALstring_after", "<div class=\"info\">  <code class=\"code\">string_after s n</code> returns the substring of all characters of <code class=\"code\">s</code> that follow position <code class=\"code\">n</code> (including the character at position <code class=\"code\">n</code>). </div>", "  string_after s n returns the substring of all characters of s that follow position n (including the character at position n). "],
["Digest", "Digest.html", "string", "Digest.html#VALstring", "<div class=\"info\">  Return the digest of the given string. </div>", "  Return the digest of the given string. "],
["Format", "Format.html", "str_formatter", "Format.html#VALstr_formatter", "<div class=\"info\">  A formatter to use with formatting functions below for output to the <code class=\"code\">stdbuf</code> string buffer. </div>", "  A formatter to use with formatting functions below for output to the stdbuf string buffer. "],
["Pervasives", "Pervasives.html", "stdout", "Pervasives.html#VALstdout", "<div class=\"info\">  The standard output for the process. </div>", "  The standard output for the process. "],
["Unix", "Unix.html", "stdout", "Unix.html#VALstdout", "<div class=\"info\">  File descriptor for standard output. </div>", "  File descriptor for standard output. "],
["UnixLabels", "UnixLabels.html", "stdout", "UnixLabels.html#VALstdout", "<div class=\"info\">  File descriptor for standard output. </div>", "  File descriptor for standard output. "],
["Pervasives", "Pervasives.html", "stdin", "Pervasives.html#VALstdin", "<div class=\"info\">  The standard input for the process. </div>", "  The standard input for the process. "],
["Scanf.Scanning", "Scanf.Scanning.html", "stdin", "Scanf.Scanning.html#VALstdin", "<div class=\"info\">  The standard input notion for the <code class=\"code\"><span class=\"constructor\">Scanf</span></code> module. </div>", "  The standard input notion for the Scanf module. "],
["Unix", "Unix.html", "stdin", "Unix.html#VALstdin", "<div class=\"info\">  File descriptor for standard input. </div>", "  File descriptor for standard input. "],
["UnixLabels", "UnixLabels.html", "stdin", "UnixLabels.html#VALstdin", "<div class=\"info\">  File descriptor for standard input. </div>", "  File descriptor for standard input. "],
["Scanf.Scanning", "Scanf.Scanning.html", "stdib", "Scanf.Scanning.html#VALstdib", "<div class=\"info\">  A deprecated alias for <code class=\"code\"><span class=\"constructor\">Scanning</span>.stdin</code>, the scanning buffer reading from <code class=\"code\"><span class=\"constructor\">Pervasives</span>.stdin</code>. </div>", "  A deprecated alias for Scanning.stdin, the scanning buffer reading from Pervasives.stdin. "],
["Pervasives", "Pervasives.html", "stderr", "Pervasives.html#VALstderr", "<div class=\"info\">  The standard error output for the process. </div>", "  The standard error output for the process. "],
["Unix", "Unix.html", "stderr", "Unix.html#VALstderr", "<div class=\"info\">  File descriptor for standard error. </div>", "  File descriptor for standard error. "],
["UnixLabels", "UnixLabels.html", "stderr", "UnixLabels.html#VALstderr", "<div class=\"info\">  File descriptor for standard error. </div>", "  File descriptor for standard error. "],
["Format", "Format.html", "stdbuf", "Format.html#VALstdbuf", "<div class=\"info\">  The string buffer in which <code class=\"code\">str_formatter</code> writes. </div>", "  The string buffer in which str_formatter writes. "],
["Format", "Format.html", "std_formatter", "Format.html#VALstd_formatter", "<div class=\"info\">  The standard formatter used by the formatting functions above. </div>", "  The standard formatter used by the formatting functions above. "],
["CamlinternalOO", "CamlinternalOO.html", "stats", "CamlinternalOO.html#VALstats", "", ""],
["Hashtbl", "Hashtbl.html", "stats", "Hashtbl.html#VALstats", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.stats tbl</code> returns statistics about the table <code class=\"code\">tbl</code>: number of buckets, size of the biggest bucket, distribution of buckets by size. </div>", "  Hashtbl.stats tbl returns statistics about the table tbl: number of buckets, size of the biggest bucket, distribution of buckets by size. "],
["Hashtbl.S", "Hashtbl.S.html", "stats", "Hashtbl.S.html#VALstats", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "stats", "Hashtbl.SeededS.html#VALstats", "", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "stats", "MoreLabels.Hashtbl.html#VALstats", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "stats", "MoreLabels.Hashtbl.S.html#VALstats", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "stats", "MoreLabels.Hashtbl.SeededS.html#VALstats", "", ""],
["Weak.S", "Weak.S.html", "stats", "Weak.S.html#VALstats", "<div class=\"info\">  Return statistics on the table. </div>", "  Return statistics on the table. "],
["Gc", "Gc.html", "stat", "Gc.html#VALstat", "<div class=\"info\">  Return the current values of the memory management counters in a <code class=\"code\">stat</code> record. </div>", "  Return the current values of the memory management counters in a stat record. "],
["Unix", "Unix.html", "stat", "Unix.html#VALstat", "<div class=\"info\">  Return the information for the named file. </div>", "  Return the information for the named file. "],
["Unix.LargeFile", "Unix.LargeFile.html", "stat", "Unix.LargeFile.html#VALstat", "", ""],
["UnixLabels", "UnixLabels.html", "stat", "UnixLabels.html#VALstat", "<div class=\"info\">  Return the information for the named file. </div>", "  Return the information for the named file. "],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "stat", "UnixLabels.LargeFile.html#VALstat", "", ""],
["Array", "Array.html", "stable_sort", "Array.html#VALstable_sort", "<div class=\"info\">  Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e. </div>", "  Same as Array.sort, but the sorting algorithm is stable (i.e. "],
["ArrayLabels", "ArrayLabels.html", "stable_sort", "ArrayLabels.html#VALstable_sort", "<div class=\"info\">  Same as <a href=\"ArrayLabels.html#VALsort\"><code class=\"code\"><span class=\"constructor\">ArrayLabels</span>.sort</code></a>, but the sorting algorithm is stable (i.e. </div>", "  Same as ArrayLabels.sort, but the sorting algorithm is stable (i.e. "],
["List", "List.html", "stable_sort", "List.html#VALstable_sort", "<div class=\"info\">  Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to be stable (i.e. </div>", "  Same as List.sort, but the sorting algorithm is guaranteed to be stable (i.e. "],
["ListLabels", "ListLabels.html", "stable_sort", "ListLabels.html#VALstable_sort", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALsort\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.sort</code></a>, but the sorting algorithm is guaranteed to be stable (i.e. </div>", "  Same as ListLabels.sort, but the sorting algorithm is guaranteed to be stable (i.e. "],
["Scanf", "Scanf.html", "sscanf_format", "Scanf.html#VALsscanf_format", "<div class=\"info\">  Same as <a href=\"Scanf.html#VALbscanf_format\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf_format</code></a>, but reads from the given string. </div>", "  Same as Scanf.bscanf_format, but reads from the given string. "],
["Scanf", "Scanf.html", "sscanf", "Scanf.html#VALsscanf", "<div class=\"info\">  Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the given string. </div>", "  Same as Scanf.bscanf, but reads from the given string. "],
["Num", "Num.html", "square_num", "Num.html#VALsquare_num", "<div class=\"info\">  Squaring </div>", "  Squaring "],
["Big_int", "Big_int.html", "square_big_int", "Big_int.html#VALsquare_big_int", "<div class=\"info\">  Return the square of the given big integer </div>", "  Return the square of the given big integer "],
["Big_int", "Big_int.html", "sqrt_big_int", "Big_int.html#VALsqrt_big_int", "<div class=\"info\">  <code class=\"code\">sqrt_big_int a</code> returns the integer square root of <code class=\"code\">a</code>, that is, the largest big integer <code class=\"code\">r</code> such that <code class=\"code\">r * r &lt;= a</code>. </div>", "  sqrt_big_int a returns the integer square root of a, that is, the largest big integer r such that r * r <= a. "],
["Complex", "Complex.html", "sqrt", "Complex.html#VALsqrt", "<div class=\"info\">  Square root. </div>", "  Square root. "],
["Pervasives", "Pervasives.html", "sqrt", "Pervasives.html#VALsqrt", "<div class=\"info\">  Square root. </div>", "  Square root. "],
["Format", "Format.html", "sprintf", "Format.html#VALsprintf", "<div class=\"info\">  Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. </div>", "  Same as printf above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. "],
["Printf", "Printf.html", "sprintf", "Printf.html#VALsprintf", "<div class=\"info\">  Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel, return a string containing the result of formatting the arguments. </div>", "  Same as Printf.fprintf, but instead of printing on an output channel, return a string containing the result of formatting the arguments. "],
["Str", "Str.html", "split_delim", "Str.html#VALsplit_delim", "<div class=\"info\">  Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a> but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. </div>", "  Same as Str.split but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. "],
["List", "List.html", "split", "List.html#VALsplit", "<div class=\"info\">  Transform a list of pairs into a pair of lists: <code class=\"code\">split [(a1,b1); ...; (an,bn)]</code> is <code class=\"code\">([a1; ...; an], [b1; ...; bn])</code>. </div>", "  Transform a list of pairs into a pair of lists: split [(a1,b1); ...; (an,bn)] is ([a1; ...; an], [b1; ...; bn]). "],
["ListLabels", "ListLabels.html", "split", "ListLabels.html#VALsplit", "<div class=\"info\">  Transform a list of pairs into a pair of lists: <code class=\"code\">split [(a1,b1); ...; (an,bn)]</code> is <code class=\"code\">([a1; ...; an], [b1; ...; bn])</code>. </div>", "  Transform a list of pairs into a pair of lists: split [(a1,b1); ...; (an,bn)] is ([a1; ...; an], [b1; ...; bn]). "],
["Map.S", "Map.S.html", "split", "Map.S.html#VALsplit", "<div class=\"info\">  <code class=\"code\">split x m</code> returns a triple <code class=\"code\">(l, data, r)</code>, where <code class=\"code\">l</code> is the map with all the bindings of <code class=\"code\">m</code> whose key is strictly less than <code class=\"code\">x</code>; <code class=\"code\">r</code> is the map with all the bindings of <code class=\"code\">m</code> whose key is strictly greater than <code class=\"code\">x</code>; <code class=\"code\">data</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">m</code> contains no binding for <code class=\"code\">x</code>, or <code class=\"code\"><span class=\"constructor\">Some</span> v</code> if <code class=\"code\">m</code> binds <code class=\"code\">v</code> to <code class=\"code\">x</code>. </div>", "  split x m returns a triple (l, data, r), where l is the map with all the bindings of m whose key is strictly less than x; r is the map with all the bindings of m whose key is strictly greater than x; data is None if m contains no binding for x, or Some v if m binds v to x. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "split", "MoreLabels.Map.S.html#VALsplit", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "split", "MoreLabels.Set.S.html#VALsplit", "", ""],
["Set.S", "Set.S.html", "split", "Set.S.html#VALsplit", "<div class=\"info\">  <code class=\"code\">split x s</code> returns a triple <code class=\"code\">(l, present, r)</code>, where <code class=\"code\">l</code> is the set of elements of <code class=\"code\">s</code> that are strictly less than <code class=\"code\">x</code>; <code class=\"code\">r</code> is the set of elements of <code class=\"code\">s</code> that are strictly greater than <code class=\"code\">x</code>; <code class=\"code\">present</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> if <code class=\"code\">s</code> contains no element equal to <code class=\"code\">x</code>, or <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">s</code> contains an element equal to <code class=\"code\">x</code>. </div>", "  split x s returns a triple (l, present, r), where l is the set of elements of s that are strictly less than x; r is the set of elements of s that are strictly greater than x; present is false if s contains no element equal to x, or true if s contains an element equal to x. "],
["Str", "Str.html", "split", "Str.html#VALsplit", "<div class=\"info\">  <code class=\"code\">split r s</code> splits <code class=\"code\">s</code> into substrings, taking as delimiters the substrings that match <code class=\"code\">r</code>, and returns the list of substrings. </div>", "  split r s splits s into substrings, taking as delimiters the substrings that match r, and returns the list of substrings. "],
["Graphics", "Graphics.html", "sound", "Graphics.html#VALsound", "<div class=\"info\">  <code class=\"code\">sound freq dur</code> plays a sound at frequency <code class=\"code\">freq</code> (in hertz) for a duration <code class=\"code\">dur</code> (in milliseconds). </div>", "  sound freq dur plays a sound at frequency freq (in hertz) for a duration dur (in milliseconds). "],
["List", "List.html", "sort_uniq", "List.html#VALsort_uniq", "<div class=\"info\">  Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates. </div>", "  Same as List.sort, but also remove duplicates. "],
["Array", "Array.html", "sort", "Array.html#VALsort", "<div class=\"info\">  Sort an array in increasing order according to a comparison function. </div>", "  Sort an array in increasing order according to a comparison function. "],
["ArrayLabels", "ArrayLabels.html", "sort", "ArrayLabels.html#VALsort", "<div class=\"info\">  Sort an array in increasing order according to a comparison function. </div>", "  Sort an array in increasing order according to a comparison function. "],
["List", "List.html", "sort", "List.html#VALsort", "<div class=\"info\">  Sort a list in increasing order according to a comparison function. </div>", "  Sort a list in increasing order according to a comparison function. "],
["ListLabels", "ListLabels.html", "sort", "ListLabels.html#VALsort", "<div class=\"info\">  Sort a list in increasing order according to a comparison function. </div>", "  Sort a list in increasing order according to a comparison function. "],
["Unix", "Unix.html", "socketpair", "Unix.html#VALsocketpair", "<div class=\"info\">  Create a pair of unnamed sockets, connected together. </div>", "  Create a pair of unnamed sockets, connected together. "],
["UnixLabels", "UnixLabels.html", "socketpair", "UnixLabels.html#VALsocketpair", "<div class=\"info\">  Create a pair of unnamed sockets, connected together. </div>", "  Create a pair of unnamed sockets, connected together. "],
["ThreadUnix", "ThreadUnix.html", "socket", "ThreadUnix.html#VALsocket", "", ""],
["Unix", "Unix.html", "socket", "Unix.html#VALsocket", "<div class=\"info\">  Create a new socket in the given domain, and with the given kind. </div>", "  Create a new socket in the given domain, and with the given kind. "],
["UnixLabels", "UnixLabels.html", "socket", "UnixLabels.html#VALsocket", "<div class=\"info\">  Create a new socket in the given domain, and with the given kind. </div>", "  Create a new socket in the given domain, and with the given kind. "],
["Pervasives", "Pervasives.html", "snd", "Pervasives.html#VALsnd", "<div class=\"info\">  Return the second component of a pair. </div>", "  Return the second component of a pair. "],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_right_2", "Bigarray.Array3.html#VALslice_right_2", "<div class=\"info\">  Extract a two-dimensional slice of the given three-dimensional big array by fixing the last coordinate. </div>", "  Extract a two-dimensional slice of the given three-dimensional big array by fixing the last coordinate. "],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_right_1", "Bigarray.Array3.html#VALslice_right_1", "<div class=\"info\">  Extract a one-dimensional slice of the given three-dimensional big array by fixing the last two coordinates. </div>", "  Extract a one-dimensional slice of the given three-dimensional big array by fixing the last two coordinates. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "slice_right", "Bigarray.Genarray.html#VALslice_right", "<div class=\"info\">  Extract a sub-array of lower dimension from the given big array by fixing one or several of the last (right-most) coordinates. </div>", "  Extract a sub-array of lower dimension from the given big array by fixing one or several of the last (right-most) coordinates. "],
["Bigarray.Array2", "Bigarray.Array2.html", "slice_right", "Bigarray.Array2.html#VALslice_right", "<div class=\"info\">  Extract a column (one-dimensional slice) of the given two-dimensional big array. </div>", "  Extract a column (one-dimensional slice) of the given two-dimensional big array. "],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_left_2", "Bigarray.Array3.html#VALslice_left_2", "<div class=\"info\">  Extract a two-dimensional slice of the given three-dimensional big array by fixing the first coordinate. </div>", "  Extract a two-dimensional slice of the given three-dimensional big array by fixing the first coordinate. "],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_left_1", "Bigarray.Array3.html#VALslice_left_1", "<div class=\"info\">  Extract a one-dimensional slice of the given three-dimensional big array by fixing the first two coordinates. </div>", "  Extract a one-dimensional slice of the given three-dimensional big array by fixing the first two coordinates. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "slice_left", "Bigarray.Genarray.html#VALslice_left", "<div class=\"info\">  Extract a sub-array of lower dimension from the given big array by fixing one or several of the first (left-most) coordinates. </div>", "  Extract a sub-array of lower dimension from the given big array by fixing one or several of the first (left-most) coordinates. "],
["Bigarray.Array2", "Bigarray.Array2.html", "slice_left", "Bigarray.Array2.html#VALslice_left", "<div class=\"info\">  Extract a row (one-dimensional slice) of the given two-dimensional big array. </div>", "  Extract a row (one-dimensional slice) of the given two-dimensional big array. "],
["ThreadUnix", "ThreadUnix.html", "sleep", "ThreadUnix.html#VALsleep", "", ""],
["Unix", "Unix.html", "sleep", "Unix.html#VALsleep", "<div class=\"info\">  Stop execution for the given number of seconds. </div>", "  Stop execution for the given number of seconds. "],
["UnixLabels", "UnixLabels.html", "sleep", "UnixLabels.html#VALsleep", "<div class=\"info\">  Stop execution for the given number of seconds. </div>", "  Stop execution for the given number of seconds. "],
["Graphics", "Graphics.html", "size_y", "Graphics.html#VALsize_y", "<div class=\"info\">  Return the size of the graphics window. </div>", "  Return the size of the graphics window. "],
["Graphics", "Graphics.html", "size_x", "Graphics.html#VALsize_x", "<div class=\"info\">  See <a href=\"Graphics.html#VALsize_y\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.size_y</code></a>. </div>", "  See Graphics.size_y. "],
["Nativeint", "Nativeint.html", "size", "Nativeint.html#VALsize", "<div class=\"info\">  The size in bits of a native integer. </div>", "  The size in bits of a native integer. "],
["Obj", "Obj.html", "size", "Obj.html#VALsize", "", ""],
["Pervasives", "Pervasives.html", "sinh", "Pervasives.html#VALsinh", "<div class=\"info\">  Hyperbolic sine. </div>", "  Hyperbolic sine. "],
["Map.S", "Map.S.html", "singleton", "Map.S.html#VALsingleton", "<div class=\"info\">  <code class=\"code\">singleton x y</code> returns the one-element map that contains a binding <code class=\"code\">y</code> for <code class=\"code\">x</code>. </div>", "  singleton x y returns the one-element map that contains a binding y for x. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "singleton", "MoreLabels.Map.S.html#VALsingleton", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "singleton", "MoreLabels.Set.S.html#VALsingleton", "", ""],
["Set.S", "Set.S.html", "singleton", "Set.S.html#VALsingleton", "<div class=\"info\">  <code class=\"code\">singleton x</code> returns the one-element set containing only <code class=\"code\">x</code>. </div>", "  singleton x returns the one-element set containing only x. "],
["Unix", "Unix.html", "single_write_substring", "Unix.html#VALsingle_write_substring", "<div class=\"info\">  Same as <code class=\"code\">single_write</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as single_write, but take the data from a string instead of a byte sequence. "],
["UnixLabels", "UnixLabels.html", "single_write_substring", "UnixLabels.html#VALsingle_write_substring", "<div class=\"info\">  Same as <code class=\"code\">single_write</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as single_write, but take the data from a string instead of a byte sequence. "],
["Unix", "Unix.html", "single_write", "Unix.html#VALsingle_write", "<div class=\"info\">  Same as <code class=\"code\">write</code>, but attempts to write only once. </div>", "  Same as write, but attempts to write only once. "],
["UnixLabels", "UnixLabels.html", "single_write", "UnixLabels.html#VALsingle_write", "<div class=\"info\">  Same as <code class=\"code\">write</code>, but attempts to write only once. </div>", "  Same as write, but attempts to write only once. "],
["Pervasives", "Pervasives.html", "sin", "Pervasives.html#VALsin", "<div class=\"info\">  Sine. </div>", "  Sine. "],
["Sys", "Sys.html", "sigvtalrm", "Sys.html#VALsigvtalrm", "<div class=\"info\">  Timeout in virtual time </div>", "  Timeout in virtual time "],
["Sys", "Sys.html", "sigusr2", "Sys.html#VALsigusr2", "<div class=\"info\">  Application-defined signal 2 </div>", "  Application-defined signal 2 "],
["Sys", "Sys.html", "sigusr1", "Sys.html#VALsigusr1", "<div class=\"info\">  Application-defined signal 1 </div>", "  Application-defined signal 1 "],
["Sys", "Sys.html", "sigttou", "Sys.html#VALsigttou", "<div class=\"info\">  Terminal write from background process </div>", "  Terminal write from background process "],
["Sys", "Sys.html", "sigttin", "Sys.html#VALsigttin", "<div class=\"info\">  Terminal read from background process </div>", "  Terminal read from background process "],
["Sys", "Sys.html", "sigtstp", "Sys.html#VALsigtstp", "<div class=\"info\">  Interactive stop </div>", "  Interactive stop "],
["Sys", "Sys.html", "sigterm", "Sys.html#VALsigterm", "<div class=\"info\">  Termination </div>", "  Termination "],
["Unix", "Unix.html", "sigsuspend", "Unix.html#VALsigsuspend", "<div class=\"info\">  <code class=\"code\">sigsuspend sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code> and waits for a non-ignored, non-blocked signal to be delivered. </div>", "  sigsuspend sigs atomically sets the blocked signals to sigs and waits for a non-ignored, non-blocked signal to be delivered. "],
["UnixLabels", "UnixLabels.html", "sigsuspend", "UnixLabels.html#VALsigsuspend", "<div class=\"info\">  <code class=\"code\">sigsuspend sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code> and waits for a non-ignored, non-blocked signal to be delivered. </div>", "  sigsuspend sigs atomically sets the blocked signals to sigs and waits for a non-ignored, non-blocked signal to be delivered. "],
["Sys", "Sys.html", "sigstop", "Sys.html#VALsigstop", "<div class=\"info\">  Stop </div>", "  Stop "],
["Sys", "Sys.html", "sigsegv", "Sys.html#VALsigsegv", "<div class=\"info\">  Invalid memory reference </div>", "  Invalid memory reference "],
["Sys", "Sys.html", "sigquit", "Sys.html#VALsigquit", "<div class=\"info\">  Interactive termination </div>", "  Interactive termination "],
["Sys", "Sys.html", "sigprof", "Sys.html#VALsigprof", "<div class=\"info\">  Profiling interrupt </div>", "  Profiling interrupt "],
["Unix", "Unix.html", "sigprocmask", "Unix.html#VALsigprocmask", "<div class=\"info\">  <code class=\"code\">sigprocmask cmd sigs</code> changes the set of blocked signals. </div>", "  sigprocmask cmd sigs changes the set of blocked signals. "],
["UnixLabels", "UnixLabels.html", "sigprocmask", "UnixLabels.html#VALsigprocmask", "<div class=\"info\">  <code class=\"code\">sigprocmask cmd sigs</code> changes the set of blocked signals. </div>", "  sigprocmask cmd sigs changes the set of blocked signals. "],
["Sys", "Sys.html", "sigpipe", "Sys.html#VALsigpipe", "<div class=\"info\">  Broken pipe </div>", "  Broken pipe "],
["Unix", "Unix.html", "sigpending", "Unix.html#VALsigpending", "<div class=\"info\">  Return the set of blocked signals that are currently pending. </div>", "  Return the set of blocked signals that are currently pending. "],
["UnixLabels", "UnixLabels.html", "sigpending", "UnixLabels.html#VALsigpending", "<div class=\"info\">  Return the set of blocked signals that are currently pending. </div>", "  Return the set of blocked signals that are currently pending. "],
["Condition", "Condition.html", "signal", "Condition.html#VALsignal", "<div class=\"info\">  <code class=\"code\">signal c</code> restarts one of the processes waiting on the condition variable <code class=\"code\">c</code>. </div>", "  signal c restarts one of the processes waiting on the condition variable c. "],
["Sys", "Sys.html", "signal", "Sys.html#VALsignal", "<div class=\"info\">  Set the behavior of the system on receipt of a given signal. </div>", "  Set the behavior of the system on receipt of a given signal. "],
["Num", "Num.html", "sign_num", "Num.html#VALsign_num", "<div class=\"info\">  Return <code class=\"code\">-1</code>, <code class=\"code\">0</code> or <code class=\"code\">1</code> according to the sign of the argument. </div>", "  Return -1, 0 or 1 according to the sign of the argument. "],
["Big_int", "Big_int.html", "sign_big_int", "Big_int.html#VALsign_big_int", "<div class=\"info\">  Return <code class=\"code\">0</code> if the given big integer is zero, <code class=\"code\">1</code> if it is positive, and <code class=\"code\">-1</code> if it is negative. </div>", "  Return 0 if the given big integer is zero, 1 if it is positive, and -1 if it is negative. "],
["Thread", "Thread.html", "sigmask", "Thread.html#VALsigmask", "<div class=\"info\">  <code class=\"code\">sigmask cmd sigs</code> changes the set of blocked signals for the calling thread. </div>", "  sigmask cmd sigs changes the set of blocked signals for the calling thread. "],
["Sys", "Sys.html", "sigkill", "Sys.html#VALsigkill", "<div class=\"info\">  Termination (cannot be ignored) </div>", "  Termination (cannot be ignored) "],
["Sys", "Sys.html", "sigint", "Sys.html#VALsigint", "<div class=\"info\">  Interactive interrupt (ctrl-C) </div>", "  Interactive interrupt (ctrl-C) "],
["Sys", "Sys.html", "sigill", "Sys.html#VALsigill", "<div class=\"info\">  Invalid hardware instruction </div>", "  Invalid hardware instruction "],
["Sys", "Sys.html", "sighup", "Sys.html#VALsighup", "<div class=\"info\">  Hangup on controlling terminal </div>", "  Hangup on controlling terminal "],
["Sys", "Sys.html", "sigfpe", "Sys.html#VALsigfpe", "<div class=\"info\">  Arithmetic exception </div>", "  Arithmetic exception "],
["Sys", "Sys.html", "sigcont", "Sys.html#VALsigcont", "<div class=\"info\">  Continue </div>", "  Continue "],
["Sys", "Sys.html", "sigchld", "Sys.html#VALsigchld", "<div class=\"info\">  Child process terminated </div>", "  Child process terminated "],
["Sys", "Sys.html", "sigalrm", "Sys.html#VALsigalrm", "<div class=\"info\">  Timeout </div>", "  Timeout "],
["Sys", "Sys.html", "sigabrt", "Sys.html#VALsigabrt", "<div class=\"info\">  Abnormal termination </div>", "  Abnormal termination "],
["Unix", "Unix.html", "shutdown_connection", "Unix.html#VALshutdown_connection", "<div class=\"info\">  ``Shut down'' a connection established with <a href=\"Unix.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_connection</code></a>; that is, transmit an end-of-file condition to the server reading on the other side of the connection. </div>", "  ``Shut down'' a connection established with Unix.open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection. "],
["UnixLabels", "UnixLabels.html", "shutdown_connection", "UnixLabels.html#VALshutdown_connection", "<div class=\"info\">  ``Shut down'' a connection established with <a href=\"UnixLabels.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_connection</code></a>; that is, transmit an end-of-file condition to the server reading on the other side of the connection. </div>", "  ``Shut down'' a connection established with UnixLabels.open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection. "],
["Unix", "Unix.html", "shutdown", "Unix.html#VALshutdown", "<div class=\"info\">  Shutdown a socket connection. </div>", "  Shutdown a socket connection. "],
["UnixLabels", "UnixLabels.html", "shutdown", "UnixLabels.html#VALshutdown", "<div class=\"info\">  Shutdown a socket connection. </div>", "  Shutdown a socket connection. "],
["Big_int", "Big_int.html", "shift_right_towards_zero_big_int", "Big_int.html#VALshift_right_towards_zero_big_int", "<div class=\"info\">  <code class=\"code\">shift_right_towards_zero_big_int b n</code> returns <code class=\"code\">b</code> shifted right by <code class=\"code\">n</code> bits. </div>", "  shift_right_towards_zero_big_int b n returns b shifted right by n bits. "],
["Int32", "Int32.html", "shift_right_logical", "Int32.html#VALshift_right_logical", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right_logical x y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits. </div>", "  Int32.shift_right_logical x y shifts x to the right by y bits. "],
["Int64", "Int64.html", "shift_right_logical", "Int64.html#VALshift_right_logical", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right_logical x y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits. </div>", "  Int64.shift_right_logical x y shifts x to the right by y bits. "],
["Nativeint", "Nativeint.html", "shift_right_logical", "Nativeint.html#VALshift_right_logical", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right_logical x y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits. </div>", "  Nativeint.shift_right_logical x y shifts x to the right by y bits. "],
["Big_int", "Big_int.html", "shift_right_big_int", "Big_int.html#VALshift_right_big_int", "<div class=\"info\">  <code class=\"code\">shift_right_big_int b n</code> returns <code class=\"code\">b</code> shifted right by <code class=\"code\">n</code> bits. </div>", "  shift_right_big_int b n returns b shifted right by n bits. "],
["Int32", "Int32.html", "shift_right", "Int32.html#VALshift_right", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right x y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits. </div>", "  Int32.shift_right x y shifts x to the right by y bits. "],
["Int64", "Int64.html", "shift_right", "Int64.html#VALshift_right", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right x y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits. </div>", "  Int64.shift_right x y shifts x to the right by y bits. "],
["Nativeint", "Nativeint.html", "shift_right", "Nativeint.html#VALshift_right", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right x y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits. </div>", "  Nativeint.shift_right x y shifts x to the right by y bits. "],
["Big_int", "Big_int.html", "shift_left_big_int", "Big_int.html#VALshift_left_big_int", "<div class=\"info\">  <code class=\"code\">shift_left_big_int b n</code> returns <code class=\"code\">b</code> shifted left by <code class=\"code\">n</code> bits. </div>", "  shift_left_big_int b n returns b shifted left by n bits. "],
["Int32", "Int32.html", "shift_left", "Int32.html#VALshift_left", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Int32</span>.shift_left x y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits. </div>", "  Int32.shift_left x y shifts x to the left by y bits. "],
["Int64", "Int64.html", "shift_left", "Int64.html#VALshift_left", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Int64</span>.shift_left x y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits. </div>", "  Int64.shift_left x y shifts x to the left by y bits. "],
["Nativeint", "Nativeint.html", "shift_left", "Nativeint.html#VALshift_left", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_left x y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits. </div>", "  Nativeint.shift_left x y shifts x to the left by y bits. "],
["Unix", "Unix.html", "setuid", "Unix.html#VALsetuid", "<div class=\"info\">  Set the real user id and effective user id for the process. </div>", "  Set the real user id and effective user id for the process. "],
["UnixLabels", "UnixLabels.html", "setuid", "UnixLabels.html#VALsetuid", "<div class=\"info\">  Set the real user id and effective user id for the process. </div>", "  Set the real user id and effective user id for the process. "],
["Unix", "Unix.html", "setsockopt_optint", "Unix.html#VALsetsockopt_optint", "<div class=\"info\">  Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is an <code class=\"code\">int option</code>. </div>", "  Same as Unix.setsockopt for a socket option whose value is an int option. "],
["UnixLabels", "UnixLabels.html", "setsockopt_optint", "UnixLabels.html#VALsetsockopt_optint", "<div class=\"info\">  Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is an <code class=\"code\">int option</code>. </div>", "  Same as Unix.setsockopt for a socket option whose value is an int option. "],
["Unix", "Unix.html", "setsockopt_int", "Unix.html#VALsetsockopt_int", "<div class=\"info\">  Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option. </div>", "  Same as Unix.setsockopt for an integer-valued socket option. "],
["UnixLabels", "UnixLabels.html", "setsockopt_int", "UnixLabels.html#VALsetsockopt_int", "<div class=\"info\">  Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option. </div>", "  Same as Unix.setsockopt for an integer-valued socket option. "],
["Unix", "Unix.html", "setsockopt_float", "Unix.html#VALsetsockopt_float", "<div class=\"info\">  Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a floating-point number. </div>", "  Same as Unix.setsockopt for a socket option whose value is a floating-point number. "],
["UnixLabels", "UnixLabels.html", "setsockopt_float", "UnixLabels.html#VALsetsockopt_float", "<div class=\"info\">  Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a floating-point number. </div>", "  Same as Unix.setsockopt for a socket option whose value is a floating-point number. "],
["Unix", "Unix.html", "setsockopt", "Unix.html#VALsetsockopt", "<div class=\"info\">  Set or clear a boolean-valued option in the given socket. </div>", "  Set or clear a boolean-valued option in the given socket. "],
["UnixLabels", "UnixLabels.html", "setsockopt", "UnixLabels.html#VALsetsockopt", "<div class=\"info\">  Set or clear a boolean-valued option in the given socket. </div>", "  Set or clear a boolean-valued option in the given socket. "],
["Unix", "Unix.html", "setsid", "Unix.html#VALsetsid", "<div class=\"info\">  Put the calling process in a new session and detach it from its controlling terminal. </div>", "  Put the calling process in a new session and detach it from its controlling terminal. "],
["UnixLabels", "UnixLabels.html", "setsid", "UnixLabels.html#VALsetsid", "<div class=\"info\">  Put the calling process in a new session and detach it from its controlling terminal. </div>", "  Put the calling process in a new session and detach it from its controlling terminal. "],
["Unix", "Unix.html", "setitimer", "Unix.html#VALsetitimer", "<div class=\"info\">  <code class=\"code\">setitimer t s</code> sets the interval timer <code class=\"code\">t</code> and returns its previous status. </div>", "  setitimer t s sets the interval timer t and returns its previous status. "],
["UnixLabels", "UnixLabels.html", "setitimer", "UnixLabels.html#VALsetitimer", "<div class=\"info\">  <code class=\"code\">setitimer t s</code> sets the interval timer <code class=\"code\">t</code> and returns its previous status. </div>", "  setitimer t s sets the interval timer t and returns its previous status. "],
["Unix", "Unix.html", "setgroups", "Unix.html#VALsetgroups", "<div class=\"info\">  <code class=\"code\">setgroups groups</code> sets the supplementary group IDs for the calling process. </div>", "  setgroups groups sets the supplementary group IDs for the calling process. "],
["UnixLabels", "UnixLabels.html", "setgroups", "UnixLabels.html#VALsetgroups", "<div class=\"info\">  <code class=\"code\">setgroups groups</code> sets the supplementary group IDs for the calling process. </div>", "  setgroups groups sets the supplementary group IDs for the calling process. "],
["Unix", "Unix.html", "setgid", "Unix.html#VALsetgid", "<div class=\"info\">  Set the real group id and effective group id for the process. </div>", "  Set the real group id and effective group id for the process. "],
["UnixLabels", "UnixLabels.html", "setgid", "UnixLabels.html#VALsetgid", "<div class=\"info\">  Set the real group id and effective group id for the process. </div>", "  Set the real group id and effective group id for the process. "],
["Graphics", "Graphics.html", "set_window_title", "Graphics.html#VALset_window_title", "<div class=\"info\">  Set the title of the graphics window. </div>", "  Set the title of the graphics window. "],
["Printexc", "Printexc.html", "set_uncaught_exception_handler", "Printexc.html#VALset_uncaught_exception_handler", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.set_uncaught_exception_handler fn</code> registers <code class=\"code\">fn</code> as the handler for uncaught exceptions. </div>", "  Printexc.set_uncaught_exception_handler fn registers fn as the handler for uncaught exceptions. "],
["Parsing", "Parsing.html", "set_trace", "Parsing.html#VALset_trace", "<div class=\"info\">  Control debugging support for <code class=\"code\">ocamlyacc</code>-generated parsers. </div>", "  Control debugging support for ocamlyacc-generated parsers. "],
["Graphics", "Graphics.html", "set_text_size", "Graphics.html#VALset_text_size", "<div class=\"info\">  Set the character size used for drawing text. </div>", "  Set the character size used for drawing text. "],
["Filename", "Filename.html", "set_temp_dir_name", "Filename.html#VALset_temp_dir_name", "<div class=\"info\">  Change the temporary directory returned by <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a> and used by <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a> and <a href=\"Filename.html#VALopen_temp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.open_temp_file</code></a>. </div>", "  Change the temporary directory returned by Filename.get_temp_dir_name and used by Filename.temp_file and Filename.open_temp_file. "],
["Format", "Format.html", "set_tags", "Format.html#VALset_tags", "<div class=\"info\">  <code class=\"code\">set_tags b</code> turns on or off the treatment of tags (default is off). </div>", "  set_tags b turns on or off the treatment of tags (default is off). "],
["Obj", "Obj.html", "set_tag", "Obj.html#VALset_tag", "", ""],
["Format", "Format.html", "set_tab", "Format.html#VALset_tab", "<div class=\"info\">  Sets a tabulation mark at the current insertion point. </div>", "  Sets a tabulation mark at the current insertion point. "],
["Random", "Random.html", "set_state", "Random.html#VALset_state", "<div class=\"info\">  Set the state of the generator used by the basic functions. </div>", "  Set the state of the generator used by the basic functions. "],
["Sys", "Sys.html", "set_signal", "Sys.html#VALset_signal", "<div class=\"info\">  Same as <a href=\"Sys.html#VALsignal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.signal</code></a> but return value is ignored. </div>", "  Same as Sys.signal but return value is ignored. "],
["Format", "Format.html", "set_print_tags", "Format.html#VALset_print_tags", "", ""],
["Arith_status", "Arith_status.html", "set_normalize_ratio_when_printing", "Arith_status.html#VALset_normalize_ratio_when_printing", "<div class=\"info\">  Get or set the flag <code class=\"code\">normalize_ratio_when_printing</code>. </div>", "  Get or set the flag normalize_ratio_when_printing. "],
["Arith_status", "Arith_status.html", "set_normalize_ratio", "Arith_status.html#VALset_normalize_ratio", "<div class=\"info\">  Get or set the flag <code class=\"code\">normalize_ratio</code>. </div>", "  Get or set the flag normalize_ratio. "],
["Unix", "Unix.html", "set_nonblock", "Unix.html#VALset_nonblock", "<div class=\"info\">  Set the ``non-blocking'' flag on the given descriptor. </div>", "  Set the ``non-blocking'' flag on the given descriptor. "],
["UnixLabels", "UnixLabels.html", "set_nonblock", "UnixLabels.html#VALset_nonblock", "<div class=\"info\">  Set the ``non-blocking'' flag on the given descriptor. </div>", "  Set the ``non-blocking'' flag on the given descriptor. "],
["CamlinternalOO", "CamlinternalOO.html", "set_methods", "CamlinternalOO.html#VALset_methods", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "set_method", "CamlinternalOO.html#VALset_method", "", ""],
["Format", "Format.html", "set_max_indent", "Format.html#VALset_max_indent", "<div class=\"info\">  <code class=\"code\">set_max_indent d</code> sets the value of the maximum indentation limit to <code class=\"code\">d</code> (in characters): once this limit is reached, boxes are rejected to the left, if they do not fit on the current line. </div>", "  set_max_indent d sets the value of the maximum indentation limit to d (in characters): once this limit is reached, boxes are rejected to the left, if they do not fit on the current line. "],
["Format", "Format.html", "set_max_boxes", "Format.html#VALset_max_boxes", "<div class=\"info\">  <code class=\"code\">set_max_boxes max</code> sets the maximum number of boxes simultaneously opened. </div>", "  set_max_boxes max sets the maximum number of boxes simultaneously opened. "],
["Format", "Format.html", "set_mark_tags", "Format.html#VALset_mark_tags", "<div class=\"info\">  <code class=\"code\">set_print_tags b</code> turns on or off the printing of tags, while <code class=\"code\">set_mark_tags b</code> turns on or off the output of tag markers. </div>", "  set_print_tags b turns on or off the printing of tags, while set_mark_tags b turns on or off the output of tag markers. "],
["Format", "Format.html", "set_margin", "Format.html#VALset_margin", "<div class=\"info\">  <code class=\"code\">set_margin d</code> sets the value of the right margin to <code class=\"code\">d</code> (in characters): this value is used to detect line overflows that leads to split lines. </div>", "  set_margin d sets the value of the right margin to d (in characters): this value is used to detect line overflows that leads to split lines. "],
["Graphics", "Graphics.html", "set_line_width", "Graphics.html#VALset_line_width", "<div class=\"info\">  Set the width of points and lines drawn with the functions above. </div>", "  Set the width of points and lines drawn with the functions above. "],
["Format", "Format.html", "set_formatter_tag_functions", "Format.html#VALset_formatter_tag_functions", "<div class=\"info\">  <code class=\"code\">set_formatter_tag_functions tag_funs</code> changes the meaning of opening and closing tags to use the functions in <code class=\"code\">tag_funs</code>. </div>", "  set_formatter_tag_functions tag_funs changes the meaning of opening and closing tags to use the functions in tag_funs. "],
["Format", "Format.html", "set_formatter_output_functions", "Format.html#VALset_formatter_output_functions", "<div class=\"info\">  <code class=\"code\">set_formatter_output_functions out flush</code> redirects the pretty-printer output functions to the functions <code class=\"code\">out</code> and <code class=\"code\">flush</code>. </div>", "  set_formatter_output_functions out flush redirects the pretty-printer output functions to the functions out and flush. "],
["Format", "Format.html", "set_formatter_out_functions", "Format.html#VALset_formatter_out_functions", "<div class=\"info\">  <code class=\"code\">set_formatter_out_functions f</code> Redirect the pretty-printer output to the functions <code class=\"code\">f.out_string</code> and <code class=\"code\">f.out_flush</code> as described in <code class=\"code\">set_formatter_output_functions</code>. </div>", "  set_formatter_out_functions f Redirect the pretty-printer output to the functions f.out_string and f.out_flush as described in set_formatter_output_functions. "],
["Format", "Format.html", "set_formatter_out_channel", "Format.html#VALset_formatter_out_channel", "<div class=\"info\">  Redirect the pretty-printer output to the given channel. </div>", "  Redirect the pretty-printer output to the given channel. "],
["Graphics", "Graphics.html", "set_font", "Graphics.html#VALset_font", "<div class=\"info\">  Set the font used for drawing text. </div>", "  Set the font used for drawing text. "],
["Arith_status", "Arith_status.html", "set_floating_precision", "Arith_status.html#VALset_floating_precision", "<div class=\"info\">  Get or set the parameter <code class=\"code\">floating_precision</code>. </div>", "  Get or set the parameter floating_precision. "],
["Obj", "Obj.html", "set_field", "Obj.html#VALset_field", "", ""],
["Arith_status", "Arith_status.html", "set_error_when_null_denominator", "Arith_status.html#VALset_error_when_null_denominator", "<div class=\"info\">  Get or set the flag <code class=\"code\">null_denominator</code>. </div>", "  Get or set the flag null_denominator. "],
["Format", "Format.html", "set_ellipsis_text", "Format.html#VALset_ellipsis_text", "<div class=\"info\">  Set the text of the ellipsis printed when too many boxes are opened (a single dot, <code class=\"code\">.</code>, by default). </div>", "  Set the text of the ellipsis printed when too many boxes are opened (a single dot, ., by default). "],
["Obj", "Obj.html", "set_double_field", "Obj.html#VALset_double_field", "", ""],
["Graphics", "Graphics.html", "set_color", "Graphics.html#VALset_color", "<div class=\"info\">  Set the current drawing color. </div>", "  Set the current drawing color. "],
["Unix", "Unix.html", "set_close_on_exec", "Unix.html#VALset_close_on_exec", "<div class=\"info\">  Set the ``close-on-exec'' flag on the given descriptor. </div>", "  Set the ``close-on-exec'' flag on the given descriptor. "],
["UnixLabels", "UnixLabels.html", "set_close_on_exec", "UnixLabels.html#VALset_close_on_exec", "<div class=\"info\">  Set the ``close-on-exec'' flag on the given descriptor. </div>", "  Set the ``close-on-exec'' flag on the given descriptor. "],
["Pervasives", "Pervasives.html", "set_binary_mode_out", "Pervasives.html#VALset_binary_mode_out", "<div class=\"info\">  <code class=\"code\">set_binary_mode_out oc <span class=\"keyword\">true</span></code> sets the channel <code class=\"code\">oc</code> to binary mode: no translations take place during output. </div>", "  set_binary_mode_out oc true sets the channel oc to binary mode: no translations take place during output. "],
["Pervasives", "Pervasives.html", "set_binary_mode_in", "Pervasives.html#VALset_binary_mode_in", "<div class=\"info\">  <code class=\"code\">set_binary_mode_in ic <span class=\"keyword\">true</span></code> sets the channel <code class=\"code\">ic</code> to binary mode: no translations take place during input. </div>", "  set_binary_mode_in ic true sets the channel ic to binary mode: no translations take place during input. "],
["Arith_status", "Arith_status.html", "set_approx_printing", "Arith_status.html#VALset_approx_printing", "<div class=\"info\">  Get or set the flag <code class=\"code\">approx_printing</code>. </div>", "  Get or set the flag approx_printing. "],
["Format", "Format.html", "set_all_formatter_output_functions", "Format.html#VALset_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Array", "Array.html", "set", "Array.html#VALset", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.set a n x</code> modifies array <code class=\"code\">a</code> in place, replacing element number <code class=\"code\">n</code> with <code class=\"code\">x</code>. </div>", "  Array.set a n x modifies array a in place, replacing element number n with x. "],
["ArrayLabels", "ArrayLabels.html", "set", "ArrayLabels.html#VALset", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.set a n x</code> modifies array <code class=\"code\">a</code> in place, replacing element number <code class=\"code\">n</code> with <code class=\"code\">x</code>. </div>", "  Array.set a n x modifies array a in place, replacing element number n with x. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "set", "Bigarray.Genarray.html#VALset", "<div class=\"info\">  Assign an element of a generic big array. </div>", "  Assign an element of a generic big array. "],
["Bigarray.Array1", "Bigarray.Array1.html", "set", "Bigarray.Array1.html#VALset", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array1</span>.set a x v</code>, also written <code class=\"code\">a.{x} &lt;- v</code>, stores the value <code class=\"code\">v</code> at index <code class=\"code\">x</code> in <code class=\"code\">a</code>. </div>", "  Array1.set a x v, also written a.{x} <- v, stores the value v at index x in a. "],
["Bigarray.Array2", "Bigarray.Array2.html", "set", "Bigarray.Array2.html#VALset", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array2</span>.set a x y v</code>, or alternatively <code class=\"code\">a.{x,y} &lt;- v</code>, stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>) in <code class=\"code\">a</code>. </div>", "  Array2.set a x y v, or alternatively a.{x,y} <- v, stores the value v at coordinates (x, y) in a. "],
["Bigarray.Array3", "Bigarray.Array3.html", "set", "Bigarray.Array3.html#VALset", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array3</span>.set a x y v</code>, or alternatively <code class=\"code\">a.{x,y,z} &lt;- v</code>, stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>) in <code class=\"code\">a</code>. </div>", "  Array3.set a x y v, or alternatively a.{x,y,z} <- v, stores the value v at coordinates (x, y, z) in a. "],
["Bytes", "Bytes.html", "set", "Bytes.html#VALset", "<div class=\"info\">  <code class=\"code\">set s n c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>. </div>", "  set s n c modifies s in place, replacing the byte at index n with c. "],
["BytesLabels", "BytesLabels.html", "set", "BytesLabels.html#VALset", "<div class=\"info\">  <code class=\"code\">set s n c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>. </div>", "  set s n c modifies s in place, replacing the byte at index n with c. "],
["Gc", "Gc.html", "set", "Gc.html#VALset", "<div class=\"info\">  <code class=\"code\">set r</code> changes the GC parameters according to the <code class=\"code\">control</code> record <code class=\"code\">r</code>. </div>", "  set r changes the GC parameters according to the control record r. "],
["StringLabels", "StringLabels.html", "set", "StringLabels.html#VALset", "<div class=\"info\">  <span class=\"deprecated\"><code class=\"code\"><span class=\"constructor\">String</span>.set s n c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>. </span></div>", "  String.set s n c modifies byte sequence s in place, replacing the byte at index n with c. "],
["String", "String.html", "set", "String.html#VALset", "<div class=\"info\">  <span class=\"deprecated\"><code class=\"code\"><span class=\"constructor\">String</span>.set s n c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>. </span></div>", "  String.set s n c modifies byte sequence s in place, replacing the byte at index n with c. "],
["Weak", "Weak.html", "set", "Weak.html#VALset", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.set ar n (<span class=\"constructor\">Some</span> el)</code> sets the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> to be a (full) pointer to <code class=\"code\">el</code>; <code class=\"code\"><span class=\"constructor\">Weak</span>.set ar n <span class=\"constructor\">None</span></code> sets the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> to empty. </div>", "  Weak.set ar n (Some el) sets the nth cell of ar to be a (full) pointer to el; Weak.set ar n None sets the nth cell of ar to empty. "],
["ThreadUnix", "ThreadUnix.html", "sendto_substring", "ThreadUnix.html#VALsendto_substring", "", ""],
["Unix", "Unix.html", "sendto_substring", "Unix.html#VALsendto_substring", "<div class=\"info\">  Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as sendto, but take the data from a string instead of a byte sequence. "],
["UnixLabels", "UnixLabels.html", "sendto_substring", "UnixLabels.html#VALsendto_substring", "<div class=\"info\">  Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as sendto, but take the data from a string instead of a byte sequence. "],
["ThreadUnix", "ThreadUnix.html", "sendto", "ThreadUnix.html#VALsendto", "", ""],
["Unix", "Unix.html", "sendto", "Unix.html#VALsendto", "<div class=\"info\">  Send data over an unconnected socket. </div>", "  Send data over an unconnected socket. "],
["UnixLabels", "UnixLabels.html", "sendto", "UnixLabels.html#VALsendto", "<div class=\"info\">  Send data over an unconnected socket. </div>", "  Send data over an unconnected socket. "],
["CamlinternalOO", "CamlinternalOO.html", "sendself", "CamlinternalOO.html#VALsendself", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "sendcache", "CamlinternalOO.html#VALsendcache", "", ""],
["ThreadUnix", "ThreadUnix.html", "send_substring", "ThreadUnix.html#VALsend_substring", "", ""],
["Unix", "Unix.html", "send_substring", "Unix.html#VALsend_substring", "<div class=\"info\">  Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as send, but take the data from a string instead of a byte sequence. "],
["UnixLabels", "UnixLabels.html", "send_substring", "UnixLabels.html#VALsend_substring", "<div class=\"info\">  Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte sequence. </div>", "  Same as send, but take the data from a string instead of a byte sequence. "],
["CamlinternalOO", "CamlinternalOO.html", "send", "CamlinternalOO.html#VALsend", "", ""],
["Event", "Event.html", "send", "Event.html#VALsend", "<div class=\"info\">  <code class=\"code\">send ch v</code> returns the event consisting in sending the value <code class=\"code\">v</code> over the channel <code class=\"code\">ch</code>. </div>", "  send ch v returns the event consisting in sending the value v over the channel ch. "],
["ThreadUnix", "ThreadUnix.html", "send", "ThreadUnix.html#VALsend", "", ""],
["Unix", "Unix.html", "send", "Unix.html#VALsend", "<div class=\"info\">  Send data over a connected socket. </div>", "  Send data over a connected socket. "],
["UnixLabels", "UnixLabels.html", "send", "UnixLabels.html#VALsend", "<div class=\"info\">  Send data over a connected socket. </div>", "  Send data over a connected socket. "],
["Random", "Random.html", "self_init", "Random.html#VALself_init", "<div class=\"info\">  Initialize the generator with a random seed chosen in a system-dependent way. </div>", "  Initialize the generator with a random seed chosen in a system-dependent way. "],
["Thread", "Thread.html", "self", "Thread.html#VALself", "<div class=\"info\">  Return the thread currently executing. </div>", "  Return the thread currently executing. "],
["Event", "Event.html", "select", "Event.html#VALselect", "<div class=\"info\">  'Synchronize' on an alternative of events. </div>", "  'Synchronize' on an alternative of events. "],
["Thread", "Thread.html", "select", "Thread.html#VALselect", "<div class=\"info\">  Suspend the execution of the calling thead until input/output becomes possible on the given Unix file descriptors. </div>", "  Suspend the execution of the calling thead until input/output becomes possible on the given Unix file descriptors. "],
["ThreadUnix", "ThreadUnix.html", "select", "ThreadUnix.html#VALselect", "", ""],
["Unix", "Unix.html", "select", "Unix.html#VALselect", "<div class=\"info\">  Wait until some input/output operations become possible on some channels. </div>", "  Wait until some input/output operations become possible on some channels. "],
["UnixLabels", "UnixLabels.html", "select", "UnixLabels.html#VALselect", "<div class=\"info\">  Wait until some input/output operations become possible on some channels. </div>", "  Wait until some input/output operations become possible on some channels. "],
["Pervasives", "Pervasives.html", "seek_out", "Pervasives.html#VALseek_out", "<div class=\"info\">  <code class=\"code\">seek_out chan pos</code> sets the current writing position to <code class=\"code\">pos</code> for channel <code class=\"code\">chan</code>. </div>", "  seek_out chan pos sets the current writing position to pos for channel chan. "],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "seek_out", "Pervasives.LargeFile.html#VALseek_out", "", ""],
["Pervasives", "Pervasives.html", "seek_in", "Pervasives.html#VALseek_in", "<div class=\"info\">  <code class=\"code\">seek_in chan pos</code> sets the current reading position to <code class=\"code\">pos</code> for channel <code class=\"code\">chan</code>. </div>", "  seek_in chan pos sets the current reading position to pos for channel chan. "],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "seek_in", "Pervasives.LargeFile.html#VALseek_in", "", ""],
["Hashtbl", "Hashtbl.html", "seeded_hash_param", "Hashtbl.html#VALseeded_hash_param", "<div class=\"info\">  A variant of <a href=\"Hashtbl.html#VALhash_param\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param</code></a> that is further parameterized by an integer seed. </div>", "  A variant of Hashtbl.hash_param that is further parameterized by an integer seed. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "seeded_hash_param", "MoreLabels.Hashtbl.html#VALseeded_hash_param", "", ""],
["Hashtbl", "Hashtbl.html", "seeded_hash", "Hashtbl.html#VALseeded_hash", "<div class=\"info\">  A variant of <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a> that is further parameterized by an integer seed. </div>", "  A variant of Hashtbl.hash that is further parameterized by an integer seed. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "seeded_hash", "MoreLabels.Hashtbl.html#VALseeded_hash", "", ""],
["Str", "Str.html", "search_forward", "Str.html#VALsearch_forward", "<div class=\"info\">  <code class=\"code\">search_forward r s start</code> searches the string <code class=\"code\">s</code> for a substring matching the regular expression <code class=\"code\">r</code>. </div>", "  search_forward r s start searches the string s for a substring matching the regular expression r. "],
["Str", "Str.html", "search_backward", "Str.html#VALsearch_backward", "<div class=\"info\">  <code class=\"code\">search_backward r s last</code> searches the string <code class=\"code\">s</code> for a substring matching the regular expression <code class=\"code\">r</code>. </div>", "  search_backward r s last searches the string s for a substring matching the regular expression r. "],
["Scanf", "Scanf.html", "scanf", "Scanf.html#VALscanf", "<div class=\"info\">  Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the predefined formatted input channel <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a> that is connected to <code class=\"code\"><span class=\"constructor\">Pervasives</span>.stdin</code>. </div>", "  Same as Scanf.bscanf, but reads from the predefined formatted input channel Scanf.Scanning.stdin that is connected to Pervasives.stdin. "],
["CamlinternalOO", "CamlinternalOO.html", "run_initializers_opt", "CamlinternalOO.html#VALrun_initializers_opt", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "run_initializers", "CamlinternalOO.html#VALrun_initializers", "", ""],
["Num", "Num.html", "round_num", "Num.html#VALround_num", "<div class=\"info\">  <code class=\"code\">round_num n</code> returns the integer closest to <code class=\"code\">n</code>. </div>", "  round_num n returns the integer closest to n. "],
["Graphics", "Graphics.html", "rmoveto", "Graphics.html#VALrmoveto", "<div class=\"info\">  <code class=\"code\">rmoveto dx dy</code> translates the current point by the given vector. </div>", "  rmoveto dx dy translates the current point by the given vector. "],
["Unix", "Unix.html", "rmdir", "Unix.html#VALrmdir", "<div class=\"info\">  Remove an empty directory. </div>", "  Remove an empty directory. "],
["UnixLabels", "UnixLabels.html", "rmdir", "UnixLabels.html#VALrmdir", "<div class=\"info\">  Remove an empty directory. </div>", "  Remove an empty directory. "],
["Graphics", "Graphics.html", "rlineto", "Graphics.html#VALrlineto", "<div class=\"info\">  Draw a line with endpoints the current point and the current point translated of the given vector, and move the current point to this point. </div>", "  Draw a line with endpoints the current point and the current point translated of the given vector, and move the current point to this point. "],
["Bytes", "Bytes.html", "rindex_from", "Bytes.html#VALrindex_from", "<div class=\"info\">  <code class=\"code\">rindex_from s i c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>. </div>", "  rindex_from s i c returns the index of the last occurrence of byte c in s before position i+1. "],
["BytesLabels", "BytesLabels.html", "rindex_from", "BytesLabels.html#VALrindex_from", "<div class=\"info\">  <code class=\"code\">rindex_from s i c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>. </div>", "  rindex_from s i c returns the index of the last occurrence of byte c in s before position i+1. "],
["StringLabels", "StringLabels.html", "rindex_from", "StringLabels.html#VALrindex_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from s i c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>. </div>", "  String.rindex_from s i c returns the index of the last occurrence of character c in string s before position i+1. "],
["String", "String.html", "rindex_from", "String.html#VALrindex_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from s i c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>. </div>", "  String.rindex_from s i c returns the index of the last occurrence of character c in string s before position i+1. "],
["Bytes", "Bytes.html", "rindex", "Bytes.html#VALrindex", "<div class=\"info\">  <code class=\"code\">rindex s c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>. </div>", "  rindex s c returns the index of the last occurrence of byte c in s. "],
["BytesLabels", "BytesLabels.html", "rindex", "BytesLabels.html#VALrindex", "<div class=\"info\">  <code class=\"code\">rindex s c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>. </div>", "  rindex s c returns the index of the last occurrence of byte c in s. "],
["StringLabels", "StringLabels.html", "rindex", "StringLabels.html#VALrindex", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.rindex s c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>. </div>", "  String.rindex s c returns the index of the last occurrence of character c in string s. "],
["String", "String.html", "rindex", "String.html#VALrindex", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.rindex s c</code> returns the index of the last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>. </div>", "  String.rindex s c returns the index of the last occurrence of character c in string s. "],
["Parsing", "Parsing.html", "rhs_start_pos", "Parsing.html#VALrhs_start_pos", "<div class=\"info\">  Same as <code class=\"code\">rhs_start</code>, but return a <code class=\"code\">position</code> instead of an offset. </div>", "  Same as rhs_start, but return a position instead of an offset. "],
["Parsing", "Parsing.html", "rhs_start", "Parsing.html#VALrhs_start", "<div class=\"info\">  Same as <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a>, but return the offset of the string matching the <code class=\"code\">n</code>th item on the right-hand side of the rule, where <code class=\"code\">n</code> is the integer parameter to <code class=\"code\">rhs_start</code> and <code class=\"code\">rhs_end</code>. </div>", "  Same as Parsing.symbol_start and Parsing.symbol_end, but return the offset of the string matching the nth item on the right-hand side of the rule, where n is the integer parameter to rhs_start and rhs_end. "],
["Parsing", "Parsing.html", "rhs_end_pos", "Parsing.html#VALrhs_end_pos", "<div class=\"info\">  Same as <code class=\"code\">rhs_end</code>, but return a <code class=\"code\">position</code> instead of an offset. </div>", "  Same as rhs_end, but return a position instead of an offset. "],
["Parsing", "Parsing.html", "rhs_end", "Parsing.html#VALrhs_end", "<div class=\"info\">  See <a href=\"Parsing.html#VALrhs_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.rhs_start</code></a>. </div>", "  See Parsing.rhs_start. "],
["Graphics", "Graphics.html", "rgb", "Graphics.html#VALrgb", "<div class=\"info\">  <code class=\"code\">rgb r g b</code> returns the integer encoding the color with red component <code class=\"code\">r</code>, green component <code class=\"code\">g</code>, and blue component <code class=\"code\">b</code>. </div>", "  rgb r g b returns the integer encoding the color with red component r, green component g, and blue component b. "],
["Unix", "Unix.html", "rewinddir", "Unix.html#VALrewinddir", "<div class=\"info\">  Reposition the descriptor to the beginning of the directory </div>", "  Reposition the descriptor to the beginning of the directory "],
["UnixLabels", "UnixLabels.html", "rewinddir", "UnixLabels.html#VALrewinddir", "<div class=\"info\">  Reposition the descriptor to the beginning of the directory </div>", "  Reposition the descriptor to the beginning of the directory "],
["List", "List.html", "rev_map2", "List.html#VALrev_map2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.rev_map2 f l1 l2</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\"> (</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\"> f l1 l2)</code>, but is tail-recursive and more efficient. </div>", "  List.rev_map2 f l1 l2 gives the same result as List.rev (List.map2 f l1 l2), but is tail-recursive and more efficient. "],
["ListLabels", "ListLabels.html", "rev_map2", "ListLabels.html#VALrev_map2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.rev_map2 f l1 l2</code> gives the same result as <a href=\"ListLabels.html#VALrev\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.rev</code></a><code class=\"code\"> (</code><a href=\"ListLabels.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.map2</code></a><code class=\"code\"> f l1 l2)</code>, but is tail-recursive and more efficient. </div>", "  List.rev_map2 f l1 l2 gives the same result as ListLabels.rev (ListLabels.map2 f l1 l2), but is tail-recursive and more efficient. "],
["List", "List.html", "rev_map", "List.html#VALrev_map", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.rev_map f l</code> gives the same result as <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\"> (</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\"> f l)</code>, but is tail-recursive and more efficient. </div>", "  List.rev_map f l gives the same result as List.rev (List.map f l), but is tail-recursive and more efficient. "],
["ListLabels", "ListLabels.html", "rev_map", "ListLabels.html#VALrev_map", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.rev_map f l</code> gives the same result as <a href=\"ListLabels.html#VALrev\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.rev</code></a><code class=\"code\"> (</code><a href=\"ListLabels.html#VALmap\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.map</code></a><code class=\"code\"> f l)</code>, but is tail-recursive and more efficient. </div>", "  List.rev_map f l gives the same result as ListLabels.rev (ListLabels.map f l), but is tail-recursive and more efficient. "],
["CamlinternalFormat", "CamlinternalFormat.html", "rev_char_set", "CamlinternalFormat.html#VALrev_char_set", "", ""],
["List", "List.html", "rev_append", "List.html#VALrev_append", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.rev_append l1 l2</code> reverses <code class=\"code\">l1</code> and concatenates it to <code class=\"code\">l2</code>. </div>", "  List.rev_append l1 l2 reverses l1 and concatenates it to l2. "],
["ListLabels", "ListLabels.html", "rev_append", "ListLabels.html#VALrev_append", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.rev_append l1 l2</code> reverses <code class=\"code\">l1</code> and concatenates it to <code class=\"code\">l2</code>. </div>", "  List.rev_append l1 l2 reverses l1 and concatenates it to l2. "],
["List", "List.html", "rev", "List.html#VALrev", "<div class=\"info\">  List reversal. </div>", "  List reversal. "],
["ListLabels", "ListLabels.html", "rev", "ListLabels.html#VALrev", "<div class=\"info\">  List reversal. </div>", "  List reversal. "],
["Graphics", "Graphics.html", "resize_window", "Graphics.html#VALresize_window", "<div class=\"info\">  Resize and erase the graphics window. </div>", "  Resize and erase the graphics window. "],
["Bigarray", "Bigarray.html", "reshape_3", "Bigarray.html#VALreshape_3", "<div class=\"info\">  Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to three-dimensional arrays. </div>", "  Specialized version of Bigarray.reshape for reshaping to three-dimensional arrays. "],
["Bigarray", "Bigarray.html", "reshape_2", "Bigarray.html#VALreshape_2", "<div class=\"info\">  Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to two-dimensional arrays. </div>", "  Specialized version of Bigarray.reshape for reshaping to two-dimensional arrays. "],
["Bigarray", "Bigarray.html", "reshape_1", "Bigarray.html#VALreshape_1", "<div class=\"info\">  Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to one-dimensional arrays. </div>", "  Specialized version of Bigarray.reshape for reshaping to one-dimensional arrays. "],
["Bigarray", "Bigarray.html", "reshape", "Bigarray.html#VALreshape", "<div class=\"info\">  <code class=\"code\">reshape b [|d1;...;dN|]</code> converts the big array <code class=\"code\">b</code> to a <code class=\"code\"><span class=\"constructor\">N</span></code>-dimensional array of dimensions <code class=\"code\">d1</code>... </div>", "  reshape b [|d1;...;dN|] converts the big array b to a N-dimensional array of dimensions d1... "],
["Buffer", "Buffer.html", "reset", "Buffer.html#VALreset", "<div class=\"info\">  Empty the buffer and deallocate the internal byte sequence holding the buffer contents, replacing it with the initial internal byte sequence of length <code class=\"code\">n</code> that was allocated by <a href=\"Buffer.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Buffer</span>.create</code></a> <code class=\"code\">n</code>. </div>", "  Empty the buffer and deallocate the internal byte sequence holding the buffer contents, replacing it with the initial internal byte sequence of length n that was allocated by Buffer.create n. "],
["Hashtbl", "Hashtbl.html", "reset", "Hashtbl.html#VALreset", "<div class=\"info\">  Empty a hash table and shrink the size of the bucket table to its initial size. </div>", "  Empty a hash table and shrink the size of the bucket table to its initial size. "],
["Hashtbl.S", "Hashtbl.S.html", "reset", "Hashtbl.S.html#VALreset", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "reset", "Hashtbl.SeededS.html#VALreset", "", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "reset", "MoreLabels.Hashtbl.html#VALreset", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "reset", "MoreLabels.Hashtbl.S.html#VALreset", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "reset", "MoreLabels.Hashtbl.SeededS.html#VALreset", "", ""],
["Obj", "Obj.html", "repr", "Obj.html#VALrepr", "", ""],
["Str", "Str.html", "replace_matched", "Str.html#VALreplace_matched", "<div class=\"info\">  <code class=\"code\">replace_matched repl s</code> returns the replacement text <code class=\"code\">repl</code> in which <code class=\"code\">\\1</code>, <code class=\"code\">\\2</code>, etc. </div>", "  replace_matched repl s returns the replacement text repl in which \\1, \\2, etc. "],
["Str", "Str.html", "replace_first", "Str.html#VALreplace_first", "<div class=\"info\">  Same as <a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a>, except that only the first substring matching the regular expression is replaced. </div>", "  Same as Str.global_replace, except that only the first substring matching the regular expression is replaced. "],
["Hashtbl", "Hashtbl.html", "replace", "Hashtbl.html#VALreplace", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace tbl x y</code> replaces the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code> by a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>. </div>", "  Hashtbl.replace tbl x y replaces the current binding of x in tbl by a binding of x to y. "],
["Hashtbl.S", "Hashtbl.S.html", "replace", "Hashtbl.S.html#VALreplace", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "replace", "Hashtbl.SeededS.html#VALreplace", "", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "replace", "MoreLabels.Hashtbl.html#VALreplace", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "replace", "MoreLabels.Hashtbl.S.html#VALreplace", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "replace", "MoreLabels.Hashtbl.SeededS.html#VALreplace", "", ""],
["Sys", "Sys.html", "rename", "Sys.html#VALrename", "<div class=\"info\">  Rename a file. </div>", "  Rename a file. "],
["Unix", "Unix.html", "rename", "Unix.html#VALrename", "<div class=\"info\">  <code class=\"code\">rename old <span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>. </div>", "  rename old new changes the name of a file from old to new. "],
["UnixLabels", "UnixLabels.html", "rename", "UnixLabels.html#VALrename", "<div class=\"info\">  <code class=\"code\">rename old <span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>. </div>", "  rename old new changes the name of a file from old to new. "],
["List", "List.html", "remove_assq", "List.html#VALremove_assq", "<div class=\"info\">  Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead of structural equality to compare keys. </div>", "  Same as List.remove_assoc, but uses physical equality instead of structural equality to compare keys. "],
["ListLabels", "ListLabels.html", "remove_assq", "ListLabels.html#VALremove_assq", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.remove_assoc</code></a>, but uses physical equality instead of structural equality to compare keys. </div>", "  Same as ListLabels.remove_assoc, but uses physical equality instead of structural equality to compare keys. "],
["List", "List.html", "remove_assoc", "List.html#VALremove_assoc", "<div class=\"info\">  <code class=\"code\">remove_assoc a l</code> returns the list of pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any. </div>", "  remove_assoc a l returns the list of pairs l without the first pair with key a, if any. "],
["ListLabels", "ListLabels.html", "remove_assoc", "ListLabels.html#VALremove_assoc", "<div class=\"info\">  <code class=\"code\">remove_assoc a l</code> returns the list of pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any. </div>", "  remove_assoc a l returns the list of pairs l without the first pair with key a, if any. "],
["Hashtbl", "Hashtbl.html", "remove", "Hashtbl.html#VALremove", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove tbl x</code> removes the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>, restoring the previous binding if it exists. </div>", "  Hashtbl.remove tbl x removes the current binding of x in tbl, restoring the previous binding if it exists. "],
["Hashtbl.S", "Hashtbl.S.html", "remove", "Hashtbl.S.html#VALremove", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "remove", "Hashtbl.SeededS.html#VALremove", "", ""],
["Map.S", "Map.S.html", "remove", "Map.S.html#VALremove", "<div class=\"info\">  <code class=\"code\">remove x m</code> returns a map containing the same bindings as <code class=\"code\">m</code>, except for <code class=\"code\">x</code> which is unbound in the returned map. </div>", "  remove x m returns a map containing the same bindings as m, except for x which is unbound in the returned map. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "remove", "MoreLabels.Hashtbl.html#VALremove", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "remove", "MoreLabels.Hashtbl.S.html#VALremove", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "remove", "MoreLabels.Hashtbl.SeededS.html#VALremove", "", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "remove", "MoreLabels.Map.S.html#VALremove", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "remove", "MoreLabels.Set.S.html#VALremove", "", ""],
["Set.S", "Set.S.html", "remove", "Set.S.html#VALremove", "<div class=\"info\">  <code class=\"code\">remove x s</code> returns a set containing all elements of <code class=\"code\">s</code>, except <code class=\"code\">x</code>. </div>", "  remove x s returns a set containing all elements of s, except x. "],
["Sys", "Sys.html", "remove", "Sys.html#VALremove", "<div class=\"info\">  Remove the given file name from the file system. </div>", "  Remove the given file name from the file system. "],
["Weak.S", "Weak.S.html", "remove", "Weak.S.html#VALremove", "<div class=\"info\">  <code class=\"code\">remove t x</code> removes from <code class=\"code\">t</code> one instance of <code class=\"code\">x</code>. </div>", "  remove t x removes from t one instance of x. "],
["Graphics", "Graphics.html", "remember_mode", "Graphics.html#VALremember_mode", "<div class=\"info\">  Set remember mode on or off. </div>", "  Set remember mode on or off. "],
["Int32", "Int32.html", "rem", "Int32.html#VALrem", "<div class=\"info\">  Integer remainder. </div>", "  Integer remainder. "],
["Int64", "Int64.html", "rem", "Int64.html#VALrem", "<div class=\"info\">  Integer remainder. </div>", "  Integer remainder. "],
["Nativeint", "Nativeint.html", "rem", "Nativeint.html#VALrem", "<div class=\"info\">  Integer remainder. </div>", "  Integer remainder. "],
["Printexc", "Printexc.html", "register_printer", "Printexc.html#VALregister_printer", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.register_printer fn</code> registers <code class=\"code\">fn</code> as an exception printer. </div>", "  Printexc.register_printer fn registers fn as an exception printer. "],
["Callback", "Callback.html", "register_exception", "Callback.html#VALregister_exception", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Callback</span>.register_exception n exn</code> registers the exception contained in the exception value <code class=\"code\">exn</code> under the name <code class=\"code\">n</code>. </div>", "  Callback.register_exception n exn registers the exception contained in the exception value exn under the name n. "],
["Callback", "Callback.html", "register", "Callback.html#VALregister", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Callback</span>.register n v</code> registers the value <code class=\"code\">v</code> under the name <code class=\"code\">n</code>. </div>", "  Callback.register n v registers the value v under the name n. "],
["Str", "Str.html", "regexp_string_case_fold", "Str.html#VALregexp_string_case_fold", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string_case_fold</code> is similar to <a href=\"Str.html#VALregexp_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string</code></a>, but the regexp matches in a case-insensitive way. </div>", "  Str.regexp_string_case_fold is similar to Str.regexp_string, but the regexp matches in a case-insensitive way. "],
["Str", "Str.html", "regexp_string", "Str.html#VALregexp_string", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string s</code> returns a regular expression that matches exactly <code class=\"code\">s</code> and nothing else. </div>", "  Str.regexp_string s returns a regular expression that matches exactly s and nothing else. "],
["Str", "Str.html", "regexp_case_fold", "Str.html#VALregexp_case_fold", "<div class=\"info\">  Same as <code class=\"code\">regexp</code>, but the compiled expression will match text in a case-insensitive way: uppercase and lowercase letters will be considered equivalent. </div>", "  Same as regexp, but the compiled expression will match text in a case-insensitive way: uppercase and lowercase letters will be considered equivalent. "],
["Str", "Str.html", "regexp", "Str.html#VALregexp", "<div class=\"info\">  Compile a regular expression. </div>", "  Compile a regular expression. "],
["Pervasives", "Pervasives.html", "ref", "Pervasives.html#VALref", "<div class=\"info\">  Return a fresh reference containing the given value. </div>", "  Return a fresh reference containing the given value. "],
["Graphics", "Graphics.html", "red", "Graphics.html#VALred", "", ""],
["ThreadUnix", "ThreadUnix.html", "recvfrom", "ThreadUnix.html#VALrecvfrom", "", ""],
["Unix", "Unix.html", "recvfrom", "Unix.html#VALrecvfrom", "<div class=\"info\">  Receive data from an unconnected socket. </div>", "  Receive data from an unconnected socket. "],
["UnixLabels", "UnixLabels.html", "recvfrom", "UnixLabels.html#VALrecvfrom", "<div class=\"info\">  Receive data from an unconnected socket. </div>", "  Receive data from an unconnected socket. "],
["ThreadUnix", "ThreadUnix.html", "recv", "ThreadUnix.html#VALrecv", "", ""],
["Unix", "Unix.html", "recv", "Unix.html#VALrecv", "<div class=\"info\">  Receive data from a connected socket. </div>", "  Receive data from a connected socket. "],
["UnixLabels", "UnixLabels.html", "recv", "UnixLabels.html#VALrecv", "<div class=\"info\">  Receive data from a connected socket. </div>", "  Receive data from a connected socket. "],
["Printexc", "Printexc.html", "record_backtrace", "Printexc.html#VALrecord_backtrace", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.record_backtrace b</code> turns recording of exception backtraces on (if <code class=\"code\">b = <span class=\"keyword\">true</span></code>) or off (if <code class=\"code\">b = <span class=\"keyword\">false</span></code>). </div>", "  Printexc.record_backtrace b turns recording of exception backtraces on (if b = true) or off (if b = false). "],
["Event", "Event.html", "receive", "Event.html#VALreceive", "<div class=\"info\">  <code class=\"code\">receive ch</code> returns the event consisting in receiving a value from the channel <code class=\"code\">ch</code>. </div>", "  receive ch returns the event consisting in receiving a value from the channel ch. "],
["CamlinternalFormat", "CamlinternalFormat.html", "recast", "CamlinternalFormat.html#VALrecast", "", ""],
["Pervasives", "Pervasives.html", "really_input_string", "Pervasives.html#VALreally_input_string", "<div class=\"info\">  <code class=\"code\">really_input_string ic len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code> and returns them in a new string. </div>", "  really_input_string ic len reads len characters from channel ic and returns them in a new string. "],
["Pervasives", "Pervasives.html", "really_input", "Pervasives.html#VALreally_input", "<div class=\"info\">  <code class=\"code\">really_input ic buf pos len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code>, storing them in byte sequence <code class=\"code\">buf</code>, starting at character number <code class=\"code\">pos</code>. </div>", "  really_input ic buf pos len reads len characters from channel ic, storing them in byte sequence buf, starting at character number pos. "],
["Unix", "Unix.html", "readlink", "Unix.html#VALreadlink", "<div class=\"info\">  Read the contents of a link. </div>", "  Read the contents of a link. "],
["UnixLabels", "UnixLabels.html", "readlink", "UnixLabels.html#VALreadlink", "<div class=\"info\">  Read the contents of a link. </div>", "  Read the contents of a link. "],
["Sys", "Sys.html", "readdir", "Sys.html#VALreaddir", "<div class=\"info\">  Return the names of all files present in the given directory. </div>", "  Return the names of all files present in the given directory. "],
["Unix", "Unix.html", "readdir", "Unix.html#VALreaddir", "<div class=\"info\">  Return the next entry in a directory. </div>", "  Return the next entry in a directory. "],
["UnixLabels", "UnixLabels.html", "readdir", "UnixLabels.html#VALreaddir", "<div class=\"info\">  Return the next entry in a directory. </div>", "  Return the next entry in a directory. "],
["Pervasives", "Pervasives.html", "read_line", "Pervasives.html#VALread_line", "<div class=\"info\">  Flush standard output, then read characters from standard input until a newline character is encountered. </div>", "  Flush standard output, then read characters from standard input until a newline character is encountered. "],
["Graphics", "Graphics.html", "read_key", "Graphics.html#VALread_key", "<div class=\"info\">  Wait for a key to be pressed, and return the corresponding character. </div>", "  Wait for a key to be pressed, and return the corresponding character. "],
["Pervasives", "Pervasives.html", "read_int", "Pervasives.html#VALread_int", "<div class=\"info\">  Flush standard output, then read one line from standard input and convert it to an integer. </div>", "  Flush standard output, then read one line from standard input and convert it to an integer. "],
["Pervasives", "Pervasives.html", "read_float", "Pervasives.html#VALread_float", "<div class=\"info\">  Flush standard output, then read one line from standard input and convert it to a floating-point number. </div>", "  Flush standard output, then read one line from standard input and convert it to a floating-point number. "],
["ThreadUnix", "ThreadUnix.html", "read", "ThreadUnix.html#VALread", "", ""],
["Unix", "Unix.html", "read", "Unix.html#VALread", "<div class=\"info\">  <code class=\"code\">read fd buff ofs len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>, storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>. </div>", "  read fd buff ofs len reads len bytes from descriptor fd, storing them in byte sequence buff, starting at position ofs in buff. "],
["UnixLabels", "UnixLabels.html", "read", "UnixLabels.html#VALread", "<div class=\"info\">  <code class=\"code\">read fd buff ofs len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>, storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in <code class=\"code\">buff</code>. </div>", "  read fd buff ofs len reads len bytes from descriptor fd, storing them in byte sequence buff, starting at position ofs in buff. "],
["Bytes", "Bytes.html", "rcontains_from", "Bytes.html#VALrcontains_from", "<div class=\"info\">  <code class=\"code\">rcontains_from s stop c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>. </div>", "  rcontains_from s stop c tests if byte c appears in s before position stop+1. "],
["BytesLabels", "BytesLabels.html", "rcontains_from", "BytesLabels.html#VALrcontains_from", "<div class=\"info\">  <code class=\"code\">rcontains_from s stop c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>. </div>", "  rcontains_from s stop c tests if byte c appears in s before position stop+1. "],
["StringLabels", "StringLabels.html", "rcontains_from", "StringLabels.html#VALrcontains_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from s stop c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>. </div>", "  String.rcontains_from s stop c tests if character c appears in s before position stop+1. "],
["String", "String.html", "rcontains_from", "String.html#VALrcontains_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from s stop c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>. </div>", "  String.rcontains_from s stop c tests if character c appears in s before position stop+1. "],
["Printexc", "Printexc.html", "raw_backtrace_to_string", "Printexc.html#VALraw_backtrace_to_string", "<div class=\"info\">  Return a string from a raw backtrace, in the same format <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace</code> uses. </div>", "  Return a string from a raw backtrace, in the same format Printexc.get_backtrace uses. "],
["Printexc", "Printexc.html", "raw_backtrace_length", "Printexc.html#VALraw_backtrace_length", "<div class=\"info\">  <code class=\"code\">raw_backtrace_length bckt</code> returns the number of slots in the backtrace <code class=\"code\">bckt</code>. </div>", "  raw_backtrace_length bckt returns the number of slots in the backtrace bckt. "],
["Num", "Num.html", "ratio_of_num", "Num.html#VALratio_of_num", "", ""],
["Hashtbl", "Hashtbl.html", "randomize", "Hashtbl.html#VALrandomize", "<div class=\"info\">  After a call to <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code>, hash tables are created in randomized mode by default: <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a> returns randomized hash tables, unless the <code class=\"code\">~random:<span class=\"keyword\">false</span></code> optional parameter is given. </div>", "  After a call to Hashtbl.randomize(), hash tables are created in randomized mode by default: Hashtbl.create returns randomized hash tables, unless the ~random:false optional parameter is given. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "randomize", "MoreLabels.Hashtbl.html#VALrandomize", "", ""],
["Pervasives", "Pervasives.html", "raise_notrace", "Pervasives.html#VALraise_notrace", "<div class=\"info\">  A faster version <code class=\"code\">raise</code> which does not record the backtrace. </div>", "  A faster version raise which does not record the backtrace. "],
["Pervasives", "Pervasives.html", "raise", "Pervasives.html#VALraise", "<div class=\"info\">  Raise the given exception value </div>", "  Raise the given exception value "],
["Filename", "Filename.html", "quote", "Filename.html#VALquote", "<div class=\"info\">  Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters. </div>", "  Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters. "],
["Str", "Str.html", "quote", "Str.html#VALquote", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Str</span>.quote s</code> returns a regexp string that matches exactly <code class=\"code\">s</code> and nothing else. </div>", "  Str.quote s returns a regexp string that matches exactly s and nothing else. "],
["Big_int", "Big_int.html", "quomod_big_int", "Big_int.html#VALquomod_big_int", "<div class=\"info\">  Euclidean division of two big integers. </div>", "  Euclidean division of two big integers. "],
["Num", "Num.html", "quo_num", "Num.html#VALquo_num", "<div class=\"info\">  Euclidean division: quotient. </div>", "  Euclidean division: quotient. "],
["Gc", "Gc.html", "quick_stat", "Gc.html#VALquick_stat", "<div class=\"info\">  Same as <code class=\"code\">stat</code> except that <code class=\"code\">live_words</code>, <code class=\"code\">live_blocks</code>, <code class=\"code\">free_words</code>, <code class=\"code\">free_blocks</code>, <code class=\"code\">largest_free</code>, and <code class=\"code\">fragments</code> are set to 0. </div>", "  Same as stat except that live_words, live_blocks, free_words, free_blocks, largest_free, and fragments are set to 0. "],
["Unix", "Unix.html", "putenv", "Unix.html#VALputenv", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Unix</span>.putenv name value</code> sets the value associated to a variable in the process environment. </div>", "  Unix.putenv name value sets the value associated to a variable in the process environment. "],
["UnixLabels", "UnixLabels.html", "putenv", "UnixLabels.html#VALputenv", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Unix</span>.putenv name value</code> sets the value associated to a variable in the process environment. </div>", "  Unix.putenv name value sets the value associated to a variable in the process environment. "],
["Queue", "Queue.html", "push", "Queue.html#VALpush", "<div class=\"info\">  <code class=\"code\">push</code> is a synonym for <code class=\"code\">add</code>. </div>", "  push is a synonym for add. "],
["Stack", "Stack.html", "push", "Stack.html#VALpush", "<div class=\"info\">  <code class=\"code\">push x s</code> adds the element <code class=\"code\">x</code> at the top of stack <code class=\"code\">s</code>. </div>", "  push x s adds the element x at the top of stack s. "],
["CamlinternalOO", "CamlinternalOO.html", "public_method_label", "CamlinternalOO.html#VALpublic_method_label", "", ""],
["Dynlink", "Dynlink.html", "prohibit", "Dynlink.html#VALprohibit", "<div class=\"info\">  <code class=\"code\">prohibit units</code> prohibits dynamically-linked units from referencing the units named in list <code class=\"code\">units</code>. </div>", "  prohibit units prohibits dynamically-linked units from referencing the units named in list units. "],
["Format", "Format.html", "printf", "Format.html#VALprintf", "<div class=\"info\">  Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">std_formatter</code>. </div>", "  Same as fprintf above, but output on std_formatter. "],
["Printf", "Printf.html", "printf", "Printf.html#VALprintf", "<div class=\"info\">  Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stdout</code>. </div>", "  Same as Printf.fprintf, but output on stdout. "],
["Format", "Format.html", "print_tbreak", "Format.html#VALprint_tbreak", "<div class=\"info\">  Break hint in a tabulation box. </div>", "  Break hint in a tabulation box. "],
["Format", "Format.html", "print_tab", "Format.html#VALprint_tab", "<div class=\"info\">  <code class=\"code\">print_tab ()</code> is equivalent to <code class=\"code\">print_tbreak 0 0</code>. </div>", "  print_tab () is equivalent to print_tbreak 0 0. "],
["Format", "Format.html", "print_string", "Format.html#VALprint_string", "<div class=\"info\">  <code class=\"code\">print_string str</code> prints <code class=\"code\">str</code> in the current box. </div>", "  print_string str prints str in the current box. "],
["Pervasives", "Pervasives.html", "print_string", "Pervasives.html#VALprint_string", "<div class=\"info\">  Print a string on standard output. </div>", "  Print a string on standard output. "],
["Gc", "Gc.html", "print_stat", "Gc.html#VALprint_stat", "<div class=\"info\">  Print the current values of the memory management counters (in human-readable form) into the channel argument. </div>", "  Print the current values of the memory management counters (in human-readable form) into the channel argument. "],
["Format", "Format.html", "print_space", "Format.html#VALprint_space", "<div class=\"info\">  <code class=\"code\">print_space ()</code> is used to separate items (typically to print a space between two words). </div>", "  print_space () is used to separate items (typically to print a space between two words). "],
["Printexc", "Printexc.html", "print_raw_backtrace", "Printexc.html#VALprint_raw_backtrace", "<div class=\"info\">  Print a raw backtrace in the same format <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> uses. </div>", "  Print a raw backtrace in the same format Printexc.print_backtrace uses. "],
["Format", "Format.html", "print_newline", "Format.html#VALprint_newline", "<div class=\"info\">  Equivalent to <code class=\"code\">print_flush</code> followed by a new line. </div>", "  Equivalent to print_flush followed by a new line. "],
["Pervasives", "Pervasives.html", "print_newline", "Pervasives.html#VALprint_newline", "<div class=\"info\">  Print a newline character on standard output, and flush standard output. </div>", "  Print a newline character on standard output, and flush standard output. "],
["Format", "Format.html", "print_int", "Format.html#VALprint_int", "<div class=\"info\">  Prints an integer in the current box. </div>", "  Prints an integer in the current box. "],
["Pervasives", "Pervasives.html", "print_int", "Pervasives.html#VALprint_int", "<div class=\"info\">  Print an integer, in decimal, on standard output. </div>", "  Print an integer, in decimal, on standard output. "],
["Format", "Format.html", "print_if_newline", "Format.html#VALprint_if_newline", "<div class=\"info\">  Executes the next formatting command if the preceding line has just been split. </div>", "  Executes the next formatting command if the preceding line has just been split. "],
["Format", "Format.html", "print_flush", "Format.html#VALprint_flush", "<div class=\"info\">  Flushes the pretty printer: all opened boxes are closed, and all pending text is displayed. </div>", "  Flushes the pretty printer: all opened boxes are closed, and all pending text is displayed. "],
["Format", "Format.html", "print_float", "Format.html#VALprint_float", "<div class=\"info\">  Prints a floating point number in the current box. </div>", "  Prints a floating point number in the current box. "],
["Pervasives", "Pervasives.html", "print_float", "Pervasives.html#VALprint_float", "<div class=\"info\">  Print a floating-point number, in decimal, on standard output. </div>", "  Print a floating-point number, in decimal, on standard output. "],
["Pervasives", "Pervasives.html", "print_endline", "Pervasives.html#VALprint_endline", "<div class=\"info\">  Print a string, followed by a newline character, on standard output and flush standard output. </div>", "  Print a string, followed by a newline character, on standard output and flush standard output. "],
["Format", "Format.html", "print_cut", "Format.html#VALprint_cut", "<div class=\"info\">  <code class=\"code\">print_cut ()</code> is used to mark a good break position. </div>", "  print_cut () is used to mark a good break position. "],
["Format", "Format.html", "print_char", "Format.html#VALprint_char", "<div class=\"info\">  Prints a character in the current box. </div>", "  Prints a character in the current box. "],
["Pervasives", "Pervasives.html", "print_char", "Pervasives.html#VALprint_char", "<div class=\"info\">  Print a character on standard output. </div>", "  Print a character on standard output. "],
["Pervasives", "Pervasives.html", "print_bytes", "Pervasives.html#VALprint_bytes", "<div class=\"info\">  Print a byte sequence on standard output. </div>", "  Print a byte sequence on standard output. "],
["Format", "Format.html", "print_break", "Format.html#VALprint_break", "<div class=\"info\">  Inserts a break hint in a pretty-printing box. </div>", "  Inserts a break hint in a pretty-printing box. "],
["Format", "Format.html", "print_bool", "Format.html#VALprint_bool", "<div class=\"info\">  Prints a boolean in the current box. </div>", "  Prints a boolean in the current box. "],
["Printexc", "Printexc.html", "print_backtrace", "Printexc.html#VALprint_backtrace", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace oc</code> prints an exception backtrace on the output channel <code class=\"code\">oc</code>. </div>", "  Printexc.print_backtrace oc prints an exception backtrace on the output channel oc. "],
["Format", "Format.html", "print_as", "Format.html#VALprint_as", "<div class=\"info\">  <code class=\"code\">print_as len str</code> prints <code class=\"code\">str</code> in the current box. </div>", "  print_as len str prints str in the current box. "],
["Printexc", "Printexc.html", "print", "Printexc.html#VALprint", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.print fn x</code> applies <code class=\"code\">fn</code> to <code class=\"code\">x</code> and returns the result. </div>", "  Printexc.print fn x applies fn to x and returns the result. "],
["Pervasives", "Pervasives.html", "prerr_string", "Pervasives.html#VALprerr_string", "<div class=\"info\">  Print a string on standard error. </div>", "  Print a string on standard error. "],
["Pervasives", "Pervasives.html", "prerr_newline", "Pervasives.html#VALprerr_newline", "<div class=\"info\">  Print a newline character on standard error, and flush standard error. </div>", "  Print a newline character on standard error, and flush standard error. "],
["Pervasives", "Pervasives.html", "prerr_int", "Pervasives.html#VALprerr_int", "<div class=\"info\">  Print an integer, in decimal, on standard error. </div>", "  Print an integer, in decimal, on standard error. "],
["Pervasives", "Pervasives.html", "prerr_float", "Pervasives.html#VALprerr_float", "<div class=\"info\">  Print a floating-point number, in decimal, on standard error. </div>", "  Print a floating-point number, in decimal, on standard error. "],
["Pervasives", "Pervasives.html", "prerr_endline", "Pervasives.html#VALprerr_endline", "<div class=\"info\">  Print a string, followed by a newline character on standard error and flush standard error. </div>", "  Print a string, followed by a newline character on standard error and flush standard error. "],
["Pervasives", "Pervasives.html", "prerr_char", "Pervasives.html#VALprerr_char", "<div class=\"info\">  Print a character on standard error. </div>", "  Print a character on standard error. "],
["Pervasives", "Pervasives.html", "prerr_bytes", "Pervasives.html#VALprerr_bytes", "<div class=\"info\">  Print a byte sequence on standard error. </div>", "  Print a byte sequence on standard error. "],
["Num", "Num.html", "pred_num", "Num.html#VALpred_num", "<div class=\"info\">  <code class=\"code\">pred n</code> is <code class=\"code\">n-1</code> </div>", "  pred n is n-1 "],
["Big_int", "Big_int.html", "pred_big_int", "Big_int.html#VALpred_big_int", "<div class=\"info\">  Predecessor (subtract 1). </div>", "  Predecessor (subtract 1). "],
["Int32", "Int32.html", "pred", "Int32.html#VALpred", "<div class=\"info\">  Predecessor. </div>", "  Predecessor. "],
["Int64", "Int64.html", "pred", "Int64.html#VALpred", "<div class=\"info\">  Predecessor. </div>", "  Predecessor. "],
["Nativeint", "Nativeint.html", "pred", "Nativeint.html#VALpred", "<div class=\"info\">  Predecessor. </div>", "  Predecessor. "],
["Pervasives", "Pervasives.html", "pred", "Pervasives.html#VALpred", "<div class=\"info\">  <code class=\"code\">pred x</code> is <code class=\"code\">x - 1</code>. </div>", "  pred x is x - 1. "],
["Format", "Format.html", "pp_set_tags", "Format.html#VALpp_set_tags", "", ""],
["Format", "Format.html", "pp_set_tab", "Format.html#VALpp_set_tab", "", ""],
["Format", "Format.html", "pp_set_print_tags", "Format.html#VALpp_set_print_tags", "", ""],
["Format", "Format.html", "pp_set_max_indent", "Format.html#VALpp_set_max_indent", "", ""],
["Format", "Format.html", "pp_set_max_boxes", "Format.html#VALpp_set_max_boxes", "", ""],
["Format", "Format.html", "pp_set_mark_tags", "Format.html#VALpp_set_mark_tags", "", ""],
["Format", "Format.html", "pp_set_margin", "Format.html#VALpp_set_margin", "", ""],
["Format", "Format.html", "pp_set_formatter_tag_functions", "Format.html#VALpp_set_formatter_tag_functions", "", ""],
["Format", "Format.html", "pp_set_formatter_output_functions", "Format.html#VALpp_set_formatter_output_functions", "", ""],
["Format", "Format.html", "pp_set_formatter_out_functions", "Format.html#VALpp_set_formatter_out_functions", "", ""],
["Format", "Format.html", "pp_set_formatter_out_channel", "Format.html#VALpp_set_formatter_out_channel", "", ""],
["Format", "Format.html", "pp_set_ellipsis_text", "Format.html#VALpp_set_ellipsis_text", "", ""],
["Format", "Format.html", "pp_set_all_formatter_output_functions", "Format.html#VALpp_set_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Format", "Format.html", "pp_print_text", "Format.html#VALpp_print_text", "<div class=\"info\">  <code class=\"code\">pp_print_text ppf s</code> prints <code class=\"code\">s</code> with spaces and newlines respectively printed with <a href=\"Format.html#VALpp_print_space\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_space</code></a> and <a href=\"Format.html#VALpp_force_newline\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_force_newline</code></a>. </div>", "  pp_print_text ppf s prints s with spaces and newlines respectively printed with Format.pp_print_space and Format.pp_force_newline. "],
["Format", "Format.html", "pp_print_tbreak", "Format.html#VALpp_print_tbreak", "", ""],
["Format", "Format.html", "pp_print_tab", "Format.html#VALpp_print_tab", "", ""],
["Format", "Format.html", "pp_print_string", "Format.html#VALpp_print_string", "", ""],
["Format", "Format.html", "pp_print_space", "Format.html#VALpp_print_space", "", ""],
["Format", "Format.html", "pp_print_newline", "Format.html#VALpp_print_newline", "", ""],
["Format", "Format.html", "pp_print_list", "Format.html#VALpp_print_list", "<div class=\"info\">  <code class=\"code\">pp_print_list ?pp_sep pp_v ppf l</code> prints the list <code class=\"code\">l</code>. </div>", "  pp_print_list ?pp_sep pp_v ppf l prints the list l. "],
["Format", "Format.html", "pp_print_int", "Format.html#VALpp_print_int", "", ""],
["Format", "Format.html", "pp_print_if_newline", "Format.html#VALpp_print_if_newline", "", ""],
["Format", "Format.html", "pp_print_flush", "Format.html#VALpp_print_flush", "", ""],
["Format", "Format.html", "pp_print_float", "Format.html#VALpp_print_float", "", ""],
["Format", "Format.html", "pp_print_cut", "Format.html#VALpp_print_cut", "", ""],
["Format", "Format.html", "pp_print_char", "Format.html#VALpp_print_char", "", ""],
["Format", "Format.html", "pp_print_break", "Format.html#VALpp_print_break", "", ""],
["Format", "Format.html", "pp_print_bool", "Format.html#VALpp_print_bool", "", ""],
["Format", "Format.html", "pp_print_as", "Format.html#VALpp_print_as", "", ""],
["Format", "Format.html", "pp_over_max_boxes", "Format.html#VALpp_over_max_boxes", "", ""],
["Format", "Format.html", "pp_open_vbox", "Format.html#VALpp_open_vbox", "", ""],
["Format", "Format.html", "pp_open_tbox", "Format.html#VALpp_open_tbox", "", ""],
["Format", "Format.html", "pp_open_tag", "Format.html#VALpp_open_tag", "", ""],
["Format", "Format.html", "pp_open_hvbox", "Format.html#VALpp_open_hvbox", "", ""],
["Format", "Format.html", "pp_open_hovbox", "Format.html#VALpp_open_hovbox", "", ""],
["Format", "Format.html", "pp_open_hbox", "Format.html#VALpp_open_hbox", "", ""],
["Format", "Format.html", "pp_open_box", "Format.html#VALpp_open_box", "", ""],
["Format", "Format.html", "pp_get_print_tags", "Format.html#VALpp_get_print_tags", "", ""],
["Format", "Format.html", "pp_get_max_indent", "Format.html#VALpp_get_max_indent", "", ""],
["Format", "Format.html", "pp_get_max_boxes", "Format.html#VALpp_get_max_boxes", "", ""],
["Format", "Format.html", "pp_get_mark_tags", "Format.html#VALpp_get_mark_tags", "", ""],
["Format", "Format.html", "pp_get_margin", "Format.html#VALpp_get_margin", "", ""],
["Format", "Format.html", "pp_get_formatter_tag_functions", "Format.html#VALpp_get_formatter_tag_functions", "", ""],
["Format", "Format.html", "pp_get_formatter_output_functions", "Format.html#VALpp_get_formatter_output_functions", "", ""],
["Format", "Format.html", "pp_get_formatter_out_functions", "Format.html#VALpp_get_formatter_out_functions", "<div class=\"info\">  These functions are the basic ones: usual functions operating on the standard formatter are defined via partial evaluation of these primitives. </div>", "  These functions are the basic ones: usual functions operating on the standard formatter are defined via partial evaluation of these primitives. "],
["Format", "Format.html", "pp_get_ellipsis_text", "Format.html#VALpp_get_ellipsis_text", "", ""],
["Format", "Format.html", "pp_get_all_formatter_output_functions", "Format.html#VALpp_get_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Format", "Format.html", "pp_force_newline", "Format.html#VALpp_force_newline", "", ""],
["Format", "Format.html", "pp_close_tbox", "Format.html#VALpp_close_tbox", "", ""],
["Format", "Format.html", "pp_close_tag", "Format.html#VALpp_close_tag", "", ""],
["Format", "Format.html", "pp_close_box", "Format.html#VALpp_close_box", "", ""],
["Num", "Num.html", "power_num", "Num.html#VALpower_num", "<div class=\"info\">  Exponentiation </div>", "  Exponentiation "],
["Big_int", "Big_int.html", "power_int_positive_int", "Big_int.html#VALpower_int_positive_int", "", ""],
["Big_int", "Big_int.html", "power_int_positive_big_int", "Big_int.html#VALpower_int_positive_big_int", "", ""],
["Big_int", "Big_int.html", "power_big_int_positive_int", "Big_int.html#VALpower_big_int_positive_int", "", ""],
["Big_int", "Big_int.html", "power_big_int_positive_big_int", "Big_int.html#VALpower_big_int_positive_big_int", "<div class=\"info\">  Exponentiation functions. </div>", "  Exponentiation functions. "],
["Complex", "Complex.html", "pow", "Complex.html#VALpow", "<div class=\"info\">  Power function. </div>", "  Power function. "],
["Pervasives", "Pervasives.html", "pos_out", "Pervasives.html#VALpos_out", "<div class=\"info\">  Return the current writing position for the given channel. </div>", "  Return the current writing position for the given channel. "],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "pos_out", "Pervasives.LargeFile.html#VALpos_out", "", ""],
["Pervasives", "Pervasives.html", "pos_in", "Pervasives.html#VALpos_in", "<div class=\"info\">  Return the current reading position for the given channel. </div>", "  Return the current reading position for the given channel. "],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "pos_in", "Pervasives.LargeFile.html#VALpos_in", "", ""],
["Queue", "Queue.html", "pop", "Queue.html#VALpop", "<div class=\"info\">  <code class=\"code\">pop</code> is a synonym for <code class=\"code\">take</code>. </div>", "  pop is a synonym for take. "],
["Stack", "Stack.html", "pop", "Stack.html#VALpop", "<div class=\"info\">  <code class=\"code\">pop s</code> removes and returns the topmost element in stack <code class=\"code\">s</code>, or raises <code class=\"code\"><span class=\"constructor\">Empty</span></code> if the stack is empty. </div>", "  pop s removes and returns the topmost element in stack s, or raises Empty if the stack is empty. "],
["Event", "Event.html", "poll", "Event.html#VALpoll", "<div class=\"info\">  Non-blocking version of <a href=\"Event.html#VALsync\"><code class=\"code\"><span class=\"constructor\">Event</span>.sync</code></a>: offer all the communication possibilities specified in the event to the outside world, and if one can take place immediately, perform it and return <code class=\"code\"><span class=\"constructor\">Some</span> r</code> where <code class=\"code\">r</code> is the result value of that communication. </div>", "  Non-blocking version of Event.sync: offer all the communication possibilities specified in the event to the outside world, and if one can take place immediately, perform it and return Some r where r is the result value of that communication. "],
["Complex", "Complex.html", "polar", "Complex.html#VALpolar", "<div class=\"info\">  <code class=\"code\">polar norm arg</code> returns the complex having norm <code class=\"code\">norm</code> and argument <code class=\"code\">arg</code>. </div>", "  polar norm arg returns the complex having norm norm and argument arg. "],
["Graphics", "Graphics.html", "point_color", "Graphics.html#VALpoint_color", "<div class=\"info\">  Return the color of the given point in the backing store (see \"Double buffering\" below). </div>", "  Return the color of the given point in the backing store (see \"Double buffering\" below). "],
["Graphics", "Graphics.html", "plots", "Graphics.html#VALplots", "<div class=\"info\">  Plot the given points with the current drawing color. </div>", "  Plot the given points with the current drawing color. "],
["Graphics", "Graphics.html", "plot", "Graphics.html#VALplot", "<div class=\"info\">  Plot the given point with the current drawing color. </div>", "  Plot the given point with the current drawing color. "],
["ThreadUnix", "ThreadUnix.html", "pipe", "ThreadUnix.html#VALpipe", "", ""],
["Unix", "Unix.html", "pipe", "Unix.html#VALpipe", "<div class=\"info\">  Create a pipe. </div>", "  Create a pipe. "],
["UnixLabels", "UnixLabels.html", "pipe", "UnixLabels.html#VALpipe", "<div class=\"info\">  Create a pipe. </div>", "  Create a pipe. "],
["Queue", "Queue.html", "peek", "Queue.html#VALpeek", "<div class=\"info\">  <code class=\"code\">peek q</code> returns the first element in queue <code class=\"code\">q</code>, without removing it from the queue, or raises <code class=\"code\"><span class=\"constructor\">Empty</span></code> if the queue is empty. </div>", "  peek q returns the first element in queue q, without removing it from the queue, or raises Empty if the queue is empty. "],
["Stream", "Stream.html", "peek", "Stream.html#VALpeek", "<div class=\"info\">  Return <code class=\"code\"><span class=\"constructor\">Some</span></code> of \"the first element\" of the stream, or <code class=\"code\"><span class=\"constructor\">None</span></code> if the stream is empty. </div>", "  Return Some of \"the first element\" of the stream, or None if the stream is empty. "],
["Unix", "Unix.html", "pause", "Unix.html#VALpause", "<div class=\"info\">  Wait until a non-ignored, non-blocked signal is delivered. </div>", "  Wait until a non-ignored, non-blocked signal is delivered. "],
["UnixLabels", "UnixLabels.html", "pause", "UnixLabels.html#VALpause", "<div class=\"info\">  Wait until a non-ignored, non-blocked signal is delivered. </div>", "  Wait until a non-ignored, non-blocked signal is delivered. "],
["List", "List.html", "partition", "List.html#VALpartition", "<div class=\"info\">  <code class=\"code\">partition p l</code> returns a pair of lists <code class=\"code\">(l1, l2)</code>, where <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>. </div>", "  partition p l returns a pair of lists (l1, l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. "],
["ListLabels", "ListLabels.html", "partition", "ListLabels.html#VALpartition", "<div class=\"info\">  <code class=\"code\">partition p l</code> returns a pair of lists <code class=\"code\">(l1, l2)</code>, where <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>. </div>", "  partition p l returns a pair of lists (l1, l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. "],
["Map.S", "Map.S.html", "partition", "Map.S.html#VALpartition", "<div class=\"info\">  <code class=\"code\">partition p m</code> returns a pair of maps <code class=\"code\">(m1, m2)</code>, where <code class=\"code\">m1</code> contains all the bindings of <code class=\"code\">s</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">m2</code> is the map with all the bindings of <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>. </div>", "  partition p m returns a pair of maps (m1, m2), where m1 contains all the bindings of s that satisfy the predicate p, and m2 is the map with all the bindings of s that do not satisfy p. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "partition", "MoreLabels.Map.S.html#VALpartition", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "partition", "MoreLabels.Set.S.html#VALpartition", "", ""],
["Set.S", "Set.S.html", "partition", "Set.S.html#VALpartition", "<div class=\"info\">  <code class=\"code\">partition p s</code> returns a pair of sets <code class=\"code\">(s1, s2)</code>, where <code class=\"code\">s1</code> is the set of all the elements of <code class=\"code\">s</code> that satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">s2</code> is the set of all the elements of <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>. </div>", "  partition p s returns a pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p. "],
["Arg", "Arg.html", "parse_dynamic", "Arg.html#VALparse_dynamic", "<div class=\"info\">  Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\">speclist</code> argument is a reference and may be updated during the parsing. </div>", "  Same as Arg.parse, except that the speclist argument is a reference and may be updated during the parsing. "],
["Arg", "Arg.html", "parse_argv_dynamic", "Arg.html#VALparse_argv_dynamic", "<div class=\"info\">  Same as <a href=\"Arg.html#VALparse_argv\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code></a>, except that the <code class=\"code\">speclist</code> argument is a reference and may be updated during the parsing. </div>", "  Same as Arg.parse_argv, except that the speclist argument is a reference and may be updated during the parsing. "],
["Arg", "Arg.html", "parse_argv", "Arg.html#VALparse_argv", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv ~current args speclist anon_fun usage_msg</code> parses the array <code class=\"code\">args</code> as if it were the command line. </div>", "  Arg.parse_argv ~current args speclist anon_fun usage_msg parses the array args as if it were the command line. "],
["Arg", "Arg.html", "parse", "Arg.html#VALparse", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Arg</span>.parse speclist anon_fun usage_msg</code> parses the command line. </div>", "  Arg.parse speclist anon_fun usage_msg parses the command line. "],
["Filename", "Filename.html", "parent_dir_name", "Filename.html#VALparent_dir_name", "<div class=\"info\">  The conventional name for the parent of the current directory (e.g. </div>", "  The conventional name for the parent of the current directory (e.g. "],
["CamlinternalOO", "CamlinternalOO.html", "params", "CamlinternalOO.html#VALparams", "", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "param_format_of_ignored_format", "CamlinternalFormat.html#VALparam_format_of_ignored_format", "", ""],
["Format", "Format.html", "over_max_boxes", "Format.html#VALover_max_boxes", "<div class=\"info\">  Tests if the maximum number of boxes allowed have already been opened. </div>", "  Tests if the maximum number of boxes allowed have already been opened. "],
["Pervasives", "Pervasives.html", "output_value", "Pervasives.html#VALoutput_value", "<div class=\"info\">  Write the representation of a structured value of any type to a channel. </div>", "  Write the representation of a structured value of any type to a channel. "],
["Pervasives", "Pervasives.html", "output_substring", "Pervasives.html#VALoutput_substring", "<div class=\"info\">  Same as <code class=\"code\">output</code> but take a string as argument instead of a byte sequence. </div>", "  Same as output but take a string as argument instead of a byte sequence. "],
["Pervasives", "Pervasives.html", "output_string", "Pervasives.html#VALoutput_string", "<div class=\"info\">  Write the string on the given output channel. </div>", "  Write the string on the given output channel. "],
["Pervasives", "Pervasives.html", "output_char", "Pervasives.html#VALoutput_char", "<div class=\"info\">  Write the character on the given output channel. </div>", "  Write the character on the given output channel. "],
["Pervasives", "Pervasives.html", "output_bytes", "Pervasives.html#VALoutput_bytes", "<div class=\"info\">  Write the byte sequence on the given output channel. </div>", "  Write the byte sequence on the given output channel. "],
["Pervasives", "Pervasives.html", "output_byte", "Pervasives.html#VALoutput_byte", "<div class=\"info\">  Write one 8-bit integer (as the single character with that code) on the given output channel. </div>", "  Write one 8-bit integer (as the single character with that code) on the given output channel. "],
["Buffer", "Buffer.html", "output_buffer", "Buffer.html#VALoutput_buffer", "<div class=\"info\">  <code class=\"code\">output_buffer oc b</code> writes the current contents of buffer <code class=\"code\">b</code> on the output channel <code class=\"code\">oc</code>. </div>", "  output_buffer oc b writes the current contents of buffer b on the output channel oc. "],
["Pervasives", "Pervasives.html", "output_binary_int", "Pervasives.html#VALoutput_binary_int", "<div class=\"info\">  Write one integer in binary format (4 bytes, big-endian) on the given output channel. </div>", "  Write one integer in binary format (4 bytes, big-endian) on the given output channel. "],
["CamlinternalFormat", "CamlinternalFormat.html", "output_acc", "CamlinternalFormat.html#VALoutput_acc", "", ""],
["Digest", "Digest.html", "output", "Digest.html#VALoutput", "<div class=\"info\">  Write a digest on the given output channel. </div>", "  Write a digest on the given output channel. "],
["Pervasives", "Pervasives.html", "output", "Pervasives.html#VALoutput", "<div class=\"info\">  <code class=\"code\">output oc buf pos len</code> writes <code class=\"code\">len</code> characters from byte sequence <code class=\"code\">buf</code>, starting at offset <code class=\"code\">pos</code>, to the given output channel <code class=\"code\">oc</code>. </div>", "  output oc buf pos len writes len characters from byte sequence buf, starting at offset pos, to the given output channel oc. "],
["Obj", "Obj.html", "out_of_heap_tag", "Obj.html#VALout_of_heap_tag", "", ""],
["Unix", "Unix.html", "out_channel_of_descr", "Unix.html#VALout_channel_of_descr", "<div class=\"info\">  Create an output channel writing on the given descriptor. </div>", "  Create an output channel writing on the given descriptor. "],
["UnixLabels", "UnixLabels.html", "out_channel_of_descr", "UnixLabels.html#VALout_channel_of_descr", "<div class=\"info\">  Create an output channel writing on the given descriptor. </div>", "  Create an output channel writing on the given descriptor. "],
["Pervasives", "Pervasives.html", "out_channel_length", "Pervasives.html#VALout_channel_length", "<div class=\"info\">  Return the size (number of characters) of the regular file on which the given channel is opened. </div>", "  Return the size (number of characters) of the regular file on which the given channel is opened. "],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "out_channel_length", "Pervasives.LargeFile.html#VALout_channel_length", "", ""],
["Sys", "Sys.html", "os_type", "Sys.html#VALos_type", "<div class=\"info\">  Operating system currently executing the OCaml program. </div>", "  Operating system currently executing the OCaml program. "],
["Big_int", "Big_int.html", "or_big_int", "Big_int.html#VALor_big_int", "<div class=\"info\">  Bitwise logical 'or'. </div>", "  Bitwise logical 'or'. "],
["Unix", "Unix.html", "openfile", "Unix.html#VALopenfile", "<div class=\"info\">  Open the named file with the given flags. </div>", "  Open the named file with the given flags. "],
["UnixLabels", "UnixLabels.html", "openfile", "UnixLabels.html#VALopenfile", "<div class=\"info\">  Open the named file with the given flags. </div>", "  Open the named file with the given flags. "],
["Unix", "Unix.html", "opendir", "Unix.html#VALopendir", "<div class=\"info\">  Open a descriptor on a directory </div>", "  Open a descriptor on a directory "],
["UnixLabels", "UnixLabels.html", "opendir", "UnixLabels.html#VALopendir", "<div class=\"info\">  Open a descriptor on a directory </div>", "  Open a descriptor on a directory "],
["Format", "Format.html", "open_vbox", "Format.html#VALopen_vbox", "<div class=\"info\">  <code class=\"code\">open_vbox d</code> opens a new pretty-printing box with offset <code class=\"code\">d</code>. </div>", "  open_vbox d opens a new pretty-printing box with offset d. "],
["Filename", "Filename.html", "open_temp_file", "Filename.html#VALopen_temp_file", "<div class=\"info\">  Same as <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a>, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file. </div>", "  Same as Filename.temp_file, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file. "],
["Format", "Format.html", "open_tbox", "Format.html#VALopen_tbox", "<div class=\"info\">  Opens a tabulation box. </div>", "  Opens a tabulation box. "],
["Format", "Format.html", "open_tag", "Format.html#VALopen_tag", "<div class=\"info\">  <code class=\"code\">open_tag t</code> opens the tag named <code class=\"code\">t</code>; the <code class=\"code\">print_open_tag</code> function of the formatter is called with <code class=\"code\">t</code> as argument; the tag marker <code class=\"code\">mark_open_tag t</code> will be flushed into the output device of the formatter. </div>", "  open_tag t opens the tag named t; the print_open_tag function of the formatter is called with t as argument; the tag marker mark_open_tag t will be flushed into the output device of the formatter. "],
["GraphicsX11", "GraphicsX11.html", "open_subwindow", "GraphicsX11.html#VALopen_subwindow", "<div class=\"info\">  Create a sub-window of the current OCaml graphics window and return its identifier. </div>", "  Create a sub-window of the current OCaml graphics window and return its identifier. "],
["ThreadUnix", "ThreadUnix.html", "open_process_out", "ThreadUnix.html#VALopen_process_out", "", ""],
["Unix", "Unix.html", "open_process_out", "Unix.html#VALopen_process_out", "<div class=\"info\">  Same as <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>, but redirect the standard input of the command to a pipe. </div>", "  Same as Unix.open_process_in, but redirect the standard input of the command to a pipe. "],
["UnixLabels", "UnixLabels.html", "open_process_out", "UnixLabels.html#VALopen_process_out", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>, but redirect the standard input of the command to a pipe. </div>", "  Same as UnixLabels.open_process_in, but redirect the standard input of the command to a pipe. "],
["ThreadUnix", "ThreadUnix.html", "open_process_in", "ThreadUnix.html#VALopen_process_in", "", ""],
["Unix", "Unix.html", "open_process_in", "Unix.html#VALopen_process_in", "<div class=\"info\">  High-level pipe and process management. </div>", "  High-level pipe and process management. "],
["UnixLabels", "UnixLabels.html", "open_process_in", "UnixLabels.html#VALopen_process_in", "<div class=\"info\">  High-level pipe and process management. </div>", "  High-level pipe and process management. "],
["Unix", "Unix.html", "open_process_full", "Unix.html#VALopen_process_full", "<div class=\"info\">  Similar to <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>, but the second argument specifies the environment passed to the command. </div>", "  Similar to Unix.open_process, but the second argument specifies the environment passed to the command. "],
["UnixLabels", "UnixLabels.html", "open_process_full", "UnixLabels.html#VALopen_process_full", "<div class=\"info\">  Similar to <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>, but the second argument specifies the environment passed to the command. </div>", "  Similar to UnixLabels.open_process, but the second argument specifies the environment passed to the command. "],
["ThreadUnix", "ThreadUnix.html", "open_process", "ThreadUnix.html#VALopen_process", "", ""],
["Unix", "Unix.html", "open_process", "Unix.html#VALopen_process", "<div class=\"info\">  Same as <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. </div>", "  Same as Unix.open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. "],
["UnixLabels", "UnixLabels.html", "open_process", "UnixLabels.html#VALopen_process", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. </div>", "  Same as UnixLabels.open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. "],
["Pervasives", "Pervasives.html", "open_out_gen", "Pervasives.html#VALopen_out_gen", "<div class=\"info\">  <code class=\"code\">open_out_gen mode perm filename</code> opens the named file for writing, as described above. </div>", "  open_out_gen mode perm filename opens the named file for writing, as described above. "],
["Pervasives", "Pervasives.html", "open_out_bin", "Pervasives.html#VALopen_out_bin", "<div class=\"info\">  Same as <a href=\"Pervasives.html#VALopen_out\"><code class=\"code\">open_out</code></a>, but the file is opened in binary mode, so that no translation takes place during writes. </div>", "  Same as open_out, but the file is opened in binary mode, so that no translation takes place during writes. "],
["Pervasives", "Pervasives.html", "open_out", "Pervasives.html#VALopen_out", "<div class=\"info\">  Open the named file for writing, and return a new output channel on that file, positionned at the beginning of the file. </div>", "  Open the named file for writing, and return a new output channel on that file, positionned at the beginning of the file. "],
["Pervasives", "Pervasives.html", "open_in_gen", "Pervasives.html#VALopen_in_gen", "<div class=\"info\">  <code class=\"code\">open_in_gen mode perm filename</code> opens the named file for reading, as described above. </div>", "  open_in_gen mode perm filename opens the named file for reading, as described above. "],
["Pervasives", "Pervasives.html", "open_in_bin", "Pervasives.html#VALopen_in_bin", "<div class=\"info\">  Same as <a href=\"Pervasives.html#VALopen_in\"><code class=\"code\">open_in</code></a>, but the file is opened in binary mode, so that no translation takes place during reads. </div>", "  Same as open_in, but the file is opened in binary mode, so that no translation takes place during reads. "],
["Scanf.Scanning", "Scanf.Scanning.html", "open_in_bin", "Scanf.Scanning.html#VALopen_in_bin", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in_bin fname</code> returns a formatted input channel for bufferized reading in binary mode from file <code class=\"code\">fname</code>. </div>", "  Scanning.open_in_bin fname returns a formatted input channel for bufferized reading in binary mode from file fname. "],
["Pervasives", "Pervasives.html", "open_in", "Pervasives.html#VALopen_in", "<div class=\"info\">  Open the named file for reading, and return a new input channel on that file, positionned at the beginning of the file. </div>", "  Open the named file for reading, and return a new input channel on that file, positionned at the beginning of the file. "],
["Scanf.Scanning", "Scanf.Scanning.html", "open_in", "Scanf.Scanning.html#VALopen_in", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in fname</code> returns a formatted input channel for bufferized reading in text mode from file <code class=\"code\">fname</code>. </div>", "  Scanning.open_in fname returns a formatted input channel for bufferized reading in text mode from file fname. "],
["Format", "Format.html", "open_hvbox", "Format.html#VALopen_hvbox", "<div class=\"info\">  <code class=\"code\">open_hvbox d</code> opens a new pretty-printing box with offset <code class=\"code\">d</code>. </div>", "  open_hvbox d opens a new pretty-printing box with offset d. "],
["Format", "Format.html", "open_hovbox", "Format.html#VALopen_hovbox", "<div class=\"info\">  <code class=\"code\">open_hovbox d</code> opens a new pretty-printing box with offset <code class=\"code\">d</code>. </div>", "  open_hovbox d opens a new pretty-printing box with offset d. "],
["Format", "Format.html", "open_hbox", "Format.html#VALopen_hbox", "<div class=\"info\">  <code class=\"code\">open_hbox ()</code> opens a new pretty-printing box. </div>", "  open_hbox () opens a new pretty-printing box. "],
["Graphics", "Graphics.html", "open_graph", "Graphics.html#VALopen_graph", "<div class=\"info\">  Show the graphics window or switch the screen to graphic mode. </div>", "  Show the graphics window or switch the screen to graphic mode. "],
["ThreadUnix", "ThreadUnix.html", "open_connection", "ThreadUnix.html#VALopen_connection", "", ""],
["Unix", "Unix.html", "open_connection", "Unix.html#VALopen_connection", "<div class=\"info\">  Connect to a server at the given address. </div>", "  Connect to a server at the given address. "],
["UnixLabels", "UnixLabels.html", "open_connection", "UnixLabels.html#VALopen_connection", "<div class=\"info\">  Connect to a server at the given address. </div>", "  Connect to a server at the given address. "],
["CamlinternalFormat", "CamlinternalFormat.html", "open_box_of_string", "CamlinternalFormat.html#VALopen_box_of_string", "", ""],
["Format", "Format.html", "open_box", "Format.html#VALopen_box", "<div class=\"info\">  <code class=\"code\">open_box d</code> opens a new pretty-printing box with offset <code class=\"code\">d</code>. </div>", "  open_box d opens a new pretty-printing box with offset d. "],
["Complex", "Complex.html", "one", "Complex.html#VALone", "<div class=\"info\">  The complex number <code class=\"code\">1</code>. </div>", "  The complex number 1. "],
["Int32", "Int32.html", "one", "Int32.html#VALone", "<div class=\"info\">  The 32-bit integer 1. </div>", "  The 32-bit integer 1. "],
["Int64", "Int64.html", "one", "Int64.html#VALone", "<div class=\"info\">  The 64-bit integer 1. </div>", "  The 64-bit integer 1. "],
["Nativeint", "Nativeint.html", "one", "Nativeint.html#VALone", "<div class=\"info\">  The native integer 1. </div>", "  The native integer 1. "],
["Bytes", "Bytes.html", "of_string", "Bytes.html#VALof_string", "<div class=\"info\">  Return a new byte sequence that contains the same bytes as the given string. </div>", "  Return a new byte sequence that contains the same bytes as the given string. "],
["BytesLabels", "BytesLabels.html", "of_string", "BytesLabels.html#VALof_string", "<div class=\"info\">  Return a new byte sequence that contains the same bytes as the given string. </div>", "  Return a new byte sequence that contains the same bytes as the given string. "],
["Int32", "Int32.html", "of_string", "Int32.html#VALof_string", "<div class=\"info\">  Convert the given string to a 32-bit integer. </div>", "  Convert the given string to a 32-bit integer. "],
["Int64", "Int64.html", "of_string", "Int64.html#VALof_string", "<div class=\"info\">  Convert the given string to a 64-bit integer. </div>", "  Convert the given string to a 64-bit integer. "],
["Nativeint", "Nativeint.html", "of_string", "Nativeint.html#VALof_string", "<div class=\"info\">  Convert the given string to a native integer. </div>", "  Convert the given string to a native integer. "],
["Stream", "Stream.html", "of_string", "Stream.html#VALof_string", "<div class=\"info\">  Return the stream of the characters of the string parameter. </div>", "  Return the stream of the characters of the string parameter. "],
["Int64", "Int64.html", "of_nativeint", "Int64.html#VALof_nativeint", "<div class=\"info\">  Convert the given native integer (type <code class=\"code\">nativeint</code>) to a 64-bit integer (type <code class=\"code\">int64</code>). </div>", "  Convert the given native integer (type nativeint) to a 64-bit integer (type int64). "],
["Array", "Array.html", "of_list", "Array.html#VALof_list", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.of_list l</code> returns a fresh array containing the elements of <code class=\"code\">l</code>. </div>", "  Array.of_list l returns a fresh array containing the elements of l. "],
["ArrayLabels", "ArrayLabels.html", "of_list", "ArrayLabels.html#VALof_list", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.of_list l</code> returns a fresh array containing the elements of <code class=\"code\">l</code>. </div>", "  Array.of_list l returns a fresh array containing the elements of l. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "of_list", "MoreLabels.Set.S.html#VALof_list", "", ""],
["Set.S", "Set.S.html", "of_list", "Set.S.html#VALof_list", "<div class=\"info\">  <code class=\"code\">of_list l</code> creates a set from a list of elements. </div>", "  of_list l creates a set from a list of elements. "],
["Stream", "Stream.html", "of_list", "Stream.html#VALof_list", "<div class=\"info\">  Return the stream holding the elements of the list in the same order. </div>", "  Return the stream holding the elements of the list in the same order. "],
["Int64", "Int64.html", "of_int32", "Int64.html#VALof_int32", "<div class=\"info\">  Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to a 64-bit integer (type <code class=\"code\">int64</code>). </div>", "  Convert the given 32-bit integer (type int32) to a 64-bit integer (type int64). "],
["Nativeint", "Nativeint.html", "of_int32", "Nativeint.html#VALof_int32", "<div class=\"info\">  Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to a native integer. </div>", "  Convert the given 32-bit integer (type int32) to a native integer. "],
["Int32", "Int32.html", "of_int", "Int32.html#VALof_int", "<div class=\"info\">  Convert the given integer (type <code class=\"code\">int</code>) to a 32-bit integer (type <code class=\"code\">int32</code>). </div>", "  Convert the given integer (type int) to a 32-bit integer (type int32). "],
["Int64", "Int64.html", "of_int", "Int64.html#VALof_int", "<div class=\"info\">  Convert the given integer (type <code class=\"code\">int</code>) to a 64-bit integer (type <code class=\"code\">int64</code>). </div>", "  Convert the given integer (type int) to a 64-bit integer (type int64). "],
["Nativeint", "Nativeint.html", "of_int", "Nativeint.html#VALof_int", "<div class=\"info\">  Convert the given integer (type <code class=\"code\">int</code>) to a native integer (type <code class=\"code\">nativeint</code>). </div>", "  Convert the given integer (type int) to a native integer (type nativeint). "],
["Int32", "Int32.html", "of_float", "Int32.html#VALof_float", "<div class=\"info\">  Convert the given floating-point number to a 32-bit integer, discarding the fractional part (truncate towards 0). </div>", "  Convert the given floating-point number to a 32-bit integer, discarding the fractional part (truncate towards 0). "],
["Int64", "Int64.html", "of_float", "Int64.html#VALof_float", "<div class=\"info\">  Convert the given floating-point number to a 64-bit integer, discarding the fractional part (truncate towards 0). </div>", "  Convert the given floating-point number to a 64-bit integer, discarding the fractional part (truncate towards 0). "],
["Nativeint", "Nativeint.html", "of_float", "Nativeint.html#VALof_float", "<div class=\"info\">  Convert the given floating-point number to a native integer, discarding the fractional part (truncate towards 0). </div>", "  Convert the given floating-point number to a native integer, discarding the fractional part (truncate towards 0). "],
["Stream", "Stream.html", "of_channel", "Stream.html#VALof_channel", "<div class=\"info\">  Return the stream of the characters read from the input channel. </div>", "  Return the stream of the characters read from the input channel. "],
["Stream", "Stream.html", "of_bytes", "Stream.html#VALof_bytes", "<div class=\"info\">  Return the stream of the characters of the bytes parameter. </div>", "  Return the stream of the characters of the bytes parameter. "],
["Bigarray.Array1", "Bigarray.Array1.html", "of_array", "Bigarray.Array1.html#VALof_array", "<div class=\"info\">  Build a one-dimensional big array initialized from the given array. </div>", "  Build a one-dimensional big array initialized from the given array. "],
["Bigarray.Array2", "Bigarray.Array2.html", "of_array", "Bigarray.Array2.html#VALof_array", "<div class=\"info\">  Build a two-dimensional big array initialized from the given array of arrays. </div>", "  Build a two-dimensional big array initialized from the given array of arrays. "],
["Bigarray.Array3", "Bigarray.Array3.html", "of_array", "Bigarray.Array3.html#VALof_array", "<div class=\"info\">  Build a three-dimensional big array initialized from the given array of arrays of arrays. </div>", "  Build a three-dimensional big array initialized from the given array of arrays of arrays. "],
["Sys", "Sys.html", "ocaml_version", "Sys.html#VALocaml_version", "<div class=\"info\">  <code class=\"code\">ocaml_version</code> is the version of OCaml. </div>", "  ocaml_version is the version of OCaml. "],
["Obj", "Obj.html", "object_tag", "Obj.html#VALobject_tag", "", ""],
["Obj", "Obj.html", "obj", "Obj.html#VALobj", "", ""],
["Num", "Num.html", "num_of_string", "Num.html#VALnum_of_string", "<div class=\"info\">  Convert a string to a number. </div>", "  Convert a string to a number. "],
["Num", "Num.html", "num_of_ratio", "Num.html#VALnum_of_ratio", "", ""],
["Num", "Num.html", "num_of_nat", "Num.html#VALnum_of_nat", "", ""],
["Num", "Num.html", "num_of_int", "Num.html#VALnum_of_int", "", ""],
["Num", "Num.html", "num_of_big_int", "Num.html#VALnum_of_big_int", "", ""],
["Bigarray.Genarray", "Bigarray.Genarray.html", "num_dims", "Bigarray.Genarray.html#VALnum_dims", "<div class=\"info\">  Return the number of dimensions of the given big array. </div>", "  Return the number of dimensions of the given big array. "],
["Big_int", "Big_int.html", "num_digits_big_int", "Big_int.html#VALnum_digits_big_int", "<div class=\"info\">  Return the number of machine words used to store the given big integer. </div>", "  Return the number of machine words used to store the given big integer. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "nth_dim", "Bigarray.Genarray.html#VALnth_dim", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Genarray</span>.nth_dim a n</code> returns the <code class=\"code\">n</code>-th dimension of the big array <code class=\"code\">a</code>. </div>", "  Genarray.nth_dim a n returns the n-th dimension of the big array a. "],
["Buffer", "Buffer.html", "nth", "Buffer.html#VALnth", "<div class=\"info\">  get the n-th character of the buffer. </div>", "  get the n-th character of the buffer. "],
["List", "List.html", "nth", "List.html#VALnth", "<div class=\"info\">  Return the <code class=\"code\">n</code>-th element of the given list. </div>", "  Return the n-th element of the given list. "],
["ListLabels", "ListLabels.html", "nth", "ListLabels.html#VALnth", "<div class=\"info\">  Return the <code class=\"code\">n</code>-th element of the given list. </div>", "  Return the n-th element of the given list. "],
["Stream", "Stream.html", "npeek", "Stream.html#VALnpeek", "<div class=\"info\">  <code class=\"code\">npeek n</code> returns the list of the <code class=\"code\">n</code> first elements of the stream, or all its remaining elements if less than <code class=\"code\">n</code> elements are available. </div>", "  npeek n returns the list of the n first elements of the stream, or all its remaining elements if less than n elements are available. "],
["Pervasives", "Pervasives.html", "not", "Pervasives.html#VALnot", "<div class=\"info\">  The boolean negation. </div>", "  The boolean negation. "],
["Complex", "Complex.html", "norm2", "Complex.html#VALnorm2", "<div class=\"info\">  Norm squared: given <code class=\"code\">x + i.y</code>, returns <code class=\"code\">x^2 + y^2</code>. </div>", "  Norm squared: given x + i.y, returns x^2 + y^2. "],
["Complex", "Complex.html", "norm", "Complex.html#VALnorm", "<div class=\"info\">  Norm: given <code class=\"code\">x + i.y</code>, returns <code class=\"code\">sqrt(x^2 + y^2)</code>. </div>", "  Norm: given x + i.y, returns sqrt(x^2 + y^2). "],
["Obj", "Obj.html", "no_scan_tag", "Obj.html#VALno_scan_tag", "", ""],
["Unix", "Unix.html", "nice", "Unix.html#VALnice", "<div class=\"info\">  Change the process priority. </div>", "  Change the process priority. "],
["UnixLabels", "UnixLabels.html", "nice", "UnixLabels.html#VALnice", "<div class=\"info\">  Change the process priority. </div>", "  Change the process priority. "],
["Stream", "Stream.html", "next", "Stream.html#VALnext", "<div class=\"info\">  Return the first element of the stream and remove it from the stream. </div>", "  Return the first element of the stream and remove it from the stream. "],
["CamlinternalOO", "CamlinternalOO.html", "new_variable", "CamlinternalOO.html#VALnew_variable", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "new_methods_variables", "CamlinternalOO.html#VALnew_methods_variables", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "new_method", "CamlinternalOO.html#VALnew_method", "", ""],
["Lexing", "Lexing.html", "new_line", "Lexing.html#VALnew_line", "<div class=\"info\">  Update the <code class=\"code\">lex_curr_p</code> field of the lexbuf to reflect the start of a new line. </div>", "  Update the lex_curr_p field of the lexbuf to reflect the start of a new line. "],
["Event", "Event.html", "new_channel", "Event.html#VALnew_channel", "<div class=\"info\">  Return a new channel. </div>", "  Return a new channel. "],
["Obj", "Obj.html", "new_block", "Obj.html#VALnew_block", "", ""],
["Pervasives", "Pervasives.html", "neg_infinity", "Pervasives.html#VALneg_infinity", "<div class=\"info\">  Negative infinity. </div>", "  Negative infinity. "],
["Complex", "Complex.html", "neg", "Complex.html#VALneg", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Int32", "Int32.html", "neg", "Int32.html#VALneg", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Int64", "Int64.html", "neg", "Int64.html#VALneg", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Nativeint", "Nativeint.html", "neg", "Nativeint.html#VALneg", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Big_int", "Big_int.html", "nativeint_of_big_int", "Big_int.html#VALnativeint_of_big_int", "<div class=\"info\">  Convert a big integer to a native integer. </div>", "  Convert a big integer to a native integer. "],
["Bigarray", "Bigarray.html", "nativeint", "Bigarray.html#VALnativeint", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Random", "Random.html", "nativeint", "Random.html#VALnativeint", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Random</span>.nativeint bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive). </div>", "  Random.nativeint bound returns a random integer between 0 (inclusive) and bound (exclusive). "],
["Random.State", "Random.State.html", "nativeint", "Random.State.html#VALnativeint", "", ""],
["Num", "Num.html", "nat_of_num", "Num.html#VALnat_of_num", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "narrow", "CamlinternalOO.html#VALnarrow", "", ""],
["Pervasives", "Pervasives.html", "nan", "Pervasives.html#VALnan", "<div class=\"info\">  A special floating-point value denoting the result of an undefined operation such as <code class=\"code\">0.0 /. 0.0</code>. </div>", "  A special floating-point value denoting the result of an undefined operation such as 0.0 /. 0.0. "],
["Scanf.Scanning", "Scanf.Scanning.html", "name_of_input", "Scanf.Scanning.html#VALname_of_input", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.name_of_input ic</code> returns the name of the character source for the formatted input channel <code class=\"code\">ic</code>. </div>", "  Scanning.name_of_input ic returns the name of the character source for the formatted input channel ic. "],
["Num", "Num.html", "mult_num", "Num.html#VALmult_num", "<div class=\"info\">  Multiplication </div>", "  Multiplication "],
["Big_int", "Big_int.html", "mult_int_big_int", "Big_int.html#VALmult_int_big_int", "<div class=\"info\">  Multiplication of a big integer by a small integer </div>", "  Multiplication of a big integer by a small integer "],
["Big_int", "Big_int.html", "mult_big_int", "Big_int.html#VALmult_big_int", "<div class=\"info\">  Multiplication of two big integers. </div>", "  Multiplication of two big integers. "],
["Complex", "Complex.html", "mul", "Complex.html#VALmul", "<div class=\"info\">  Multiplication </div>", "  Multiplication "],
["Int32", "Int32.html", "mul", "Int32.html#VALmul", "<div class=\"info\">  Multiplication. </div>", "  Multiplication. "],
["Int64", "Int64.html", "mul", "Int64.html#VALmul", "<div class=\"info\">  Multiplication. </div>", "  Multiplication. "],
["Nativeint", "Nativeint.html", "mul", "Nativeint.html#VALmul", "<div class=\"info\">  Multiplication. </div>", "  Multiplication. "],
["Graphics", "Graphics.html", "moveto", "Graphics.html#VALmoveto", "<div class=\"info\">  Position the current point. </div>", "  Position the current point. "],
["Graphics", "Graphics.html", "mouse_pos", "Graphics.html#VALmouse_pos", "<div class=\"info\">  Return the position of the mouse cursor, relative to the graphics window. </div>", "  Return the position of the mouse cursor, relative to the graphics window. "],
["Pervasives", "Pervasives.html", "modf", "Pervasives.html#VALmodf", "<div class=\"info\">  <code class=\"code\">modf f</code> returns the pair of the fractional and integral part of <code class=\"code\">f</code>. </div>", "  modf f returns the pair of the fractional and integral part of f. "],
["Num", "Num.html", "mod_num", "Num.html#VALmod_num", "<div class=\"info\">  Euclidean division: remainder. </div>", "  Euclidean division: remainder. "],
["Pervasives", "Pervasives.html", "mod_float", "Pervasives.html#VALmod_float", "<div class=\"info\">  <code class=\"code\">mod_float a b</code> returns the remainder of <code class=\"code\">a</code> with respect to <code class=\"code\">b</code>. </div>", "  mod_float a b returns the remainder of a with respect to b. "],
["Big_int", "Big_int.html", "mod_big_int", "Big_int.html#VALmod_big_int", "<div class=\"info\">  Euclidean modulus of two big integers. </div>", "  Euclidean modulus of two big integers. "],
["Unix", "Unix.html", "mktime", "Unix.html#VALmktime", "<div class=\"info\">  Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>. </div>", "  Convert a date and time, specified by the tm argument, into a time in seconds, as returned by Unix.time. "],
["UnixLabels", "UnixLabels.html", "mktime", "UnixLabels.html#VALmktime", "<div class=\"info\">  Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>. </div>", "  Convert a date and time, specified by the tm argument, into a time in seconds, as returned by UnixLabels.time. "],
["Unix", "Unix.html", "mkfifo", "Unix.html#VALmkfifo", "<div class=\"info\">  Create a named pipe with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>). </div>", "  Create a named pipe with the given permissions (see Unix.umask). "],
["UnixLabels", "UnixLabels.html", "mkfifo", "UnixLabels.html#VALmkfifo", "<div class=\"info\">  Create a named pipe with the given permissions. </div>", "  Create a named pipe with the given permissions. "],
["Unix", "Unix.html", "mkdir", "Unix.html#VALmkdir", "<div class=\"info\">  Create a directory with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>). </div>", "  Create a directory with the given permissions (see Unix.umask). "],
["UnixLabels", "UnixLabels.html", "mkdir", "UnixLabels.html#VALmkdir", "<div class=\"info\">  Create a directory with the given permissions. </div>", "  Create a directory with the given permissions. "],
["Int32", "Int32.html", "minus_one", "Int32.html#VALminus_one", "<div class=\"info\">  The 32-bit integer -1. </div>", "  The 32-bit integer -1. "],
["Int64", "Int64.html", "minus_one", "Int64.html#VALminus_one", "<div class=\"info\">  The 64-bit integer -1. </div>", "  The 64-bit integer -1. "],
["Nativeint", "Nativeint.html", "minus_one", "Nativeint.html#VALminus_one", "<div class=\"info\">  The native integer -1. </div>", "  The native integer -1. "],
["Num", "Num.html", "minus_num", "Num.html#VALminus_num", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Big_int", "Big_int.html", "minus_big_int", "Big_int.html#VALminus_big_int", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Gc", "Gc.html", "minor", "Gc.html#VALminor", "<div class=\"info\">  Trigger a minor collection. </div>", "  Trigger a minor collection. "],
["Num", "Num.html", "min_num", "Num.html#VALmin_num", "<div class=\"info\">  Return the smaller of the two arguments. </div>", "  Return the smaller of the two arguments. "],
["Int32", "Int32.html", "min_int", "Int32.html#VALmin_int", "<div class=\"info\">  The smallest representable 32-bit integer, -2<sup class=\"superscript\">31</sup>. </div>", "  The smallest representable 32-bit integer, -231. "],
["Int64", "Int64.html", "min_int", "Int64.html#VALmin_int", "<div class=\"info\">  The smallest representable 64-bit integer, -2<sup class=\"superscript\">63</sup>. </div>", "  The smallest representable 64-bit integer, -263. "],
["Nativeint", "Nativeint.html", "min_int", "Nativeint.html#VALmin_int", "<div class=\"info\">  The greatest representable native integer, either -2<sup class=\"superscript\">31</sup> on a 32-bit platform, or -2<sup class=\"superscript\">63</sup> on a 64-bit platform. </div>", "  The greatest representable native integer, either -231 on a 32-bit platform, or -263 on a 64-bit platform. "],
["Pervasives", "Pervasives.html", "min_int", "Pervasives.html#VALmin_int", "<div class=\"info\">  The smallest representable integer. </div>", "  The smallest representable integer. "],
["Pervasives", "Pervasives.html", "min_float", "Pervasives.html#VALmin_float", "<div class=\"info\">  The smallest positive, non-zero, non-denormalized value of type <code class=\"code\">float</code>. </div>", "  The smallest positive, non-zero, non-denormalized value of type float. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "min_elt", "MoreLabels.Set.S.html#VALmin_elt", "", ""],
["Set.S", "Set.S.html", "min_elt", "Set.S.html#VALmin_elt", "<div class=\"info\">  Return the smallest element of the given set (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty. </div>", "  Return the smallest element of the given set (with respect to the Ord.compare ordering), or raise Not_found if the set is empty. "],
["Map.S", "Map.S.html", "min_binding", "Map.S.html#VALmin_binding", "<div class=\"info\">  Return the smallest binding of the given map (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty. </div>", "  Return the smallest binding of the given map (with respect to the Ord.compare ordering), or raise Not_found if the map is empty. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "min_binding", "MoreLabels.Map.S.html#VALmin_binding", "", ""],
["Big_int", "Big_int.html", "min_big_int", "Big_int.html#VALmin_big_int", "<div class=\"info\">  Return the smaller of its two arguments. </div>", "  Return the smaller of its two arguments. "],
["Pervasives", "Pervasives.html", "min", "Pervasives.html#VALmin", "<div class=\"info\">  Return the smaller of the two arguments. </div>", "  Return the smaller of the two arguments. "],
["List", "List.html", "merge", "List.html#VALmerge", "<div class=\"info\">  Merge two lists: Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge cmp l1 l2</code> will return a sorted list containting all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>. </div>", "  Merge two lists: Assuming that l1 and l2 are sorted according to the comparison function cmp, merge cmp l1 l2 will return a sorted list containting all the elements of l1 and l2. "],
["ListLabels", "ListLabels.html", "merge", "ListLabels.html#VALmerge", "<div class=\"info\">  Merge two lists: Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge cmp l1 l2</code> will return a sorted list containting all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>. </div>", "  Merge two lists: Assuming that l1 and l2 are sorted according to the comparison function cmp, merge cmp l1 l2 will return a sorted list containting all the elements of l1 and l2. "],
["Map.S", "Map.S.html", "merge", "Map.S.html#VALmerge", "<div class=\"info\">  <code class=\"code\">merge f m1 m2</code> computes a map whose keys is a subset of keys of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>. </div>", "  merge f m1 m2 computes a map whose keys is a subset of keys of m1 and of m2. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "merge", "MoreLabels.Map.S.html#VALmerge", "", ""],
["Sort", "Sort.html", "merge", "Sort.html#VALmerge", "<div class=\"info\">  Merge two lists according to the given predicate. </div>", "  Merge two lists according to the given predicate. "],
["Weak.S", "Weak.S.html", "merge", "Weak.S.html#VALmerge", "<div class=\"info\">  <code class=\"code\">merge t x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code> if any, or else adds <code class=\"code\">x</code> to <code class=\"code\">t</code> and return <code class=\"code\">x</code>. </div>", "  merge t x returns an instance of x found in t if any, or else adds x to t and return x. "],
["List", "List.html", "memq", "List.html#VALmemq", "<div class=\"info\">  Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural equality to compare list elements. </div>", "  Same as List.mem, but uses physical equality instead of structural equality to compare list elements. "],
["ListLabels", "ListLabels.html", "memq", "ListLabels.html#VALmemq", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALmem\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.mem</code></a>, but uses physical equality instead of structural equality to compare list elements. </div>", "  Same as ListLabels.mem, but uses physical equality instead of structural equality to compare list elements. "],
["List", "List.html", "mem_assq", "List.html#VALmem_assq", "<div class=\"info\">  Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of structural equality to compare keys. </div>", "  Same as List.mem_assoc, but uses physical equality instead of structural equality to compare keys. "],
["ListLabels", "ListLabels.html", "mem_assq", "ListLabels.html#VALmem_assq", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.mem_assoc</code></a>, but uses physical equality instead of structural equality to compare keys. </div>", "  Same as ListLabels.mem_assoc, but uses physical equality instead of structural equality to compare keys. "],
["List", "List.html", "mem_assoc", "List.html#VALmem_assoc", "<div class=\"info\">  Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists, and false if no bindings exist for the given key. </div>", "  Same as List.assoc, but simply return true if a binding exists, and false if no bindings exist for the given key. "],
["ListLabels", "ListLabels.html", "mem_assoc", "ListLabels.html#VALmem_assoc", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.assoc</code></a>, but simply return true if a binding exists, and false if no bindings exist for the given key. </div>", "  Same as ListLabels.assoc, but simply return true if a binding exists, and false if no bindings exist for the given key. "],
["Hashtbl", "Hashtbl.html", "mem", "Hashtbl.html#VALmem", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.mem tbl x</code> checks if <code class=\"code\">x</code> is bound in <code class=\"code\">tbl</code>. </div>", "  Hashtbl.mem tbl x checks if x is bound in tbl. "],
["Hashtbl.S", "Hashtbl.S.html", "mem", "Hashtbl.S.html#VALmem", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "mem", "Hashtbl.SeededS.html#VALmem", "", ""],
["List", "List.html", "mem", "List.html#VALmem", "<div class=\"info\">  <code class=\"code\">mem a l</code> is true if and only if <code class=\"code\">a</code> is equal to an element of <code class=\"code\">l</code>. </div>", "  mem a l is true if and only if a is equal to an element of l. "],
["ListLabels", "ListLabels.html", "mem", "ListLabels.html#VALmem", "<div class=\"info\">  <code class=\"code\">mem a l</code> is true if and only if <code class=\"code\">a</code> is equal to an element of <code class=\"code\">l</code>. </div>", "  mem a l is true if and only if a is equal to an element of l. "],
["Map.S", "Map.S.html", "mem", "Map.S.html#VALmem", "<div class=\"info\">  <code class=\"code\">mem x m</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">m</code> contains a binding for <code class=\"code\">x</code>, and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise. </div>", "  mem x m returns true if m contains a binding for x, and false otherwise. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "mem", "MoreLabels.Hashtbl.html#VALmem", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "mem", "MoreLabels.Hashtbl.S.html#VALmem", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "mem", "MoreLabels.Hashtbl.SeededS.html#VALmem", "", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "mem", "MoreLabels.Map.S.html#VALmem", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "mem", "MoreLabels.Set.S.html#VALmem", "", ""],
["Set.S", "Set.S.html", "mem", "Set.S.html#VALmem", "<div class=\"info\">  <code class=\"code\">mem x s</code> tests whether <code class=\"code\">x</code> belongs to the set <code class=\"code\">s</code>. </div>", "  mem x s tests whether x belongs to the set s. "],
["Weak.S", "Weak.S.html", "mem", "Weak.S.html#VALmem", "<div class=\"info\">  <code class=\"code\">mem t x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if there is at least one instance of <code class=\"code\">x</code> in <code class=\"code\">t</code>, false otherwise. </div>", "  mem t x returns true if there is at least one instance of x in t, false otherwise. "],
["Sys", "Sys.html", "max_string_length", "Sys.html#VALmax_string_length", "<div class=\"info\">  Maximum length of strings and byte sequences. </div>", "  Maximum length of strings and byte sequences. "],
["Num", "Num.html", "max_num", "Num.html#VALmax_num", "<div class=\"info\">  Return the greater of the two arguments. </div>", "  Return the greater of the two arguments. "],
["Int32", "Int32.html", "max_int", "Int32.html#VALmax_int", "<div class=\"info\">  The greatest representable 32-bit integer, 2<sup class=\"superscript\">31</sup> - 1. </div>", "  The greatest representable 32-bit integer, 231 - 1. "],
["Int64", "Int64.html", "max_int", "Int64.html#VALmax_int", "<div class=\"info\">  The greatest representable 64-bit integer, 2<sup class=\"superscript\">63</sup> - 1. </div>", "  The greatest representable 64-bit integer, 263 - 1. "],
["Nativeint", "Nativeint.html", "max_int", "Nativeint.html#VALmax_int", "<div class=\"info\">  The greatest representable native integer, either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform, or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform. </div>", "  The greatest representable native integer, either 231 - 1 on a 32-bit platform, or 263 - 1 on a 64-bit platform. "],
["Pervasives", "Pervasives.html", "max_int", "Pervasives.html#VALmax_int", "<div class=\"info\">  The greatest representable integer. </div>", "  The greatest representable integer. "],
["Pervasives", "Pervasives.html", "max_float", "Pervasives.html#VALmax_float", "<div class=\"info\">  The largest positive finite value of type <code class=\"code\">float</code>. </div>", "  The largest positive finite value of type float. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "max_elt", "MoreLabels.Set.S.html#VALmax_elt", "", ""],
["Set.S", "Set.S.html", "max_elt", "Set.S.html#VALmax_elt", "<div class=\"info\">  Same as <a href=\"Set.S.html#VALmin_elt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt</code></a>, but returns the largest element of the given set. </div>", "  Same as Set.S.min_elt, but returns the largest element of the given set. "],
["Map.S", "Map.S.html", "max_binding", "Map.S.html#VALmax_binding", "<div class=\"info\">  Same as <a href=\"Map.S.html#VALmin_binding\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding</code></a>, but returns the largest binding of the given map. </div>", "  Same as Map.S.min_binding, but returns the largest binding of the given map. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "max_binding", "MoreLabels.Map.S.html#VALmax_binding", "", ""],
["Big_int", "Big_int.html", "max_big_int", "Big_int.html#VALmax_big_int", "<div class=\"info\">  Return the greater of its two arguments. </div>", "  Return the greater of its two arguments. "],
["Sys", "Sys.html", "max_array_length", "Sys.html#VALmax_array_length", "<div class=\"info\">  Maximum length of a normal array. </div>", "  Maximum length of a normal array. "],
["Pervasives", "Pervasives.html", "max", "Pervasives.html#VALmax", "<div class=\"info\">  Return the greater of the two arguments. </div>", "  Return the greater of the two arguments. "],
["Str", "Str.html", "matched_string", "Str.html#VALmatched_string", "<div class=\"info\">  <code class=\"code\">matched_string s</code> returns the substring of <code class=\"code\">s</code> that was matched by the last call to one of the following matching or searching functions: <a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a>, <a href=\"Str.html#VALsearch_forward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_forward</code></a>, <a href=\"Str.html#VALsearch_backward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_backward</code></a>, <a href=\"Str.html#VALstring_partial_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_partial_match</code></a>, <a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a>, <a href=\"Str.html#VALsubstitute_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.substitute_first</code></a> provided that none of the following functions was called inbetween: <a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a>, <a href=\"Str.html#VALreplace_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.replace_first</code></a>, <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a>, <a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a>, <a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a>, <a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a>, <a href=\"Str.html#VALfull_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.full_split</code></a>, <a href=\"Str.html#VALbounded_full_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_full_split</code></a> Note: in the case of <code class=\"code\">global_substitute</code> and <code class=\"code\">substitute_first</code>, a call to <code class=\"code\">matched_string</code> is only valid within the <code class=\"code\">subst</code> argument, not after <code class=\"code\">global_substitute</code> or <code class=\"code\">substitute_first</code> returns. </div>", "  matched_string s returns the substring of s that was matched by the last call to one of the following matching or searching functions: Str.string_match, Str.search_forward, Str.search_backward, Str.string_partial_match, Str.global_substitute, Str.substitute_first provided that none of the following functions was called inbetween: Str.global_replace, Str.replace_first, Str.split, Str.bounded_split, Str.split_delim, Str.bounded_split_delim, Str.full_split, Str.bounded_full_split Note: in the case of global_substitute and substitute_first, a call to matched_string is only valid within the subst argument, not after global_substitute or substitute_first returns. "],
["Str", "Str.html", "matched_group", "Str.html#VALmatched_group", "<div class=\"info\">  <code class=\"code\">matched_group n s</code> returns the substring of <code class=\"code\">s</code> that was matched by the <code class=\"code\">n</code>th group <code class=\"code\">\\(...\\)</code> of the regular expression that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details). </div>", "  matched_group n s returns the substring of s that was matched by the nth group \\(...\\) of the regular expression that was matched by the last call to a matching or searching function (see Str.matched_string for details). "],
["Str", "Str.html", "match_end", "Str.html#VALmatch_end", "<div class=\"info\">  <code class=\"code\">match_end()</code> returns the position of the character following the last character of the substring that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details). </div>", "  match_end() returns the position of the character following the last character of the substring that was matched by the last call to a matching or searching function (see Str.matched_string for details). "],
["Str", "Str.html", "match_beginning", "Str.html#VALmatch_beginning", "<div class=\"info\">  <code class=\"code\">match_beginning()</code> returns the position of the first character of the substring that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details). </div>", "  match_beginning() returns the position of the first character of the substring that was matched by the last call to a matching or searching function (see Str.matched_string for details). "],
["Obj", "Obj.html", "marshal", "Obj.html#VALmarshal", "", ""],
["Array", "Array.html", "mapi", "Array.html#VALmapi", "<div class=\"info\">  Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the function is applied to the index of the element as first argument, and the element itself as second argument. </div>", "  Same as Array.map, but the function is applied to the index of the element as first argument, and the element itself as second argument. "],
["ArrayLabels", "ArrayLabels.html", "mapi", "ArrayLabels.html#VALmapi", "<div class=\"info\">  Same as <a href=\"ArrayLabels.html#VALmap\"><code class=\"code\"><span class=\"constructor\">ArrayLabels</span>.map</code></a>, but the function is applied to the index of the element as first argument, and the element itself as second argument. </div>", "  Same as ArrayLabels.map, but the function is applied to the index of the element as first argument, and the element itself as second argument. "],
["Bytes", "Bytes.html", "mapi", "Bytes.html#VALmapi", "<div class=\"info\">  <code class=\"code\">mapi f s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. </div>", "  mapi f s calls f with each character of s and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. "],
["BytesLabels", "BytesLabels.html", "mapi", "BytesLabels.html#VALmapi", "<div class=\"info\">  <code class=\"code\">mapi f s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. </div>", "  mapi f s calls f with each character of s and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. "],
["List", "List.html", "mapi", "List.html#VALmapi", "<div class=\"info\">  Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. </div>", "  Same as List.map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. "],
["ListLabels", "ListLabels.html", "mapi", "ListLabels.html#VALmapi", "<div class=\"info\">  Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. </div>", "  Same as List.map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. "],
["Map.S", "Map.S.html", "mapi", "Map.S.html#VALmapi", "<div class=\"info\">  Same as <a href=\"Map.S.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.map</code></a>, but the function receives as arguments both the key and the associated value for each binding of the map. </div>", "  Same as Map.S.map, but the function receives as arguments both the key and the associated value for each binding of the map. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "mapi", "MoreLabels.Map.S.html#VALmapi", "", ""],
["StringLabels", "StringLabels.html", "mapi", "StringLabels.html#VALmapi", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.mapi f s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the results in a new string that is returned. </div>", "  String.mapi f s calls f with each character of s and its index (in increasing index order) and stores the results in a new string that is returned. "],
["String", "String.html", "mapi", "String.html#VALmapi", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.mapi f s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its index (in increasing index order) and stores the results in a new string that is returned. </div>", "  String.mapi f s calls f with each character of s and its index (in increasing index order) and stores the results in a new string that is returned. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "map_file", "Bigarray.Genarray.html#VALmap_file", "<div class=\"info\">  Memory mapping of a file as a big array. </div>", "  Memory mapping of a file as a big array. "],
["Bigarray.Array1", "Bigarray.Array1.html", "map_file", "Bigarray.Array1.html#VALmap_file", "<div class=\"info\">  Memory mapping of a file as a one-dimensional big array. </div>", "  Memory mapping of a file as a one-dimensional big array. "],
["Bigarray.Array2", "Bigarray.Array2.html", "map_file", "Bigarray.Array2.html#VALmap_file", "<div class=\"info\">  Memory mapping of a file as a two-dimensional big array. </div>", "  Memory mapping of a file as a two-dimensional big array. "],
["Bigarray.Array3", "Bigarray.Array3.html", "map_file", "Bigarray.Array3.html#VALmap_file", "<div class=\"info\">  Memory mapping of a file as a three-dimensional big array. </div>", "  Memory mapping of a file as a three-dimensional big array. "],
["List", "List.html", "map2", "List.html#VALmap2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.map2 f [a1; ...; an] [b1; ...; bn]</code> is <code class=\"code\">[f a1 b1; ...; f an bn]</code>. </div>", "  List.map2 f [a1; ...; an] [b1; ...; bn] is [f a1 b1; ...; f an bn]. "],
["ListLabels", "ListLabels.html", "map2", "ListLabels.html#VALmap2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.map2 f [a1; ...; an] [b1; ...; bn]</code> is <code class=\"code\">[f a1 b1; ...; f an bn]</code>. </div>", "  List.map2 f [a1; ...; an] [b1; ...; bn] is [f a1 b1; ...; f an bn]. "],
["Array", "Array.html", "map", "Array.html#VALmap", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.map f a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>, and builds an array with the results returned by <code class=\"code\">f</code>: <code class=\"code\">[| f a.(0); f a.(1); ...; f a.(<span class=\"constructor\">Array</span>.length a - 1) |]</code>. </div>", "  Array.map f a applies function f to all the elements of a, and builds an array with the results returned by f: [| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]. "],
["ArrayLabels", "ArrayLabels.html", "map", "ArrayLabels.html#VALmap", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.map f a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>, and builds an array with the results returned by <code class=\"code\">f</code>: <code class=\"code\">[| f a.(0); f a.(1); ...; f a.(<span class=\"constructor\">Array</span>.length a - 1) |]</code>. </div>", "  Array.map f a applies function f to all the elements of a, and builds an array with the results returned by f: [| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]. "],
["Bytes", "Bytes.html", "map", "Bytes.html#VALmap", "<div class=\"info\">  <code class=\"code\">map f s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. </div>", "  map f s applies function f in turn to all the bytes of s (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result. "],
["BytesLabels", "BytesLabels.html", "map", "BytesLabels.html#VALmap", "<div class=\"info\">  <code class=\"code\">map f s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> and stores the resulting bytes in a new sequence that is returned as the result. </div>", "  map f s applies function f in turn to all the bytes of s and stores the resulting bytes in a new sequence that is returned as the result. "],
["List", "List.html", "map", "List.html#VALmap", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.map f [a1; ...; an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1, ..., an</code>, and builds the list <code class=\"code\">[f a1; ...; f an]</code> with the results returned by <code class=\"code\">f</code>. </div>", "  List.map f [a1; ...; an] applies function f to a1, ..., an, and builds the list [f a1; ...; f an] with the results returned by f. "],
["ListLabels", "ListLabels.html", "map", "ListLabels.html#VALmap", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.map f [a1; ...; an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1, ..., an</code>, and builds the list <code class=\"code\">[f a1; ...; f an]</code> with the results returned by <code class=\"code\">f</code>. </div>", "  List.map f [a1; ...; an] applies function f to a1, ..., an, and builds the list [f a1; ...; f an] with the results returned by f. "],
["Map.S", "Map.S.html", "map", "Map.S.html#VALmap", "<div class=\"info\">  <code class=\"code\">map f m</code> returns a map with same domain as <code class=\"code\">m</code>, where the associated value <code class=\"code\">a</code> of all bindings of <code class=\"code\">m</code> has been replaced by the result of the application of <code class=\"code\">f</code> to <code class=\"code\">a</code>. </div>", "  map f m returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "map", "MoreLabels.Map.S.html#VALmap", "", ""],
["StringLabels", "StringLabels.html", "map", "StringLabels.html#VALmap", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.map f s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code> and stores the results in a new string that is returned. </div>", "  String.map f s applies function f in turn to all the characters of s and stores the results in a new string that is returned. "],
["String", "String.html", "map", "String.html#VALmap", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.map f s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code> (in increasing index order) and stores the results in a new string that is returned. </div>", "  String.map f s applies function f in turn to all the characters of s (in increasing index order) and stores the results in a new string that is returned. "],
["Random.State", "Random.State.html", "make_self_init", "Random.State.html#VALmake_self_init", "<div class=\"info\">  Create a new state and initialize it with a system-dependent low-entropy seed. </div>", "  Create a new state and initialize it with a system-dependent low-entropy seed. "],
["CamlinternalFormat", "CamlinternalFormat.html", "make_printf", "CamlinternalFormat.html#VALmake_printf", "", ""],
["Array", "Array.html", "make_matrix", "Array.html#VALmake_matrix", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix dimx dimy e</code> returns a two-dimensional array (an array of arrays) with first dimension <code class=\"code\">dimx</code> and second dimension <code class=\"code\">dimy</code>. </div>", "  Array.make_matrix dimx dimy e returns a two-dimensional array (an array of arrays) with first dimension dimx and second dimension dimy. "],
["ArrayLabels", "ArrayLabels.html", "make_matrix", "ArrayLabels.html#VALmake_matrix", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix dimx dimy e</code> returns a two-dimensional array (an array of arrays) with first dimension <code class=\"code\">dimx</code> and second dimension <code class=\"code\">dimy</code>. </div>", "  Array.make_matrix dimx dimy e returns a two-dimensional array (an array of arrays) with first dimension dimx and second dimension dimy. "],
["Genlex", "Genlex.html", "make_lexer", "Genlex.html#VALmake_lexer", "<div class=\"info\">  Construct the lexer function. </div>", "  Construct the lexer function. "],
["Graphics", "Graphics.html", "make_image", "Graphics.html#VALmake_image", "<div class=\"info\">  Convert the given color matrix to an image. </div>", "  Convert the given color matrix to an image. "],
["Format", "Format.html", "make_formatter", "Format.html#VALmake_formatter", "<div class=\"info\">  <code class=\"code\">make_formatter out flush</code> returns a new formatter that writes according to the output function <code class=\"code\">out</code>, and the flushing function <code class=\"code\">flush</code>. </div>", "  make_formatter out flush returns a new formatter that writes according to the output function out, and the flushing function flush. "],
["Array", "Array.html", "make_float", "Array.html#VALmake_float", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.make_float n</code> returns a fresh float array of length <code class=\"code\">n</code>, with uninitialized data. </div>", "  Array.make_float n returns a fresh float array of length n, with uninitialized data. "],
["CamlinternalOO", "CamlinternalOO.html", "make_class_store", "CamlinternalOO.html#VALmake_class_store", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "make_class", "CamlinternalOO.html#VALmake_class", "", ""],
["Array", "Array.html", "make", "Array.html#VALmake", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.make n x</code> returns a fresh array of length <code class=\"code\">n</code>, initialized with <code class=\"code\">x</code>. </div>", "  Array.make n x returns a fresh array of length n, initialized with x. "],
["ArrayLabels", "ArrayLabels.html", "make", "ArrayLabels.html#VALmake", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.make n x</code> returns a fresh array of length <code class=\"code\">n</code>, initialized with <code class=\"code\">x</code>. </div>", "  Array.make n x returns a fresh array of length n, initialized with x. "],
["Bytes", "Bytes.html", "make", "Bytes.html#VALmake", "<div class=\"info\">  <code class=\"code\">make n c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with the byte <code class=\"code\">c</code>. </div>", "  make n c returns a new byte sequence of length n, filled with the byte c. "],
["BytesLabels", "BytesLabels.html", "make", "BytesLabels.html#VALmake", "<div class=\"info\">  <code class=\"code\">make n c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with the byte <code class=\"code\">c</code>. </div>", "  make n c returns a new byte sequence of length n, filled with the byte c. "],
["Random.State", "Random.State.html", "make", "Random.State.html#VALmake", "<div class=\"info\">  Create a new state and initialize it with the given seed. </div>", "  Create a new state and initialize it with the given seed. "],
["StringLabels", "StringLabels.html", "make", "StringLabels.html#VALmake", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.make n c</code> returns a fresh string of length <code class=\"code\">n</code>, filled with the character <code class=\"code\">c</code>. </div>", "  String.make n c returns a fresh string of length n, filled with the character c. "],
["String", "String.html", "make", "String.html#VALmake", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.make n c</code> returns a fresh string of length <code class=\"code\">n</code>, filled with the character <code class=\"code\">c</code>. </div>", "  String.make n c returns a fresh string of length n, filled with the character c. "],
["Gc", "Gc.html", "major_slice", "Gc.html#VALmajor_slice", "<div class=\"info\">  Do a minor collection and a slice of major collection. </div>", "  Do a minor collection and a slice of major collection. "],
["Gc", "Gc.html", "major", "Gc.html#VALmajor", "<div class=\"info\">  Do a minor collection and finish the current major collection cycle. </div>", "  Do a minor collection and finish the current major collection cycle. "],
["Obj", "Obj.html", "magic", "Obj.html#VALmagic", "", ""],
["Graphics", "Graphics.html", "magenta", "Graphics.html#VALmagenta", "", ""],
["Num", "Num.html", "lt_num", "Num.html#VALlt_num", "", ""],
["Big_int", "Big_int.html", "lt_big_int", "Big_int.html#VALlt_big_int", "", ""],
["Unix", "Unix.html", "lstat", "Unix.html#VALlstat", "<div class=\"info\">  Same as <a href=\"Unix.html#VALstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.stat</code></a>, but in case the file is a symbolic link, return the information for the link itself. </div>", "  Same as Unix.stat, but in case the file is a symbolic link, return the information for the link itself. "],
["Unix.LargeFile", "Unix.LargeFile.html", "lstat", "Unix.LargeFile.html#VALlstat", "", ""],
["UnixLabels", "UnixLabels.html", "lstat", "UnixLabels.html#VALlstat", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.stat</code></a>, but in case the file is a symbolic link, return the information for the link itself. </div>", "  Same as UnixLabels.stat, but in case the file is a symbolic link, return the information for the link itself. "],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "lstat", "UnixLabels.LargeFile.html#VALlstat", "", ""],
["Unix", "Unix.html", "lseek", "Unix.html#VALlseek", "<div class=\"info\">  Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file). </div>", "  Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file). "],
["Unix.LargeFile", "Unix.LargeFile.html", "lseek", "Unix.LargeFile.html#VALlseek", "", ""],
["UnixLabels", "UnixLabels.html", "lseek", "UnixLabels.html#VALlseek", "<div class=\"info\">  Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file). </div>", "  Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file). "],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "lseek", "UnixLabels.LargeFile.html#VALlseek", "", ""],
["Bytes", "Bytes.html", "lowercase", "Bytes.html#VALlowercase", "<div class=\"info\">  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["BytesLabels", "BytesLabels.html", "lowercase", "BytesLabels.html#VALlowercase", "<div class=\"info\">  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["Char", "Char.html", "lowercase", "Char.html#VALlowercase", "<div class=\"info\">  Convert the given character to its equivalent lowercase character. </div>", "  Convert the given character to its equivalent lowercase character. "],
["StringLabels", "StringLabels.html", "lowercase", "StringLabels.html#VALlowercase", "<div class=\"info\">  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["String", "String.html", "lowercase", "String.html#VALlowercase", "<div class=\"info\">  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. </div>", "  Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set. "],
["Graphics", "Graphics.html", "loop_at_exit", "Graphics.html#VALloop_at_exit", "<div class=\"info\">  Loop before exiting the program, the list given as argument is the list of handlers and the events on which these handlers are called. </div>", "  Loop before exiting the program, the list given as argument is the list of handlers and the events on which these handlers are called. "],
["CamlinternalOO", "CamlinternalOO.html", "lookup_tables", "CamlinternalOO.html#VALlookup_tables", "", ""],
["Int32", "Int32.html", "logxor", "Int32.html#VALlogxor", "<div class=\"info\">  Bitwise logical exclusive or. </div>", "  Bitwise logical exclusive or. "],
["Int64", "Int64.html", "logxor", "Int64.html#VALlogxor", "<div class=\"info\">  Bitwise logical exclusive or. </div>", "  Bitwise logical exclusive or. "],
["Nativeint", "Nativeint.html", "logxor", "Nativeint.html#VALlogxor", "<div class=\"info\">  Bitwise logical exclusive or. </div>", "  Bitwise logical exclusive or. "],
["Int32", "Int32.html", "logor", "Int32.html#VALlogor", "<div class=\"info\">  Bitwise logical or. </div>", "  Bitwise logical or. "],
["Int64", "Int64.html", "logor", "Int64.html#VALlogor", "<div class=\"info\">  Bitwise logical or. </div>", "  Bitwise logical or. "],
["Nativeint", "Nativeint.html", "logor", "Nativeint.html#VALlogor", "<div class=\"info\">  Bitwise logical or. </div>", "  Bitwise logical or. "],
["Int32", "Int32.html", "lognot", "Int32.html#VALlognot", "<div class=\"info\">  Bitwise logical negation </div>", "  Bitwise logical negation "],
["Int64", "Int64.html", "lognot", "Int64.html#VALlognot", "<div class=\"info\">  Bitwise logical negation </div>", "  Bitwise logical negation "],
["Nativeint", "Nativeint.html", "lognot", "Nativeint.html#VALlognot", "<div class=\"info\">  Bitwise logical negation </div>", "  Bitwise logical negation "],
["Int32", "Int32.html", "logand", "Int32.html#VALlogand", "<div class=\"info\">  Bitwise logical and. </div>", "  Bitwise logical and. "],
["Int64", "Int64.html", "logand", "Int64.html#VALlogand", "<div class=\"info\">  Bitwise logical and. </div>", "  Bitwise logical and. "],
["Nativeint", "Nativeint.html", "logand", "Nativeint.html#VALlogand", "<div class=\"info\">  Bitwise logical and. </div>", "  Bitwise logical and. "],
["Pervasives", "Pervasives.html", "log1p", "Pervasives.html#VALlog1p", "<div class=\"info\">  <code class=\"code\">log1p x</code> computes <code class=\"code\">log(1.0 +. x)</code> (natural logarithm), giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>. </div>", "  log1p x computes log(1.0 +. x) (natural logarithm), giving numerically-accurate results even if x is close to 0.0. "],
["Pervasives", "Pervasives.html", "log10", "Pervasives.html#VALlog10", "<div class=\"info\">  Base 10 logarithm. </div>", "  Base 10 logarithm. "],
["Complex", "Complex.html", "log", "Complex.html#VALlog", "<div class=\"info\">  Natural logarithm (in base <code class=\"code\">e</code>). </div>", "  Natural logarithm (in base e). "],
["Pervasives", "Pervasives.html", "log", "Pervasives.html#VALlog", "<div class=\"info\">  Natural logarithm. </div>", "  Natural logarithm. "],
["Unix", "Unix.html", "lockf", "Unix.html#VALlockf", "<div class=\"info\">  <code class=\"code\">lockf fd cmd size</code> puts a lock on a region of the file opened as <code class=\"code\">fd</code>. </div>", "  lockf fd cmd size puts a lock on a region of the file opened as fd. "],
["UnixLabels", "UnixLabels.html", "lockf", "UnixLabels.html#VALlockf", "<div class=\"info\">  <code class=\"code\">lockf fd cmd size</code> puts a lock on a region of the file opened as <code class=\"code\">fd</code>. </div>", "  lockf fd cmd size puts a lock on a region of the file opened as fd. "],
["Mutex", "Mutex.html", "lock", "Mutex.html#VALlock", "<div class=\"info\">  Lock the given mutex. </div>", "  Lock the given mutex. "],
["Printexc.Slot", "Printexc.Slot.html", "location", "Printexc.Slot.html#VALlocation", "<div class=\"info\">  <code class=\"code\">location slot</code> returns the location information of the slot, if available, and <code class=\"code\"><span class=\"constructor\">None</span></code> otherwise. </div>", "  location slot returns the location information of the slot, if available, and None otherwise. "],
["Unix", "Unix.html", "localtime", "Unix.html#VALlocaltime", "<div class=\"info\">  Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and a time. </div>", "  Convert a time in seconds, as returned by Unix.time, into a date and a time. "],
["UnixLabels", "UnixLabels.html", "localtime", "UnixLabels.html#VALlocaltime", "<div class=\"info\">  Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date and a time. </div>", "  Convert a time in seconds, as returned by UnixLabels.time, into a date and a time. "],
["Dynlink", "Dynlink.html", "loadfile_private", "Dynlink.html#VALloadfile_private", "<div class=\"info\">  Same as <code class=\"code\">loadfile</code>, except that the compilation units just loaded are hidden (cannot be referenced) from other modules dynamically loaded afterwards. </div>", "  Same as loadfile, except that the compilation units just loaded are hidden (cannot be referenced) from other modules dynamically loaded afterwards. "],
["Dynlink", "Dynlink.html", "loadfile", "Dynlink.html#VALloadfile", "<div class=\"info\">  In bytecode: load the given bytecode object file (<code class=\"code\">.cmo</code> file) or bytecode library file (<code class=\"code\">.cma</code> file), and link it with the running program. </div>", "  In bytecode: load the given bytecode object file (.cmo file) or bytecode library file (.cma file), and link it with the running program. "],
["Pervasives", "Pervasives.html", "lnot", "Pervasives.html#VALlnot", "<div class=\"info\">  Bitwise logical negation. </div>", "  Bitwise logical negation. "],
["Unix", "Unix.html", "listen", "Unix.html#VALlisten", "<div class=\"info\">  Set up a socket for receiving connection requests. </div>", "  Set up a socket for receiving connection requests. "],
["UnixLabels", "UnixLabels.html", "listen", "UnixLabels.html#VALlisten", "<div class=\"info\">  Set up a socket for receiving connection requests. </div>", "  Set up a socket for receiving connection requests. "],
["Sort", "Sort.html", "list", "Sort.html#VALlist", "<div class=\"info\">  Sort a list in increasing order according to an ordering predicate. </div>", "  Sort a list in increasing order according to an ordering predicate. "],
["Unix", "Unix.html", "link", "Unix.html#VALlink", "<div class=\"info\">  <code class=\"code\">link source dest</code> creates a hard link named <code class=\"code\">dest</code> to the file named <code class=\"code\">source</code>. </div>", "  link source dest creates a hard link named dest to the file named source. "],
["UnixLabels", "UnixLabels.html", "link", "UnixLabels.html#VALlink", "<div class=\"info\">  <code class=\"code\">link source dest</code> creates a hard link named <code class=\"code\">dest</code> to the file named <code class=\"code\">source</code>. </div>", "  link source dest creates a hard link named dest to the file named source. "],
["Graphics", "Graphics.html", "lineto", "Graphics.html#VALlineto", "<div class=\"info\">  Draw a line with endpoints the current point and the given point, and move the current point to the given point. </div>", "  Draw a line with endpoints the current point and the given point, and move the current point to the given point. "],
["Lexing", "Lexing.html", "lexeme_start_p", "Lexing.html#VALlexeme_start_p", "<div class=\"info\">  Like <code class=\"code\">lexeme_start</code>, but return a complete <code class=\"code\">position</code> instead of an offset. </div>", "  Like lexeme_start, but return a complete position instead of an offset. "],
["Lexing", "Lexing.html", "lexeme_start", "Lexing.html#VALlexeme_start", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_start lexbuf</code> returns the offset in the input stream of the first character of the matched string. </div>", "  Lexing.lexeme_start lexbuf returns the offset in the input stream of the first character of the matched string. "],
["Lexing", "Lexing.html", "lexeme_end_p", "Lexing.html#VALlexeme_end_p", "<div class=\"info\">  Like <code class=\"code\">lexeme_end</code>, but return a complete <code class=\"code\">position</code> instead of an offset. </div>", "  Like lexeme_end, but return a complete position instead of an offset. "],
["Lexing", "Lexing.html", "lexeme_end", "Lexing.html#VALlexeme_end", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_end lexbuf</code> returns the offset in the input stream of the character following the last character of the matched string. </div>", "  Lexing.lexeme_end lexbuf returns the offset in the input stream of the character following the last character of the matched string. "],
["Lexing", "Lexing.html", "lexeme_char", "Lexing.html#VALlexeme_char", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_char lexbuf i</code> returns character number <code class=\"code\">i</code> in the matched string. </div>", "  Lexing.lexeme_char lexbuf i returns character number i in the matched string. "],
["Lexing", "Lexing.html", "lexeme", "Lexing.html#VALlexeme", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme lexbuf</code> returns the string matched by the regular expression. </div>", "  Lexing.lexeme lexbuf returns the string matched by the regular expression. "],
["Array", "Array.html", "length", "Array.html#VALlength", "<div class=\"info\">  Return the length (number of elements) of the given array. </div>", "  Return the length (number of elements) of the given array. "],
["ArrayLabels", "ArrayLabels.html", "length", "ArrayLabels.html#VALlength", "<div class=\"info\">  Return the length (number of elements) of the given array. </div>", "  Return the length (number of elements) of the given array. "],
["Buffer", "Buffer.html", "length", "Buffer.html#VALlength", "<div class=\"info\">  Return the number of characters currently contained in the buffer. </div>", "  Return the number of characters currently contained in the buffer. "],
["Bytes", "Bytes.html", "length", "Bytes.html#VALlength", "<div class=\"info\">  Return the length (number of bytes) of the argument. </div>", "  Return the length (number of bytes) of the argument. "],
["BytesLabels", "BytesLabels.html", "length", "BytesLabels.html#VALlength", "<div class=\"info\">  Return the length (number of bytes) of the argument. </div>", "  Return the length (number of bytes) of the argument. "],
["Hashtbl", "Hashtbl.html", "length", "Hashtbl.html#VALlength", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length tbl</code> returns the number of bindings in <code class=\"code\">tbl</code>. </div>", "  Hashtbl.length tbl returns the number of bindings in tbl. "],
["Hashtbl.S", "Hashtbl.S.html", "length", "Hashtbl.S.html#VALlength", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "length", "Hashtbl.SeededS.html#VALlength", "", ""],
["List", "List.html", "length", "List.html#VALlength", "<div class=\"info\">  Return the length (number of elements) of the given list. </div>", "  Return the length (number of elements) of the given list. "],
["ListLabels", "ListLabels.html", "length", "ListLabels.html#VALlength", "<div class=\"info\">  Return the length (number of elements) of the given list. </div>", "  Return the length (number of elements) of the given list. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "length", "MoreLabels.Hashtbl.html#VALlength", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "length", "MoreLabels.Hashtbl.S.html#VALlength", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "length", "MoreLabels.Hashtbl.SeededS.html#VALlength", "", ""],
["Queue", "Queue.html", "length", "Queue.html#VALlength", "<div class=\"info\">  Return the number of elements in a queue. </div>", "  Return the number of elements in a queue. "],
["Stack", "Stack.html", "length", "Stack.html#VALlength", "<div class=\"info\">  Return the number of elements in a stack. </div>", "  Return the number of elements in a stack. "],
["StringLabels", "StringLabels.html", "length", "StringLabels.html#VALlength", "<div class=\"info\">  Return the length (number of characters) of the given string. </div>", "  Return the length (number of characters) of the given string. "],
["String", "String.html", "length", "String.html#VALlength", "<div class=\"info\">  Return the length (number of characters) of the given string. </div>", "  Return the length (number of characters) of the given string. "],
["Weak", "Weak.html", "length", "Weak.html#VALlength", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.length ar</code> returns the length (number of elements) of <code class=\"code\">ar</code>. </div>", "  Weak.length ar returns the length (number of elements) of ar. "],
["Num", "Num.html", "le_num", "Num.html#VALle_num", "", ""],
["Big_int", "Big_int.html", "le_big_int", "Big_int.html#VALle_big_int", "", ""],
["Pervasives", "Pervasives.html", "ldexp", "Pervasives.html#VALldexp", "<div class=\"info\">  <code class=\"code\">ldexp x n</code> returns <code class=\"code\">x *. 2 ** n</code>. </div>", "  ldexp x n returns x *. 2 ** n. "],
["Obj", "Obj.html", "lazy_tag", "Obj.html#VALlazy_tag", "", ""],
["Lazy", "Lazy.html", "lazy_is_val", "Lazy.html#VALlazy_is_val", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Lazy", "Lazy.html", "lazy_from_val", "Lazy.html#VALlazy_from_val", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Lazy", "Lazy.html", "lazy_from_fun", "Lazy.html#VALlazy_from_fun", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "layout", "Bigarray.Genarray.html#VALlayout", "<div class=\"info\">  Return the layout of the given big array. </div>", "  Return the layout of the given big array. "],
["Bigarray.Array1", "Bigarray.Array1.html", "layout", "Bigarray.Array1.html#VALlayout", "<div class=\"info\">  Return the layout of the given big array. </div>", "  Return the layout of the given big array. "],
["Bigarray.Array2", "Bigarray.Array2.html", "layout", "Bigarray.Array2.html#VALlayout", "<div class=\"info\">  Return the layout of the given big array. </div>", "  Return the layout of the given big array. "],
["Bigarray.Array3", "Bigarray.Array3.html", "layout", "Bigarray.Array3.html#VALlayout", "<div class=\"info\">  Return the layout of the given big array. </div>", "  Return the layout of the given big array. "],
["Str", "Str.html", "last_chars", "Str.html#VALlast_chars", "<div class=\"info\">  <code class=\"code\">last_chars s n</code> returns the last <code class=\"code\">n</code> characters of <code class=\"code\">s</code>. </div>", "  last_chars s n returns the last n characters of s. "],
["Scanf", "Scanf.html", "ksscanf", "Scanf.html#VALksscanf", "<div class=\"info\">  Same as <a href=\"Scanf.html#VALkscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.kscanf</code></a> but reads from the given string. </div>", "  Same as Scanf.kscanf but reads from the given string. "],
["Format", "Format.html", "ksprintf", "Format.html#VALksprintf", "<div class=\"info\">  Same as <code class=\"code\">sprintf</code> above, but instead of returning the string, passes it to the first argument. </div>", "  Same as sprintf above, but instead of returning the string, passes it to the first argument. "],
["Printf", "Printf.html", "ksprintf", "Printf.html#VALksprintf", "<div class=\"info\">  Same as <code class=\"code\">sprintf</code> above, but instead of returning the string, passes it to the first argument. </div>", "  Same as sprintf above, but instead of returning the string, passes it to the first argument. "],
["Scanf", "Scanf.html", "kscanf", "Scanf.html#VALkscanf", "<div class=\"info\">  Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but takes an additional function argument <code class=\"code\">ef</code> that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function <code class=\"code\">ef</code> with the formatted input channel and the exception that aborted the scanning process as arguments. </div>", "  Same as Scanf.bscanf, but takes an additional function argument ef that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function ef with the formatted input channel and the exception that aborted the scanning process as arguments. "],
["Format", "Format.html", "kprintf", "Format.html#VALkprintf", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Printf", "Printf.html", "kprintf", "Printf.html#VALkprintf", "<div class=\"info\">  A deprecated synonym for <code class=\"code\">ksprintf</code>. </div>", "  A deprecated synonym for ksprintf. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "kind", "Bigarray.Genarray.html#VALkind", "<div class=\"info\">  Return the kind of the given big array. </div>", "  Return the kind of the given big array. "],
["Bigarray.Array1", "Bigarray.Array1.html", "kind", "Bigarray.Array1.html#VALkind", "<div class=\"info\">  Return the kind of the given big array. </div>", "  Return the kind of the given big array. "],
["Bigarray.Array2", "Bigarray.Array2.html", "kind", "Bigarray.Array2.html#VALkind", "<div class=\"info\">  Return the kind of the given big array. </div>", "  Return the kind of the given big array. "],
["Bigarray.Array3", "Bigarray.Array3.html", "kind", "Bigarray.Array3.html#VALkind", "<div class=\"info\">  Return the kind of the given big array. </div>", "  Return the kind of the given big array. "],
["Thread", "Thread.html", "kill", "Thread.html#VALkill", "<div class=\"info\">  Terminate prematurely the thread whose handle is given. </div>", "  Terminate prematurely the thread whose handle is given. "],
["Unix", "Unix.html", "kill", "Unix.html#VALkill", "<div class=\"info\">  <code class=\"code\">kill pid <span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process with id <code class=\"code\">pid</code>. </div>", "  kill pid sig sends signal number sig to the process with id pid. "],
["UnixLabels", "UnixLabels.html", "kill", "UnixLabels.html#VALkill", "<div class=\"info\">  <code class=\"code\">kill pid <span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process with id <code class=\"code\">pid</code>. </div>", "  kill pid sig sends signal number sig to the process with id pid. "],
["Scanf", "Scanf.html", "kfscanf", "Scanf.html#VALkfscanf", "<div class=\"info\">  Same as <a href=\"Scanf.html#VALkscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.kscanf</code></a>, but reads from the given regular input channel. </div>", "  Same as Scanf.kscanf, but reads from the given regular input channel. "],
["Format", "Format.html", "kfprintf", "Format.html#VALkfprintf", "<div class=\"info\">  Same as <code class=\"code\">fprintf</code> above, but instead of returning immediately, passes the formatter to its first argument at the end of printing. </div>", "  Same as fprintf above, but instead of returning immediately, passes the formatter to its first argument at the end of printing. "],
["Printf", "Printf.html", "kfprintf", "Printf.html#VALkfprintf", "<div class=\"info\">  Same as <code class=\"code\">fprintf</code>, but instead of returning immediately, passes the out channel to its first argument at the end of printing. </div>", "  Same as fprintf, but instead of returning immediately, passes the out channel to its first argument at the end of printing. "],
["Graphics", "Graphics.html", "key_pressed", "Graphics.html#VALkey_pressed", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if a keypress is available; that is, if <code class=\"code\">read_key</code> would not block. </div>", "  Return true if a keypress is available; that is, if read_key would not block. "],
["Printf", "Printf.html", "kbprintf", "Printf.html#VALkbprintf", "<div class=\"info\">  Same as <code class=\"code\">bprintf</code>, but instead of returning immediately, passes the buffer to its first argument at the end of printing. </div>", "  Same as bprintf, but instead of returning immediately, passes the buffer to its first argument at the end of printing. "],
["Stream", "Stream.html", "junk", "Stream.html#VALjunk", "<div class=\"info\">  Remove the first element of the stream, possibly unfreezing it before. </div>", "  Remove the first element of the stream, possibly unfreezing it before. "],
["Thread", "Thread.html", "join", "Thread.html#VALjoin", "<div class=\"info\">  <code class=\"code\">join th</code> suspends the execution of the calling thread until the thread <code class=\"code\">th</code> has terminated. </div>", "  join th suspends the execution of the calling thread until the thread th has terminated. "],
["Array", "Array.html", "iteri", "Array.html#VALiteri", "<div class=\"info\">  Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the function is applied to the index of the element as first argument, and the element itself as second argument. </div>", "  Same as Array.iter, but the function is applied to the index of the element as first argument, and the element itself as second argument. "],
["ArrayLabels", "ArrayLabels.html", "iteri", "ArrayLabels.html#VALiteri", "<div class=\"info\">  Same as <a href=\"ArrayLabels.html#VALiter\"><code class=\"code\"><span class=\"constructor\">ArrayLabels</span>.iter</code></a>, but the function is applied to the index of the element as first argument, and the element itself as second argument. </div>", "  Same as ArrayLabels.iter, but the function is applied to the index of the element as first argument, and the element itself as second argument. "],
["Bytes", "Bytes.html", "iteri", "Bytes.html#VALiteri", "<div class=\"info\">  Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of the byte as first argument and the byte itself as second argument. </div>", "  Same as Bytes.iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument. "],
["BytesLabels", "BytesLabels.html", "iteri", "BytesLabels.html#VALiteri", "<div class=\"info\">  Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of the byte as first argument and the byte itself as second argument. </div>", "  Same as Bytes.iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument. "],
["List", "List.html", "iteri", "List.html#VALiteri", "<div class=\"info\">  Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. </div>", "  Same as List.iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. "],
["ListLabels", "ListLabels.html", "iteri", "ListLabels.html#VALiteri", "<div class=\"info\">  Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. </div>", "  Same as List.iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. "],
["StringLabels", "StringLabels.html", "iteri", "StringLabels.html#VALiteri", "<div class=\"info\">  Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument. </div>", "  Same as String.iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument. "],
["String", "String.html", "iteri", "String.html#VALiteri", "<div class=\"info\">  Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument. </div>", "  Same as String.iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument. "],
["List", "List.html", "iter2", "List.html#VALiter2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn <code class=\"code\">f a1 b1; ...; f an bn</code>. </div>", "  List.iter2 f [a1; ...; an] [b1; ...; bn] calls in turn f a1 b1; ...; f an bn. "],
["ListLabels", "ListLabels.html", "iter2", "ListLabels.html#VALiter2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn <code class=\"code\">f a1 b1; ...; f an bn</code>. </div>", "  List.iter2 f [a1; ...; an] [b1; ...; bn] calls in turn f a1 b1; ...; f an bn. "],
["Array", "Array.html", "iter", "Array.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.iter f a</code> applies function <code class=\"code\">f</code> in turn to all the elements of <code class=\"code\">a</code>. </div>", "  Array.iter f a applies function f in turn to all the elements of a. "],
["ArrayLabels", "ArrayLabels.html", "iter", "ArrayLabels.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.iter f a</code> applies function <code class=\"code\">f</code> in turn to all the elements of <code class=\"code\">a</code>. </div>", "  Array.iter f a applies function f in turn to all the elements of a. "],
["Bytes", "Bytes.html", "iter", "Bytes.html#VALiter", "<div class=\"info\">  <code class=\"code\">iter f s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>. </div>", "  iter f s applies function f in turn to all the bytes of s. "],
["BytesLabels", "BytesLabels.html", "iter", "BytesLabels.html#VALiter", "<div class=\"info\">  <code class=\"code\">iter f s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>. </div>", "  iter f s applies function f in turn to all the bytes of s. "],
["Hashtbl", "Hashtbl.html", "iter", "Hashtbl.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter f tbl</code> applies <code class=\"code\">f</code> to all bindings in table <code class=\"code\">tbl</code>. </div>", "  Hashtbl.iter f tbl applies f to all bindings in table tbl. "],
["Hashtbl.S", "Hashtbl.S.html", "iter", "Hashtbl.S.html#VALiter", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "iter", "Hashtbl.SeededS.html#VALiter", "", ""],
["List", "List.html", "iter", "List.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.iter f [a1; ...; an]</code> applies function <code class=\"code\">f</code> in turn to <code class=\"code\">a1; ...; an</code>. </div>", "  List.iter f [a1; ...; an] applies function f in turn to a1; ...; an. "],
["ListLabels", "ListLabels.html", "iter", "ListLabels.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.iter f [a1; ...; an]</code> applies function <code class=\"code\">f</code> in turn to <code class=\"code\">a1; ...; an</code>. </div>", "  List.iter f [a1; ...; an] applies function f in turn to a1; ...; an. "],
["Map.S", "Map.S.html", "iter", "Map.S.html#VALiter", "<div class=\"info\">  <code class=\"code\">iter f m</code> applies <code class=\"code\">f</code> to all bindings in map <code class=\"code\">m</code>. </div>", "  iter f m applies f to all bindings in map m. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "iter", "MoreLabels.Hashtbl.html#VALiter", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "iter", "MoreLabels.Hashtbl.S.html#VALiter", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "iter", "MoreLabels.Hashtbl.SeededS.html#VALiter", "", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "iter", "MoreLabels.Map.S.html#VALiter", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "iter", "MoreLabels.Set.S.html#VALiter", "", ""],
["Queue", "Queue.html", "iter", "Queue.html#VALiter", "<div class=\"info\">  <code class=\"code\">iter f q</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">q</code>, from the least recently entered to the most recently entered. </div>", "  iter f q applies f in turn to all elements of q, from the least recently entered to the most recently entered. "],
["Set.S", "Set.S.html", "iter", "Set.S.html#VALiter", "<div class=\"info\">  <code class=\"code\">iter f s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>. </div>", "  iter f s applies f in turn to all elements of s. "],
["Stack", "Stack.html", "iter", "Stack.html#VALiter", "<div class=\"info\">  <code class=\"code\">iter f s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>, from the element at the top of the stack to the element at the bottom of the stack. </div>", "  iter f s applies f in turn to all elements of s, from the element at the top of the stack to the element at the bottom of the stack. "],
["StringLabels", "StringLabels.html", "iter", "StringLabels.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.iter f s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code>. </div>", "  String.iter f s applies function f in turn to all the characters of s. "],
["Stream", "Stream.html", "iter", "Stream.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Stream</span>.iter f s</code> scans the whole stream s, applying function <code class=\"code\">f</code> in turn to each stream element encountered. </div>", "  Stream.iter f s scans the whole stream s, applying function f in turn to each stream element encountered. "],
["String", "String.html", "iter", "String.html#VALiter", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.iter f s</code> applies function <code class=\"code\">f</code> in turn to all the characters of <code class=\"code\">s</code>. </div>", "  String.iter f s applies function f in turn to all the characters of s. "],
["Weak.S", "Weak.S.html", "iter", "Weak.S.html#VALiter", "<div class=\"info\">  <code class=\"code\">iter f t</code> calls <code class=\"code\">f</code> on each element of <code class=\"code\">t</code>, in some unspecified order. </div>", "  iter f t calls f on each element of t, in some unspecified order. "],
["Unix", "Unix.html", "isatty", "Unix.html#VALisatty", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise. </div>", "  Return true if the given file descriptor refers to a terminal or console window, false otherwise. "],
["UnixLabels", "UnixLabels.html", "isatty", "UnixLabels.html#VALisatty", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise. </div>", "  Return true if the given file descriptor refers to a terminal or console window, false otherwise. "],
["Lazy", "Lazy.html", "is_val", "Lazy.html#VALis_val", "<div class=\"info\">  <code class=\"code\">is_val x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">x</code> has already been forced and did not raise an exception. </div>", "  is_val x returns true if x has already been forced and did not raise an exception. "],
["Filename", "Filename.html", "is_relative", "Filename.html#VALis_relative", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative to the current directory, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is absolute (i.e. </div>", "  Return true if the file name is relative to the current directory, false if it is absolute (i.e. "],
["Printexc.Slot", "Printexc.Slot.html", "is_raise", "Printexc.Slot.html#VALis_raise", "<div class=\"info\">  <code class=\"code\">is_raise slot</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> when <code class=\"code\">slot</code> refers to a raising point in the code, and <code class=\"code\"><span class=\"keyword\">false</span></code> when it comes from a simple function call. </div>", "  is_raise slot is true when slot refers to a raising point in the code, and false when it comes from a simple function call. "],
["Dynlink", "Dynlink.html", "is_native", "Dynlink.html#VALis_native", "<div class=\"info\">  <code class=\"code\"><span class=\"keyword\">true</span></code> if the program is native, <code class=\"code\"><span class=\"keyword\">false</span></code> if the program is bytecode. </div>", "  true if the program is native, false if the program is bytecode. "],
["Num", "Num.html", "is_integer_num", "Num.html#VALis_integer_num", "<div class=\"info\">  Test if a number is an integer </div>", "  Test if a number is an integer "],
["Big_int", "Big_int.html", "is_int_big_int", "Big_int.html#VALis_int_big_int", "<div class=\"info\">  Test whether the given big integer is small enough to be representable as a small integer (type <code class=\"code\">int</code>) without loss of precision. </div>", "  Test whether the given big integer is small enough to be representable as a small integer (type int) without loss of precision. "],
["Obj", "Obj.html", "is_int", "Obj.html#VALis_int", "", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "is_in_char_set", "CamlinternalFormat.html#VALis_in_char_set", "", ""],
["Filename", "Filename.html", "is_implicit", "Filename.html#VALis_implicit", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative and does not start with an explicit reference to the current directory (<code class=\"code\">./</code> or <code class=\"code\">../</code> in Unix), <code class=\"code\"><span class=\"keyword\">false</span></code> if it starts with an explicit reference to the root directory or the current directory. </div>", "  Return true if the file name is relative and does not start with an explicit reference to the current directory (./ or ../ in Unix), false if it starts with an explicit reference to the root directory or the current directory. "],
["Map.S", "Map.S.html", "is_empty", "Map.S.html#VALis_empty", "<div class=\"info\">  Test whether a map is empty or not. </div>", "  Test whether a map is empty or not. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "is_empty", "MoreLabels.Map.S.html#VALis_empty", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "is_empty", "MoreLabels.Set.S.html#VALis_empty", "", ""],
["Queue", "Queue.html", "is_empty", "Queue.html#VALis_empty", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given queue is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise. </div>", "  Return true if the given queue is empty, false otherwise. "],
["Set.S", "Set.S.html", "is_empty", "Set.S.html#VALis_empty", "<div class=\"info\">  Test whether a set is empty or not. </div>", "  Test whether a set is empty or not. "],
["Stack", "Stack.html", "is_empty", "Stack.html#VALis_empty", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given stack is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise. </div>", "  Return true if the given stack is empty, false otherwise. "],
["Sys", "Sys.html", "is_directory", "Sys.html#VALis_directory", "<div class=\"info\">  Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the given name refers to a directory, <code class=\"code\"><span class=\"keyword\">false</span></code> if it refers to another kind of file. </div>", "  Returns true if the given name refers to a directory, false if it refers to another kind of file. "],
["Obj", "Obj.html", "is_block", "Obj.html#VALis_block", "", ""],
["Pervasives", "Pervasives.html", "invalid_arg", "Pervasives.html#VALinvalid_arg", "<div class=\"info\">  Raise exception <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> with the given string. </div>", "  Raise exception Invalid_argument with the given string. "],
["Complex", "Complex.html", "inv", "Complex.html#VALinv", "<div class=\"info\">  Multiplicative inverse (<code class=\"code\">1/z</code>). </div>", "  Multiplicative inverse (1/z). "],
["Sys", "Sys.html", "interactive", "Sys.html#VALinteractive", "<div class=\"info\">  This reference is initially set to <code class=\"code\"><span class=\"keyword\">false</span></code> in standalone programs and to <code class=\"code\"><span class=\"keyword\">true</span></code> if the code is being executed under the interactive toplevel system <code class=\"code\">ocaml</code>. </div>", "  This reference is initially set to false in standalone programs and to true if the code is being executed under the interactive toplevel system ocaml. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "inter", "MoreLabels.Set.S.html#VALinter", "", ""],
["Set.S", "Set.S.html", "inter", "Set.S.html#VALinter", "<div class=\"info\">  Set intersection. </div>", "  Set intersection. "],
["Num", "Num.html", "integer_num", "Num.html#VALinteger_num", "<div class=\"info\">  <code class=\"code\">integer_num n</code> returns the integer closest to <code class=\"code\">n</code>. </div>", "  integer_num n returns the integer closest to n. "],
["Obj", "Obj.html", "int_tag", "Obj.html#VALint_tag", "", ""],
["Pervasives", "Pervasives.html", "int_of_string", "Pervasives.html#VALint_of_string", "<div class=\"info\">  Convert the given string to an integer. </div>", "  Convert the given string to an integer. "],
["Num", "Num.html", "int_of_num", "Num.html#VALint_of_num", "", ""],
["Pervasives", "Pervasives.html", "int_of_float", "Pervasives.html#VALint_of_float", "<div class=\"info\">  Truncate the given floating-point number to an integer. </div>", "  Truncate the given floating-point number to an integer. "],
["Pervasives", "Pervasives.html", "int_of_char", "Pervasives.html#VALint_of_char", "<div class=\"info\">  Return the ASCII code of the argument. </div>", "  Return the ASCII code of the argument. "],
["Big_int", "Big_int.html", "int_of_big_int", "Big_int.html#VALint_of_big_int", "<div class=\"info\">  Convert a big integer to a small integer (type <code class=\"code\">int</code>). </div>", "  Convert a big integer to a small integer (type int). "],
["Bigarray", "Bigarray.html", "int8_unsigned", "Bigarray.html#VALint8_unsigned", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Bigarray", "Bigarray.html", "int8_signed", "Bigarray.html#VALint8_signed", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Big_int", "Big_int.html", "int64_of_big_int", "Big_int.html#VALint64_of_big_int", "<div class=\"info\">  Convert a big integer to a 64-bit integer. </div>", "  Convert a big integer to a 64-bit integer. "],
["Bigarray", "Bigarray.html", "int64", "Bigarray.html#VALint64", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Random", "Random.html", "int64", "Random.html#VALint64", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Random</span>.int64 bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive). </div>", "  Random.int64 bound returns a random integer between 0 (inclusive) and bound (exclusive). "],
["Random.State", "Random.State.html", "int64", "Random.State.html#VALint64", "", ""],
["Big_int", "Big_int.html", "int32_of_big_int", "Big_int.html#VALint32_of_big_int", "<div class=\"info\">  Convert a big integer to a 32-bit integer. </div>", "  Convert a big integer to a 32-bit integer. "],
["Bigarray", "Bigarray.html", "int32", "Bigarray.html#VALint32", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Random", "Random.html", "int32", "Random.html#VALint32", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Random</span>.int32 bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive). </div>", "  Random.int32 bound returns a random integer between 0 (inclusive) and bound (exclusive). "],
["Random.State", "Random.State.html", "int32", "Random.State.html#VALint32", "", ""],
["Bigarray", "Bigarray.html", "int16_unsigned", "Bigarray.html#VALint16_unsigned", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Bigarray", "Bigarray.html", "int16_signed", "Bigarray.html#VALint16_signed", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Bigarray", "Bigarray.html", "int", "Bigarray.html#VALint", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Random", "Random.html", "int", "Random.html#VALint", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Random</span>.int bound</code> returns a random integer between 0 (inclusive) and <code class=\"code\">bound</code> (exclusive). </div>", "  Random.int bound returns a random integer between 0 (inclusive) and bound (exclusive). "],
["Random.State", "Random.State.html", "int", "Random.State.html#VALint", "", ""],
["Pervasives", "Pervasives.html", "input_value", "Pervasives.html#VALinput_value", "<div class=\"info\">  Read the representation of a structured value, as produced by <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a>, and return the corresponding value. </div>", "  Read the representation of a structured value, as produced by output_value, and return the corresponding value. "],
["Pervasives", "Pervasives.html", "input_line", "Pervasives.html#VALinput_line", "<div class=\"info\">  Read characters from the given input channel, until a newline character is encountered. </div>", "  Read characters from the given input channel, until a newline character is encountered. "],
["Pervasives", "Pervasives.html", "input_char", "Pervasives.html#VALinput_char", "<div class=\"info\">  Read one character from the given input channel. </div>", "  Read one character from the given input channel. "],
["Pervasives", "Pervasives.html", "input_byte", "Pervasives.html#VALinput_byte", "<div class=\"info\">  Same as <a href=\"Pervasives.html#VALinput_char\"><code class=\"code\">input_char</code></a>, but return the 8-bit integer representing the character. </div>", "  Same as input_char, but return the 8-bit integer representing the character. "],
["Pervasives", "Pervasives.html", "input_binary_int", "Pervasives.html#VALinput_binary_int", "<div class=\"info\">  Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel. </div>", "  Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel. "],
["Digest", "Digest.html", "input", "Digest.html#VALinput", "<div class=\"info\">  Read a digest from the given input channel. </div>", "  Read a digest from the given input channel. "],
["Pervasives", "Pervasives.html", "input", "Pervasives.html#VALinput", "<div class=\"info\">  <code class=\"code\">input ic buf pos len</code> reads up to <code class=\"code\">len</code> characters from the given channel <code class=\"code\">ic</code>, storing them in byte sequence <code class=\"code\">buf</code>, starting at character number <code class=\"code\">pos</code>. </div>", "  input ic buf pos len reads up to len characters from the given channel ic, storing them in byte sequence buf, starting at character number pos. "],
["Unix", "Unix.html", "initgroups", "Unix.html#VALinitgroups", "<div class=\"info\">  <code class=\"code\">initgroups user group</code> initializes the group access list by reading the group database /etc/group and using all groups of which <code class=\"code\">user</code> is a member. </div>", "  initgroups user group initializes the group access list by reading the group database /etc/group and using all groups of which user is a member. "],
["UnixLabels", "UnixLabels.html", "initgroups", "UnixLabels.html#VALinitgroups", "<div class=\"info\">  <code class=\"code\">initgroups user group</code> initializes the group access list by reading the group database /etc/group and using all groups of which <code class=\"code\">user</code> is a member. </div>", "  initgroups user group initializes the group access list by reading the group database /etc/group and using all groups of which user is a member. "],
["CamlinternalMod", "CamlinternalMod.html", "init_mod", "CamlinternalMod.html#VALinit_mod", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "init_class", "CamlinternalOO.html#VALinit_class", "", ""],
["Array", "Array.html", "init", "Array.html#VALinit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.init n f</code> returns a fresh array of length <code class=\"code\">n</code>, with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f i</code>. </div>", "  Array.init n f returns a fresh array of length n, with element number i initialized to the result of f i. "],
["ArrayLabels", "ArrayLabels.html", "init", "ArrayLabels.html#VALinit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.init n f</code> returns a fresh array of length <code class=\"code\">n</code>, with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f i</code>. </div>", "  Array.init n f returns a fresh array of length n, with element number i initialized to the result of f i. "],
["Bytes", "Bytes.html", "init", "Bytes.html#VALinit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Bytes</span>.init n f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f i</code> (in increasing index order). </div>", "  Bytes.init n f returns a fresh byte sequence of length n, with character i initialized to the result of f i (in increasing index order). "],
["BytesLabels", "BytesLabels.html", "init", "BytesLabels.html#VALinit", "<div class=\"info\">  <code class=\"code\">init n f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f i</code>. </div>", "  init n f returns a fresh byte sequence of length n, with character i initialized to the result of f i. "],
["Dynlink", "Dynlink.html", "init", "Dynlink.html#VALinit", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Random", "Random.html", "init", "Random.html#VALinit", "<div class=\"info\">  Initialize the generator, using the argument as a seed. </div>", "  Initialize the generator, using the argument as a seed. "],
["StringLabels", "StringLabels.html", "init", "StringLabels.html#VALinit", "<div class=\"info\">  <code class=\"code\">init n f</code> returns a string of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f i</code>. </div>", "  init n f returns a string of length n, with character i initialized to the result of f i. "],
["String", "String.html", "init", "String.html#VALinit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.init n f</code> returns a string of length <code class=\"code\">n</code>, with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f i</code> (called in increasing index order). </div>", "  String.init n f returns a string of length n, with character i initialized to the result of f i (called in increasing index order). "],
["CamlinternalOO", "CamlinternalOO.html", "inherits", "CamlinternalOO.html#VALinherits", "", ""],
["Obj", "Obj.html", "infix_tag", "Obj.html#VALinfix_tag", "", ""],
["Pervasives", "Pervasives.html", "infinity", "Pervasives.html#VALinfinity", "<div class=\"info\">  Positive infinity. </div>", "  Positive infinity. "],
["Unix", "Unix.html", "inet_addr_of_string", "Unix.html#VALinet_addr_of_string", "<div class=\"info\">  Conversion from the printable representation of an Internet address to its internal representation. </div>", "  Conversion from the printable representation of an Internet address to its internal representation. "],
["UnixLabels", "UnixLabels.html", "inet_addr_of_string", "UnixLabels.html#VALinet_addr_of_string", "<div class=\"info\">  Conversion from the printable representation of an Internet address to its internal representation. </div>", "  Conversion from the printable representation of an Internet address to its internal representation. "],
["Unix", "Unix.html", "inet_addr_loopback", "Unix.html#VALinet_addr_loopback", "<div class=\"info\">  A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>). </div>", "  A special IPv4 address representing the host machine (127.0.0.1). "],
["UnixLabels", "UnixLabels.html", "inet_addr_loopback", "UnixLabels.html#VALinet_addr_loopback", "<div class=\"info\">  A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>). </div>", "  A special IPv4 address representing the host machine (127.0.0.1). "],
["Unix", "Unix.html", "inet_addr_any", "Unix.html#VALinet_addr_any", "<div class=\"info\">  A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses. </div>", "  A special IPv4 address, for use only with bind, representing all the Internet addresses that the host machine possesses. "],
["UnixLabels", "UnixLabels.html", "inet_addr_any", "UnixLabels.html#VALinet_addr_any", "<div class=\"info\">  A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses. </div>", "  A special IPv4 address, for use only with bind, representing all the Internet addresses that the host machine possesses. "],
["Unix", "Unix.html", "inet6_addr_loopback", "Unix.html#VALinet6_addr_loopback", "<div class=\"info\">  A special IPv6 address representing the host machine (<code class=\"code\">::1</code>). </div>", "  A special IPv6 address representing the host machine (::1). "],
["UnixLabels", "UnixLabels.html", "inet6_addr_loopback", "UnixLabels.html#VALinet6_addr_loopback", "<div class=\"info\">  A special IPv6 address representing the host machine (<code class=\"code\">::1</code>). </div>", "  A special IPv6 address representing the host machine (::1). "],
["Unix", "Unix.html", "inet6_addr_any", "Unix.html#VALinet6_addr_any", "<div class=\"info\">  A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses. </div>", "  A special IPv6 address, for use only with bind, representing all the Internet addresses that the host machine possesses. "],
["UnixLabels", "UnixLabels.html", "inet6_addr_any", "UnixLabels.html#VALinet6_addr_any", "<div class=\"info\">  A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing all the Internet addresses that the host machine possesses. </div>", "  A special IPv6 address, for use only with bind, representing all the Internet addresses that the host machine possesses. "],
["Bytes", "Bytes.html", "index_from", "Bytes.html#VALindex_from", "<div class=\"info\">  <code class=\"code\">index_from s i c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>. </div>", "  index_from s i c returns the index of the first occurrence of byte c in s after position i. "],
["BytesLabels", "BytesLabels.html", "index_from", "BytesLabels.html#VALindex_from", "<div class=\"info\">  <code class=\"code\">index_from s i c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>. </div>", "  index_from s i c returns the index of the first occurrence of byte c in s after position i. "],
["StringLabels", "StringLabels.html", "index_from", "StringLabels.html#VALindex_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.index_from s i c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>. </div>", "  String.index_from s i c returns the index of the first occurrence of character c in string s after position i. "],
["String", "String.html", "index_from", "String.html#VALindex_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.index_from s i c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>. </div>", "  String.index_from s i c returns the index of the first occurrence of character c in string s after position i. "],
["Bytes", "Bytes.html", "index", "Bytes.html#VALindex", "<div class=\"info\">  <code class=\"code\">index s c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>. </div>", "  index s c returns the index of the first occurrence of byte c in s. "],
["BytesLabels", "BytesLabels.html", "index", "BytesLabels.html#VALindex", "<div class=\"info\">  <code class=\"code\">index s c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code> in <code class=\"code\">s</code>. </div>", "  index s c returns the index of the first occurrence of byte c in s. "],
["StringLabels", "StringLabels.html", "index", "StringLabels.html#VALindex", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.index s c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>. </div>", "  String.index s c returns the index of the first occurrence of character c in string s. "],
["String", "String.html", "index", "String.html#VALindex", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.index s c</code> returns the index of the first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>. </div>", "  String.index s c returns the index of the first occurrence of character c in string s. "],
["Num", "Num.html", "incr_num", "Num.html#VALincr_num", "<div class=\"info\">  <code class=\"code\">incr r</code> is <code class=\"code\">r:=!r+1</code>, where <code class=\"code\">r</code> is a reference to a number. </div>", "  incr r is r:=!r+1, where r is a reference to a number. "],
["Pervasives", "Pervasives.html", "incr", "Pervasives.html#VALincr", "<div class=\"info\">  Increment the integer contained in the given reference. </div>", "  Increment the integer contained in the given reference. "],
["Unix", "Unix.html", "in_channel_of_descr", "Unix.html#VALin_channel_of_descr", "<div class=\"info\">  Create an input channel reading from the given descriptor. </div>", "  Create an input channel reading from the given descriptor. "],
["UnixLabels", "UnixLabels.html", "in_channel_of_descr", "UnixLabels.html#VALin_channel_of_descr", "<div class=\"info\">  Create an input channel reading from the given descriptor. </div>", "  Create an input channel reading from the given descriptor. "],
["Pervasives", "Pervasives.html", "in_channel_length", "Pervasives.html#VALin_channel_length", "<div class=\"info\">  Return the size (number of characters) of the regular file on which the given channel is opened. </div>", "  Return the size (number of characters) of the regular file on which the given channel is opened. "],
["Pervasives.LargeFile", "Pervasives.LargeFile.html", "in_channel_length", "Pervasives.LargeFile.html#VALin_channel_length", "", ""],
["Format", "Format.html", "ikfprintf", "Format.html#VALikfprintf", "<div class=\"info\">  Same as <code class=\"code\">kfprintf</code> above, but does not print anything. </div>", "  Same as kfprintf above, but does not print anything. "],
["Printf", "Printf.html", "ikfprintf", "Printf.html#VALikfprintf", "<div class=\"info\">  Same as <code class=\"code\">kfprintf</code> above, but does not print anything. </div>", "  Same as kfprintf above, but does not print anything. "],
["Pervasives", "Pervasives.html", "ignore", "Pervasives.html#VALignore", "<div class=\"info\">  Discard the value of its argument and return <code class=\"code\">()</code>. </div>", "  Discard the value of its argument and return (). "],
["Format", "Format.html", "ifprintf", "Format.html#VALifprintf", "<div class=\"info\">  Same as <code class=\"code\">fprintf</code> above, but does not print anything. </div>", "  Same as fprintf above, but does not print anything. "],
["Printf", "Printf.html", "ifprintf", "Printf.html#VALifprintf", "<div class=\"info\">  Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but does not print anything. </div>", "  Same as Printf.fprintf, but does not print anything. "],
["Oo", "Oo.html", "id", "Oo.html#VALid", "<div class=\"info\">  Return an integer identifying this object, unique for the current execution of the program. </div>", "  Return an integer identifying this object, unique for the current execution of the program. "],
["Thread", "Thread.html", "id", "Thread.html#VALid", "<div class=\"info\">  Return the identifier of the given thread. </div>", "  Return the identifier of the given thread. "],
["Complex", "Complex.html", "i", "Complex.html#VALi", "<div class=\"info\">  The complex number <code class=\"code\">i</code>. </div>", "  The complex number i. "],
["Pervasives", "Pervasives.html", "hypot", "Pervasives.html#VALhypot", "<div class=\"info\">  <code class=\"code\">hypot x y</code> returns <code class=\"code\">sqrt(x *. x + y *. y)</code>, that is, the length of the hypotenuse of a right-angled triangle with sides of length <code class=\"code\">x</code> and <code class=\"code\">y</code>, or, equivalently, the distance of the point <code class=\"code\">(x,y)</code> to origin. </div>", "  hypot x y returns sqrt(x *. x + y *. y), that is, the length of the hypotenuse of a right-angled triangle with sides of length x and y, or, equivalently, the distance of the point (x,y) to origin. "],
["Marshal", "Marshal.html", "header_size", "Marshal.html#VALheader_size", "<div class=\"info\">  The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header. </div>", "  The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header. "],
["List", "List.html", "hd", "List.html#VALhd", "<div class=\"info\">  Return the first element of the given list. </div>", "  Return the first element of the given list. "],
["ListLabels", "ListLabels.html", "hd", "ListLabels.html#VALhd", "<div class=\"info\">  Return the first element of the given list. </div>", "  Return the first element of the given list. "],
["Hashtbl", "Hashtbl.html", "hash_param", "Hashtbl.html#VALhash_param", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param meaningful total x</code> computes a hash value for <code class=\"code\">x</code>, with the same properties as for <code class=\"code\">hash</code>. </div>", "  Hashtbl.hash_param meaningful total x computes a hash value for x, with the same properties as for hash. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "hash_param", "MoreLabels.Hashtbl.html#VALhash_param", "", ""],
["Hashtbl", "Hashtbl.html", "hash", "Hashtbl.html#VALhash", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash x</code> associates a nonnegative integer to any value of any type. </div>", "  Hashtbl.hash x associates a nonnegative integer to any value of any type. "],
["Hashtbl.HashedType", "Hashtbl.HashedType.html", "hash", "Hashtbl.HashedType.html#VALhash", "<div class=\"info\">  A hashing function on keys. </div>", "  A hashing function on keys. "],
["Hashtbl.SeededHashedType", "Hashtbl.SeededHashedType.html", "hash", "Hashtbl.SeededHashedType.html#VALhash", "<div class=\"info\">  A seeded hashing function on keys. </div>", "  A seeded hashing function on keys. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "hash", "MoreLabels.Hashtbl.html#VALhash", "", ""],
["Unix", "Unix.html", "handle_unix_error", "Unix.html#VALhandle_unix_error", "<div class=\"info\">  <code class=\"code\">handle_unix_error f x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result. </div>", "  handle_unix_error f x applies f to x and returns the result. "],
["UnixLabels", "UnixLabels.html", "handle_unix_error", "UnixLabels.html#VALhandle_unix_error", "<div class=\"info\">  <code class=\"code\">handle_unix_error f x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result. </div>", "  handle_unix_error f x applies f to x and returns the result. "],
["Event", "Event.html", "guard", "Event.html#VALguard", "<div class=\"info\">  <code class=\"code\">guard fn</code> returns the event that, when synchronized, computes <code class=\"code\">fn()</code> and behaves as the resulting event. </div>", "  guard fn returns the event that, when synchronized, computes fn() and behaves as the resulting event. "],
["Num", "Num.html", "gt_num", "Num.html#VALgt_num", "", ""],
["Big_int", "Big_int.html", "gt_big_int", "Big_int.html#VALgt_big_int", "<div class=\"info\">  Usual boolean comparisons between two big integers. </div>", "  Usual boolean comparisons between two big integers. "],
["Str", "Str.html", "group_end", "Str.html#VALgroup_end", "<div class=\"info\">  <code class=\"code\">group_end n</code> returns the position of the character following the last character of substring that was matched by the <code class=\"code\">n</code>th group of the regular expression that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details). </div>", "  group_end n returns the position of the character following the last character of substring that was matched by the nth group of the regular expression that was matched by the last call to a matching or searching function (see Str.matched_string for details). "],
["Str", "Str.html", "group_beginning", "Str.html#VALgroup_beginning", "<div class=\"info\">  <code class=\"code\">group_beginning n</code> returns the position of the first character of the substring that was matched by the <code class=\"code\">n</code>th group of the regular expression that was matched by the last call to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details). </div>", "  group_beginning n returns the position of the first character of the substring that was matched by the nth group of the regular expression that was matched by the last call to a matching or searching function (see Str.matched_string for details). "],
["Graphics", "Graphics.html", "green", "Graphics.html#VALgreen", "", ""],
["Unix", "Unix.html", "gmtime", "Unix.html#VALgmtime", "<div class=\"info\">  Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and a time. </div>", "  Convert a time in seconds, as returned by Unix.time, into a date and a time. "],
["UnixLabels", "UnixLabels.html", "gmtime", "UnixLabels.html#VALgmtime", "<div class=\"info\">  Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date and a time. </div>", "  Convert a time in seconds, as returned by UnixLabels.time, into a date and a time. "],
["Str", "Str.html", "global_substitute", "Str.html#VALglobal_substitute", "<div class=\"info\">  <code class=\"code\">global_substitute regexp subst s</code> returns a string identical to <code class=\"code\">s</code>, except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code> have been replaced by the result of function <code class=\"code\">subst</code>. </div>", "  global_substitute regexp subst s returns a string identical to s, except that all substrings of s that match regexp have been replaced by the result of function subst. "],
["Str", "Str.html", "global_replace", "Str.html#VALglobal_replace", "<div class=\"info\">  <code class=\"code\">global_replace regexp templ s</code> returns a string identical to <code class=\"code\">s</code>, except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code> have been replaced by <code class=\"code\">templ</code>. </div>", "  global_replace regexp templ s returns a string identical to s, except that all substrings of s that match regexp have been replaced by templ. "],
["Unix", "Unix.html", "getuid", "Unix.html#VALgetuid", "<div class=\"info\">  Return the user id of the user executing the process. </div>", "  Return the user id of the user executing the process. "],
["UnixLabels", "UnixLabels.html", "getuid", "UnixLabels.html#VALgetuid", "<div class=\"info\">  Return the user id of the user executing the process. </div>", "  Return the user id of the user executing the process. "],
["Unix", "Unix.html", "gettimeofday", "Unix.html#VALgettimeofday", "<div class=\"info\">  Same as <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, but with resolution better than 1 second. </div>", "  Same as Unix.time, but with resolution better than 1 second. "],
["UnixLabels", "UnixLabels.html", "gettimeofday", "UnixLabels.html#VALgettimeofday", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, but with resolution better than 1 second. </div>", "  Same as UnixLabels.time, but with resolution better than 1 second. "],
["Unix", "Unix.html", "getsockopt_optint", "Unix.html#VALgetsockopt_optint", "<div class=\"info\">  Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is an <code class=\"code\">int option</code>. </div>", "  Same as Unix.getsockopt for a socket option whose value is an int option. "],
["UnixLabels", "UnixLabels.html", "getsockopt_optint", "UnixLabels.html#VALgetsockopt_optint", "<div class=\"info\">  Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is an <code class=\"code\">int option</code>. </div>", "  Same as Unix.getsockopt for a socket option whose value is an int option. "],
["Unix", "Unix.html", "getsockopt_int", "Unix.html#VALgetsockopt_int", "<div class=\"info\">  Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option. </div>", "  Same as Unix.getsockopt for an integer-valued socket option. "],
["UnixLabels", "UnixLabels.html", "getsockopt_int", "UnixLabels.html#VALgetsockopt_int", "<div class=\"info\">  Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option. </div>", "  Same as Unix.getsockopt for an integer-valued socket option. "],
["Unix", "Unix.html", "getsockopt_float", "Unix.html#VALgetsockopt_float", "<div class=\"info\">  Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a floating-point number. </div>", "  Same as Unix.getsockopt for a socket option whose value is a floating-point number. "],
["UnixLabels", "UnixLabels.html", "getsockopt_float", "UnixLabels.html#VALgetsockopt_float", "<div class=\"info\">  Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a floating-point number. </div>", "  Same as Unix.getsockopt for a socket option whose value is a floating-point number. "],
["Unix", "Unix.html", "getsockopt_error", "Unix.html#VALgetsockopt_error", "<div class=\"info\">  Return the error condition associated with the given socket, and clear it. </div>", "  Return the error condition associated with the given socket, and clear it. "],
["UnixLabels", "UnixLabels.html", "getsockopt_error", "UnixLabels.html#VALgetsockopt_error", "<div class=\"info\">  Return the error condition associated with the given socket, and clear it. </div>", "  Return the error condition associated with the given socket, and clear it. "],
["Unix", "Unix.html", "getsockopt", "Unix.html#VALgetsockopt", "<div class=\"info\">  Return the current status of a boolean-valued option in the given socket. </div>", "  Return the current status of a boolean-valued option in the given socket. "],
["UnixLabels", "UnixLabels.html", "getsockopt", "UnixLabels.html#VALgetsockopt", "<div class=\"info\">  Return the current status of a boolean-valued option in the given socket. </div>", "  Return the current status of a boolean-valued option in the given socket. "],
["Unix", "Unix.html", "getsockname", "Unix.html#VALgetsockname", "<div class=\"info\">  Return the address of the given socket. </div>", "  Return the address of the given socket. "],
["UnixLabels", "UnixLabels.html", "getsockname", "UnixLabels.html#VALgetsockname", "<div class=\"info\">  Return the address of the given socket. </div>", "  Return the address of the given socket. "],
["Unix", "Unix.html", "getservbyport", "Unix.html#VALgetservbyport", "<div class=\"info\">  Find an entry in <code class=\"code\">services</code> with the given service number, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in services with the given service number, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getservbyport", "UnixLabels.html#VALgetservbyport", "<div class=\"info\">  Find an entry in <code class=\"code\">services</code> with the given service number, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in services with the given service number, or raise Not_found. "],
["Unix", "Unix.html", "getservbyname", "Unix.html#VALgetservbyname", "<div class=\"info\">  Find an entry in <code class=\"code\">services</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in services with the given name, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getservbyname", "UnixLabels.html#VALgetservbyname", "<div class=\"info\">  Find an entry in <code class=\"code\">services</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in services with the given name, or raise Not_found. "],
["Unix", "Unix.html", "getpwuid", "Unix.html#VALgetpwuid", "<div class=\"info\">  Find an entry in <code class=\"code\">passwd</code> with the given user id, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in passwd with the given user id, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getpwuid", "UnixLabels.html#VALgetpwuid", "<div class=\"info\">  Find an entry in <code class=\"code\">passwd</code> with the given user id, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in passwd with the given user id, or raise Not_found. "],
["Unix", "Unix.html", "getpwnam", "Unix.html#VALgetpwnam", "<div class=\"info\">  Find an entry in <code class=\"code\">passwd</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in passwd with the given name, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getpwnam", "UnixLabels.html#VALgetpwnam", "<div class=\"info\">  Find an entry in <code class=\"code\">passwd</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in passwd with the given name, or raise Not_found. "],
["Unix", "Unix.html", "getprotobynumber", "Unix.html#VALgetprotobynumber", "<div class=\"info\">  Find an entry in <code class=\"code\">protocols</code> with the given protocol number, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in protocols with the given protocol number, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getprotobynumber", "UnixLabels.html#VALgetprotobynumber", "<div class=\"info\">  Find an entry in <code class=\"code\">protocols</code> with the given protocol number, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in protocols with the given protocol number, or raise Not_found. "],
["Unix", "Unix.html", "getprotobyname", "Unix.html#VALgetprotobyname", "<div class=\"info\">  Find an entry in <code class=\"code\">protocols</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in protocols with the given name, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getprotobyname", "UnixLabels.html#VALgetprotobyname", "<div class=\"info\">  Find an entry in <code class=\"code\">protocols</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in protocols with the given name, or raise Not_found. "],
["Unix", "Unix.html", "getppid", "Unix.html#VALgetppid", "<div class=\"info\">  Return the pid of the parent process. </div>", "  Return the pid of the parent process. "],
["UnixLabels", "UnixLabels.html", "getppid", "UnixLabels.html#VALgetppid", "<div class=\"info\">  Return the pid of the parent process. </div>", "  Return the pid of the parent process. "],
["Unix", "Unix.html", "getpid", "Unix.html#VALgetpid", "<div class=\"info\">  Return the pid of the process. </div>", "  Return the pid of the process. "],
["UnixLabels", "UnixLabels.html", "getpid", "UnixLabels.html#VALgetpid", "<div class=\"info\">  Return the pid of the process. </div>", "  Return the pid of the process. "],
["Unix", "Unix.html", "getpeername", "Unix.html#VALgetpeername", "<div class=\"info\">  Return the address of the host connected to the given socket. </div>", "  Return the address of the host connected to the given socket. "],
["UnixLabels", "UnixLabels.html", "getpeername", "UnixLabels.html#VALgetpeername", "<div class=\"info\">  Return the address of the host connected to the given socket. </div>", "  Return the address of the host connected to the given socket. "],
["Unix", "Unix.html", "getnameinfo", "Unix.html#VALgetnameinfo", "<div class=\"info\">  <code class=\"code\">getnameinfo addr opts</code> returns the host name and service name corresponding to the socket address <code class=\"code\">addr</code>. </div>", "  getnameinfo addr opts returns the host name and service name corresponding to the socket address addr. "],
["UnixLabels", "UnixLabels.html", "getnameinfo", "UnixLabels.html#VALgetnameinfo", "<div class=\"info\">  <code class=\"code\">getnameinfo addr opts</code> returns the host name and service name corresponding to the socket address <code class=\"code\">addr</code>. </div>", "  getnameinfo addr opts returns the host name and service name corresponding to the socket address addr. "],
["Unix", "Unix.html", "getlogin", "Unix.html#VALgetlogin", "<div class=\"info\">  Return the login name of the user executing the process. </div>", "  Return the login name of the user executing the process. "],
["UnixLabels", "UnixLabels.html", "getlogin", "UnixLabels.html#VALgetlogin", "<div class=\"info\">  Return the login name of the user executing the process. </div>", "  Return the login name of the user executing the process. "],
["Unix", "Unix.html", "getitimer", "Unix.html#VALgetitimer", "<div class=\"info\">  Return the current status of the given interval timer. </div>", "  Return the current status of the given interval timer. "],
["UnixLabels", "UnixLabels.html", "getitimer", "UnixLabels.html#VALgetitimer", "<div class=\"info\">  Return the current status of the given interval timer. </div>", "  Return the current status of the given interval timer. "],
["Unix", "Unix.html", "gethostname", "Unix.html#VALgethostname", "<div class=\"info\">  Return the name of the local host. </div>", "  Return the name of the local host. "],
["UnixLabels", "UnixLabels.html", "gethostname", "UnixLabels.html#VALgethostname", "<div class=\"info\">  Return the name of the local host. </div>", "  Return the name of the local host. "],
["Unix", "Unix.html", "gethostbyname", "Unix.html#VALgethostbyname", "<div class=\"info\">  Find an entry in <code class=\"code\">hosts</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in hosts with the given name, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "gethostbyname", "UnixLabels.html#VALgethostbyname", "<div class=\"info\">  Find an entry in <code class=\"code\">hosts</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in hosts with the given name, or raise Not_found. "],
["Unix", "Unix.html", "gethostbyaddr", "Unix.html#VALgethostbyaddr", "<div class=\"info\">  Find an entry in <code class=\"code\">hosts</code> with the given address, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in hosts with the given address, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "gethostbyaddr", "UnixLabels.html#VALgethostbyaddr", "<div class=\"info\">  Find an entry in <code class=\"code\">hosts</code> with the given address, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in hosts with the given address, or raise Not_found. "],
["Unix", "Unix.html", "getgroups", "Unix.html#VALgetgroups", "<div class=\"info\">  Return the list of groups to which the user executing the process belongs. </div>", "  Return the list of groups to which the user executing the process belongs. "],
["UnixLabels", "UnixLabels.html", "getgroups", "UnixLabels.html#VALgetgroups", "<div class=\"info\">  Return the list of groups to which the user executing the process belongs. </div>", "  Return the list of groups to which the user executing the process belongs. "],
["Unix", "Unix.html", "getgrnam", "Unix.html#VALgetgrnam", "<div class=\"info\">  Find an entry in <code class=\"code\">group</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in group with the given name, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getgrnam", "UnixLabels.html#VALgetgrnam", "<div class=\"info\">  Find an entry in <code class=\"code\">group</code> with the given name, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in group with the given name, or raise Not_found. "],
["Unix", "Unix.html", "getgrgid", "Unix.html#VALgetgrgid", "<div class=\"info\">  Find an entry in <code class=\"code\">group</code> with the given group id, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in group with the given group id, or raise Not_found. "],
["UnixLabels", "UnixLabels.html", "getgrgid", "UnixLabels.html#VALgetgrgid", "<div class=\"info\">  Find an entry in <code class=\"code\">group</code> with the given group id, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>. </div>", "  Find an entry in group with the given group id, or raise Not_found. "],
["Unix", "Unix.html", "getgid", "Unix.html#VALgetgid", "<div class=\"info\">  Return the group id of the user executing the process. </div>", "  Return the group id of the user executing the process. "],
["UnixLabels", "UnixLabels.html", "getgid", "UnixLabels.html#VALgetgid", "<div class=\"info\">  Return the group id of the user executing the process. </div>", "  Return the group id of the user executing the process. "],
["Unix", "Unix.html", "geteuid", "Unix.html#VALgeteuid", "<div class=\"info\">  Return the effective user id under which the process runs. </div>", "  Return the effective user id under which the process runs. "],
["UnixLabels", "UnixLabels.html", "geteuid", "UnixLabels.html#VALgeteuid", "<div class=\"info\">  Return the effective user id under which the process runs. </div>", "  Return the effective user id under which the process runs. "],
["Sys", "Sys.html", "getenv", "Sys.html#VALgetenv", "<div class=\"info\">  Return the value associated to a variable in the process environment. </div>", "  Return the value associated to a variable in the process environment. "],
["Unix", "Unix.html", "getenv", "Unix.html#VALgetenv", "<div class=\"info\">  Return the value associated to a variable in the process environment. </div>", "  Return the value associated to a variable in the process environment. "],
["UnixLabels", "UnixLabels.html", "getenv", "UnixLabels.html#VALgetenv", "<div class=\"info\">  Return the value associated to a variable in the process environment. </div>", "  Return the value associated to a variable in the process environment. "],
["Unix", "Unix.html", "getegid", "Unix.html#VALgetegid", "<div class=\"info\">  Return the effective group id under which the process runs. </div>", "  Return the effective group id under which the process runs. "],
["UnixLabels", "UnixLabels.html", "getegid", "UnixLabels.html#VALgetegid", "<div class=\"info\">  Return the effective group id under which the process runs. </div>", "  Return the effective group id under which the process runs. "],
["Sys", "Sys.html", "getcwd", "Sys.html#VALgetcwd", "<div class=\"info\">  Return the current working directory of the process. </div>", "  Return the current working directory of the process. "],
["Unix", "Unix.html", "getcwd", "Unix.html#VALgetcwd", "<div class=\"info\">  Return the name of the current working directory. </div>", "  Return the name of the current working directory. "],
["UnixLabels", "UnixLabels.html", "getcwd", "UnixLabels.html#VALgetcwd", "<div class=\"info\">  Return the name of the current working directory. </div>", "  Return the name of the current working directory. "],
["Unix", "Unix.html", "getaddrinfo", "Unix.html#VALgetaddrinfo", "<div class=\"info\">  <code class=\"code\">getaddrinfo host service opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a> records describing socket parameters and addresses suitable for communicating with the given host and service. </div>", "  getaddrinfo host service opts returns a list of Unix.addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. "],
["UnixLabels", "UnixLabels.html", "getaddrinfo", "UnixLabels.html#VALgetaddrinfo", "<div class=\"info\">  <code class=\"code\">getaddrinfo host service opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a> records describing socket parameters and addresses suitable for communicating with the given host and service. </div>", "  getaddrinfo host service opts returns a list of Unix.addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. "],
["CamlinternalOO", "CamlinternalOO.html", "get_variables", "CamlinternalOO.html#VALget_variables", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "get_variable", "CamlinternalOO.html#VALget_variable", "", ""],
["Filename", "Filename.html", "get_temp_dir_name", "Filename.html#VALget_temp_dir_name", "<div class=\"info\">  The name of the temporary directory: Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\" if the variable is not set. </div>", "  The name of the temporary directory: Under Unix, the value of the TMPDIR environment variable, or \"/tmp\" if the variable is not set. "],
["Random", "Random.html", "get_state", "Random.html#VALget_state", "<div class=\"info\">  Return the current state of the generator used by the basic functions. </div>", "  Return the current state of the generator used by the basic functions. "],
["Printexc", "Printexc.html", "get_raw_backtrace_slot", "Printexc.html#VALget_raw_backtrace_slot", "<div class=\"info\">  <code class=\"code\">get_slot bckt pos</code> returns the slot in position <code class=\"code\">pos</code> in the backtrace <code class=\"code\">bckt</code>. </div>", "  get_slot bckt pos returns the slot in position pos in the backtrace bckt. "],
["Printexc", "Printexc.html", "get_raw_backtrace", "Printexc.html#VALget_raw_backtrace", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_raw_backtrace ()</code> returns the same exception backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would print, but in a raw format. </div>", "  Printexc.get_raw_backtrace () returns the same exception backtrace that Printexc.print_backtrace would print, but in a raw format. "],
["CamlinternalOO", "CamlinternalOO.html", "get_public_method", "CamlinternalOO.html#VALget_public_method", "", ""],
["Format", "Format.html", "get_print_tags", "Format.html#VALget_print_tags", "", ""],
["Arith_status", "Arith_status.html", "get_normalize_ratio_when_printing", "Arith_status.html#VALget_normalize_ratio_when_printing", "<div class=\"info\">  See <a href=\"Arith_status.html#VALset_normalize_ratio_when_printing\"><code class=\"code\"><span class=\"constructor\">Arith_status</span>.set_normalize_ratio_when_printing</code></a>. </div>", "  See Arith_status.set_normalize_ratio_when_printing. "],
["Arith_status", "Arith_status.html", "get_normalize_ratio", "Arith_status.html#VALget_normalize_ratio", "<div class=\"info\">  See <a href=\"Arith_status.html#VALset_normalize_ratio\"><code class=\"code\"><span class=\"constructor\">Arith_status</span>.set_normalize_ratio</code></a>. </div>", "  See Arith_status.set_normalize_ratio. "],
["CamlinternalOO", "CamlinternalOO.html", "get_method_labels", "CamlinternalOO.html#VALget_method_labels", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "get_method_label", "CamlinternalOO.html#VALget_method_label", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "get_method", "CamlinternalOO.html#VALget_method", "", ""],
["Format", "Format.html", "get_max_indent", "Format.html#VALget_max_indent", "<div class=\"info\">  Return the value of the maximum indentation limit (in characters). </div>", "  Return the value of the maximum indentation limit (in characters). "],
["Format", "Format.html", "get_max_boxes", "Format.html#VALget_max_boxes", "<div class=\"info\">  Returns the maximum number of boxes allowed before ellipsis. </div>", "  Returns the maximum number of boxes allowed before ellipsis. "],
["Format", "Format.html", "get_mark_tags", "Format.html#VALget_mark_tags", "<div class=\"info\">  Return the current status of tags printing and tags marking. </div>", "  Return the current status of tags printing and tags marking. "],
["Format", "Format.html", "get_margin", "Format.html#VALget_margin", "<div class=\"info\">  Returns the position of the right margin. </div>", "  Returns the position of the right margin. "],
["Graphics", "Graphics.html", "get_image", "Graphics.html#VALget_image", "<div class=\"info\">  Capture the contents of a rectangle on the screen as an image. </div>", "  Capture the contents of a rectangle on the screen as an image. "],
["Format", "Format.html", "get_formatter_tag_functions", "Format.html#VALget_formatter_tag_functions", "<div class=\"info\">  Return the current tag functions of the pretty-printer. </div>", "  Return the current tag functions of the pretty-printer. "],
["Format", "Format.html", "get_formatter_output_functions", "Format.html#VALget_formatter_output_functions", "<div class=\"info\">  Return the current output functions of the pretty-printer. </div>", "  Return the current output functions of the pretty-printer. "],
["Format", "Format.html", "get_formatter_out_functions", "Format.html#VALget_formatter_out_functions", "<div class=\"info\">  Return the current output functions of the pretty-printer, including line breaking and indentation functions. </div>", "  Return the current output functions of the pretty-printer, including line breaking and indentation functions. "],
["Arith_status", "Arith_status.html", "get_floating_precision", "Arith_status.html#VALget_floating_precision", "<div class=\"info\">  See <a href=\"Arith_status.html#VALset_floating_precision\"><code class=\"code\"><span class=\"constructor\">Arith_status</span>.set_floating_precision</code></a>. </div>", "  See Arith_status.set_floating_precision. "],
["Arith_status", "Arith_status.html", "get_error_when_null_denominator", "Arith_status.html#VALget_error_when_null_denominator", "<div class=\"info\">  See <a href=\"Arith_status.html#VALset_error_when_null_denominator\"><code class=\"code\"><span class=\"constructor\">Arith_status</span>.set_error_when_null_denominator</code></a>. </div>", "  See Arith_status.set_error_when_null_denominator. "],
["Format", "Format.html", "get_ellipsis_text", "Format.html#VALget_ellipsis_text", "<div class=\"info\">  Return the text of the ellipsis. </div>", "  Return the text of the ellipsis. "],
["Weak", "Weak.html", "get_copy", "Weak.html#VALget_copy", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.get_copy ar n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span> x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the value) if it is full. </div>", "  Weak.get_copy ar n returns None if the nth cell of ar is empty, Some x (where x is a (shallow) copy of the value) if it is full. "],
["Printexc", "Printexc.html", "get_callstack", "Printexc.html#VALget_callstack", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_callstack n</code> returns a description of the top of the call stack on the current program point (for the current thread), with at most <code class=\"code\">n</code> entries. </div>", "  Printexc.get_callstack n returns a description of the top of the call stack on the current program point (for the current thread), with at most n entries. "],
["Printexc", "Printexc.html", "get_backtrace", "Printexc.html#VALget_backtrace", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace ()</code> returns a string containing the same exception backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would print. </div>", "  Printexc.get_backtrace () returns a string containing the same exception backtrace that Printexc.print_backtrace would print. "],
["Arith_status", "Arith_status.html", "get_approx_printing", "Arith_status.html#VALget_approx_printing", "<div class=\"info\">  See <a href=\"Arith_status.html#VALset_approx_printing\"><code class=\"code\"><span class=\"constructor\">Arith_status</span>.set_approx_printing</code></a>. </div>", "  See Arith_status.set_approx_printing. "],
["Format", "Format.html", "get_all_formatter_output_functions", "Format.html#VALget_all_formatter_output_functions", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Array", "Array.html", "get", "Array.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.get a n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>. </div>", "  Array.get a n returns the element number n of array a. "],
["ArrayLabels", "ArrayLabels.html", "get", "ArrayLabels.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.get a n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>. </div>", "  Array.get a n returns the element number n of array a. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "get", "Bigarray.Genarray.html#VALget", "<div class=\"info\">  Read an element of a generic big array. </div>", "  Read an element of a generic big array. "],
["Bigarray.Array1", "Bigarray.Array1.html", "get", "Bigarray.Array1.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array1</span>.get a x</code>, or alternatively <code class=\"code\">a.{x}</code>, returns the element of <code class=\"code\">a</code> at index <code class=\"code\">x</code>. </div>", "  Array1.get a x, or alternatively a.{x}, returns the element of a at index x. "],
["Bigarray.Array2", "Bigarray.Array2.html", "get", "Bigarray.Array2.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array2</span>.get a x y</code>, also written <code class=\"code\">a.{x,y}</code>, returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>). </div>", "  Array2.get a x y, also written a.{x,y}, returns the element of a at coordinates (x, y). "],
["Bigarray.Array3", "Bigarray.Array3.html", "get", "Bigarray.Array3.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array3</span>.get a x y z</code>, also written <code class=\"code\">a.{x,y,z}</code>, returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>). </div>", "  Array3.get a x y z, also written a.{x,y,z}, returns the element of a at coordinates (x, y, z). "],
["Bytes", "Bytes.html", "get", "Bytes.html#VALget", "<div class=\"info\">  <code class=\"code\">get s n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>. </div>", "  get s n returns the byte at index n in argument s. "],
["BytesLabels", "BytesLabels.html", "get", "BytesLabels.html#VALget", "<div class=\"info\">  <code class=\"code\">get s n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>. </div>", "  get s n returns the byte at index n in argument s. "],
["Gc", "Gc.html", "get", "Gc.html#VALget", "<div class=\"info\">  Return the current values of the GC parameters in a <code class=\"code\">control</code> record. </div>", "  Return the current values of the GC parameters in a control record. "],
["StringLabels", "StringLabels.html", "get", "StringLabels.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.get s n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>. </div>", "  String.get s n returns the character at index n in string s. "],
["String", "String.html", "get", "String.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.get s n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>. </div>", "  String.get s n returns the character at index n in string s. "],
["Weak", "Weak.html", "get", "Weak.html#VALget", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.get ar n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is empty, <code class=\"code\"><span class=\"constructor\">Some</span> x</code> (where <code class=\"code\">x</code> is the value) if it is full. </div>", "  Weak.get ar n returns None if the nth cell of ar is empty, Some x (where x is the value) if it is full. "],
["Bigarray", "Bigarray.html", "genarray_of_array3", "Bigarray.html#VALgenarray_of_array3", "<div class=\"info\">  Return the generic big array corresponding to the given three-dimensional big array. </div>", "  Return the generic big array corresponding to the given three-dimensional big array. "],
["Bigarray", "Bigarray.html", "genarray_of_array2", "Bigarray.html#VALgenarray_of_array2", "<div class=\"info\">  Return the generic big array corresponding to the given two-dimensional big array. </div>", "  Return the generic big array corresponding to the given two-dimensional big array. "],
["Bigarray", "Bigarray.html", "genarray_of_array1", "Bigarray.html#VALgenarray_of_array1", "<div class=\"info\">  Return the generic big array corresponding to the given one-dimensional big array. </div>", "  Return the generic big array corresponding to the given one-dimensional big array. "],
["Num", "Num.html", "ge_num", "Num.html#VALge_num", "", ""],
["Big_int", "Big_int.html", "ge_big_int", "Big_int.html#VALge_big_int", "", ""],
["Big_int", "Big_int.html", "gcd_big_int", "Big_int.html#VALgcd_big_int", "<div class=\"info\">  Greatest common divisor of two big integers. </div>", "  Greatest common divisor of two big integers. "],
["Str", "Str.html", "full_split", "Str.html#VALfull_split", "<div class=\"info\">  Same as <a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a>, but returns the delimiters as well as the substrings contained between delimiters. </div>", "  Same as Str.split_delim, but returns the delimiters as well as the substrings contained between delimiters. "],
["Gc", "Gc.html", "full_major", "Gc.html#VALfull_major", "<div class=\"info\">  Do a minor collection, finish the current major collection cycle, and perform a complete new cycle. </div>", "  Do a minor collection, finish the current major collection cycle, and perform a complete new cycle. "],
["Random", "Random.html", "full_init", "Random.html#VALfull_init", "<div class=\"info\">  Same as <a href=\"Random.html#VALinit\"><code class=\"code\"><span class=\"constructor\">Random</span>.init</code></a> but takes more data as seed. </div>", "  Same as Random.init but takes more data as seed. "],
["Unix", "Unix.html", "ftruncate", "Unix.html#VALftruncate", "<div class=\"info\">  Truncates the file corresponding to the given descriptor to the given size. </div>", "  Truncates the file corresponding to the given descriptor to the given size. "],
["Unix.LargeFile", "Unix.LargeFile.html", "ftruncate", "Unix.LargeFile.html#VALftruncate", "", ""],
["UnixLabels", "UnixLabels.html", "ftruncate", "UnixLabels.html#VALftruncate", "<div class=\"info\">  Truncates the file corresponding to the given descriptor to the given size. </div>", "  Truncates the file corresponding to the given descriptor to the given size. "],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "ftruncate", "UnixLabels.LargeFile.html#VALftruncate", "", ""],
["Unix", "Unix.html", "fstat", "Unix.html#VALfstat", "<div class=\"info\">  Return the information for the file associated with the given descriptor. </div>", "  Return the information for the file associated with the given descriptor. "],
["Unix.LargeFile", "Unix.LargeFile.html", "fstat", "Unix.LargeFile.html#VALfstat", "", ""],
["UnixLabels", "UnixLabels.html", "fstat", "UnixLabels.html#VALfstat", "<div class=\"info\">  Return the information for the file associated with the given descriptor. </div>", "  Return the information for the file associated with the given descriptor. "],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "fstat", "UnixLabels.LargeFile.html#VALfstat", "", ""],
["Pervasives", "Pervasives.html", "fst", "Pervasives.html#VALfst", "<div class=\"info\">  Return the first component of a pair. </div>", "  Return the first component of a pair. "],
["Scanf", "Scanf.html", "fscanf", "Scanf.html#VALfscanf", "<div class=\"info\">  Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the given regular input channel. </div>", "  Same as Scanf.bscanf, but reads from the given regular input channel. "],
["Lazy", "Lazy.html", "from_val", "Lazy.html#VALfrom_val", "<div class=\"info\">  <code class=\"code\">from_val v</code> returns an already-forced suspension of <code class=\"code\">v</code>. </div>", "  from_val v returns an already-forced suspension of v. "],
["Lexing", "Lexing.html", "from_string", "Lexing.html#VALfrom_string", "<div class=\"info\">  Create a lexer buffer which reads from the given string. </div>", "  Create a lexer buffer which reads from the given string. "],
["Marshal", "Marshal.html", "from_string", "Marshal.html#VALfrom_string", "<div class=\"info\">  Same as <code class=\"code\">from_bytes</code> but take a string as argument instead of a byte sequence. </div>", "  Same as from_bytes but take a string as argument instead of a byte sequence. "],
["Scanf.Scanning", "Scanf.Scanning.html", "from_string", "Scanf.Scanning.html#VALfrom_string", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.from_string s</code> returns a formatted input channel which reads from the given string. </div>", "  Scanning.from_string s returns a formatted input channel which reads from the given string. "],
["Digest", "Digest.html", "from_hex", "Digest.html#VALfrom_hex", "<div class=\"info\">  Convert a hexadecimal representation back into the corresponding digest. </div>", "  Convert a hexadecimal representation back into the corresponding digest. "],
["Lexing", "Lexing.html", "from_function", "Lexing.html#VALfrom_function", "<div class=\"info\">  Create a lexer buffer with the given function as its reading method. </div>", "  Create a lexer buffer with the given function as its reading method. "],
["Scanf.Scanning", "Scanf.Scanning.html", "from_function", "Scanf.Scanning.html#VALfrom_function", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.from_function f</code> returns a formatted input channel with the given function as its reading method. </div>", "  Scanning.from_function f returns a formatted input channel with the given function as its reading method. "],
["Lazy", "Lazy.html", "from_fun", "Lazy.html#VALfrom_fun", "<div class=\"info\">  <code class=\"code\">from_fun f</code> is the same as <code class=\"code\"><span class=\"keyword\">lazy</span> (f ())</code> but slightly more efficient. </div>", "  from_fun f is the same as lazy (f ()) but slightly more efficient. "],
["Scanf.Scanning", "Scanf.Scanning.html", "from_file_bin", "Scanf.Scanning.html#VALfrom_file_bin", "<div class=\"info\">  An alias for <code class=\"code\">open_in_bin</code> above. </div>", "  An alias for open_in_bin above. "],
["Scanf.Scanning", "Scanf.Scanning.html", "from_file", "Scanf.Scanning.html#VALfrom_file", "<div class=\"info\">  An alias for <code class=\"code\">open_in</code> above. </div>", "  An alias for open_in above. "],
["Lexing", "Lexing.html", "from_channel", "Lexing.html#VALfrom_channel", "<div class=\"info\">  Create a lexer buffer on the given input channel. </div>", "  Create a lexer buffer on the given input channel. "],
["Marshal", "Marshal.html", "from_channel", "Marshal.html#VALfrom_channel", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel chan</code> reads from channel <code class=\"code\">chan</code> the byte representation of a structured value, as produced by one of the <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_*</code> functions, and reconstructs and returns the corresponding value. </div>", "  Marshal.from_channel chan reads from channel chan the byte representation of a structured value, as produced by one of the Marshal.to_* functions, and reconstructs and returns the corresponding value. "],
["Scanf.Scanning", "Scanf.Scanning.html", "from_channel", "Scanf.Scanning.html#VALfrom_channel", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.from_channel ic</code> returns a formatted input channel which reads from the regular input channel <code class=\"code\">ic</code> argument, starting at the current reading position. </div>", "  Scanning.from_channel ic returns a formatted input channel which reads from the regular input channel ic argument, starting at the current reading position. "],
["Marshal", "Marshal.html", "from_bytes", "Marshal.html#VALfrom_bytes", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes buff ofs</code> unmarshals a structured value like <a href=\"Marshal.html#VALfrom_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code></a> does, except that the byte representation is not read from a channel, but taken from the byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>. </div>", "  Marshal.from_bytes buff ofs unmarshals a structured value like Marshal.from_channel does, except that the byte representation is not read from a channel, but taken from the byte sequence buff, starting at position ofs. "],
["Stream", "Stream.html", "from", "Stream.html#VALfrom", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Stream</span>.from f</code> returns a stream built from the function <code class=\"code\">f</code>. </div>", "  Stream.from f returns a stream built from the function f. "],
["Pervasives", "Pervasives.html", "frexp", "Pervasives.html#VALfrexp", "<div class=\"info\">  <code class=\"code\">frexp f</code> returns the pair of the significant and the exponent of <code class=\"code\">f</code>. </div>", "  frexp f returns the pair of the significant and the exponent of f. "],
["CamlinternalFormat", "CamlinternalFormat.html", "freeze_char_set", "CamlinternalFormat.html#VALfreeze_char_set", "", ""],
["Format", "Format.html", "fprintf", "Format.html#VALfprintf", "", ""],
["Printf", "Printf.html", "fprintf", "Printf.html#VALfprintf", "<div class=\"info\">  <code class=\"code\">fprintf outchan format arg1 ... argN</code> formats the arguments <code class=\"code\">arg1</code> to <code class=\"code\">argN</code> according to the format string <code class=\"code\">format</code>, and outputs the resulting string on the channel <code class=\"code\">outchan</code>. </div>", "  fprintf outchan format arg1 ... argN formats the arguments arg1 to argN according to the format string format, and outputs the resulting string on the channel outchan. "],
["Obj", "Obj.html", "forward_tag", "Obj.html#VALforward_tag", "", ""],
["Bigarray", "Bigarray.html", "fortran_layout", "Bigarray.html#VALfortran_layout", "", ""],
["Format", "Format.html", "formatter_of_out_channel", "Format.html#VALformatter_of_out_channel", "<div class=\"info\">  <code class=\"code\">formatter_of_out_channel oc</code> returns a new formatter that writes to the corresponding channel <code class=\"code\">oc</code>. </div>", "  formatter_of_out_channel oc returns a new formatter that writes to the corresponding channel oc. "],
["Format", "Format.html", "formatter_of_buffer", "Format.html#VALformatter_of_buffer", "<div class=\"info\">  <code class=\"code\">formatter_of_buffer b</code> returns a new formatter writing to buffer <code class=\"code\">b</code>. </div>", "  formatter_of_buffer b returns a new formatter writing to buffer b. "],
["CamlinternalFormat", "CamlinternalFormat.html", "format_of_string_format", "CamlinternalFormat.html#VALformat_of_string_format", "", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "format_of_string_fmtty", "CamlinternalFormat.html#VALformat_of_string_fmtty", "", ""],
["Pervasives", "Pervasives.html", "format_of_string", "Pervasives.html#VALformat_of_string", "<div class=\"info\">  <code class=\"code\">format_of_string s</code> returns a format string read from the string literal <code class=\"code\">s</code>. </div>", "  format_of_string s returns a format string read from the string literal s. "],
["Scanf", "Scanf.html", "format_from_string", "Scanf.html#VALformat_from_string", "<div class=\"info\">  <code class=\"code\">format_from_string s fmt</code> converts a string argument to a format string, according to the given format string <code class=\"code\">fmt</code>. </div>", "  format_from_string s fmt converts a string argument to a format string, according to the given format string fmt. "],
["Printexc.Slot", "Printexc.Slot.html", "format", "Printexc.Slot.html#VALformat", "<div class=\"info\">  <code class=\"code\">format pos slot</code> returns the string representation of <code class=\"code\">slot</code> as <code class=\"code\">raw_backtrace_to_string</code> would format it, assuming it is the <code class=\"code\">pos</code>-th element of the backtrace: the <code class=\"code\">0</code>-th element is pretty-printed differently than the others. </div>", "  format pos slot returns the string representation of slot as raw_backtrace_to_string would format it, assuming it is the pos-th element of the backtrace: the 0-th element is pretty-printed differently than the others. "],
["Unix", "Unix.html", "fork", "Unix.html#VALfork", "<div class=\"info\">  Fork a new process. </div>", "  Fork a new process. "],
["UnixLabels", "UnixLabels.html", "fork", "UnixLabels.html#VALfork", "<div class=\"info\">  Fork a new process. </div>", "  Fork a new process. "],
["Graphics", "Graphics.html", "foreground", "Graphics.html#VALforeground", "<div class=\"info\">  Default background and foreground colors (usually, either black foreground on a white background or white foreground on a black background). </div>", "  Default background and foreground colors (usually, either black foreground on a white background or white foreground on a black background). "],
["CamlinternalLazy", "CamlinternalLazy.html", "force_val_lazy_block", "CamlinternalLazy.html#VALforce_val_lazy_block", "", ""],
["CamlinternalLazy", "CamlinternalLazy.html", "force_val", "CamlinternalLazy.html#VALforce_val", "", ""],
["Lazy", "Lazy.html", "force_val", "Lazy.html#VALforce_val", "<div class=\"info\">  <code class=\"code\">force_val x</code> forces the suspension <code class=\"code\">x</code> and returns its result. </div>", "  force_val x forces the suspension x and returns its result. "],
["Format", "Format.html", "force_newline", "Format.html#VALforce_newline", "<div class=\"info\">  Forces a newline in the current box. </div>", "  Forces a newline in the current box. "],
["CamlinternalLazy", "CamlinternalLazy.html", "force_lazy_block", "CamlinternalLazy.html#VALforce_lazy_block", "", ""],
["CamlinternalLazy", "CamlinternalLazy.html", "force", "CamlinternalLazy.html#VALforce", "", ""],
["Lazy", "Lazy.html", "force", "Lazy.html#VALforce", "<div class=\"info\">  <code class=\"code\">force x</code> forces the suspension <code class=\"code\">x</code> and returns its result. </div>", "  force x forces the suspension x and returns its result. "],
["List", "List.html", "for_all2", "List.html#VALfor_all2", "<div class=\"info\">  Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate. </div>", "  Same as List.for_all, but for a two-argument predicate. "],
["ListLabels", "ListLabels.html", "for_all2", "ListLabels.html#VALfor_all2", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.for_all</code></a>, but for a two-argument predicate. </div>", "  Same as ListLabels.for_all, but for a two-argument predicate. "],
["List", "List.html", "for_all", "List.html#VALfor_all", "<div class=\"info\">  <code class=\"code\">for_all p [a1; ...; an]</code> checks if all elements of the list satisfy the predicate <code class=\"code\">p</code>. </div>", "  for_all p [a1; ...; an] checks if all elements of the list satisfy the predicate p. "],
["ListLabels", "ListLabels.html", "for_all", "ListLabels.html#VALfor_all", "<div class=\"info\">  <code class=\"code\">for_all p [a1; ...; an]</code> checks if all elements of the list satisfy the predicate <code class=\"code\">p</code>. </div>", "  for_all p [a1; ...; an] checks if all elements of the list satisfy the predicate p. "],
["Map.S", "Map.S.html", "for_all", "Map.S.html#VALfor_all", "<div class=\"info\">  <code class=\"code\">for_all p m</code> checks if all the bindings of the map satisfy the predicate <code class=\"code\">p</code>. </div>", "  for_all p m checks if all the bindings of the map satisfy the predicate p. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "for_all", "MoreLabels.Map.S.html#VALfor_all", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "for_all", "MoreLabels.Set.S.html#VALfor_all", "", ""],
["Set.S", "Set.S.html", "for_all", "Set.S.html#VALfor_all", "<div class=\"info\">  <code class=\"code\">for_all p s</code> checks if all elements of the set satisfy the predicate <code class=\"code\">p</code>. </div>", "  for_all p s checks if all elements of the set satisfy the predicate p. "],
["List", "List.html", "fold_right2", "List.html#VALfold_right2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is <code class=\"code\">f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>. </div>", "  List.fold_right2 f [a1; ...; an] [b1; ...; bn] c is f a1 b1 (f a2 b2 (... (f an bn c) ...)). "],
["ListLabels", "ListLabels.html", "fold_right2", "ListLabels.html#VALfold_right2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is <code class=\"code\">f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>. </div>", "  List.fold_right2 f [a1; ...; an] [b1; ...; bn] c is f a1 b1 (f a2 b2 (... (f an bn c) ...)). "],
["Array", "Array.html", "fold_right", "Array.html#VALfold_right", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.fold_right f a x</code> computes <code class=\"code\">f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>. </div>", "  Array.fold_right f a x computes f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...)), where n is the length of the array a. "],
["ArrayLabels", "ArrayLabels.html", "fold_right", "ArrayLabels.html#VALfold_right", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.fold_right f a x</code> computes <code class=\"code\">f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>. </div>", "  Array.fold_right f a x computes f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...)), where n is the length of the array a. "],
["List", "List.html", "fold_right", "List.html#VALfold_right", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_right f [a1; ...; an] b</code> is <code class=\"code\">f a1 (f a2 (... (f an b) ...))</code>. </div>", "  List.fold_right f [a1; ...; an] b is f a1 (f a2 (... (f an b) ...)). "],
["ListLabels", "ListLabels.html", "fold_right", "ListLabels.html#VALfold_right", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_right f [a1; ...; an] b</code> is <code class=\"code\">f a1 (f a2 (... (f an b) ...))</code>. </div>", "  List.fold_right f [a1; ...; an] b is f a1 (f a2 (... (f an b) ...)). "],
["List", "List.html", "fold_left2", "List.html#VALfold_left2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is <code class=\"code\">f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>. </div>", "  List.fold_left2 f a [b1; ...; bn] [c1; ...; cn] is f (... (f (f a b1 c1) b2 c2) ...) bn cn. "],
["ListLabels", "ListLabels.html", "fold_left2", "ListLabels.html#VALfold_left2", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is <code class=\"code\">f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>. </div>", "  List.fold_left2 f a [b1; ...; bn] [c1; ...; cn] is f (... (f (f a b1 c1) b2 c2) ...) bn cn. "],
["Array", "Array.html", "fold_left", "Array.html#VALfold_left", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.fold_left f x a</code> computes <code class=\"code\">f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>. </div>", "  Array.fold_left f x a computes f (... (f (f x a.(0)) a.(1)) ...) a.(n-1), where n is the length of the array a. "],
["ArrayLabels", "ArrayLabels.html", "fold_left", "ArrayLabels.html#VALfold_left", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.fold_left f x a</code> computes <code class=\"code\">f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>, where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>. </div>", "  Array.fold_left f x a computes f (... (f (f x a.(0)) a.(1)) ...) a.(n-1), where n is the length of the array a. "],
["List", "List.html", "fold_left", "List.html#VALfold_left", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_left f a [b1; ...; bn]</code> is <code class=\"code\">f (... (f (f a b1) b2) ...) bn</code>. </div>", "  List.fold_left f a [b1; ...; bn] is f (... (f (f a b1) b2) ...) bn. "],
["ListLabels", "ListLabels.html", "fold_left", "ListLabels.html#VALfold_left", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">List</span>.fold_left f a [b1; ...; bn]</code> is <code class=\"code\">f (... (f (f a b1) b2) ...) bn</code>. </div>", "  List.fold_left f a [b1; ...; bn] is f (... (f (f a b1) b2) ...) bn. "],
["Hashtbl", "Hashtbl.html", "fold", "Hashtbl.html#VALfold", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.fold f tbl init</code> computes <code class=\"code\">(f kN dN ... (f k1 d1 init)...)</code>, where <code class=\"code\">k1 ... kN</code> are the keys of all bindings in <code class=\"code\">tbl</code>, and <code class=\"code\">d1 ... dN</code> are the associated values. </div>", "  Hashtbl.fold f tbl init computes (f kN dN ... (f k1 d1 init)...), where k1 ... kN are the keys of all bindings in tbl, and d1 ... dN are the associated values. "],
["Hashtbl.S", "Hashtbl.S.html", "fold", "Hashtbl.S.html#VALfold", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "fold", "Hashtbl.SeededS.html#VALfold", "", ""],
["Map.S", "Map.S.html", "fold", "Map.S.html#VALfold", "<div class=\"info\">  <code class=\"code\">fold f m a</code> computes <code class=\"code\">(f kN dN ... (f k1 d1 a)...)</code>, where <code class=\"code\">k1 ... kN</code> are the keys of all bindings in <code class=\"code\">m</code> (in increasing order), and <code class=\"code\">d1 ... dN</code> are the associated data. </div>", "  fold f m a computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "fold", "MoreLabels.Hashtbl.html#VALfold", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "fold", "MoreLabels.Hashtbl.S.html#VALfold", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "fold", "MoreLabels.Hashtbl.SeededS.html#VALfold", "", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "fold", "MoreLabels.Map.S.html#VALfold", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "fold", "MoreLabels.Set.S.html#VALfold", "", ""],
["Queue", "Queue.html", "fold", "Queue.html#VALfold", "<div class=\"info\">  <code class=\"code\">fold f accu q</code> is equivalent to <code class=\"code\"><span class=\"constructor\">List</span>.fold_left f accu l</code>, where <code class=\"code\">l</code> is the list of <code class=\"code\">q</code>'s elements. </div>", "  fold f accu q is equivalent to List.fold_left f accu l, where l is the list of q's elements. "],
["Set.S", "Set.S.html", "fold", "Set.S.html#VALfold", "<div class=\"info\">  <code class=\"code\">fold f s a</code> computes <code class=\"code\">(f xN ... (f x2 (f x1 a))...)</code>, where <code class=\"code\">x1 ... xN</code> are the elements of <code class=\"code\">s</code>, in increasing order. </div>", "  fold f s a computes (f xN ... (f x2 (f x1 a))...), where x1 ... xN are the elements of s, in increasing order. "],
["Weak.S", "Weak.S.html", "fold", "Weak.S.html#VALfold", "<div class=\"info\">  <code class=\"code\">fold f t init</code> computes <code class=\"code\">(f d1 (... (f dN init)))</code> where <code class=\"code\">d1 ... dN</code> are the elements of <code class=\"code\">t</code> in some unspecified order. </div>", "  fold f t init computes (f d1 (... (f dN init))) where d1 ... dN are the elements of t in some unspecified order. "],
["CamlinternalFormat", "CamlinternalFormat.html", "fmt_ebb_of_string", "CamlinternalFormat.html#VALfmt_ebb_of_string", "", ""],
["Format", "Format.html", "flush_str_formatter", "Format.html#VALflush_str_formatter", "<div class=\"info\">  Returns the material printed with <code class=\"code\">str_formatter</code>, flushes the formatter and resets the corresponding buffer. </div>", "  Returns the material printed with str_formatter, flushes the formatter and resets the corresponding buffer. "],
["Lexing", "Lexing.html", "flush_input", "Lexing.html#VALflush_input", "<div class=\"info\">  Discard the contents of the buffer and reset the current position to 0. </div>", "  Discard the contents of the buffer and reset the current position to 0. "],
["Pervasives", "Pervasives.html", "flush_all", "Pervasives.html#VALflush_all", "<div class=\"info\">  Flush all open output channels; ignore errors. </div>", "  Flush all open output channels; ignore errors. "],
["Pervasives", "Pervasives.html", "flush", "Pervasives.html#VALflush", "<div class=\"info\">  Flush the buffer associated with the given output channel, performing all pending writes on that channel. </div>", "  Flush the buffer associated with the given output channel, performing all pending writes on that channel. "],
["Num", "Num.html", "floor_num", "Num.html#VALfloor_num", "<div class=\"info\">  <code class=\"code\">floor_num n</code> returns the largest integer smaller or equal to <code class=\"code\">n</code>. </div>", "  floor_num n returns the largest integer smaller or equal to n. "],
["Pervasives", "Pervasives.html", "floor", "Pervasives.html#VALfloor", "<div class=\"info\">  Round below to an integer value. </div>", "  Round below to an integer value. "],
["Pervasives", "Pervasives.html", "float_of_string", "Pervasives.html#VALfloat_of_string", "<div class=\"info\">  Convert the given string to a float. </div>", "  Convert the given string to a float. "],
["Num", "Num.html", "float_of_num", "Num.html#VALfloat_of_num", "", ""],
["Pervasives", "Pervasives.html", "float_of_int", "Pervasives.html#VALfloat_of_int", "<div class=\"info\">  Convert an integer to floating-point. </div>", "  Convert an integer to floating-point. "],
["Int32", "Int32.html", "float_of_bits", "Int32.html#VALfloat_of_bits", "<div class=\"info\">  Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'single format' bit layout, is the given <code class=\"code\">int32</code>. </div>", "  Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'single format' bit layout, is the given int32. "],
["Int64", "Int64.html", "float_of_bits", "Int64.html#VALfloat_of_bits", "<div class=\"info\">  Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'double format' bit layout, is the given <code class=\"code\">int64</code>. </div>", "  Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'double format' bit layout, is the given int64. "],
["Big_int", "Big_int.html", "float_of_big_int", "Big_int.html#VALfloat_of_big_int", "<div class=\"info\">  Returns a floating-point number approximating the given big integer. </div>", "  Returns a floating-point number approximating the given big integer. "],
["Bigarray", "Bigarray.html", "float64", "Bigarray.html#VALfloat64", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Bigarray", "Bigarray.html", "float32", "Bigarray.html#VALfloat32", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Pervasives", "Pervasives.html", "float", "Pervasives.html#VALfloat", "<div class=\"info\">  Same as <a href=\"Pervasives.html#VALfloat_of_int\"><code class=\"code\">float_of_int</code></a>. </div>", "  Same as float_of_int. "],
["Random", "Random.html", "float", "Random.html#VALfloat", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Random</span>.float bound</code> returns a random floating-point number between 0 and <code class=\"code\">bound</code> (inclusive). </div>", "  Random.float bound returns a random floating-point number between 0 and bound (inclusive). "],
["Random.State", "Random.State.html", "float", "Random.State.html#VALfloat", "", ""],
["List", "List.html", "flatten", "List.html#VALflatten", "<div class=\"info\">  Same as <code class=\"code\">concat</code>. </div>", "  Same as concat. "],
["ListLabels", "ListLabels.html", "flatten", "ListLabels.html#VALflatten", "<div class=\"info\">  Same as <code class=\"code\">concat</code>. </div>", "  Same as concat. "],
["Str", "Str.html", "first_chars", "Str.html#VALfirst_chars", "<div class=\"info\">  <code class=\"code\">first_chars s n</code> returns the first <code class=\"code\">n</code> characters of <code class=\"code\">s</code>. </div>", "  first_chars s n returns the first n characters of s. "],
["Hashtbl", "Hashtbl.html", "find_all", "Hashtbl.html#VALfind_all", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_all tbl x</code> returns the list of all data associated with <code class=\"code\">x</code> in <code class=\"code\">tbl</code>. </div>", "  Hashtbl.find_all tbl x returns the list of all data associated with x in tbl. "],
["Hashtbl.S", "Hashtbl.S.html", "find_all", "Hashtbl.S.html#VALfind_all", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find_all", "Hashtbl.SeededS.html#VALfind_all", "", ""],
["List", "List.html", "find_all", "List.html#VALfind_all", "<div class=\"info\">  <code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>. </div>", "  find_all is another name for List.filter. "],
["ListLabels", "ListLabels.html", "find_all", "ListLabels.html#VALfind_all", "<div class=\"info\">  <code class=\"code\">find_all</code> is another name for <a href=\"ListLabels.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.filter</code></a>. </div>", "  find_all is another name for ListLabels.filter. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find_all", "MoreLabels.Hashtbl.html#VALfind_all", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find_all", "MoreLabels.Hashtbl.S.html#VALfind_all", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find_all", "MoreLabels.Hashtbl.SeededS.html#VALfind_all", "", ""],
["Weak.S", "Weak.S.html", "find_all", "Weak.S.html#VALfind_all", "<div class=\"info\">  <code class=\"code\">find_all t x</code> returns a list of all the instances of <code class=\"code\">x</code> found in <code class=\"code\">t</code>. </div>", "  find_all t x returns a list of all the instances of x found in t. "],
["Hashtbl", "Hashtbl.html", "find", "Hashtbl.html#VALfind", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find tbl x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists. </div>", "  Hashtbl.find tbl x returns the current binding of x in tbl, or raises Not_found if no such binding exists. "],
["Hashtbl.S", "Hashtbl.S.html", "find", "Hashtbl.S.html#VALfind", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find", "Hashtbl.SeededS.html#VALfind", "", ""],
["List", "List.html", "find", "List.html#VALfind", "<div class=\"info\">  <code class=\"code\">find p l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>. </div>", "  find p l returns the first element of the list l that satisfies the predicate p. "],
["ListLabels", "ListLabels.html", "find", "ListLabels.html#VALfind", "<div class=\"info\">  <code class=\"code\">find p l</code> returns the first element of the list <code class=\"code\">l</code> that satisfies the predicate <code class=\"code\">p</code>. </div>", "  find p l returns the first element of the list l that satisfies the predicate p. "],
["Map.S", "Map.S.html", "find", "Map.S.html#VALfind", "<div class=\"info\">  <code class=\"code\">find x m</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code>, or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists. </div>", "  find x m returns the current binding of x in m, or raises Not_found if no such binding exists. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find", "MoreLabels.Hashtbl.html#VALfind", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find", "MoreLabels.Hashtbl.S.html#VALfind", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find", "MoreLabels.Hashtbl.SeededS.html#VALfind", "", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find", "MoreLabels.Map.S.html#VALfind", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find", "MoreLabels.Set.S.html#VALfind", "", ""],
["Set.S", "Set.S.html", "find", "Set.S.html#VALfind", "<div class=\"info\">  <code class=\"code\">find x s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists. </div>", "  find x s returns the element of s equal to x (according to Ord.compare), or raise Not_found if no such element exists. "],
["Weak.S", "Weak.S.html", "find", "Weak.S.html#VALfind", "<div class=\"info\">  <code class=\"code\">find t x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>. </div>", "  find t x returns an instance of x found in t. "],
["Gc", "Gc.html", "finalise_release", "Gc.html#VALfinalise_release", "<div class=\"info\">  A finalisation function may call <code class=\"code\">finalise_release</code> to tell the GC that it can launch the next finalisation function without waiting for the current one to return. </div>", "  A finalisation function may call finalise_release to tell the GC that it can launch the next finalisation function without waiting for the current one to return. "],
["Gc", "Gc.html", "finalise", "Gc.html#VALfinalise", "<div class=\"info\">  <code class=\"code\">finalise f v</code> registers <code class=\"code\">f</code> as a finalisation function for <code class=\"code\">v</code>. </div>", "  finalise f v registers f as a finalisation function for v. "],
["Obj", "Obj.html", "final_tag", "Obj.html#VALfinal_tag", "", ""],
["List", "List.html", "filter", "List.html#VALfilter", "<div class=\"info\">  <code class=\"code\">filter p l</code> returns all the elements of the list <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>. </div>", "  filter p l returns all the elements of the list l that satisfy the predicate p. "],
["ListLabels", "ListLabels.html", "filter", "ListLabels.html#VALfilter", "<div class=\"info\">  <code class=\"code\">filter p l</code> returns all the elements of the list <code class=\"code\">l</code> that satisfy the predicate <code class=\"code\">p</code>. </div>", "  filter p l returns all the elements of the list l that satisfy the predicate p. "],
["Map.S", "Map.S.html", "filter", "Map.S.html#VALfilter", "<div class=\"info\">  <code class=\"code\">filter p m</code> returns the map with all the bindings in <code class=\"code\">m</code> that satisfy predicate <code class=\"code\">p</code>. </div>", "  filter p m returns the map with all the bindings in m that satisfy predicate p. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "filter", "MoreLabels.Map.S.html#VALfilter", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "filter", "MoreLabels.Set.S.html#VALfilter", "", ""],
["Set.S", "Set.S.html", "filter", "Set.S.html#VALfilter", "<div class=\"info\">  <code class=\"code\">filter p s</code> returns the set of all elements in <code class=\"code\">s</code> that satisfy predicate <code class=\"code\">p</code>. </div>", "  filter p s returns the set of all elements in s that satisfy predicate p. "],
["Graphics", "Graphics.html", "fill_rect", "Graphics.html#VALfill_rect", "<div class=\"info\">  <code class=\"code\">fill_rect x y w h</code> fills the rectangle with lower left corner at <code class=\"code\">x,y</code>, width <code class=\"code\">w</code> and height <code class=\"code\">h</code>, with the current color. </div>", "  fill_rect x y w h fills the rectangle with lower left corner at x,y, width w and height h, with the current color. "],
["Graphics", "Graphics.html", "fill_poly", "Graphics.html#VALfill_poly", "<div class=\"info\">  Fill the given polygon with the current color. </div>", "  Fill the given polygon with the current color. "],
["Graphics", "Graphics.html", "fill_ellipse", "Graphics.html#VALfill_ellipse", "<div class=\"info\">  Fill an ellipse with the current color. </div>", "  Fill an ellipse with the current color. "],
["Graphics", "Graphics.html", "fill_circle", "Graphics.html#VALfill_circle", "<div class=\"info\">  Fill a circle with the current color. </div>", "  Fill a circle with the current color. "],
["Graphics", "Graphics.html", "fill_arc", "Graphics.html#VALfill_arc", "<div class=\"info\">  Fill an elliptical pie slice with the current color. </div>", "  Fill an elliptical pie slice with the current color. "],
["Array", "Array.html", "fill", "Array.html#VALfill", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.fill a ofs len x</code> modifies the array <code class=\"code\">a</code> in place, storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs + len - 1</code>. </div>", "  Array.fill a ofs len x modifies the array a in place, storing x in elements number ofs to ofs + len - 1. "],
["ArrayLabels", "ArrayLabels.html", "fill", "ArrayLabels.html#VALfill", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.fill a ofs len x</code> modifies the array <code class=\"code\">a</code> in place, storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs + len - 1</code>. </div>", "  Array.fill a ofs len x modifies the array a in place, storing x in elements number ofs to ofs + len - 1. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "fill", "Bigarray.Genarray.html#VALfill", "<div class=\"info\">  Set all elements of a big array to a given value. </div>", "  Set all elements of a big array to a given value. "],
["Bigarray.Array1", "Bigarray.Array1.html", "fill", "Bigarray.Array1.html#VALfill", "<div class=\"info\">  Fill the given big array with the given value. </div>", "  Fill the given big array with the given value. "],
["Bigarray.Array2", "Bigarray.Array2.html", "fill", "Bigarray.Array2.html#VALfill", "<div class=\"info\">  Fill the given big array with the given value. </div>", "  Fill the given big array with the given value. "],
["Bigarray.Array3", "Bigarray.Array3.html", "fill", "Bigarray.Array3.html#VALfill", "<div class=\"info\">  Fill the given big array with the given value. </div>", "  Fill the given big array with the given value. "],
["Bytes", "Bytes.html", "fill", "Bytes.html#VALfill", "<div class=\"info\">  <code class=\"code\">fill s start len c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>. </div>", "  fill s start len c modifies s in place, replacing len characters with c, starting at start. "],
["BytesLabels", "BytesLabels.html", "fill", "BytesLabels.html#VALfill", "<div class=\"info\">  <code class=\"code\">fill s start len c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>. </div>", "  fill s start len c modifies s in place, replacing len characters with c, starting at start. "],
["StringLabels", "StringLabels.html", "fill", "StringLabels.html#VALfill", "<div class=\"info\">  <span class=\"deprecated\"><code class=\"code\"><span class=\"constructor\">String</span>.fill s start len c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> bytes by <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>. </span></div>", "  String.fill s start len c modifies byte sequence s in place, replacing len bytes by c, starting at start. "],
["String", "String.html", "fill", "String.html#VALfill", "<div class=\"info\">  <span class=\"deprecated\"><code class=\"code\"><span class=\"constructor\">String</span>.fill s start len c</code> modifies byte sequence <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code> bytes with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>. </span></div>", "  String.fill s start len c modifies byte sequence s in place, replacing len bytes with c, starting at start. "],
["Weak", "Weak.html", "fill", "Weak.html#VALfill", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.fill ar ofs len el</code> sets to <code class=\"code\">el</code> all pointers of <code class=\"code\">ar</code> from <code class=\"code\">ofs</code> to <code class=\"code\">ofs + len - 1</code>. </div>", "  Weak.fill ar ofs len el sets to el all pointers of ar from ofs to ofs + len - 1. "],
["Sys", "Sys.html", "file_exists", "Sys.html#VALfile_exists", "<div class=\"info\">  Test if a file with the given name exists. </div>", "  Test if a file with the given name exists. "],
["Digest", "Digest.html", "file", "Digest.html#VALfile", "<div class=\"info\">  Return the digest of the file whose name is given. </div>", "  Return the digest of the file whose name is given. "],
["Obj", "Obj.html", "field", "Obj.html#VALfield", "", ""],
["Unix", "Unix.html", "fchown", "Unix.html#VALfchown", "<div class=\"info\">  Change the owner uid and owner gid of an opened file. </div>", "  Change the owner uid and owner gid of an opened file. "],
["UnixLabels", "UnixLabels.html", "fchown", "UnixLabels.html#VALfchown", "<div class=\"info\">  Change the owner uid and owner gid of an opened file. </div>", "  Change the owner uid and owner gid of an opened file. "],
["Unix", "Unix.html", "fchmod", "Unix.html#VALfchmod", "<div class=\"info\">  Change the permissions of an opened file. </div>", "  Change the permissions of an opened file. "],
["UnixLabels", "UnixLabels.html", "fchmod", "UnixLabels.html#VALfchmod", "<div class=\"info\">  Change the permissions of an opened file. </div>", "  Change the permissions of an opened file. "],
["Array", "Array.html", "fast_sort", "Array.html#VALfast_sort", "<div class=\"info\">  Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster on typical input. </div>", "  Same as Array.sort or Array.stable_sort, whichever is faster on typical input. "],
["ArrayLabels", "ArrayLabels.html", "fast_sort", "ArrayLabels.html#VALfast_sort", "<div class=\"info\">  Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster on typical input. </div>", "  Same as Array.sort or Array.stable_sort, whichever is faster on typical input. "],
["List", "List.html", "fast_sort", "List.html#VALfast_sort", "<div class=\"info\">  Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster on typical input. </div>", "  Same as List.sort or List.stable_sort, whichever is faster on typical input. "],
["ListLabels", "ListLabels.html", "fast_sort", "ListLabels.html#VALfast_sort", "<div class=\"info\">  Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster on typical input. </div>", "  Same as List.sort or List.stable_sort, whichever is faster on typical input. "],
["Pervasives", "Pervasives.html", "failwith", "Pervasives.html#VALfailwith", "<div class=\"info\">  Raise exception <code class=\"code\"><span class=\"constructor\">Failure</span></code> with the given string. </div>", "  Raise exception Failure with the given string. "],
["Big_int", "Big_int.html", "extract_big_int", "Big_int.html#VALextract_big_int", "<div class=\"info\">  <code class=\"code\">extract_big_int bi ofs n</code> returns a nonnegative number corresponding to bits <code class=\"code\">ofs</code> to <code class=\"code\">ofs + n - 1</code> of the binary representation of <code class=\"code\">bi</code>. </div>", "  extract_big_int bi ofs n returns a nonnegative number corresponding to bits ofs to ofs + n - 1 of the binary representation of bi. "],
["Obj", "Obj.html", "extension_slot", "Obj.html#VALextension_slot", "", ""],
["Obj", "Obj.html", "extension_name", "Obj.html#VALextension_name", "", ""],
["Obj", "Obj.html", "extension_id", "Obj.html#VALextension_id", "", ""],
["Bytes", "Bytes.html", "extend", "Bytes.html#VALextend", "<div class=\"info\">  <code class=\"code\">extend s left right</code> returns a new byte sequence that contains the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and <code class=\"code\">right</code> uninitialized bytes appended to it. </div>", "  extend s left right returns a new byte sequence that contains the bytes of s, with left uninitialized bytes prepended and right uninitialized bytes appended to it. "],
["Pervasives", "Pervasives.html", "expm1", "Pervasives.html#VALexpm1", "<div class=\"info\">  <code class=\"code\">expm1 x</code> computes <code class=\"code\">exp x -. 1.0</code>, giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>. </div>", "  expm1 x computes exp x -. 1.0, giving numerically-accurate results even if x is close to 0.0. "],
["Complex", "Complex.html", "exp", "Complex.html#VALexp", "<div class=\"info\">  Exponentiation. </div>", "  Exponentiation. "],
["Pervasives", "Pervasives.html", "exp", "Pervasives.html#VALexp", "<div class=\"info\">  Exponential. </div>", "  Exponential. "],
["Printexc", "Printexc.html", "exn_slot_name", "Printexc.html#VALexn_slot_name", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_id exn</code> returns the internal name of the constructor used to create the exception value <code class=\"code\">exn</code>. </div>", "  Printexc.exn_slot_id exn returns the internal name of the constructor used to create the exception value exn. "],
["Printexc", "Printexc.html", "exn_slot_id", "Printexc.html#VALexn_slot_id", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_id</code> returns an integer which uniquely identifies the constructor used to create the exception value <code class=\"code\">exn</code> (in the current runtime). </div>", "  Printexc.exn_slot_id returns an integer which uniquely identifies the constructor used to create the exception value exn (in the current runtime). "],
["Pervasives", "Pervasives.html", "exit", "Pervasives.html#VALexit", "<div class=\"info\">  Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure. </div>", "  Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure. "],
["Thread", "Thread.html", "exit", "Thread.html#VALexit", "<div class=\"info\">  Terminate prematurely the currently executing thread. </div>", "  Terminate prematurely the currently executing thread. "],
["List", "List.html", "exists2", "List.html#VALexists2", "<div class=\"info\">  Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate. </div>", "  Same as List.exists, but for a two-argument predicate. "],
["ListLabels", "ListLabels.html", "exists2", "ListLabels.html#VALexists2", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALexists\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.exists</code></a>, but for a two-argument predicate. </div>", "  Same as ListLabels.exists, but for a two-argument predicate. "],
["List", "List.html", "exists", "List.html#VALexists", "<div class=\"info\">  <code class=\"code\">exists p [a1; ...; an]</code> checks if at least one element of the list satisfies the predicate <code class=\"code\">p</code>. </div>", "  exists p [a1; ...; an] checks if at least one element of the list satisfies the predicate p. "],
["ListLabels", "ListLabels.html", "exists", "ListLabels.html#VALexists", "<div class=\"info\">  <code class=\"code\">exists p [a1; ...; an]</code> checks if at least one element of the list satisfies the predicate <code class=\"code\">p</code>. </div>", "  exists p [a1; ...; an] checks if at least one element of the list satisfies the predicate p. "],
["Map.S", "Map.S.html", "exists", "Map.S.html#VALexists", "<div class=\"info\">  <code class=\"code\">exists p m</code> checks if at least one binding of the map satisfy the predicate <code class=\"code\">p</code>. </div>", "  exists p m checks if at least one binding of the map satisfy the predicate p. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "exists", "MoreLabels.Map.S.html#VALexists", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "exists", "MoreLabels.Set.S.html#VALexists", "", ""],
["Set.S", "Set.S.html", "exists", "Set.S.html#VALexists", "<div class=\"info\">  <code class=\"code\">exists p s</code> checks if at least one element of the set satisfies the predicate <code class=\"code\">p</code>. </div>", "  exists p s checks if at least one element of the set satisfies the predicate p. "],
["Unix", "Unix.html", "execvpe", "Unix.html#VALexecvpe", "<div class=\"info\">  Same as <a href=\"Unix.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execve</code></a>, except that the program is searched in the path. </div>", "  Same as Unix.execve, except that the program is searched in the path. "],
["UnixLabels", "UnixLabels.html", "execvpe", "UnixLabels.html#VALexecvpe", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execve</code></a>, except that the program is searched in the path. </div>", "  Same as UnixLabels.execve, except that the program is searched in the path. "],
["ThreadUnix", "ThreadUnix.html", "execvp", "ThreadUnix.html#VALexecvp", "", ""],
["Unix", "Unix.html", "execvp", "Unix.html#VALexecvp", "<div class=\"info\">  Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that the program is searched in the path. </div>", "  Same as Unix.execv, except that the program is searched in the path. "],
["UnixLabels", "UnixLabels.html", "execvp", "UnixLabels.html#VALexecvp", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that the program is searched in the path. </div>", "  Same as UnixLabels.execv, except that the program is searched in the path. "],
["ThreadUnix", "ThreadUnix.html", "execve", "ThreadUnix.html#VALexecve", "", ""],
["Unix", "Unix.html", "execve", "Unix.html#VALexecve", "<div class=\"info\">  Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that the third argument provides the environment to the program executed. </div>", "  Same as Unix.execv, except that the third argument provides the environment to the program executed. "],
["UnixLabels", "UnixLabels.html", "execve", "UnixLabels.html#VALexecve", "<div class=\"info\">  Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that the third argument provides the environment to the program executed. </div>", "  Same as UnixLabels.execv, except that the third argument provides the environment to the program executed. "],
["ThreadUnix", "ThreadUnix.html", "execv", "ThreadUnix.html#VALexecv", "", ""],
["Unix", "Unix.html", "execv", "Unix.html#VALexecv", "<div class=\"info\">  <code class=\"code\">execv prog args</code> execute the program in file <code class=\"code\">prog</code>, with the arguments <code class=\"code\">args</code>, and the current process environment. </div>", "  execv prog args execute the program in file prog, with the arguments args, and the current process environment. "],
["UnixLabels", "UnixLabels.html", "execv", "UnixLabels.html#VALexecv", "<div class=\"info\">  <code class=\"code\">execv prog args</code> execute the program in file <code class=\"code\">prog</code>, with the arguments <code class=\"code\">args</code>, and the current process environment. </div>", "  execv prog args execute the program in file prog, with the arguments args, and the current process environment. "],
["Sys", "Sys.html", "executable_name", "Sys.html#VALexecutable_name", "<div class=\"info\">  The name of the file containing the executable currently running. </div>", "  The name of the file containing the executable currently running. "],
["Unix", "Unix.html", "establish_server", "Unix.html#VALestablish_server", "<div class=\"info\">  Establish a server on the given address. </div>", "  Establish a server on the given address. "],
["UnixLabels", "UnixLabels.html", "establish_server", "UnixLabels.html#VALestablish_server", "<div class=\"info\">  Establish a server on the given address. </div>", "  Establish a server on the given address. "],
["Bytes", "Bytes.html", "escaped", "Bytes.html#VALescaped", "<div class=\"info\">  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. "],
["BytesLabels", "BytesLabels.html", "escaped", "BytesLabels.html#VALescaped", "<div class=\"info\">  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. "],
["Char", "Char.html", "escaped", "Char.html#VALescaped", "<div class=\"info\">  Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml. </div>", "  Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml. "],
["StringLabels", "StringLabels.html", "escaped", "StringLabels.html#VALescaped", "<div class=\"info\">  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. "],
["String", "String.html", "escaped", "String.html#VALescaped", "<div class=\"info\">  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. </div>", "  Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. "],
["Dynlink", "Dynlink.html", "error_message", "Dynlink.html#VALerror_message", "<div class=\"info\">  Convert an error description to a printable message. </div>", "  Convert an error description to a printable message. "],
["Unix", "Unix.html", "error_message", "Unix.html#VALerror_message", "<div class=\"info\">  Return a string describing the given error code. </div>", "  Return a string describing the given error code. "],
["UnixLabels", "UnixLabels.html", "error_message", "UnixLabels.html#VALerror_message", "<div class=\"info\">  Return a string describing the given error code. </div>", "  Return a string describing the given error code. "],
["Format", "Format.html", "err_formatter", "Format.html#VALerr_formatter", "<div class=\"info\">  A formatter to use with formatting functions below for output to standard error. </div>", "  A formatter to use with formatting functions below for output to standard error. "],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "erase_rel", "CamlinternalFormatBasics.html#VALerase_rel", "", ""],
["Hashtbl.HashedType", "Hashtbl.HashedType.html", "equal", "Hashtbl.HashedType.html#VALequal", "<div class=\"info\">  The equality predicate used to compare keys. </div>", "  The equality predicate used to compare keys. "],
["Hashtbl.SeededHashedType", "Hashtbl.SeededHashedType.html", "equal", "Hashtbl.SeededHashedType.html#VALequal", "<div class=\"info\">  The equality predicate used to compare keys. </div>", "  The equality predicate used to compare keys. "],
["Map.S", "Map.S.html", "equal", "Map.S.html#VALequal", "<div class=\"info\">  <code class=\"code\">equal cmp m1 m2</code> tests whether the maps <code class=\"code\">m1</code> and <code class=\"code\">m2</code> are equal, that is, contain equal keys and associate them with equal data. </div>", "  equal cmp m1 m2 tests whether the maps m1 and m2 are equal, that is, contain equal keys and associate them with equal data. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "equal", "MoreLabels.Map.S.html#VALequal", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "equal", "MoreLabels.Set.S.html#VALequal", "", ""],
["Set.S", "Set.S.html", "equal", "Set.S.html#VALequal", "<div class=\"info\">  <code class=\"code\">equal s1 s2</code> tests whether the sets <code class=\"code\">s1</code> and <code class=\"code\">s2</code> are equal, that is, contain equal elements. </div>", "  equal s1 s2 tests whether the sets s1 and s2 are equal, that is, contain equal elements. "],
["Num", "Num.html", "eq_num", "Num.html#VALeq_num", "", ""],
["Big_int", "Big_int.html", "eq_big_int", "Big_int.html#VALeq_big_int", "", ""],
["Pervasives", "Pervasives.html", "epsilon_float", "Pervasives.html#VALepsilon_float", "<div class=\"info\">  The difference between <code class=\"code\">1.0</code> and the smallest exactly representable floating-point number greater than <code class=\"code\">1.0</code>. </div>", "  The difference between 1.0 and the smallest exactly representable floating-point number greater than 1.0. "],
["Format", "Format.html", "eprintf", "Format.html#VALeprintf", "<div class=\"info\">  Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">err_formatter</code>. </div>", "  Same as fprintf above, but output on err_formatter. "],
["Printf", "Printf.html", "eprintf", "Printf.html#VALeprintf", "<div class=\"info\">  Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stderr</code>. </div>", "  Same as Printf.fprintf, but output on stderr. "],
["Unix", "Unix.html", "environment", "Unix.html#VALenvironment", "<div class=\"info\">  Return the process environment, as an array of strings with the format ``variable=value''. </div>", "  Return the process environment, as an array of strings with the format ``variable=value''. "],
["UnixLabels", "UnixLabels.html", "environment", "UnixLabels.html#VALenvironment", "<div class=\"info\">  Return the process environment, as an array of strings with the format ``variable=value''. </div>", "  Return the process environment, as an array of strings with the format ``variable=value''. "],
["Scanf.Scanning", "Scanf.Scanning.html", "end_of_input", "Scanf.Scanning.html#VALend_of_input", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.end_of_input ic</code> tests the end-of-input condition of the given formatted input channel. </div>", "  Scanning.end_of_input ic tests the end-of-input condition of the given formatted input channel. "],
["Bytes", "Bytes.html", "empty", "Bytes.html#VALempty", "<div class=\"info\">  A byte sequence of size 0. </div>", "  A byte sequence of size 0. "],
["BytesLabels", "BytesLabels.html", "empty", "BytesLabels.html#VALempty", "<div class=\"info\">  A byte sequence of size 0. </div>", "  A byte sequence of size 0. "],
["Map.S", "Map.S.html", "empty", "Map.S.html#VALempty", "<div class=\"info\">  The empty map. </div>", "  The empty map. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "empty", "MoreLabels.Map.S.html#VALempty", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "empty", "MoreLabels.Set.S.html#VALempty", "", ""],
["Set.S", "Set.S.html", "empty", "Set.S.html#VALempty", "<div class=\"info\">  The empty set. </div>", "  The empty set. "],
["Stream", "Stream.html", "empty", "Stream.html#VALempty", "<div class=\"info\">  Return <code class=\"code\">()</code> if the stream is empty, else raise <code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code>. </div>", "  Return () if the stream is empty, else raise Stream.Failure. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "elements", "MoreLabels.Set.S.html#VALelements", "", ""],
["Set.S", "Set.S.html", "elements", "Set.S.html#VALelements", "<div class=\"info\">  Return the list of all elements of the given set. </div>", "  Return the list of all elements of the given set. "],
["Unix", "Unix.html", "dup2", "Unix.html#VALdup2", "<div class=\"info\">  <code class=\"code\">dup2 fd1 fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already opened. </div>", "  dup2 fd1 fd2 duplicates fd1 to fd2, closing fd2 if already opened. "],
["UnixLabels", "UnixLabels.html", "dup2", "UnixLabels.html#VALdup2", "<div class=\"info\">  <code class=\"code\">dup2 fd1 fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already opened. </div>", "  dup2 fd1 fd2 duplicates fd1 to fd2, closing fd2 if already opened. "],
["Obj", "Obj.html", "dup", "Obj.html#VALdup", "", ""],
["Unix", "Unix.html", "dup", "Unix.html#VALdup", "<div class=\"info\">  Return a new file descriptor referencing the same file as the given descriptor. </div>", "  Return a new file descriptor referencing the same file as the given descriptor. "],
["UnixLabels", "UnixLabels.html", "dup", "UnixLabels.html#VALdup", "<div class=\"info\">  Return a new file descriptor referencing the same file as the given descriptor. </div>", "  Return a new file descriptor referencing the same file as the given descriptor. "],
["Graphics", "Graphics.html", "dump_image", "Graphics.html#VALdump_image", "<div class=\"info\">  Convert an image to a color matrix. </div>", "  Convert an image to a color matrix. "],
["CamlinternalOO", "CamlinternalOO.html", "dummy_table", "CamlinternalOO.html#VALdummy_table", "", ""],
["Lexing", "Lexing.html", "dummy_pos", "Lexing.html#VALdummy_pos", "<div class=\"info\">  A value of type <code class=\"code\">position</code>, guaranteed to be different from any valid position. </div>", "  A value of type position, guaranteed to be different from any valid position. "],
["CamlinternalOO", "CamlinternalOO.html", "dummy_class", "CamlinternalOO.html#VALdummy_class", "", ""],
["Graphics", "Graphics.html", "draw_string", "Graphics.html#VALdraw_string", "<div class=\"info\">  Draw a character or a character string with lower left corner at current position. </div>", "  Draw a character or a character string with lower left corner at current position. "],
["Graphics", "Graphics.html", "draw_segments", "Graphics.html#VALdraw_segments", "<div class=\"info\">  <code class=\"code\">draw_segments segments</code> draws the segments given in the array argument. </div>", "  draw_segments segments draws the segments given in the array argument. "],
["Graphics", "Graphics.html", "draw_rect", "Graphics.html#VALdraw_rect", "<div class=\"info\">  <code class=\"code\">draw_rect x y w h</code> draws the rectangle with lower left corner at <code class=\"code\">x,y</code>, width <code class=\"code\">w</code> and height <code class=\"code\">h</code>. </div>", "  draw_rect x y w h draws the rectangle with lower left corner at x,y, width w and height h. "],
["Graphics", "Graphics.html", "draw_poly_line", "Graphics.html#VALdraw_poly_line", "<div class=\"info\">  <code class=\"code\">draw_poly_line points</code> draws the line that joins the points given by the array argument. </div>", "  draw_poly_line points draws the line that joins the points given by the array argument. "],
["Graphics", "Graphics.html", "draw_poly", "Graphics.html#VALdraw_poly", "<div class=\"info\">  <code class=\"code\">draw_poly polygon</code> draws the given polygon. </div>", "  draw_poly polygon draws the given polygon. "],
["Graphics", "Graphics.html", "draw_image", "Graphics.html#VALdraw_image", "<div class=\"info\">  Draw the given image with lower left corner at the given point. </div>", "  Draw the given image with lower left corner at the given point. "],
["Graphics", "Graphics.html", "draw_ellipse", "Graphics.html#VALdraw_ellipse", "<div class=\"info\">  <code class=\"code\">draw_ellipse x y rx ry</code> draws an ellipse with center <code class=\"code\">x,y</code>, horizontal radius <code class=\"code\">rx</code> and vertical radius <code class=\"code\">ry</code>. </div>", "  draw_ellipse x y rx ry draws an ellipse with center x,y, horizontal radius rx and vertical radius ry. "],
["Graphics", "Graphics.html", "draw_circle", "Graphics.html#VALdraw_circle", "<div class=\"info\">  <code class=\"code\">draw_circle x y r</code> draws a circle with center <code class=\"code\">x,y</code> and radius <code class=\"code\">r</code>. </div>", "  draw_circle x y r draws a circle with center x,y and radius r. "],
["Graphics", "Graphics.html", "draw_char", "Graphics.html#VALdraw_char", "<div class=\"info\">  See <a href=\"Graphics.html#VALdraw_string\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.draw_string</code></a>. </div>", "  See Graphics.draw_string. "],
["Graphics", "Graphics.html", "draw_arc", "Graphics.html#VALdraw_arc", "<div class=\"info\">  <code class=\"code\">draw_arc x y rx ry a1 a2</code> draws an elliptical arc with center <code class=\"code\">x,y</code>, horizontal radius <code class=\"code\">rx</code>, vertical radius <code class=\"code\">ry</code>, from angle <code class=\"code\">a1</code> to angle <code class=\"code\">a2</code> (in degrees). </div>", "  draw_arc x y rx ry a1 a2 draws an elliptical arc with center x,y, horizontal radius rx, vertical radius ry, from angle a1 to angle a2 (in degrees). "],
["Obj", "Obj.html", "double_tag", "Obj.html#VALdouble_tag", "", ""],
["Obj", "Obj.html", "double_field", "Obj.html#VALdouble_field", "", ""],
["Obj", "Obj.html", "double_array_tag", "Obj.html#VALdouble_array_tag", "", ""],
["Unix", "Unix.html", "domain_of_sockaddr", "Unix.html#VALdomain_of_sockaddr", "<div class=\"info\">  Return the socket domain adequate for the given socket address. </div>", "  Return the socket domain adequate for the given socket address. "],
["UnixLabels", "UnixLabels.html", "domain_of_sockaddr", "UnixLabels.html#VALdomain_of_sockaddr", "<div class=\"info\">  Return the socket domain adequate for the given socket address. </div>", "  Return the socket domain adequate for the given socket address. "],
["Num", "Num.html", "div_num", "Num.html#VALdiv_num", "<div class=\"info\">  Division </div>", "  Division "],
["Big_int", "Big_int.html", "div_big_int", "Big_int.html#VALdiv_big_int", "<div class=\"info\">  Euclidean quotient of two big integers. </div>", "  Euclidean quotient of two big integers. "],
["Complex", "Complex.html", "div", "Complex.html#VALdiv", "<div class=\"info\">  Division </div>", "  Division "],
["Int32", "Int32.html", "div", "Int32.html#VALdiv", "<div class=\"info\">  Integer division. </div>", "  Integer division. "],
["Int64", "Int64.html", "div", "Int64.html#VALdiv", "<div class=\"info\">  Integer division. </div>", "  Integer division. "],
["Nativeint", "Nativeint.html", "div", "Nativeint.html#VALdiv", "<div class=\"info\">  Integer division. </div>", "  Integer division. "],
["Graphics", "Graphics.html", "display_mode", "Graphics.html#VALdisplay_mode", "<div class=\"info\">  Set display mode on or off. </div>", "  Set display mode on or off. "],
["Filename", "Filename.html", "dirname", "Filename.html#VALdirname", "<div class=\"info\">  See <a href=\"Filename.html#VALbasename\"><code class=\"code\"><span class=\"constructor\">Filename</span>.basename</code></a>. </div>", "  See Filename.basename. "],
["Filename", "Filename.html", "dir_sep", "Filename.html#VALdir_sep", "<div class=\"info\">  The directory separator (e.g. </div>", "  The directory separator (e.g. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "dims", "Bigarray.Genarray.html#VALdims", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Genarray</span>.dims a</code> returns all dimensions of the big array <code class=\"code\">a</code>, as an array of integers of length <code class=\"code\"><span class=\"constructor\">Genarray</span>.num_dims a</code>. </div>", "  Genarray.dims a returns all dimensions of the big array a, as an array of integers of length Genarray.num_dims a. "],
["Bigarray.Array3", "Bigarray.Array3.html", "dim3", "Bigarray.Array3.html#VALdim3", "<div class=\"info\">  Return the third dimension of the given three-dimensional big array. </div>", "  Return the third dimension of the given three-dimensional big array. "],
["Bigarray.Array2", "Bigarray.Array2.html", "dim2", "Bigarray.Array2.html#VALdim2", "<div class=\"info\">  Return the second dimension of the given two-dimensional big array. </div>", "  Return the second dimension of the given two-dimensional big array. "],
["Bigarray.Array3", "Bigarray.Array3.html", "dim2", "Bigarray.Array3.html#VALdim2", "<div class=\"info\">  Return the second dimension of the given three-dimensional big array. </div>", "  Return the second dimension of the given three-dimensional big array. "],
["Bigarray.Array2", "Bigarray.Array2.html", "dim1", "Bigarray.Array2.html#VALdim1", "<div class=\"info\">  Return the first dimension of the given two-dimensional big array. </div>", "  Return the first dimension of the given two-dimensional big array. "],
["Bigarray.Array3", "Bigarray.Array3.html", "dim1", "Bigarray.Array3.html#VALdim1", "<div class=\"info\">  Return the first dimension of the given three-dimensional big array. </div>", "  Return the first dimension of the given three-dimensional big array. "],
["Bigarray.Array1", "Bigarray.Array1.html", "dim", "Bigarray.Array1.html#VALdim", "<div class=\"info\">  Return the size (dimension) of the given one-dimensional big array. </div>", "  Return the size (dimension) of the given one-dimensional big array. "],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "diff", "MoreLabels.Set.S.html#VALdiff", "", ""],
["Set.S", "Set.S.html", "diff", "Set.S.html#VALdiff", "<div class=\"info\">  Set difference. </div>", "  Set difference. "],
["Unix", "Unix.html", "descr_of_out_channel", "Unix.html#VALdescr_of_out_channel", "<div class=\"info\">  Return the descriptor corresponding to an output channel. </div>", "  Return the descriptor corresponding to an output channel. "],
["UnixLabels", "UnixLabels.html", "descr_of_out_channel", "UnixLabels.html#VALdescr_of_out_channel", "<div class=\"info\">  Return the descriptor corresponding to an output channel. </div>", "  Return the descriptor corresponding to an output channel. "],
["Unix", "Unix.html", "descr_of_in_channel", "Unix.html#VALdescr_of_in_channel", "<div class=\"info\">  Return the descriptor corresponding to an input channel. </div>", "  Return the descriptor corresponding to an input channel. "],
["UnixLabels", "UnixLabels.html", "descr_of_in_channel", "UnixLabels.html#VALdescr_of_in_channel", "<div class=\"info\">  Return the descriptor corresponding to an input channel. </div>", "  Return the descriptor corresponding to an input channel. "],
["Gc", "Gc.html", "delete_alarm", "Gc.html#VALdelete_alarm", "<div class=\"info\">  <code class=\"code\">delete_alarm a</code> will stop the calls to the function associated to <code class=\"code\">a</code>. </div>", "  delete_alarm a will stop the calls to the function associated to a. "],
["Thread", "Thread.html", "delay", "Thread.html#VALdelay", "<div class=\"info\">  <code class=\"code\">delay d</code> suspends the execution of the calling thread for <code class=\"code\">d</code> seconds. </div>", "  delay d suspends the execution of the calling thread for d seconds. "],
["Dynlink", "Dynlink.html", "default_available_units", "Dynlink.html#VALdefault_available_units", "<div class=\"info\">  Reset the set of units that can be referenced from dynamically-linked code to its default value, that is, all units composing the currently running program. </div>", "  Reset the set of units that can be referenced from dynamically-linked code to its default value, that is, all units composing the currently running program. "],
["Num", "Num.html", "decr_num", "Num.html#VALdecr_num", "<div class=\"info\">  <code class=\"code\">decr r</code> is <code class=\"code\">r:=!r-1</code>, where <code class=\"code\">r</code> is a reference to a number. </div>", "  decr r is r:=!r-1, where r is a reference to a number. "],
["Pervasives", "Pervasives.html", "decr", "Pervasives.html#VALdecr", "<div class=\"info\">  Decrement the integer contained in the given reference. </div>", "  Decrement the integer contained in the given reference. "],
["Marshal", "Marshal.html", "data_size", "Marshal.html#VALdata_size", "<div class=\"info\">  See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>. </div>", "  See Marshal.header_size. "],
["Sys", "Sys.html", "cygwin", "Sys.html#VALcygwin", "<div class=\"info\">  True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type = <span class=\"string\">\"Cygwin\"</span></code>. </div>", "  True if Sys.os_type = \"Cygwin\". "],
["Graphics", "Graphics.html", "cyan", "Graphics.html#VALcyan", "", ""],
["Obj", "Obj.html", "custom_tag", "Obj.html#VALcustom_tag", "", ""],
["Graphics", "Graphics.html", "curveto", "Graphics.html#VALcurveto", "<div class=\"info\">  <code class=\"code\">curveto b c d</code> draws a cubic Bezier curve starting from the current point to point <code class=\"code\">d</code>, with control points <code class=\"code\">b</code> and <code class=\"code\">c</code>, and moves the current point to <code class=\"code\">d</code>. </div>", "  curveto b c d draws a cubic Bezier curve starting from the current point to point d, with control points b and c, and moves the current point to d. "],
["Graphics", "Graphics.html", "current_y", "Graphics.html#VALcurrent_y", "<div class=\"info\">  Return the ordinate of the current point. </div>", "  Return the ordinate of the current point. "],
["Graphics", "Graphics.html", "current_x", "Graphics.html#VALcurrent_x", "<div class=\"info\">  Return the abscissa of the current point. </div>", "  Return the abscissa of the current point. "],
["Graphics", "Graphics.html", "current_point", "Graphics.html#VALcurrent_point", "<div class=\"info\">  Return the position of the current point. </div>", "  Return the position of the current point. "],
["Filename", "Filename.html", "current_dir_name", "Filename.html#VALcurrent_dir_name", "<div class=\"info\">  The conventional name for the current directory (e.g. </div>", "  The conventional name for the current directory (e.g. "],
["Arg", "Arg.html", "current", "Arg.html#VALcurrent", "<div class=\"info\">  Position (in <a href=\"Sys.html#VALargv\"><code class=\"code\"><span class=\"constructor\">Sys</span>.argv</code></a>) of the argument being processed. </div>", "  Position (in Sys.argv) of the argument being processed. "],
["CamlinternalOO", "CamlinternalOO.html", "create_table", "CamlinternalOO.html#VALcreate_table", "", ""],
["Unix", "Unix.html", "create_process_env", "Unix.html#VALcreate_process_env", "<div class=\"info\">  <code class=\"code\">create_process_env prog args env new_stdin new_stdout new_stderr</code> works as <a href=\"Unix.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.create_process</code></a>, except that the extra argument <code class=\"code\">env</code> specifies the environment passed to the program. </div>", "  create_process_env prog args env new_stdin new_stdout new_stderr works as Unix.create_process, except that the extra argument env specifies the environment passed to the program. "],
["UnixLabels", "UnixLabels.html", "create_process_env", "UnixLabels.html#VALcreate_process_env", "<div class=\"info\">  <code class=\"code\">create_process_env prog args env new_stdin new_stdout new_stderr</code> works as <a href=\"UnixLabels.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.create_process</code></a>, except that the extra argument <code class=\"code\">env</code> specifies the environment passed to the program. </div>", "  create_process_env prog args env new_stdin new_stdout new_stderr works as UnixLabels.create_process, except that the extra argument env specifies the environment passed to the program. "],
["Unix", "Unix.html", "create_process", "Unix.html#VALcreate_process", "<div class=\"info\">  <code class=\"code\">create_process prog args new_stdin new_stdout new_stderr</code> forks a new process that executes the program in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>. </div>", "  create_process prog args new_stdin new_stdout new_stderr forks a new process that executes the program in file prog, with arguments args. "],
["UnixLabels", "UnixLabels.html", "create_process", "UnixLabels.html#VALcreate_process", "<div class=\"info\">  <code class=\"code\">create_process prog args new_stdin new_stdout new_stderr</code> forks a new process that executes the program in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>. </div>", "  create_process prog args new_stdin new_stdout new_stderr forks a new process that executes the program in file prog, with arguments args. "],
["CamlinternalOO", "CamlinternalOO.html", "create_object_opt", "CamlinternalOO.html#VALcreate_object_opt", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "create_object_and_run_initializers", "CamlinternalOO.html#VALcreate_object_and_run_initializers", "", ""],
["CamlinternalOO", "CamlinternalOO.html", "create_object", "CamlinternalOO.html#VALcreate_object", "", ""],
["Array", "Array.html", "create_matrix", "Array.html#VALcreate_matrix", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["ArrayLabels", "ArrayLabels.html", "create_matrix", "ArrayLabels.html#VALcreate_matrix", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Graphics", "Graphics.html", "create_image", "Graphics.html#VALcreate_image", "<div class=\"info\">  <code class=\"code\">create_image w h</code> returns a new image <code class=\"code\">w</code> pixels wide and <code class=\"code\">h</code> pixels tall, to be used in conjunction with <code class=\"code\">blit_image</code>. </div>", "  create_image w h returns a new image w pixels wide and h pixels tall, to be used in conjunction with blit_image. "],
["CamlinternalFormat", "CamlinternalFormat.html", "create_char_set", "CamlinternalFormat.html#VALcreate_char_set", "", ""],
["Gc", "Gc.html", "create_alarm", "Gc.html#VALcreate_alarm", "<div class=\"info\">  <code class=\"code\">create_alarm f</code> will arrange for <code class=\"code\">f</code> to be called at the end of each major GC cycle, starting with the current cycle or the next one. </div>", "  create_alarm f will arrange for f to be called at the end of each major GC cycle, starting with the current cycle or the next one. "],
["Array", "Array.html", "create", "Array.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["ArrayLabels", "ArrayLabels.html", "create", "ArrayLabels.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "create", "Bigarray.Genarray.html#VALcreate", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Genarray</span>.create kind layout dimensions</code> returns a new big array whose element kind is determined by the parameter <code class=\"code\">kind</code> (one of <code class=\"code\">float32</code>, <code class=\"code\">float64</code>, <code class=\"code\">int8_signed</code>, etc) and whose layout is determined by the parameter <code class=\"code\">layout</code> (one of <code class=\"code\">c_layout</code> or <code class=\"code\">fortran_layout</code>). </div>", "  Genarray.create kind layout dimensions returns a new big array whose element kind is determined by the parameter kind (one of float32, float64, int8_signed, etc) and whose layout is determined by the parameter layout (one of c_layout or fortran_layout). "],
["Bigarray.Array1", "Bigarray.Array1.html", "create", "Bigarray.Array1.html#VALcreate", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array1</span>.create kind layout dim</code> returns a new bigarray of one dimension, whose size is <code class=\"code\">dim</code>. </div>", "  Array1.create kind layout dim returns a new bigarray of one dimension, whose size is dim. "],
["Bigarray.Array2", "Bigarray.Array2.html", "create", "Bigarray.Array2.html#VALcreate", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array2</span>.create kind layout dim1 dim2</code> returns a new bigarray of two dimension, whose size is <code class=\"code\">dim1</code> in the first dimension and <code class=\"code\">dim2</code> in the second dimension. </div>", "  Array2.create kind layout dim1 dim2 returns a new bigarray of two dimension, whose size is dim1 in the first dimension and dim2 in the second dimension. "],
["Bigarray.Array3", "Bigarray.Array3.html", "create", "Bigarray.Array3.html#VALcreate", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array3</span>.create kind layout dim1 dim2 dim3</code> returns a new bigarray of three dimension, whose size is <code class=\"code\">dim1</code> in the first dimension, <code class=\"code\">dim2</code> in the second dimension, and <code class=\"code\">dim3</code> in the third. </div>", "  Array3.create kind layout dim1 dim2 dim3 returns a new bigarray of three dimension, whose size is dim1 in the first dimension, dim2 in the second dimension, and dim3 in the third. "],
["Buffer", "Buffer.html", "create", "Buffer.html#VALcreate", "<div class=\"info\">  <code class=\"code\">create n</code> returns a fresh buffer, initially empty. </div>", "  create n returns a fresh buffer, initially empty. "],
["Bytes", "Bytes.html", "create", "Bytes.html#VALcreate", "<div class=\"info\">  <code class=\"code\">create n</code> returns a new byte sequence of length <code class=\"code\">n</code>. </div>", "  create n returns a new byte sequence of length n. "],
["BytesLabels", "BytesLabels.html", "create", "BytesLabels.html#VALcreate", "<div class=\"info\">  <code class=\"code\">create n</code> returns a new byte sequence of length <code class=\"code\">n</code>. </div>", "  create n returns a new byte sequence of length n. "],
["Condition", "Condition.html", "create", "Condition.html#VALcreate", "<div class=\"info\">  Return a new condition variable. </div>", "  Return a new condition variable. "],
["Hashtbl", "Hashtbl.html", "create", "Hashtbl.html#VALcreate", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create n</code> creates a new, empty hash table, with initial size <code class=\"code\">n</code>. </div>", "  Hashtbl.create n creates a new, empty hash table, with initial size n. "],
["Hashtbl.S", "Hashtbl.S.html", "create", "Hashtbl.S.html#VALcreate", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "create", "Hashtbl.SeededS.html#VALcreate", "", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "create", "MoreLabels.Hashtbl.html#VALcreate", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "create", "MoreLabels.Hashtbl.S.html#VALcreate", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "create", "MoreLabels.Hashtbl.SeededS.html#VALcreate", "", ""],
["Mutex", "Mutex.html", "create", "Mutex.html#VALcreate", "<div class=\"info\">  Return a new mutex. </div>", "  Return a new mutex. "],
["Queue", "Queue.html", "create", "Queue.html#VALcreate", "<div class=\"info\">  Return a new queue, initially empty. </div>", "  Return a new queue, initially empty. "],
["Stack", "Stack.html", "create", "Stack.html#VALcreate", "<div class=\"info\">  Return a new stack, initially empty. </div>", "  Return a new stack, initially empty. "],
["StringLabels", "StringLabels.html", "create", "StringLabels.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"><code class=\"code\"><span class=\"constructor\">String</span>.create n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>. </span></div>", "  String.create n returns a fresh byte sequence of length n. "],
["String", "String.html", "create", "String.html#VALcreate", "<div class=\"info\">  <span class=\"deprecated\"><code class=\"code\"><span class=\"constructor\">String</span>.create n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>. </span></div>", "  String.create n returns a fresh byte sequence of length n. "],
["Thread", "Thread.html", "create", "Thread.html#VALcreate", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Thread</span>.create funct arg</code> creates a new thread of control, in which the function application <code class=\"code\">funct arg</code> is executed concurrently with the other threads of the program. </div>", "  Thread.create funct arg creates a new thread of control, in which the function application funct arg is executed concurrently with the other threads of the program. "],
["Weak", "Weak.html", "create", "Weak.html#VALcreate", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.create n</code> returns a new weak array of length <code class=\"code\">n</code>. </div>", "  Weak.create n returns a new weak array of length n. "],
["Weak.S", "Weak.S.html", "create", "Weak.S.html#VALcreate", "<div class=\"info\">  <code class=\"code\">create n</code> creates a new empty weak hash table, of initial size <code class=\"code\">n</code>. </div>", "  create n creates a new empty weak hash table, of initial size n. "],
["Gc", "Gc.html", "counters", "Gc.html#VALcounters", "<div class=\"info\">  Return <code class=\"code\">(minor_words, promoted_words, major_words)</code>. </div>", "  Return (minor_words, promoted_words, major_words). "],
["Stream", "Stream.html", "count", "Stream.html#VALcount", "<div class=\"info\">  Return the current count of the stream elements, i.e. </div>", "  Return the current count of the stream elements, i.e. "],
["Weak.S", "Weak.S.html", "count", "Weak.S.html#VALcount", "<div class=\"info\">  Count the number of elements in the table. </div>", "  Count the number of elements in the table. "],
["Pervasives", "Pervasives.html", "cosh", "Pervasives.html#VALcosh", "<div class=\"info\">  Hyperbolic cosine. </div>", "  Hyperbolic cosine. "],
["Pervasives", "Pervasives.html", "cos", "Pervasives.html#VALcos", "<div class=\"info\">  Cosine. </div>", "  Cosine. "],
["Pervasives", "Pervasives.html", "copysign", "Pervasives.html#VALcopysign", "<div class=\"info\">  <code class=\"code\">copysign x y</code> returns a float whose absolute value is that of <code class=\"code\">x</code> and whose sign is that of <code class=\"code\">y</code>. </div>", "  copysign x y returns a float whose absolute value is that of x and whose sign is that of y. "],
["Array", "Array.html", "copy", "Array.html#VALcopy", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.copy a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array containing the same elements as <code class=\"code\">a</code>. </div>", "  Array.copy a returns a copy of a, that is, a fresh array containing the same elements as a. "],
["ArrayLabels", "ArrayLabels.html", "copy", "ArrayLabels.html#VALcopy", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.copy a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array containing the same elements as <code class=\"code\">a</code>. </div>", "  Array.copy a returns a copy of a, that is, a fresh array containing the same elements as a. "],
["Bytes", "Bytes.html", "copy", "Bytes.html#VALcopy", "<div class=\"info\">  Return a new byte sequence that contains the same bytes as the argument. </div>", "  Return a new byte sequence that contains the same bytes as the argument. "],
["BytesLabels", "BytesLabels.html", "copy", "BytesLabels.html#VALcopy", "<div class=\"info\">  Return a new byte sequence that contains the same bytes as the argument. </div>", "  Return a new byte sequence that contains the same bytes as the argument. "],
["CamlinternalOO", "CamlinternalOO.html", "copy", "CamlinternalOO.html#VALcopy", "", ""],
["Hashtbl", "Hashtbl.html", "copy", "Hashtbl.html#VALcopy", "<div class=\"info\">  Return a copy of the given hashtable. </div>", "  Return a copy of the given hashtable. "],
["Hashtbl.S", "Hashtbl.S.html", "copy", "Hashtbl.S.html#VALcopy", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "copy", "Hashtbl.SeededS.html#VALcopy", "", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "copy", "MoreLabels.Hashtbl.html#VALcopy", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "copy", "MoreLabels.Hashtbl.S.html#VALcopy", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "copy", "MoreLabels.Hashtbl.SeededS.html#VALcopy", "", ""],
["Oo", "Oo.html", "copy", "Oo.html#VALcopy", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Oo</span>.copy o</code> returns a copy of object <code class=\"code\">o</code>, that is a fresh object with the same methods and instance variables as <code class=\"code\">o</code>. </div>", "  Oo.copy o returns a copy of object o, that is a fresh object with the same methods and instance variables as o. "],
["Queue", "Queue.html", "copy", "Queue.html#VALcopy", "<div class=\"info\">  Return a copy of the given queue. </div>", "  Return a copy of the given queue. "],
["Random.State", "Random.State.html", "copy", "Random.State.html#VALcopy", "<div class=\"info\">  Return a copy of the given state. </div>", "  Return a copy of the given state. "],
["Stack", "Stack.html", "copy", "Stack.html#VALcopy", "<div class=\"info\">  Return a copy of the given stack. </div>", "  Return a copy of the given stack. "],
["StringLabels", "StringLabels.html", "copy", "StringLabels.html#VALcopy", "<div class=\"info\">  Return a copy of the given string. </div>", "  Return a copy of the given string. "],
["String", "String.html", "copy", "String.html#VALcopy", "<div class=\"info\">  <span class=\"deprecated\">Return a copy of the given string. </span></div>", "  Return a copy of the given string. "],
["Printexc", "Printexc.html", "convert_raw_backtrace_slot", "Printexc.html#VALconvert_raw_backtrace_slot", "<div class=\"info\">  Extracts the user-friendly <code class=\"code\">backtrace_slot</code> from a low-level <code class=\"code\">raw_backtrace_slot</code>. </div>", "  Extracts the user-friendly backtrace_slot from a low-level raw_backtrace_slot. "],
["Buffer", "Buffer.html", "contents", "Buffer.html#VALcontents", "<div class=\"info\">  Return a copy of the current contents of the buffer. </div>", "  Return a copy of the current contents of the buffer. "],
["Bytes", "Bytes.html", "contains_from", "Bytes.html#VALcontains_from", "<div class=\"info\">  <code class=\"code\">contains_from s start c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>. </div>", "  contains_from s start c tests if byte c appears in s after position start. "],
["BytesLabels", "BytesLabels.html", "contains_from", "BytesLabels.html#VALcontains_from", "<div class=\"info\">  <code class=\"code\">contains_from s start c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>. </div>", "  contains_from s start c tests if byte c appears in s after position start. "],
["StringLabels", "StringLabels.html", "contains_from", "StringLabels.html#VALcontains_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.contains_from s start c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>. </div>", "  String.contains_from s start c tests if character c appears in s after position start. "],
["String", "String.html", "contains_from", "String.html#VALcontains_from", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.contains_from s start c</code> tests if character <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>. </div>", "  String.contains_from s start c tests if character c appears in s after position start. "],
["Bytes", "Bytes.html", "contains", "Bytes.html#VALcontains", "<div class=\"info\">  <code class=\"code\">contains s c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>. </div>", "  contains s c tests if byte c appears in s. "],
["BytesLabels", "BytesLabels.html", "contains", "BytesLabels.html#VALcontains", "<div class=\"info\">  <code class=\"code\">contains s c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>. </div>", "  contains s c tests if byte c appears in s. "],
["StringLabels", "StringLabels.html", "contains", "StringLabels.html#VALcontains", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.contains s c</code> tests if character <code class=\"code\">c</code> appears in the string <code class=\"code\">s</code>. </div>", "  String.contains s c tests if character c appears in the string s. "],
["String", "String.html", "contains", "String.html#VALcontains", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.contains s c</code> tests if character <code class=\"code\">c</code> appears in the string <code class=\"code\">s</code>. </div>", "  String.contains s c tests if character c appears in the string s. "],
["ThreadUnix", "ThreadUnix.html", "connect", "ThreadUnix.html#VALconnect", "", ""],
["Unix", "Unix.html", "connect", "Unix.html#VALconnect", "<div class=\"info\">  Connect a socket to an address. </div>", "  Connect a socket to an address. "],
["UnixLabels", "UnixLabels.html", "connect", "UnixLabels.html#VALconnect", "<div class=\"info\">  Connect a socket to an address. </div>", "  Connect a socket to an address. "],
["Complex", "Complex.html", "conj", "Complex.html#VALconj", "<div class=\"info\">  Conjugate: given the complex <code class=\"code\">x + i.y</code>, returns <code class=\"code\">x - i.y</code>. </div>", "  Conjugate: given the complex x + i.y, returns x - i.y. "],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "concat_fmtty", "CamlinternalFormatBasics.html#VALconcat_fmtty", "", ""],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "concat_fmt", "CamlinternalFormatBasics.html#VALconcat_fmt", "", ""],
["Array", "Array.html", "concat", "Array.html#VALconcat", "<div class=\"info\">  Same as <code class=\"code\"><span class=\"constructor\">Array</span>.append</code>, but concatenates a list of arrays. </div>", "  Same as Array.append, but concatenates a list of arrays. "],
["ArrayLabels", "ArrayLabels.html", "concat", "ArrayLabels.html#VALconcat", "<div class=\"info\">  Same as <code class=\"code\"><span class=\"constructor\">Array</span>.append</code>, but concatenates a list of arrays. </div>", "  Same as Array.append, but concatenates a list of arrays. "],
["Bytes", "Bytes.html", "concat", "Bytes.html#VALconcat", "<div class=\"info\">  <code class=\"code\">concat sep sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>, inserting the separator byte sequence <code class=\"code\">sep</code> between each, and returns the result as a new byte sequence. </div>", "  concat sep sl concatenates the list of byte sequences sl, inserting the separator byte sequence sep between each, and returns the result as a new byte sequence. "],
["BytesLabels", "BytesLabels.html", "concat", "BytesLabels.html#VALconcat", "<div class=\"info\">  <code class=\"code\">concat sep sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>, inserting the separator byte sequence <code class=\"code\">sep</code> between each, and returns the result as a new byte sequence. </div>", "  concat sep sl concatenates the list of byte sequences sl, inserting the separator byte sequence sep between each, and returns the result as a new byte sequence. "],
["Filename", "Filename.html", "concat", "Filename.html#VALconcat", "<div class=\"info\">  <code class=\"code\">concat dir file</code> returns a file name that designates file <code class=\"code\">file</code> in directory <code class=\"code\">dir</code>. </div>", "  concat dir file returns a file name that designates file file in directory dir. "],
["List", "List.html", "concat", "List.html#VALconcat", "<div class=\"info\">  Concatenate a list of lists. </div>", "  Concatenate a list of lists. "],
["ListLabels", "ListLabels.html", "concat", "ListLabels.html#VALconcat", "<div class=\"info\">  Concatenate a list of lists. </div>", "  Concatenate a list of lists. "],
["StringLabels", "StringLabels.html", "concat", "StringLabels.html#VALconcat", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.concat sep sl</code> concatenates the list of strings <code class=\"code\">sl</code>, inserting the separator string <code class=\"code\">sep</code> between each. </div>", "  String.concat sep sl concatenates the list of strings sl, inserting the separator string sep between each. "],
["String", "String.html", "concat", "String.html#VALconcat", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.concat sep sl</code> concatenates the list of strings <code class=\"code\">sl</code>, inserting the separator string <code class=\"code\">sep</code> between each. </div>", "  String.concat sep sl concatenates the list of strings sl, inserting the separator string sep between each. "],
["Bigarray", "Bigarray.html", "complex64", "Bigarray.html#VALcomplex64", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Bigarray", "Bigarray.html", "complex32", "Bigarray.html#VALcomplex32", "<div class=\"info\">  See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>. </div>", "  See Bigarray.char. "],
["Num", "Num.html", "compare_num", "Num.html#VALcompare_num", "<div class=\"info\">  Return <code class=\"code\">-1</code>, <code class=\"code\">0</code> or <code class=\"code\">1</code> if the first argument is less than, equal to, or greater than the second argument. </div>", "  Return -1, 0 or 1 if the first argument is less than, equal to, or greater than the second argument. "],
["Big_int", "Big_int.html", "compare_big_int", "Big_int.html#VALcompare_big_int", "<div class=\"info\">  <code class=\"code\">compare_big_int a b</code> returns <code class=\"code\">0</code> if <code class=\"code\">a</code> and <code class=\"code\">b</code> are equal, <code class=\"code\">1</code> if <code class=\"code\">a</code> is greater than <code class=\"code\">b</code>, and <code class=\"code\">-1</code> if <code class=\"code\">a</code> is smaller than <code class=\"code\">b</code>. </div>", "  compare_big_int a b returns 0 if a and b are equal, 1 if a is greater than b, and -1 if a is smaller than b. "],
["Bytes", "Bytes.html", "compare", "Bytes.html#VALcompare", "<div class=\"info\">  The comparison function for byte sequences, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for byte sequences, with the same specification as compare. "],
["BytesLabels", "BytesLabels.html", "compare", "BytesLabels.html#VALcompare", "<div class=\"info\">  The comparison function for byte sequences, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for byte sequences, with the same specification as compare. "],
["Char", "Char.html", "compare", "Char.html#VALcompare", "<div class=\"info\">  The comparison function for characters, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for characters, with the same specification as compare. "],
["Digest", "Digest.html", "compare", "Digest.html#VALcompare", "<div class=\"info\">  The comparison function for 16-character digest, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> and the implementation shared with <a href=\"String.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">String</span>.compare</code></a>. </div>", "  The comparison function for 16-character digest, with the same specification as compare and the implementation shared with String.compare. "],
["Int32", "Int32.html", "compare", "Int32.html#VALcompare", "<div class=\"info\">  The comparison function for 32-bit integers, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for 32-bit integers, with the same specification as compare. "],
["Int64", "Int64.html", "compare", "Int64.html#VALcompare", "<div class=\"info\">  The comparison function for 64-bit integers, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for 64-bit integers, with the same specification as compare. "],
["Map.S", "Map.S.html", "compare", "Map.S.html#VALcompare", "<div class=\"info\">  Total ordering between maps. </div>", "  Total ordering between maps. "],
["Map.OrderedType", "Map.OrderedType.html", "compare", "Map.OrderedType.html#VALcompare", "<div class=\"info\">  A total ordering function over the keys. </div>", "  A total ordering function over the keys. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "compare", "MoreLabels.Map.S.html#VALcompare", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "compare", "MoreLabels.Set.S.html#VALcompare", "", ""],
["Set.OrderedType", "Set.OrderedType.html", "compare", "Set.OrderedType.html#VALcompare", "<div class=\"info\">  A total ordering function over the set elements. </div>", "  A total ordering function over the set elements. "],
["Nativeint", "Nativeint.html", "compare", "Nativeint.html#VALcompare", "<div class=\"info\">  The comparison function for native integers, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for native integers, with the same specification as compare. "],
["Pervasives", "Pervasives.html", "compare", "Pervasives.html#VALcompare", "<div class=\"info\">  <code class=\"code\">compare x y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>, a negative integer if <code class=\"code\">x</code> is less than <code class=\"code\">y</code>, and a positive integer if <code class=\"code\">x</code> is greater than <code class=\"code\">y</code>. </div>", "  compare x y returns 0 if x is equal to y, a negative integer if x is less than y, and a positive integer if x is greater than y. "],
["Set.S", "Set.S.html", "compare", "Set.S.html#VALcompare", "<div class=\"info\">  Total ordering between sets. </div>", "  Total ordering between sets. "],
["StringLabels", "StringLabels.html", "compare", "StringLabels.html#VALcompare", "<div class=\"info\">  The comparison function for strings, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for strings, with the same specification as compare. "],
["String", "String.html", "compare", "String.html#VALcompare", "<div class=\"info\">  The comparison function for strings, with the same specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>. </div>", "  The comparison function for strings, with the same specification as compare. "],
["Gc", "Gc.html", "compact", "Gc.html#VALcompact", "<div class=\"info\">  Perform a full major collection and compact the heap. </div>", "  Perform a full major collection and compact the heap. "],
["Sys", "Sys.html", "command", "Sys.html#VALcommand", "<div class=\"info\">  Execute the given shell command and return its exit code. </div>", "  Execute the given shell command and return its exit code. "],
["List", "List.html", "combine", "List.html#VALcombine", "<div class=\"info\">  Transform a pair of lists into a list of pairs: <code class=\"code\">combine [a1; ...; an] [b1; ...; bn]</code> is <code class=\"code\">[(a1,b1); ...; (an,bn)]</code>. </div>", "  Transform a pair of lists into a list of pairs: combine [a1; ...; an] [b1; ...; bn] is [(a1,b1); ...; (an,bn)]. "],
["ListLabels", "ListLabels.html", "combine", "ListLabels.html#VALcombine", "<div class=\"info\">  Transform a pair of lists into a list of pairs: <code class=\"code\">combine [a1; ...; an] [b1; ...; bn]</code> is <code class=\"code\">[(a1,b1); ...; (an,bn)]</code>. </div>", "  Transform a pair of lists into a list of pairs: combine [a1; ...; an] [b1; ...; bn] is [(a1,b1); ...; (an,bn)]. "],
["Char", "Char.html", "code", "Char.html#VALcode", "<div class=\"info\">  Return the ASCII code of the argument. </div>", "  Return the ASCII code of the argument. "],
["Obj", "Obj.html", "closure_tag", "Obj.html#VALclosure_tag", "", ""],
["Unix", "Unix.html", "closedir", "Unix.html#VALclosedir", "<div class=\"info\">  Close a directory descriptor. </div>", "  Close a directory descriptor. "],
["UnixLabels", "UnixLabels.html", "closedir", "UnixLabels.html#VALclosedir", "<div class=\"info\">  Close a directory descriptor. </div>", "  Close a directory descriptor. "],
["Format", "Format.html", "close_tbox", "Format.html#VALclose_tbox", "<div class=\"info\">  Closes the most recently opened tabulation box. </div>", "  Closes the most recently opened tabulation box. "],
["Format", "Format.html", "close_tag", "Format.html#VALclose_tag", "<div class=\"info\">  <code class=\"code\">close_tag ()</code> closes the most recently opened tag <code class=\"code\">t</code>. </div>", "  close_tag () closes the most recently opened tag t. "],
["GraphicsX11", "GraphicsX11.html", "close_subwindow", "GraphicsX11.html#VALclose_subwindow", "<div class=\"info\">  Close the sub-window having the given identifier. </div>", "  Close the sub-window having the given identifier. "],
["Unix", "Unix.html", "close_process_out", "Unix.html#VALclose_process_out", "<div class=\"info\">  Close channels opened by <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by Unix.open_process_out, wait for the associated command to terminate, and return its termination status. "],
["UnixLabels", "UnixLabels.html", "close_process_out", "UnixLabels.html#VALclose_process_out", "<div class=\"info\">  Close channels opened by <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by UnixLabels.open_process_out, wait for the associated command to terminate, and return its termination status. "],
["Unix", "Unix.html", "close_process_in", "Unix.html#VALclose_process_in", "<div class=\"info\">  Close channels opened by <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by Unix.open_process_in, wait for the associated command to terminate, and return its termination status. "],
["UnixLabels", "UnixLabels.html", "close_process_in", "UnixLabels.html#VALclose_process_in", "<div class=\"info\">  Close channels opened by <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by UnixLabels.open_process_in, wait for the associated command to terminate, and return its termination status. "],
["Unix", "Unix.html", "close_process_full", "Unix.html#VALclose_process_full", "<div class=\"info\">  Close channels opened by <a href=\"Unix.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_full</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by Unix.open_process_full, wait for the associated command to terminate, and return its termination status. "],
["UnixLabels", "UnixLabels.html", "close_process_full", "UnixLabels.html#VALclose_process_full", "<div class=\"info\">  Close channels opened by <a href=\"UnixLabels.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_full</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by UnixLabels.open_process_full, wait for the associated command to terminate, and return its termination status. "],
["Unix", "Unix.html", "close_process", "Unix.html#VALclose_process", "<div class=\"info\">  Close channels opened by <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by Unix.open_process, wait for the associated command to terminate, and return its termination status. "],
["UnixLabels", "UnixLabels.html", "close_process", "UnixLabels.html#VALclose_process", "<div class=\"info\">  Close channels opened by <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>, wait for the associated command to terminate, and return its termination status. </div>", "  Close channels opened by UnixLabels.open_process, wait for the associated command to terminate, and return its termination status. "],
["Pervasives", "Pervasives.html", "close_out_noerr", "Pervasives.html#VALclose_out_noerr", "<div class=\"info\">  Same as <code class=\"code\">close_out</code>, but ignore all errors. </div>", "  Same as close_out, but ignore all errors. "],
["Pervasives", "Pervasives.html", "close_out", "Pervasives.html#VALclose_out", "<div class=\"info\">  Close the given channel, flushing all buffered write operations. </div>", "  Close the given channel, flushing all buffered write operations. "],
["Pervasives", "Pervasives.html", "close_in_noerr", "Pervasives.html#VALclose_in_noerr", "<div class=\"info\">  Same as <code class=\"code\">close_in</code>, but ignore all errors. </div>", "  Same as close_in, but ignore all errors. "],
["Pervasives", "Pervasives.html", "close_in", "Pervasives.html#VALclose_in", "<div class=\"info\">  Close the given channel. </div>", "  Close the given channel. "],
["Scanf.Scanning", "Scanf.Scanning.html", "close_in", "Scanf.Scanning.html#VALclose_in", "<div class=\"info\">  Closes the <code class=\"code\"><span class=\"constructor\">Pervasives</span>.in_channel</code> associated with the given <code class=\"code\"><span class=\"constructor\">Scanning</span>.in_channel</code> formatted input channel. </div>", "  Closes the Pervasives.in_channel associated with the given Scanning.in_channel formatted input channel. "],
["Graphics", "Graphics.html", "close_graph", "Graphics.html#VALclose_graph", "<div class=\"info\">  Delete the graphics window or switch the screen back to text mode. </div>", "  Delete the graphics window or switch the screen back to text mode. "],
["Format", "Format.html", "close_box", "Format.html#VALclose_box", "<div class=\"info\">  Closes the most recently opened pretty-printing box. </div>", "  Closes the most recently opened pretty-printing box. "],
["Unix", "Unix.html", "close", "Unix.html#VALclose", "<div class=\"info\">  Close a file descriptor. </div>", "  Close a file descriptor. "],
["UnixLabels", "UnixLabels.html", "close", "UnixLabels.html#VALclose", "<div class=\"info\">  Close a file descriptor. </div>", "  Close a file descriptor. "],
["Parsing", "Parsing.html", "clear_parser", "Parsing.html#VALclear_parser", "<div class=\"info\">  Empty the parser stack. </div>", "  Empty the parser stack. "],
["Unix", "Unix.html", "clear_nonblock", "Unix.html#VALclear_nonblock", "<div class=\"info\">  Clear the ``non-blocking'' flag on the given descriptor. </div>", "  Clear the ``non-blocking'' flag on the given descriptor. "],
["UnixLabels", "UnixLabels.html", "clear_nonblock", "UnixLabels.html#VALclear_nonblock", "<div class=\"info\">  Clear the ``non-blocking'' flag on the given descriptor. </div>", "  Clear the ``non-blocking'' flag on the given descriptor. "],
["Graphics", "Graphics.html", "clear_graph", "Graphics.html#VALclear_graph", "<div class=\"info\">  Erase the graphics window. </div>", "  Erase the graphics window. "],
["Unix", "Unix.html", "clear_close_on_exec", "Unix.html#VALclear_close_on_exec", "<div class=\"info\">  Clear the ``close-on-exec'' flag on the given descriptor. </div>", "  Clear the ``close-on-exec'' flag on the given descriptor. "],
["UnixLabels", "UnixLabels.html", "clear_close_on_exec", "UnixLabels.html#VALclear_close_on_exec", "<div class=\"info\">  Clear the ``close-on-exec'' flag on the given descriptor. </div>", "  Clear the ``close-on-exec'' flag on the given descriptor. "],
["Dynlink", "Dynlink.html", "clear_available_units", "Dynlink.html#VALclear_available_units", "<div class=\"info\">  Empty the list of compilation units accessible to dynamically-linked programs. </div>", "  Empty the list of compilation units accessible to dynamically-linked programs. "],
["Buffer", "Buffer.html", "clear", "Buffer.html#VALclear", "<div class=\"info\">  Empty the buffer. </div>", "  Empty the buffer. "],
["Hashtbl", "Hashtbl.html", "clear", "Hashtbl.html#VALclear", "<div class=\"info\">  Empty a hash table. </div>", "  Empty a hash table. "],
["Hashtbl.S", "Hashtbl.S.html", "clear", "Hashtbl.S.html#VALclear", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "clear", "Hashtbl.SeededS.html#VALclear", "", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "clear", "MoreLabels.Hashtbl.html#VALclear", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "clear", "MoreLabels.Hashtbl.S.html#VALclear", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "clear", "MoreLabels.Hashtbl.SeededS.html#VALclear", "", ""],
["Queue", "Queue.html", "clear", "Queue.html#VALclear", "<div class=\"info\">  Discard all elements from a queue. </div>", "  Discard all elements from a queue. "],
["Stack", "Stack.html", "clear", "Stack.html#VALclear", "<div class=\"info\">  Discard all elements from a stack. </div>", "  Discard all elements from a stack. "],
["Weak.S", "Weak.S.html", "clear", "Weak.S.html#VALclear", "<div class=\"info\">  Remove all elements from the table. </div>", "  Remove all elements from the table. "],
["Pervasives", "Pervasives.html", "classify_float", "Pervasives.html#VALclassify_float", "<div class=\"info\">  Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number. </div>", "  Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number. "],
["Unix", "Unix.html", "chroot", "Unix.html#VALchroot", "<div class=\"info\">  Change the process root directory. </div>", "  Change the process root directory. "],
["UnixLabels", "UnixLabels.html", "chroot", "UnixLabels.html#VALchroot", "<div class=\"info\">  Change the process root directory. </div>", "  Change the process root directory. "],
["Char", "Char.html", "chr", "Char.html#VALchr", "<div class=\"info\">  Return the character with the given ASCII code. </div>", "  Return the character with the given ASCII code. "],
["Unix", "Unix.html", "chown", "Unix.html#VALchown", "<div class=\"info\">  Change the owner uid and owner gid of the named file. </div>", "  Change the owner uid and owner gid of the named file. "],
["UnixLabels", "UnixLabels.html", "chown", "UnixLabels.html#VALchown", "<div class=\"info\">  Change the owner uid and owner gid of the named file. </div>", "  Change the owner uid and owner gid of the named file. "],
["Filename", "Filename.html", "chop_suffix", "Filename.html#VALchop_suffix", "<div class=\"info\">  <code class=\"code\">chop_suffix name suff</code> removes the suffix <code class=\"code\">suff</code> from the filename <code class=\"code\">name</code>. </div>", "  chop_suffix name suff removes the suffix suff from the filename name. "],
["Filename", "Filename.html", "chop_extension", "Filename.html#VALchop_extension", "<div class=\"info\">  Return the given file name without its extension. </div>", "  Return the given file name without its extension. "],
["Event", "Event.html", "choose", "Event.html#VALchoose", "<div class=\"info\">  <code class=\"code\">choose evl</code> returns the event that is the alternative of all the events in the list <code class=\"code\">evl</code>. </div>", "  choose evl returns the event that is the alternative of all the events in the list evl. "],
["Map.S", "Map.S.html", "choose", "Map.S.html#VALchoose", "<div class=\"info\">  Return one binding of the given map, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty. </div>", "  Return one binding of the given map, or raise Not_found if the map is empty. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "choose", "MoreLabels.Map.S.html#VALchoose", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "choose", "MoreLabels.Set.S.html#VALchoose", "", ""],
["Set.S", "Set.S.html", "choose", "Set.S.html#VALchoose", "<div class=\"info\">  Return one element of the given set, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty. </div>", "  Return one element of the given set, or raise Not_found if the set is empty. "],
["Unix", "Unix.html", "chmod", "Unix.html#VALchmod", "<div class=\"info\">  Change the permissions of the named file. </div>", "  Change the permissions of the named file. "],
["UnixLabels", "UnixLabels.html", "chmod", "UnixLabels.html#VALchmod", "<div class=\"info\">  Change the permissions of the named file. </div>", "  Change the permissions of the named file. "],
["Filename", "Filename.html", "check_suffix", "Filename.html#VALcheck_suffix", "<div class=\"info\">  <code class=\"code\">check_suffix name suff</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the filename <code class=\"code\">name</code> ends with the suffix <code class=\"code\">suff</code>. </div>", "  check_suffix name suff returns true if the filename name ends with the suffix suff. "],
["Weak", "Weak.html", "check", "Weak.html#VALcheck", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.check ar n</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty. </div>", "  Weak.check ar n returns true if the nth cell of ar is full, false if it is empty. "],
["Sys", "Sys.html", "chdir", "Sys.html#VALchdir", "<div class=\"info\">  Change the current working directory of the process. </div>", "  Change the current working directory of the process. "],
["Unix", "Unix.html", "chdir", "Unix.html#VALchdir", "<div class=\"info\">  Change the process working directory. </div>", "  Change the process working directory. "],
["UnixLabels", "UnixLabels.html", "chdir", "UnixLabels.html#VALchdir", "<div class=\"info\">  Change the process working directory. </div>", "  Change the process working directory. "],
["Pervasives", "Pervasives.html", "char_of_int", "Pervasives.html#VALchar_of_int", "<div class=\"info\">  Return the character with the given ASCII code. </div>", "  Return the character with the given ASCII code. "],
["CamlinternalFormat", "CamlinternalFormat.html", "char_of_iconv", "CamlinternalFormat.html#VALchar_of_iconv", "", ""],
["Bigarray", "Bigarray.html", "char", "Bigarray.html#VALchar", "<div class=\"info\">  As shown by the types of the values above, big arrays of kind <code class=\"code\">float32_elt</code> and <code class=\"code\">float64_elt</code> are accessed using the OCaml type <code class=\"code\">float</code>. </div>", "  As shown by the types of the values above, big arrays of kind float32_elt and float64_elt are accessed using the OCaml type float. "],
["Digest", "Digest.html", "channel", "Digest.html#VALchannel", "<div class=\"info\">  If <code class=\"code\">len</code> is nonnegative, <code class=\"code\"><span class=\"constructor\">Digest</span>.channel ic len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code> and returns their digest, or raises <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if end-of-file is reached before <code class=\"code\">len</code> characters are read. </div>", "  If len is nonnegative, Digest.channel ic len reads len characters from channel ic and returns their digest, or raises End_of_file if end-of-file is reached before len characters are read. "],
["Num", "Num.html", "ceiling_num", "Num.html#VALceiling_num", "<div class=\"info\">  <code class=\"code\">ceiling_num n</code> returns the smallest integer bigger or equal to <code class=\"code\">n</code>. </div>", "  ceiling_num n returns the smallest integer bigger or equal to n. "],
["Pervasives", "Pervasives.html", "ceil", "Pervasives.html#VALceil", "<div class=\"info\">  Round above to an integer value. </div>", "  Round above to an integer value. "],
["Sys", "Sys.html", "catch_break", "Sys.html#VALcatch_break", "<div class=\"info\">  <code class=\"code\">catch_break</code> governs whether interactive interrupt (ctrl-C) terminates the program or raises the <code class=\"code\"><span class=\"constructor\">Break</span></code> exception. </div>", "  catch_break governs whether interactive interrupt (ctrl-C) terminates the program or raises the Break exception. "],
["Printexc", "Printexc.html", "catch", "Printexc.html#VALcatch", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.catch fn x</code> is similar to <a href=\"Printexc.html#VALprint\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print</code></a>, but aborts the program with exit code 2 after printing the uncaught exception. </div>", "  Printexc.catch fn x is similar to Printexc.print, but aborts the program with exit code 2 after printing the uncaught exception. "],
["Bytes", "Bytes.html", "cat", "Bytes.html#VALcat", "<div class=\"info\">  <code class=\"code\">cat s1 s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result as new byte sequence. </div>", "  cat s1 s2 concatenates s1 and s2 and returns the result as new byte sequence. "],
["Map.S", "Map.S.html", "cardinal", "Map.S.html#VALcardinal", "<div class=\"info\">  Return the number of bindings of a map. </div>", "  Return the number of bindings of a map. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "cardinal", "MoreLabels.Map.S.html#VALcardinal", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "cardinal", "MoreLabels.Set.S.html#VALcardinal", "", ""],
["Set.S", "Set.S.html", "cardinal", "Set.S.html#VALcardinal", "<div class=\"info\">  Return the number of elements of a set. </div>", "  Return the number of elements of a set. "],
["Bytes", "Bytes.html", "capitalize", "Bytes.html#VALcapitalize", "<div class=\"info\">  Return a copy of the argument, with the first byte set to uppercase. </div>", "  Return a copy of the argument, with the first byte set to uppercase. "],
["BytesLabels", "BytesLabels.html", "capitalize", "BytesLabels.html#VALcapitalize", "<div class=\"info\">  Return a copy of the argument, with the first byte set to uppercase. </div>", "  Return a copy of the argument, with the first byte set to uppercase. "],
["StringLabels", "StringLabels.html", "capitalize", "StringLabels.html#VALcapitalize", "<div class=\"info\">  Return a copy of the argument, with the first character set to uppercase. </div>", "  Return a copy of the argument, with the first character set to uppercase. "],
["String", "String.html", "capitalize", "String.html#VALcapitalize", "<div class=\"info\">  Return a copy of the argument, with the first character set to uppercase. </div>", "  Return a copy of the argument, with the first character set to uppercase. "],
["Bigarray", "Bigarray.html", "c_layout", "Bigarray.html#VALc_layout", "", ""],
["Digest", "Digest.html", "bytes", "Digest.html#VALbytes", "<div class=\"info\">  Return the digest of the given byte sequence. </div>", "  Return the digest of the given byte sequence. "],
["Graphics", "Graphics.html", "button_down", "Graphics.html#VALbutton_down", "<div class=\"info\">  Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the mouse button is pressed, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise. </div>", "  Return true if the mouse button is pressed, false otherwise. "],
["CamlinternalFormat", "CamlinternalFormat.html", "bufput_acc", "CamlinternalFormat.html#VALbufput_acc", "", ""],
["Scanf", "Scanf.html", "bscanf_format", "Scanf.html#VALbscanf_format", "<div class=\"info\">  <code class=\"code\">bscanf_format ic fmt f</code> reads a format string token from the formatted input channel <code class=\"code\">ic</code>, according to the given format string <code class=\"code\">fmt</code>, and applies <code class=\"code\">f</code> to the resulting format string value. </div>", "  bscanf_format ic fmt f reads a format string token from the formatted input channel ic, according to the given format string fmt, and applies f to the resulting format string value. "],
["Scanf", "Scanf.html", "bscanf", "Scanf.html#VALbscanf", "<div class=\"info\">  <code class=\"code\">bscanf ic fmt r1 ... rN f</code> reads arguments for the function <code class=\"code\">f</code>, from the formatted input channel <code class=\"code\">ic</code>, according to the format string <code class=\"code\">fmt</code>, and applies <code class=\"code\">f</code> to these values. </div>", "  bscanf ic fmt r1 ... rN f reads arguments for the function f, from the formatted input channel ic, according to the format string fmt, and applies f to these values. "],
["Condition", "Condition.html", "broadcast", "Condition.html#VALbroadcast", "<div class=\"info\">  <code class=\"code\">broadcast c</code> restarts all processes waiting on the condition variable <code class=\"code\">c</code>. </div>", "  broadcast c restarts all processes waiting on the condition variable c. "],
["Format", "Format.html", "bprintf", "Format.html#VALbprintf", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Printf", "Printf.html", "bprintf", "Printf.html#VALbprintf", "<div class=\"info\">  Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module <a href=\"Buffer.html\"><code class=\"code\"><span class=\"constructor\">Buffer</span></code></a>). </div>", "  Same as Printf.fprintf, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module Buffer). "],
["Str", "Str.html", "bounded_split_delim", "Str.html#VALbounded_split_delim", "<div class=\"info\">  Same as <a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a>, but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. </div>", "  Same as Str.bounded_split, but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. "],
["Str", "Str.html", "bounded_split", "Str.html#VALbounded_split", "<div class=\"info\">  Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a>, but splits into at most <code class=\"code\">n</code> substrings, where <code class=\"code\">n</code> is the extra integer parameter. </div>", "  Same as Str.split, but splits into at most n substrings, where n is the extra integer parameter. "],
["Str", "Str.html", "bounded_full_split", "Str.html#VALbounded_full_split", "<div class=\"info\">  Same as <a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a>, but returns the delimiters as well as the substrings contained between delimiters. </div>", "  Same as Str.bounded_split_delim, but returns the delimiters as well as the substrings contained between delimiters. "],
["Pervasives", "Pervasives.html", "bool_of_string", "Pervasives.html#VALbool_of_string", "<div class=\"info\">  Convert the given string to a boolean. </div>", "  Convert the given string to a boolean. "],
["Random", "Random.html", "bool", "Random.html#VALbool", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Random</span>.bool ()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code> with probability 0.5 each. </div>", "  Random.bool () returns true or false with probability 0.5 each. "],
["Random.State", "Random.State.html", "bool", "Random.State.html#VALbool", "<div class=\"info\">  These functions are the same as the basic functions, except that they use (and update) the given PRNG state instead of the default one. </div>", "  These functions are the same as the basic functions, except that they use (and update) the given PRNG state instead of the default one. "],
["Graphics", "Graphics.html", "blue", "Graphics.html#VALblue", "", ""],
["Bytes", "Bytes.html", "blit_string", "Bytes.html#VALblit_string", "<div class=\"info\">  <code class=\"code\">blit src srcoff dst dstoff len</code> copies <code class=\"code\">len</code> bytes from string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>, starting at index <code class=\"code\">dstoff</code>. </div>", "  blit src srcoff dst dstoff len copies len bytes from string src, starting at index srcoff, to byte sequence dst, starting at index dstoff. "],
["Graphics", "Graphics.html", "blit_image", "Graphics.html#VALblit_image", "<div class=\"info\">  <code class=\"code\">blit_image img x y</code> copies screen pixels into the image <code class=\"code\">img</code>, modifying <code class=\"code\">img</code> in-place. </div>", "  blit_image img x y copies screen pixels into the image img, modifying img in-place. "],
["Array", "Array.html", "blit", "Array.html#VALblit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.blit v1 o1 v2 o2 len</code> copies <code class=\"code\">len</code> elements from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>, starting at element number <code class=\"code\">o2</code>. </div>", "  Array.blit v1 o1 v2 o2 len copies len elements from array v1, starting at element number o1, to array v2, starting at element number o2. "],
["ArrayLabels", "ArrayLabels.html", "blit", "ArrayLabels.html#VALblit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.blit v1 o1 v2 o2 len</code> copies <code class=\"code\">len</code> elements from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>, starting at element number <code class=\"code\">o2</code>. </div>", "  Array.blit v1 o1 v2 o2 len copies len elements from array v1, starting at element number o1, to array v2, starting at element number o2. "],
["Bigarray.Genarray", "Bigarray.Genarray.html", "blit", "Bigarray.Genarray.html#VALblit", "<div class=\"info\">  Copy all elements of a big array in another big array. </div>", "  Copy all elements of a big array in another big array. "],
["Bigarray.Array1", "Bigarray.Array1.html", "blit", "Bigarray.Array1.html#VALblit", "<div class=\"info\">  Copy the first big array to the second big array. </div>", "  Copy the first big array to the second big array. "],
["Bigarray.Array2", "Bigarray.Array2.html", "blit", "Bigarray.Array2.html#VALblit", "<div class=\"info\">  Copy the first big array to the second big array. </div>", "  Copy the first big array to the second big array. "],
["Bigarray.Array3", "Bigarray.Array3.html", "blit", "Bigarray.Array3.html#VALblit", "<div class=\"info\">  Copy the first big array to the second big array. </div>", "  Copy the first big array to the second big array. "],
["Buffer", "Buffer.html", "blit", "Buffer.html#VALblit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Buffer</span>.blit src srcoff dst dstoff len</code> copies <code class=\"code\">len</code> characters from the current contents of the buffer <code class=\"code\">src</code>, starting at offset <code class=\"code\">srcoff</code> to <code class=\"code\">dst</code>, starting at character <code class=\"code\">dstoff</code>. </div>", "  Buffer.blit src srcoff dst dstoff len copies len characters from the current contents of the buffer src, starting at offset srcoff to dst, starting at character dstoff. "],
["Bytes", "Bytes.html", "blit", "Bytes.html#VALblit", "<div class=\"info\">  <code class=\"code\">blit src srcoff dst dstoff len</code> copies <code class=\"code\">len</code> bytes from sequence <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at index <code class=\"code\">dstoff</code>. </div>", "  blit src srcoff dst dstoff len copies len bytes from sequence src, starting at index srcoff, to sequence dst, starting at index dstoff. "],
["BytesLabels", "BytesLabels.html", "blit", "BytesLabels.html#VALblit", "<div class=\"info\">  <code class=\"code\">blit src srcoff dst dstoff len</code> copies <code class=\"code\">len</code> bytes from sequence <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at index <code class=\"code\">dstoff</code>. </div>", "  blit src srcoff dst dstoff len copies len bytes from sequence src, starting at index srcoff, to sequence dst, starting at index dstoff. "],
["StringLabels", "StringLabels.html", "blit", "StringLabels.html#VALblit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">String</span>.blit src srcoff dst dstoff len</code> copies <code class=\"code\">len</code> bytes from the string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>, starting at character number <code class=\"code\">dstoff</code>. </div>", "  String.blit src srcoff dst dstoff len copies len bytes from the string src, starting at index srcoff, to byte sequence dst, starting at character number dstoff. "],
["String", "String.html", "blit", "String.html#VALblit", "<div class=\"info\">  Same as <a href=\"Bytes.html#VALblit_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.blit_string</code></a>. </div>", "  Same as Bytes.blit_string. "],
["Weak", "Weak.html", "blit", "Weak.html#VALblit", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Weak</span>.blit ar1 off1 ar2 off2 len</code> copies <code class=\"code\">len</code> weak pointers from <code class=\"code\">ar1</code> (starting at <code class=\"code\">off1</code>) to <code class=\"code\">ar2</code> (starting at <code class=\"code\">off2</code>). </div>", "  Weak.blit ar1 off1 ar2 off2 len copies len weak pointers from ar1 (starting at off1) to ar2 (starting at off2). "],
["Graphics", "Graphics.html", "black", "Graphics.html#VALblack", "", ""],
["Int32", "Int32.html", "bits_of_float", "Int32.html#VALbits_of_float", "<div class=\"info\">  Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout. </div>", "  Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout. "],
["Int64", "Int64.html", "bits_of_float", "Int64.html#VALbits_of_float", "<div class=\"info\">  Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout. </div>", "  Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout. "],
["Random", "Random.html", "bits", "Random.html#VALbits", "<div class=\"info\">  Return 30 random bits in a nonnegative integer. </div>", "  Return 30 random bits in a nonnegative integer. "],
["Random.State", "Random.State.html", "bits", "Random.State.html#VALbits", "", ""],
["Map.S", "Map.S.html", "bindings", "Map.S.html#VALbindings", "<div class=\"info\">  Return the list of all bindings of the given map. </div>", "  Return the list of all bindings of the given map. "],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "bindings", "MoreLabels.Map.S.html#VALbindings", "", ""],
["Unix", "Unix.html", "bind", "Unix.html#VALbind", "<div class=\"info\">  Bind a socket to an address. </div>", "  Bind a socket to an address. "],
["UnixLabels", "UnixLabels.html", "bind", "UnixLabels.html#VALbind", "<div class=\"info\">  Bind a socket to an address. </div>", "  Bind a socket to an address. "],
["Big_int", "Big_int.html", "big_int_of_string", "Big_int.html#VALbig_int_of_string", "<div class=\"info\">  Convert a string to a big integer, in decimal. </div>", "  Convert a string to a big integer, in decimal. "],
["Num", "Num.html", "big_int_of_num", "Num.html#VALbig_int_of_num", "", ""],
["Big_int", "Big_int.html", "big_int_of_nativeint", "Big_int.html#VALbig_int_of_nativeint", "<div class=\"info\">  Convert a native integer to a big integer. </div>", "  Convert a native integer to a big integer. "],
["Big_int", "Big_int.html", "big_int_of_int64", "Big_int.html#VALbig_int_of_int64", "<div class=\"info\">  Convert a 64-bit integer to a big integer. </div>", "  Convert a 64-bit integer to a big integer. "],
["Big_int", "Big_int.html", "big_int_of_int32", "Big_int.html#VALbig_int_of_int32", "<div class=\"info\">  Convert a 32-bit integer to a big integer. </div>", "  Convert a 32-bit integer to a big integer. "],
["Big_int", "Big_int.html", "big_int_of_int", "Big_int.html#VALbig_int_of_int", "<div class=\"info\">  Convert a small integer to a big integer. </div>", "  Convert a small integer to a big integer. "],
["Sys", "Sys.html", "big_endian", "Sys.html#VALbig_endian", "<div class=\"info\">  Whether the machine currently executing the Caml program is big-endian. </div>", "  Whether the machine currently executing the Caml program is big-endian. "],
["Scanf.Scanning", "Scanf.Scanning.html", "beginning_of_input", "Scanf.Scanning.html#VALbeginning_of_input", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Scanning</span>.beginning_of_input ic</code> tests the beginning of input condition of the given formatted input channel. </div>", "  Scanning.beginning_of_input ic tests the beginning of input condition of the given formatted input channel. "],
["Filename", "Filename.html", "basename", "Filename.html#VALbasename", "<div class=\"info\">  Split a file name into directory name / base file name. </div>", "  Split a file name into directory name / base file name. "],
["Printexc", "Printexc.html", "backtrace_status", "Printexc.html#VALbacktrace_status", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Printexc</span>.backtrace_status()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if exception backtraces are currently recorded, <code class=\"code\"><span class=\"keyword\">false</span></code> if not. </div>", "  Printexc.backtrace_status() returns true if exception backtraces are currently recorded, false if not. "],
["Printexc", "Printexc.html", "backtrace_slots", "Printexc.html#VALbacktrace_slots", "<div class=\"info\">  Returns the slots of a raw backtrace, or <code class=\"code\"><span class=\"constructor\">None</span></code> if none of them contain useful information. </div>", "  Returns the slots of a raw backtrace, or None if none of them contain useful information. "],
["Graphics", "Graphics.html", "background", "Graphics.html#VALbackground", "<div class=\"info\">  See <a href=\"Graphics.html#VALforeground\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.foreground</code></a>. </div>", "  See Graphics.foreground. "],
["Graphics", "Graphics.html", "auto_synchronize", "Graphics.html#VALauto_synchronize", "<div class=\"info\">  By default, drawing takes place both on the window displayed on screen, and in a memory area (the 'backing store'). </div>", "  By default, drawing takes place both on the window displayed on screen, and in a memory area (the 'backing store'). "],
["Pervasives", "Pervasives.html", "atan2", "Pervasives.html#VALatan2", "<div class=\"info\">  <code class=\"code\">atan2 y x</code> returns the arc tangent of <code class=\"code\">y /. x</code>. </div>", "  atan2 y x returns the arc tangent of y /. x. "],
["Pervasives", "Pervasives.html", "atan", "Pervasives.html#VALatan", "<div class=\"info\">  Arc tangent. </div>", "  Arc tangent. "],
["Pervasives", "Pervasives.html", "at_exit", "Pervasives.html#VALat_exit", "<div class=\"info\">  Register the given function to be called at program termination time. </div>", "  Register the given function to be called at program termination time. "],
["List", "List.html", "assq", "List.html#VALassq", "<div class=\"info\">  Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of structural equality to compare keys. </div>", "  Same as List.assoc, but uses physical equality instead of structural equality to compare keys. "],
["ListLabels", "ListLabels.html", "assq", "ListLabels.html#VALassq", "<div class=\"info\">  Same as <a href=\"ListLabels.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">ListLabels</span>.assoc</code></a>, but uses physical equality instead of structural equality to compare keys. </div>", "  Same as ListLabels.assoc, but uses physical equality instead of structural equality to compare keys. "],
["List", "List.html", "assoc", "List.html#VALassoc", "<div class=\"info\">  <code class=\"code\">assoc a l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>. </div>", "  assoc a l returns the value associated with key a in the list of pairs l. "],
["ListLabels", "ListLabels.html", "assoc", "ListLabels.html#VALassoc", "<div class=\"info\">  <code class=\"code\">assoc a l</code> returns the value associated with key <code class=\"code\">a</code> in the list of pairs <code class=\"code\">l</code>. </div>", "  assoc a l returns the value associated with key a in the list of pairs l. "],
["Format", "Format.html", "asprintf", "Format.html#VALasprintf", "<div class=\"info\">  Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. </div>", "  Same as printf above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. "],
["Pervasives", "Pervasives.html", "asin", "Pervasives.html#VALasin", "<div class=\"info\">  Arc sine. </div>", "  Arc sine. "],
["Bigarray", "Bigarray.html", "array3_of_genarray", "Bigarray.html#VALarray3_of_genarray", "<div class=\"info\">  Return the three-dimensional big array corresponding to the given generic big array. </div>", "  Return the three-dimensional big array corresponding to the given generic big array. "],
["Bigarray", "Bigarray.html", "array2_of_genarray", "Bigarray.html#VALarray2_of_genarray", "<div class=\"info\">  Return the two-dimensional big array corresponding to the given generic big array. </div>", "  Return the two-dimensional big array corresponding to the given generic big array. "],
["Bigarray", "Bigarray.html", "array1_of_genarray", "Bigarray.html#VALarray1_of_genarray", "<div class=\"info\">  Return the one-dimensional big array corresponding to the given generic big array. </div>", "  Return the one-dimensional big array corresponding to the given generic big array. "],
["Sort", "Sort.html", "array", "Sort.html#VALarray", "<div class=\"info\">  Sort an array in increasing order according to an ordering predicate. </div>", "  Sort an array in increasing order according to an ordering predicate. "],
["Arith_status", "Arith_status.html", "arith_status", "Arith_status.html#VALarith_status", "<div class=\"info\">  Print the current status of the arithmetic flags. </div>", "  Print the current status of the arithmetic flags. "],
["Sys", "Sys.html", "argv", "Sys.html#VALargv", "<div class=\"info\">  The command line arguments given to the process. </div>", "  The command line arguments given to the process. "],
["Complex", "Complex.html", "arg", "Complex.html#VALarg", "<div class=\"info\">  Argument. </div>", "  Argument. "],
["Num", "Num.html", "approx_num_fix", "Num.html#VALapprox_num_fix", "<div class=\"info\">  See <a href=\"Num.html#VALapprox_num_exp\"><code class=\"code\"><span class=\"constructor\">Num</span>.approx_num_exp</code></a>. </div>", "  See Num.approx_num_exp. "],
["Num", "Num.html", "approx_num_exp", "Num.html#VALapprox_num_exp", "<div class=\"info\">  Approximate a number by a decimal. </div>", "  Approximate a number by a decimal. "],
["Array", "Array.html", "append", "Array.html#VALappend", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.append v1 v2</code> returns a fresh array containing the concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>. </div>", "  Array.append v1 v2 returns a fresh array containing the concatenation of the arrays v1 and v2. "],
["ArrayLabels", "ArrayLabels.html", "append", "ArrayLabels.html#VALappend", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Array</span>.append v1 v2</code> returns a fresh array containing the concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>. </div>", "  Array.append v1 v2 returns a fresh array containing the concatenation of the arrays v1 and v2. "],
["List", "List.html", "append", "List.html#VALappend", "<div class=\"info\">  Catenate two lists. </div>", "  Catenate two lists. "],
["ListLabels", "ListLabels.html", "append", "ListLabels.html#VALappend", "<div class=\"info\">  Catenate two lists. </div>", "  Catenate two lists. "],
["Big_int", "Big_int.html", "and_big_int", "Big_int.html#VALand_big_int", "<div class=\"info\">  Bitwise logical 'and'. </div>", "  Bitwise logical 'and'. "],
["Event", "Event.html", "always", "Event.html#VALalways", "<div class=\"info\">  <code class=\"code\">always v</code> returns an event that is always ready for synchronization. </div>", "  always v returns an event that is always ready for synchronization. "],
["Dynlink", "Dynlink.html", "allow_unsafe_modules", "Dynlink.html#VALallow_unsafe_modules", "<div class=\"info\">  Govern whether unsafe object files are allowed to be dynamically linked. </div>", "  Govern whether unsafe object files are allowed to be dynamically linked. "],
["Dynlink", "Dynlink.html", "allow_only", "Dynlink.html#VALallow_only", "<div class=\"info\">  <code class=\"code\">allow_only units</code> restricts the compilation units that dynamically-linked units can reference: it forbids all references to units other than those named in the list <code class=\"code\">units</code>. </div>", "  allow_only units restricts the compilation units that dynamically-linked units can reference: it forbids all references to units other than those named in the list units. "],
["Gc", "Gc.html", "allocated_bytes", "Gc.html#VALallocated_bytes", "<div class=\"info\">  Return the total number of bytes allocated since the program was started. </div>", "  Return the total number of bytes allocated since the program was started. "],
["Arg", "Arg.html", "align", "Arg.html#VALalign", "<div class=\"info\">  Align the documentation strings by inserting spaces at the first space, according to the length of the keyword. </div>", "  Align the documentation strings by inserting spaces at the first space, according to the length of the keyword. "],
["Unix", "Unix.html", "alarm", "Unix.html#VALalarm", "<div class=\"info\">  Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds. </div>", "  Schedule a SIGALRM signal after the given number of seconds. "],
["UnixLabels", "UnixLabels.html", "alarm", "UnixLabels.html#VALalarm", "<div class=\"info\">  Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds. </div>", "  Schedule a SIGALRM signal after the given number of seconds. "],
["Buffer", "Buffer.html", "add_substring", "Buffer.html#VALadd_substring", "<div class=\"info\">  <code class=\"code\">add_substring b s ofs len</code> takes <code class=\"code\">len</code> characters from offset <code class=\"code\">ofs</code> in string <code class=\"code\">s</code> and appends them at the end of the buffer <code class=\"code\">b</code>. </div>", "  add_substring b s ofs len takes len characters from offset ofs in string s and appends them at the end of the buffer b. "],
["Buffer", "Buffer.html", "add_substitute", "Buffer.html#VALadd_substitute", "<div class=\"info\">  <code class=\"code\">add_substitute b f s</code> appends the string pattern <code class=\"code\">s</code> at the end of the buffer <code class=\"code\">b</code> with substitution. </div>", "  add_substitute b f s appends the string pattern s at the end of the buffer b with substitution. "],
["Buffer", "Buffer.html", "add_subbytes", "Buffer.html#VALadd_subbytes", "<div class=\"info\">  <code class=\"code\">add_substring b s ofs len</code> takes <code class=\"code\">len</code> characters from offset <code class=\"code\">ofs</code> in byte sequence <code class=\"code\">s</code> and appends them at the end of the buffer <code class=\"code\">b</code>. </div>", "  add_substring b s ofs len takes len characters from offset ofs in byte sequence s and appends them at the end of the buffer b. "],
["Buffer", "Buffer.html", "add_string", "Buffer.html#VALadd_string", "<div class=\"info\">  <code class=\"code\">add_string b s</code> appends the string <code class=\"code\">s</code> at the end of the buffer <code class=\"code\">b</code>. </div>", "  add_string b s appends the string s at the end of the buffer b. "],
["Obj", "Obj.html", "add_offset", "Obj.html#VALadd_offset", "", ""],
["Num", "Num.html", "add_num", "Num.html#VALadd_num", "<div class=\"info\">  Addition </div>", "  Addition "],
["Dynlink", "Dynlink.html", "add_interfaces", "Dynlink.html#VALadd_interfaces", "<div class=\"info\">  <code class=\"code\">add_interfaces units path</code> grants dynamically-linked object files access to the compilation units named in list <code class=\"code\">units</code>. </div>", "  add_interfaces units path grants dynamically-linked object files access to the compilation units named in list units. "],
["Big_int", "Big_int.html", "add_int_big_int", "Big_int.html#VALadd_int_big_int", "<div class=\"info\">  Addition of a small integer to a big integer. </div>", "  Addition of a small integer to a big integer. "],
["CamlinternalOO", "CamlinternalOO.html", "add_initializer", "CamlinternalOO.html#VALadd_initializer", "", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "add_in_char_set", "CamlinternalFormat.html#VALadd_in_char_set", "", ""],
["Buffer", "Buffer.html", "add_char", "Buffer.html#VALadd_char", "<div class=\"info\">  <code class=\"code\">add_char b c</code> appends the character <code class=\"code\">c</code> at the end of the buffer <code class=\"code\">b</code>. </div>", "  add_char b c appends the character c at the end of the buffer b. "],
["Buffer", "Buffer.html", "add_channel", "Buffer.html#VALadd_channel", "<div class=\"info\">  <code class=\"code\">add_channel b ic n</code> reads exactly <code class=\"code\">n</code> character from the input channel <code class=\"code\">ic</code> and stores them at the end of buffer <code class=\"code\">b</code>. </div>", "  add_channel b ic n reads exactly n character from the input channel ic and stores them at the end of buffer b. "],
["Buffer", "Buffer.html", "add_bytes", "Buffer.html#VALadd_bytes", "<div class=\"info\">  <code class=\"code\">add_string b s</code> appends the string <code class=\"code\">s</code> at the end of the buffer <code class=\"code\">b</code>. </div>", "  add_string b s appends the string s at the end of the buffer b. "],
["Buffer", "Buffer.html", "add_buffer", "Buffer.html#VALadd_buffer", "<div class=\"info\">  <code class=\"code\">add_buffer b1 b2</code> appends the current contents of buffer <code class=\"code\">b2</code> at the end of buffer <code class=\"code\">b1</code>. </div>", "  add_buffer b1 b2 appends the current contents of buffer b2 at the end of buffer b1. "],
["Big_int", "Big_int.html", "add_big_int", "Big_int.html#VALadd_big_int", "<div class=\"info\">  Addition. </div>", "  Addition. "],
["Dynlink", "Dynlink.html", "add_available_units", "Dynlink.html#VALadd_available_units", "<div class=\"info\">  Same as <a href=\"Dynlink.html#VALadd_interfaces\"><code class=\"code\"><span class=\"constructor\">Dynlink</span>.add_interfaces</code></a>, but instead of searching <code class=\"code\">.cmi</code> files to find the unit interfaces, uses the interface digests given for each unit. </div>", "  Same as Dynlink.add_interfaces, but instead of searching .cmi files to find the unit interfaces, uses the interface digests given for each unit. "],
["Complex", "Complex.html", "add", "Complex.html#VALadd", "<div class=\"info\">  Addition </div>", "  Addition "],
["Hashtbl", "Hashtbl.html", "add", "Hashtbl.html#VALadd", "<div class=\"info\">  <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add tbl x y</code> adds a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code> in table <code class=\"code\">tbl</code>. </div>", "  Hashtbl.add tbl x y adds a binding of x to y in table tbl. "],
["Hashtbl.S", "Hashtbl.S.html", "add", "Hashtbl.S.html#VALadd", "", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "add", "Hashtbl.SeededS.html#VALadd", "", ""],
["Int32", "Int32.html", "add", "Int32.html#VALadd", "<div class=\"info\">  Addition. </div>", "  Addition. "],
["Int64", "Int64.html", "add", "Int64.html#VALadd", "<div class=\"info\">  Addition. </div>", "  Addition. "],
["Map.S", "Map.S.html", "add", "Map.S.html#VALadd", "<div class=\"info\">  <code class=\"code\">add x y m</code> returns a map containing the same bindings as <code class=\"code\">m</code>, plus a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>. </div>", "  add x y m returns a map containing the same bindings as m, plus a binding of x to y. "],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "add", "MoreLabels.Hashtbl.html#VALadd", "", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "add", "MoreLabels.Hashtbl.S.html#VALadd", "", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "add", "MoreLabels.Hashtbl.SeededS.html#VALadd", "", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "add", "MoreLabels.Map.S.html#VALadd", "", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "add", "MoreLabels.Set.S.html#VALadd", "", ""],
["Nativeint", "Nativeint.html", "add", "Nativeint.html#VALadd", "<div class=\"info\">  Addition. </div>", "  Addition. "],
["Queue", "Queue.html", "add", "Queue.html#VALadd", "<div class=\"info\">  <code class=\"code\">add x q</code> adds the element <code class=\"code\">x</code> at the end of the queue <code class=\"code\">q</code>. </div>", "  add x q adds the element x at the end of the queue q. "],
["Set.S", "Set.S.html", "add", "Set.S.html#VALadd", "<div class=\"info\">  <code class=\"code\">add x s</code> returns a set containing all elements of <code class=\"code\">s</code>, plus <code class=\"code\">x</code>. </div>", "  add x s returns a set containing all elements of s, plus x. "],
["Weak.S", "Weak.S.html", "add", "Weak.S.html#VALadd", "<div class=\"info\">  <code class=\"code\">add t x</code> adds <code class=\"code\">x</code> to <code class=\"code\">t</code>. </div>", "  add t x adds x to t. "],
["Dynlink", "Dynlink.html", "adapt_filename", "Dynlink.html#VALadapt_filename", "<div class=\"info\">  In bytecode, the identity function. </div>", "  In bytecode, the identity function. "],
["Pervasives", "Pervasives.html", "acos", "Pervasives.html#VALacos", "<div class=\"info\">  Arc cosine. </div>", "  Arc cosine. "],
["Unix", "Unix.html", "access", "Unix.html#VALaccess", "<div class=\"info\">  Check that the process has the given permissions over the named file. </div>", "  Check that the process has the given permissions over the named file. "],
["UnixLabels", "UnixLabels.html", "access", "UnixLabels.html#VALaccess", "<div class=\"info\">  Check that the process has the given permissions over the named file. </div>", "  Check that the process has the given permissions over the named file. "],
["ThreadUnix", "ThreadUnix.html", "accept", "ThreadUnix.html#VALaccept", "", ""],
["Unix", "Unix.html", "accept", "Unix.html#VALaccept", "<div class=\"info\">  Accept connections on the given socket. </div>", "  Accept connections on the given socket. "],
["UnixLabels", "UnixLabels.html", "accept", "UnixLabels.html#VALaccept", "<div class=\"info\">  Accept connections on the given socket. </div>", "  Accept connections on the given socket. "],
["Obj", "Obj.html", "abstract_tag", "Obj.html#VALabstract_tag", "", ""],
["Num", "Num.html", "abs_num", "Num.html#VALabs_num", "<div class=\"info\">  Absolute value. </div>", "  Absolute value. "],
["Pervasives", "Pervasives.html", "abs_float", "Pervasives.html#VALabs_float", "<div class=\"info\">  <code class=\"code\">abs_float f</code> returns the absolute value of <code class=\"code\">f</code>. </div>", "  abs_float f returns the absolute value of f. "],
["Big_int", "Big_int.html", "abs_big_int", "Big_int.html#VALabs_big_int", "<div class=\"info\">  Absolute value. </div>", "  Absolute value. "],
["Int32", "Int32.html", "abs", "Int32.html#VALabs", "<div class=\"info\">  Return the absolute value of its argument. </div>", "  Return the absolute value of its argument. "],
["Int64", "Int64.html", "abs", "Int64.html#VALabs", "<div class=\"info\">  Return the absolute value of its argument. </div>", "  Return the absolute value of its argument. "],
["Nativeint", "Nativeint.html", "abs", "Nativeint.html#VALabs", "<div class=\"info\">  Return the absolute value of its argument. </div>", "  Return the absolute value of its argument. "],
["Pervasives", "Pervasives.html", "abs", "Pervasives.html#VALabs", "<div class=\"info\">  Return the absolute value of the argument. </div>", "  Return the absolute value of the argument. "],
["Pervasives", "Pervasives.html", "__POS__", "Pervasives.html#VAL__POS__", "<div class=\"info\">  <code class=\"code\">__POS__</code> returns a tuple <code class=\"code\">(file,lnum,cnum,enum)</code>, corresponding to the location at which this expression appears in the file currently being parsed by the compiler. </div>", "  __POS__ returns a tuple (file,lnum,cnum,enum), corresponding to the location at which this expression appears in the file currently being parsed by the compiler. "],
["Pervasives", "Pervasives.html", "__POS_OF__", "Pervasives.html#VAL__POS_OF__", "<div class=\"info\">  <code class=\"code\">__POS_OF__ expr</code> returns a pair <code class=\"code\">(expr,loc)</code>, where <code class=\"code\">loc</code> is a tuple <code class=\"code\">(file,lnum,cnum,enum)</code> corresponding to the location at which the expression <code class=\"code\">expr</code> appears in the file currently being parsed by the compiler. </div>", "  __POS_OF__ expr returns a pair (expr,loc), where loc is a tuple (file,lnum,cnum,enum) corresponding to the location at which the expression expr appears in the file currently being parsed by the compiler. "],
["Pervasives", "Pervasives.html", "__MODULE__", "Pervasives.html#VAL__MODULE__", "<div class=\"info\">  <code class=\"code\">__MODULE__</code> returns the module name of the file being parsed by the compiler. </div>", "  __MODULE__ returns the module name of the file being parsed by the compiler. "],
["Pervasives", "Pervasives.html", "__LOC__", "Pervasives.html#VAL__LOC__", "<div class=\"info\">  <code class=\"code\">__LOC__</code> returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\" </div>", "  __LOC__ returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\" "],
["Pervasives", "Pervasives.html", "__LOC_OF__", "Pervasives.html#VAL__LOC_OF__", "<div class=\"info\">  <code class=\"code\">__LOC_OF__ expr</code> returns a pair <code class=\"code\">(loc, expr)</code> where <code class=\"code\">loc</code> is the location of <code class=\"code\">expr</code> in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\" </div>", "  __LOC_OF__ expr returns a pair (loc, expr) where loc is the location of expr in the file currently being parsed by the compiler, with the standard error format of OCaml: \"File %S, line %d, characters %d-%d\" "],
["Pervasives", "Pervasives.html", "__LINE__", "Pervasives.html#VAL__LINE__", "<div class=\"info\">  <code class=\"code\">__LINE__</code> returns the line number at which this expression appears in the file currently being parsed by the compiler. </div>", "  __LINE__ returns the line number at which this expression appears in the file currently being parsed by the compiler. "],
["Pervasives", "Pervasives.html", "__LINE_OF__", "Pervasives.html#VAL__LINE_OF__", "<div class=\"info\">  <code class=\"code\">__LINE__ expr</code> returns a pair <code class=\"code\">(line, expr)</code>, where <code class=\"code\">line</code> is the line number at which the expression <code class=\"code\">expr</code> appears in the file currently being parsed by the compiler. </div>", "  __LINE__ expr returns a pair (line, expr), where line is the line number at which the expression expr appears in the file currently being parsed by the compiler. "],
["Pervasives", "Pervasives.html", "__FILE__", "Pervasives.html#VAL__FILE__", "<div class=\"info\">  <code class=\"code\">__FILE__</code> returns the name of the file currently being parsed by the compiler. </div>", "  __FILE__ returns the name of the file currently being parsed by the compiler. "],
["Pervasives", "Pervasives.html", "(~-.)", "Pervasives.html#VAL(~-.)", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Pervasives", "Pervasives.html", "(~-)", "Pervasives.html#VAL(~-)", "<div class=\"info\">  Unary negation. </div>", "  Unary negation. "],
["Pervasives", "Pervasives.html", "(~+.)", "Pervasives.html#VAL(~+.)", "<div class=\"info\">  Unary addition. </div>", "  Unary addition. "],
["Pervasives", "Pervasives.html", "(~+)", "Pervasives.html#VAL(~+)", "<div class=\"info\">  Unary addition. </div>", "  Unary addition. "],
["Pervasives", "Pervasives.html", "(||)", "Pervasives.html#VAL(||)", "<div class=\"info\">  The boolean 'or'. </div>", "  The boolean 'or'. "],
["Pervasives", "Pervasives.html", "(|>)", "Pervasives.html#VAL(|>)", "<div class=\"info\">  Reverse-application operator: <code class=\"code\">x |&gt; f |&gt; g</code> is exactly equivalent to <code class=\"code\">g (f (x))</code>. </div>", "  Reverse-application operator: x |> f |> g is exactly equivalent to g (f (x)). "],
["Pervasives", "Pervasives.html", "(or)", "Pervasives.html#VAL(or)", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Pervasives", "Pervasives.html", "(mod)", "Pervasives.html#VAL(mod)", "<div class=\"info\">  Integer remainder. </div>", "  Integer remainder. "],
["Pervasives", "Pervasives.html", "(lxor)", "Pervasives.html#VAL(lxor)", "<div class=\"info\">  Bitwise logical exclusive or. </div>", "  Bitwise logical exclusive or. "],
["Pervasives", "Pervasives.html", "(lsr)", "Pervasives.html#VAL(lsr)", "<div class=\"info\">  <code class=\"code\">n <span class=\"keyword\">lsr</span> m</code> shifts <code class=\"code\">n</code> to the right by <code class=\"code\">m</code> bits. </div>", "  n lsr m shifts n to the right by m bits. "],
["Pervasives", "Pervasives.html", "(lsl)", "Pervasives.html#VAL(lsl)", "<div class=\"info\">  <code class=\"code\">n <span class=\"keyword\">lsl</span> m</code> shifts <code class=\"code\">n</code> to the left by <code class=\"code\">m</code> bits. </div>", "  n lsl m shifts n to the left by m bits. "],
["Pervasives", "Pervasives.html", "(lor)", "Pervasives.html#VAL(lor)", "<div class=\"info\">  Bitwise logical or. </div>", "  Bitwise logical or. "],
["Pervasives", "Pervasives.html", "(land)", "Pervasives.html#VAL(land)", "<div class=\"info\">  Bitwise logical and. </div>", "  Bitwise logical and. "],
["Pervasives", "Pervasives.html", "(asr)", "Pervasives.html#VAL(asr)", "<div class=\"info\">  <code class=\"code\">n <span class=\"keyword\">asr</span> m</code> shifts <code class=\"code\">n</code> to the right by <code class=\"code\">m</code> bits. </div>", "  n asr m shifts n to the right by m bits. "],
["Pervasives", "Pervasives.html", "(^^)", "Pervasives.html#VAL(^^)", "<div class=\"info\">  <code class=\"code\">f1 ^^ f2</code> catenates format strings <code class=\"code\">f1</code> and <code class=\"code\">f2</code>. </div>", "  f1 ^^ f2 catenates format strings f1 and f2. "],
["Pervasives", "Pervasives.html", "(^)", "Pervasives.html#VAL(^)", "<div class=\"info\">  String concatenation. </div>", "  String concatenation. "],
["Pervasives", "Pervasives.html", "(@@)", "Pervasives.html#VAL(@@)", "<div class=\"info\">  Application operator: <code class=\"code\">g @@ f @@ x</code> is exactly equivalent to <code class=\"code\">g (f (x))</code>. </div>", "  Application operator: g @@ f @@ x is exactly equivalent to g (f (x)). "],
["Pervasives", "Pervasives.html", "(@)", "Pervasives.html#VAL(@)", "<div class=\"info\">  List concatenation. </div>", "  List concatenation. "],
["Num", "Num.html", "(>=/)", "Num.html#VAL(>=/)", "", ""],
["Pervasives", "Pervasives.html", "(>=)", "Pervasives.html#VAL(>=)", "<div class=\"info\">  Structural ordering functions. </div>", "  Structural ordering functions. "],
["Num", "Num.html", "(>/)", "Num.html#VAL(>/)", "", ""],
["Pervasives", "Pervasives.html", "(>)", "Pervasives.html#VAL(>)", "<div class=\"info\">  See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>. </div>", "  See (>=). "],
["Pervasives", "Pervasives.html", "(==)", "Pervasives.html#VAL(==)", "<div class=\"info\">  <code class=\"code\">e1 == e2</code> tests for physical equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>. </div>", "  e1 == e2 tests for physical equality of e1 and e2. "],
["Num", "Num.html", "(=/)", "Num.html#VAL(=/)", "", ""],
["Pervasives", "Pervasives.html", "(=)", "Pervasives.html#VAL(=)", "<div class=\"info\">  <code class=\"code\">e1 = e2</code> tests for structural equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>. </div>", "  e1 = e2 tests for structural equality of e1 and e2. "],
["Num", "Num.html", "(<>/)", "Num.html#VAL(<>/)", "", ""],
["Pervasives", "Pervasives.html", "(<>)", "Pervasives.html#VAL(<>)", "<div class=\"info\">  Negation of <a href=\"Pervasives.html#VAL(=)\"><code class=\"code\">(=)</code></a>. </div>", "  Negation of (=). "],
["Num", "Num.html", "(<=/)", "Num.html#VAL(<=/)", "", ""],
["Pervasives", "Pervasives.html", "(<=)", "Pervasives.html#VAL(<=)", "<div class=\"info\">  See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>. </div>", "  See (>=). "],
["Num", "Num.html", "(</)", "Num.html#VAL(</)", "", ""],
["Pervasives", "Pervasives.html", "(<)", "Pervasives.html#VAL(<)", "<div class=\"info\">  See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>. </div>", "  See (>=). "],
["Pervasives", "Pervasives.html", "(:=)", "Pervasives.html#VAL(:=)", "<div class=\"info\">  <code class=\"code\">r := a</code> stores the value of <code class=\"code\">a</code> in reference <code class=\"code\">r</code>. </div>", "  r := a stores the value of a in reference r. "],
["Num", "Num.html", "(//)", "Num.html#VAL(//)", "<div class=\"info\">  Same as <a href=\"Num.html#VALdiv_num\"><code class=\"code\"><span class=\"constructor\">Num</span>.div_num</code></a>. </div>", "  Same as Num.div_num. "],
["Pervasives", "Pervasives.html", "(/.)", "Pervasives.html#VAL(/.)", "<div class=\"info\">  Floating-point division. </div>", "  Floating-point division. "],
["Pervasives", "Pervasives.html", "(/)", "Pervasives.html#VAL(/)", "<div class=\"info\">  Integer division. </div>", "  Integer division. "],
["Num", "Num.html", "(-/)", "Num.html#VAL(-/)", "<div class=\"info\">  Same as <a href=\"Num.html#VALsub_num\"><code class=\"code\"><span class=\"constructor\">Num</span>.sub_num</code></a>. </div>", "  Same as Num.sub_num. "],
["Pervasives", "Pervasives.html", "(-.)", "Pervasives.html#VAL(-.)", "<div class=\"info\">  Floating-point subtraction </div>", "  Floating-point subtraction "],
["Pervasives", "Pervasives.html", "(-)", "Pervasives.html#VAL(-)", "<div class=\"info\">  Integer subtraction. </div>", "  Integer subtraction. "],
["Num", "Num.html", "(+/)", "Num.html#VAL(+/)", "<div class=\"info\">  Same as <a href=\"Num.html#VALadd_num\"><code class=\"code\"><span class=\"constructor\">Num</span>.add_num</code></a>. </div>", "  Same as Num.add_num. "],
["Pervasives", "Pervasives.html", "(+.)", "Pervasives.html#VAL(+.)", "<div class=\"info\">  Floating-point addition </div>", "  Floating-point addition "],
["Pervasives", "Pervasives.html", "(+)", "Pervasives.html#VAL(+)", "<div class=\"info\">  Integer addition. </div>", "  Integer addition. "],
["Pervasives", "Pervasives.html", "(&)", "Pervasives.html#VAL(&)", "<div class=\"info\">  <span class=\"deprecated\"></span></div>", "  "],
["Pervasives", "Pervasives.html", "(&&)", "Pervasives.html#VAL(&&)", "<div class=\"info\">  The boolean 'and'. </div>", "  The boolean 'and'. "],
["Pervasives", "Pervasives.html", "(!=)", "Pervasives.html#VAL(!=)", "<div class=\"info\">  Negation of <a href=\"Pervasives.html#VAL(==)\"><code class=\"code\">(==)</code></a>. </div>", "  Negation of (==). "],
["Pervasives", "Pervasives.html", "(!)", "Pervasives.html#VAL(!)", "<div class=\"info\">  <code class=\"code\">!r</code> returns the current contents of reference <code class=\"code\">r</code>. </div>", "  !r returns the current contents of reference r. "],
["Num", "Num.html", "( */ )", "Num.html#VAL( */ )", "<div class=\"info\">  Same as <a href=\"Num.html#VALmult_num\"><code class=\"code\"><span class=\"constructor\">Num</span>.mult_num</code></a>. </div>", "  Same as Num.mult_num. "],
["Pervasives", "Pervasives.html", "( *. )", "Pervasives.html#VAL( *. )", "<div class=\"info\">  Floating-point multiplication </div>", "  Floating-point multiplication "],
["Num", "Num.html", "( **/ )", "Num.html#VAL( **/ )", "<div class=\"info\">  Same as <a href=\"Num.html#VALpower_num\"><code class=\"code\"><span class=\"constructor\">Num</span>.power_num</code></a>. </div>", "  Same as Num.power_num. "],
["Pervasives", "Pervasives.html", "( ** )", "Pervasives.html#VAL( ** )", "<div class=\"info\">  Exponentiation. </div>", "  Exponentiation. "],
["Pervasives", "Pervasives.html", "( * )", "Pervasives.html#VAL( * )", "<div class=\"info\">  Integer multiplication. </div>", "  Integer multiplication. "],
]
